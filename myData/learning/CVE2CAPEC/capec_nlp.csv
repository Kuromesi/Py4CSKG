id,name,description,cve,processed
CAPEC-1000,Mechanisms of Attack,"This view organizes attack patterns hierarchically based on mechanisms that are frequently employed when exploiting a vulnerability. The categories that are members of this view represent the different techniques used to attack a system. They do not, however, represent the consequences or goals of the attacks. There exists the potential for some attack patterns to align with more than one category depending on one’s perspective. To counter this, emphasis was placed such that attack patterns as presented within each category use a technique not sometimes, but without exception.",[],view organize attack pattern hierarchically base mechanism frequently employ exploit vulnerability category member view represent different technique attack system represent consequence goal attack exist potential attack pattern align category depend perspective counter emphasis place attack pattern present category use technique exception
CAPEC-118,Collect and Analyze Information,"Attack patterns within this category focus on the gathering, collection, and theft of information by an adversary. The adversary may collect this information through a variety of methods including active querying as well as passive observation. By exploiting weaknesses in the design or configuration of the target and its communications, an adversary is able to get the target to reveal more information than intended. Information retrieved may aid the adversary in making inferences about potential weaknesses, vulnerabilities, or techniques that assist the adversary's objectives. This information may include details regarding the configuration or capabilities of the target, clues as to the timing or nature of activities, or otherwise sensitive information. Often this sort of attack is undertaken in preparation for some other type of attack, although the collection of information by itself may in some cases be the end goal of the adversary.",[],attack pattern category focus gathering collection theft information adversary adversary collect information variety method include active querying passive observation exploit weakness design configuration target communication adversary able target reveal information intend information retrieve aid adversary make inference potential weakness vulnerability technique assist adversary objective information include detail configuration capability target clue timing nature activity sensitive information sort attack undertake preparation type attack collection information case end goal adversary
CAPEC-152,Inject Unexpected Items,"Attack patterns within this category focus on the ability to control or disrupt the behavior of a target either through crafted data submitted via an interface for data input, or the installation and execution of malicious code on the target system. The former happens when an adversary adds material to their input that is interpreted by the application causing the targeted application to perform steps unintended by the application manager or causing the application to enter an unstable state. Attacks of this type differ from Data Structure Attacks in that the latter attacks subvert the underlying structures that hold user-provided data, either pre-empting interpretation of the input (in the case of Buffer Overflows) or resulting in values that the targeted application is unable to handle correctly (in the case of Integer Overflows). In Injection attacks, the input is interpreted by the application, but the attacker has included instructions to the interpreting functions that the target application then follows.",[],attack pattern category focus ability control disrupt behavior target craft datum submit interface datum input installation execution malicious code target system happen adversary add material input interpret application cause target application perform step unintended application manager cause application enter unstable state attack type differ data structure attacks attack subvert underlie structure hold user provide datum pre empte interpretation input case buffer overflows result value target application unable handle correctly case integer overflows injection attack input interpret application attacker include instruction interpret function target application follow
CAPEC-156,Engage in Deceptive Interactions,"Attack patterns within this category focus on malicious interactions with a target in an attempt to deceive the target and convince the target that it is interacting with some other principal and as such take actions based on the level of trust that exists between the target and the other principal. These types of attacks assume that some piece of content or functionality is associated with an identity and that the content / functionality is trusted by the target because of this association. Often identified by the term ""spoofing"", these types of attacks rely on the falsification of the content and/or identity in such a way that the target will incorrectly trust the legitimacy of the content. For example, an attacker may modify a financial transaction between two parties so that the participants remain unchanged but the amount of the transaction is increased. If the recipient cannot detect the change, they may incorrectly assume the modified message originated with the original sender. Attacks of these type may involve an adversary crafting the content from scratch or capturing and modifying legitimate content.",[],attack pattern category focus malicious interaction target attempt deceive target convince target interact principal action base level trust exist target principal type attack assume piece content functionality associate identity content functionality trust target association identify term spoofing type attack rely falsification content and/or identity way target incorrectly trust legitimacy content example attacker modify financial transaction party participant remain unchanged transaction increase recipient detect change incorrectly assume modify message originate original sender attack type involve adversary craft content scratch capture modify legitimate content
CAPEC-172,Manipulate Timing and State,"An attacker exploits weaknesses in timing or state maintaining functions to perform actions that would otherwise be prevented by the execution flow of the target code and processes. An example of a state attack might include manipulation of an application's information to change the apparent credentials or similar information, possibly allowing the application to access material it would not normally be allowed to access. A common example of a timing attack is a test-action race condition where some state information is tested and, if it passes, an action is performed. If the attacker can change the state between the time that the application performs the test and the time the action is performed, then they might be able to manipulate the outcome of the action to malicious ends.",[],attacker exploit weakness timing state maintain function perform action prevent execution flow target code process example state attack include manipulation application information change apparent credential similar information possibly allow application access material normally allow access common example timing attack test action race condition state information test pass action perform attacker change state time application perform test time action perform able manipulate outcome action malicious end
CAPEC-210,Abuse Existing Functionality,"An adversary uses or manipulates one or more functions of an application in order to achieve a malicious objective not originally intended by the application, or to deplete a resource to the point that the target's functionality is affected. This is a broad class of attacks wherein the adversary is able to alter the intended result or purpose of the functionality and thereby affect application behavior or information integrity. Outcomes can range from information exposure, vandalism, degrading or denial of service, as well as execution of arbitrary code on the target machine.",[],adversary use manipulate function application order achieve malicious objective originally intend application deplete resource point target functionality affect broad class attack adversary able alter intend result purpose functionality affect application behavior information integrity outcome range information exposure vandalism degrading denial service execution arbitrary code target machine
CAPEC-223,Employ Probabilistic Techniques,An attacker utilizes probabilistic techniques to explore and overcome security properties of the target that are based on an assumption of strength due to the extremely low mathematical probability that an attacker would be able to identify and exploit the very rare specific conditions under which those security properties do not hold.,[],attacker utilize probabilistic technique explore overcome security property target base assumption strength extremely low mathematical probability attacker able identify exploit rare specific condition security property hold
CAPEC-225,Subvert Access Control,"An attacker actively targets exploitation of weaknesses, limitations and assumptions in the mechanisms a target utilizes to manage identity and authentication as well as manage access to its resources or authorize functionality. Such exploitation can lead to the complete subversion of any trust the target system may have in the identity of any entity with which it interacts, or the complete subversion of any control the target has over its data or functionality. Weaknesses targeted by subversion of authorization controls are often due to three primary factors: 1) a fundamental dependence on authentication mechanisms being effective; 2) a lack of effective control over the separation of privilege between various entities; and 3) assumptions and over confidence in the strength or rigor of the implemented authorization mechanisms.",[],attacker actively target exploitation weakness limitation assumption mechanism target utilize manage identity authentication manage access resource authorize functionality exploitation lead complete subversion trust target system identity entity interact complete subversion control target datum functionality weakness target subversion authorization control primary factor fundamental dependence authentication mechanism effective lack effective control separation privilege entity assumption confidence strength rigor implement authorization mechanism
CAPEC-255,Manipulate Data Structures,"Attack patterns in this category manipulate and exploit characteristics of system data structures in order to violate the intended usage and protections of these structures. This is done in such a way that yields either improper access to the associated system data or violations of the security properties of the system itself due to vulnerabilities in how the system processes and manages the data structures. Often, vulnerabilities and therefore exploitability of these data structures exist due to ambiguity and assumption in their design and prescribed handling.",[],attack pattern category manipulate exploit characteristic system datum structure order violate intend usage protection structure way yield improper access associate system datum violation security property system vulnerability system process manage data structure vulnerability exploitability data structure exist ambiguity assumption design prescribe handling
CAPEC-262,Manipulate System Resources,"Attack patterns within this category focus on the adversary's ability to manipulate one or more resources in order to achieve a desired outcome. This is a broad class of attacks wherein the attacker is able to change some aspect of a resource's state or availability and thereby affect system behavior or information integrity. Examples of resources include files, applications, libraries, infrastructure, and configuration information. Outcomes can range from vandalism and reduction in service to the execution of arbitrary code on the target machine.",[],attack pattern category focus adversary ability manipulate resource order achieve desire outcome broad class attack attacker able change aspect resource state availability affect system behavior information integrity example resource include file application library infrastructure configuration information outcome range vandalism reduction service execution arbitrary code target machine
CAPEC-1,Accessing Functionality Not Properly Constrained by ACLs,"In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",[],application particularly web application access functionality mitigate authorization framework framework map access control lists acls element application functionality particularly url web app case administrator fail specify acl particular element attacker able access impunity attacker ability access functionality properly constrain acl obtain sensitive information possibly compromise entire application attacker access resource available user high privilege level access management section application run query datum suppose
CAPEC-10,Buffer Overflow via Environment Variables,"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.","['CVE-1999-0906', 'CVE-1999-0046']",attack pattern involve cause buffer overflow manipulation environment variable adversary find modify environment variable try overflow associate buffer attack leverage implicit trust place environment variable
CAPEC-100,Overflow Buffers,"Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",[],buffer overflow attack target improper missing bound checking buffer operation typically trigger input inject adversary consequence adversary able write past boundary allocate buffer region memory cause program crash potentially redirection execution adversary choice
CAPEC-101,Server Side Include (SSI) Injection,"An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",[],attacker use server include ssi injection send code web application gets execute web server enable attacker achieve similar result cross site scripting viz arbitrary code execution information disclosure albeit limited scale ssi directive near powerful fledge scripting language nonetheless attacker conveniently gain access sensitive file password file execute shell command
CAPEC-102,Session Sidejacking,"Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",[],session sidejacking take advantage unencrypted communication channel victim target system attacker sniff traffic network look session token unencrypted traffic session token capture attacker perform malicious action steal token target application impersonate victim attack specific method session hijacking exploit valid session token gain unauthorized access target system information method perform session hijacking session fixation cross site scripting compromise user server machine steal session token
CAPEC-103,Clickjacking,"In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different system. While being logged in to some target system, the victim visits the adversary's malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the adversary wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the adversary may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks they are clicking on versus what they are actually clicking on.",[],clickjacking attack victim trick unknowingly initiate action system interact ui seemingly completely different system log target system victim visit adversary malicious site display ui victim wish interact reality clickjacke page transparent layer visible ui action control adversary wish victim execute victim click button ui element page actually trigger action control transparent overlay layer depend action control adversary trick victim execute potentially privileged certainly undesired functionality target system victim authenticate basic problem dichotomy victim think click versus actually click
CAPEC-104,Cross Zone Scripting,An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.,[],attacker able cause victim load content web browser bypass security zone control gain access increase privilege execute scripting code web object unsigned activex control applet privilege elevation attack target zone base web browser security
CAPEC-105,HTTP Request Splitting,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).
See CanPrecede relationships for possible consequences.",[],"adversary abuse flexibility discrepancy parsing interpretation http request message different intermediary http agent e.g. load balancer reverse proxy web caching proxy application firewall etc split single http request multiple unauthorized malicious http request end http agent e.g. web server 
 canprecede relationship possible consequence"
CAPEC-107,Cross Site Tracing,Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.,[],cross site tracing xst enable adversary steal victim session cookie possibly authentication credential transmit header http request victim browser communicate destination system web server
CAPEC-108,Command Line Execution through SQL Injection,"An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.","['CVE-2006-6799', 'CVE-2006-6799']",attacker use standard sql injection method inject datum command line execution directly misuse directive mssql_xp_cmdshell indirectly injection datum database interpret shell command later unscrupulous backend application functionality application fetch inject datum store database use datum command line argument perform proper validation malicious data escape data plane spawn new command execute host
CAPEC-109,Object Relational Mapping Injection,"An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",[],attacker leverage weakness present database access layer code generate object relational mapping orm tool weakness way developer persistence framework inject sql command execute underlie database attack similar plain sql injection application use jdbc directly talk database instead use datum access layer generate orm tool framework e.g. hibernate time code generate orm tool contain safe access method immune sql injection weakness generate code fact developer fail use generate access method properly sql injection possible
CAPEC-11,Cause Web Server Misclassification,"An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.",[],attack type exploit web server decision action base filename file extension different file type handle different server process misclassification force web server unexpected action expected action unexpected sequence cause server exhaust resource supply debug system datum attacker bind attacker remote process
CAPEC-110,SQL Injection through SOAP Parameter Tampering,"An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.",[],attacker modify parameter soap message send service consumer service provider initiate sql injection attack service provider soap message parse parameter properly validate access database way use parameter binding enable attacker control structure execute sql query pattern describe sql injection attack delivery mechanism soap message
CAPEC-111,JSON Hijacking (aka JavaScript Hijacking),An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.,[],attacker target system use javascript object notation json transport mechanism client server common web 2.0 system ajax steal possibly confidential information transmit server client inside json object take advantage loophole browser origin policy prohibit javascript website include execute context website
CAPEC-112,Brute Force,"In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.",[],attack asset information functionality identity etc protect finite secret value attacker attempt gain access asset trial error exhaustively explore possible secret value hope find secret value functionally equivalent unlock asset
CAPEC-113,Interface Manipulation,"An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",[],adversary manipulate use processing interface e.g. application programming interface api system chip soc result adverse impact security system implement interface allow adversary bypass access control and/or execute functionality intend interface implementation possibly compromise system integrate interface interface manipulation number form include force unexpected use interface use interface unintended way
CAPEC-114,Authentication Abuse,"An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.",[],attacker obtain unauthorized access application service device knowledge inherent weakness authentication mechanism exploit flaw authentication scheme implementation attack authentication mechanism function carefully control sequence event cause mechanism grant access attacker
CAPEC-115,Authentication Bypass,"An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.",[],attacker gain access application service device privilege authorized privileged user evade circumvent authentication mechanism attacker able access protect datum authentication having take place
CAPEC-116,Excavation,"An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes. This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of these interactions, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information.",[],adversary actively probe target manner design solicit information leverage malicious purpose achieve explore target ordinary interaction purpose gather intelligence target send datum syntactically invalid non standard attempt produce response contain desire datum result interaction adversary able obtain information target aid attacker make inference security configuration potential vulnerability examplar exchange target trigger unhandled exception verbose error message reveal information like stack trace configuration information path information database design type attack include manipulation query string uri produce invalid sql query try alternative path value hope server return useful information
CAPEC-117,Interception,"An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",[],adversary monitor data stream target information gathering purpose attack undertake solely gather sensitive information support attack target attack pattern involve sniff network traffic type data stream e.g. radio adversary attempt initiate establishment data stream passively observe communication unfold variant attack adversary intend recipient data stream contrast mean gather information e.g. target datum leak adversary actively position themself observe explicit datum channel e.g. network traffic read content attack differ adversary middle capec-94 attack adversary alter content communication forward datum intended recipient
CAPEC-12,Choosing Message Identifier,"This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.",[],pattern attack define selection message distribute multicast public information channel intend client determine parameter value assign client attack allow adversary gain access potentially privileged information possibly perpetrate attack distribution mean impersonation channel message manipulate input output mechanism system command bus style attack change adversary identifier privileged
CAPEC-120,Double Encoding,"The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.",[],adversary utilize repeating encoding process set character character encoding character encoding character obfuscate payload particular request allow adversary bypass filter attempt detect illegal character string traversal injection attack filter able catch illegal encode string catch doubly encode string example dot path traversal attack block filter url encode 2e. filter recognize encoding block request double encoding url encoding encode result 252e filter catch interpret dot interpreter target
CAPEC-121,Exploit Non-Production Interfaces,"An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.",[],adversary exploit sample demonstration test debug interface unintentionally enable production system goal glean information leverage functionality unavailable
CAPEC-122,Privilege Abuse,An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.,[],adversary able exploit feature target reserve privileged user administrator expose use low non privileged account access sensitive information functionality control ensure authorized user able access resource
CAPEC-123,Buffer Manipulation,"An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",[],adversary manipulate application interaction buffer attempt read modify datum access buffer attack distinguish buffer space target attack code responsible interpret content buffer virtually buffer attack content place buffer immaterial instead buffer attack involve retrieve provide input store allocate buffer result reading overwriting unintended program memory
CAPEC-124,Shared Resource Manipulation,"An adversary exploits a resource shared between multiple applications, an application pool or hardware pin multiplexing to affect behavior. Resources may be shared between multiple applications or between multiple threads of a single application. Resource sharing is usually accomplished through mutual access to a single memory location or multiplexed hardware pins. If an adversary can manipulate this shared resource (usually by co-opting one of the applications or threads) the other applications or threads using the shared resource will often continue to trust the validity of the compromised shared resource and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared resource, or even cause a crash or compromise of the sharing applications.",[],adversary exploit resource share multiple application application pool hardware pin multiplexing affect behavior resource share multiple application multiple thread single application resource sharing usually accomplish mutual access single memory location multiplexe hardware pin adversary manipulate share resource usually co opt application thread application thread share resource continue trust validity compromise share resource use calculation result invalid trust assumption corruption additional datum normal operation user share resource cause crash compromise sharing application
CAPEC-125,Flooding,"An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",[],adversary consume resource target rapidly engage large number interaction target type attack generally expose weakness rate limiting flow successful attack prevent legitimate user access service cause target crash attack differ resource depletion leak allocation attack rely volume request target instead focus manipulation target operation key factor flooding attack number request adversary give period time great number likely attack succeed give target
CAPEC-126,Path Traversal,"An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \) and/or dots (.)) to reach desired directories or files.",[],adversary use path manipulation method exploit insufficient input validation target obtain access datum retrievable ordinary form request typical variety attack involve specify path desire file dot dot slash character result file access api function traverse intended directory structure root file system replace modify expected path information access function api retrieve file desire attacker attack involve attacker provide complete path target file control character e.g. path separator and/or dot reach desire directory file
CAPEC-127,Directory Indexing,"An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",[],adversary craft request target result target list index content directory output common method trigger directory content output construct request contain path terminate directory file application configure provide list directory content request receive adversary use explore directory tree target learn name file end reveal test file backup file temporary file hidden file configuration file user account script content naming convention attacker mount additional attack
CAPEC-128,Integer Attacks,"An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.",[],attacker take advantage structure integer variable cause variable assume value expect application example add large positive integer sign integer variable result negative number negative number illegal application application prevent attacker provide directly application consider add positive number create negative number structure integer storage format
CAPEC-129,Pointer Manipulation,"This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.",[],attack pattern involve adversary manipulate pointer target application result application access unintended memory location result crashing application certain pointer value access datum normally possible execution arbitrary code pointer simply integer variable integer attacks pointer attacks
CAPEC-13,Subverting Environment Variable Values,The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.,['CVE-1999-0073'],adversary directly indirectly modify environment variable control target software adversary goal cause target software deviate expect operation manner benefit adversary
CAPEC-130,Excessive Allocation,"An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.",[],adversary cause target allocate excessive resource service attacker request reduce resource available legitimate service degrade deny service usually attack focus memory allocation finite resource target attack include bandwidth processing cycle resource attack attempt force allocation large number request resource depletion flooding instead use small number request carefully format force target allocate excessive resource service request(s attack take advantage bug target cause target allocate resource vastly need normal request
CAPEC-131,Resource Leak Exposure,An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.,[],adversary utilize resource leak target deplete quantity resource available service legitimate request
CAPEC-132,Symlink Attack,"An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.",[],adversary position symbolic link manner target user application access link endpoint assume access file link
CAPEC-133,Try All Common Switches,"An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is indiscriminately attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.",[],attacker attempt invoke common switch option target application purpose discover weakness target example application add --debug switch cause debug information display reveal sensitive processing configuration information attacker attack differ form api abuse attacker indiscriminately attempt invoke option hope work specifically target know option nonetheless attacker familiar publish option target application attack method fruitful discover unpublicized functionality
CAPEC-134,Email Injection,An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.,[],adversary manipulate header content email message inject datum use delimiter character native protocol
CAPEC-135,Format String Injection,"An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",['CVE-2007-2027'],adversary include format character string input field target application application assume user provide static text respond unpredictably presence format character example certain function c programming language printf format character s print content memory location expect location identify string format character n print number dword write memory adversary use read write memory location file simply manipulate value result text unexpected way read write memory result program crash write memory result execution arbitrary code adversary write program stack
CAPEC-136,LDAP Injection,"An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",['CVE-2005-2301'],attacker manipulate craft ldap query purpose undermine security target application use user input create ldap query process ldap server example user provide username authentication username insert ldap query authentication process attacker use input inject additional command ldap query disclose sensitive information example enter aforementioned query return information user system attack similar sql injection attack manipulate query gather additional information coerce particular return value
CAPEC-137,Parameter Injection,"An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value ""myInput&new_param=myValue"", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",[],adversary manipulate content request parameter purpose undermine security target parameter encoding use text character separator example parameter http message encode value pair separate ampersand attacker supply text string fill parameter inject special character encoding scheme add modify parameter example user input feed directly http request user provide value myinput&new_param = myvalue input parameter set myinput new parameter new_param add value myvalue significantly change meaning query process server encoding scheme parameter identify separate text character potentially vulnerable attack http encoding example
CAPEC-138,Reflection Injection,"An adversary supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an adversary can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the adversary created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the adversary take control of the targeted application.",[],adversary supply value target application reflection method identify class method field example java programming language reflection library permit application inspect load invoke class component adversary control input method include class method field parameter pass method cause target application invoke incorrect method read random field load utilize malicious class adversary create lead application reveal sensitive information return incorrect result have adversary control target application
CAPEC-139,Relative Path Traversal,"An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.",[],attacker exploit weakness input validation target supply specially construct path utilize dot slash character purpose obtain access arbitrary file resource attacker modify know path target order reach material available intended channel attack normally involve add additional path separator and/or dot encoding thereof combination order reach parent directory entirely separate tree target directory structure
CAPEC-14,Client-side Injection-induced Buffer Overflow,"This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.",[],type attack exploit buffer overflow vulnerability target client software injection malicious content custom build hostile service hostile service create deliver correct content client software example client application browser service host webpage browser load
CAPEC-140,Bypassing of Intermediate Forms in Multiple-Form Sets,"Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.",[],web application require user submit information ordered sequence web form large information collect information early form pre populate field determine additional information application need collect attacker know name form sequence able explicitly type later form navigate go previous form result incomplete collection information incorrect assumption information submit attacker problem impair functioning application
CAPEC-141,Cache Poisoning,"An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",[],attacker exploit functionality cache technology cause specific datum cache aid attacker objective describe attack attacker place incorrect harmful material cache target cache application cache e.g. web browser cache public cache e.g. dns arp cache cache refresh application client treat corrupt cache value valid lead wide range exploit include redirect web browser site install malware repeatedly incorrect calculation base incorrect value
CAPEC-142,DNS Cache Poisoning,A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.,[],domain server translate domain www.example.com ip address internet host use contact internet resource adversary modify public dns cache cause certain name resolve incorrect address adversary specify result client application rely target cache domain resolution direct actual address specify domain address adversary use herd client site install malware victim computer masquerade pharming attack
CAPEC-143,Detect Unpublicized Web Pages,"An adversary searches a targeted web site for web pages that have not been publicized. In doing this, the adversary may be able to gain access to information that the targeted site did not intend to make public.",[],adversary search target web site web page publicize adversary able gain access information target site intend public
CAPEC-144,Detect Unpublicized Web Services,An adversary searches a targeted web site for web services that have not been publicized. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.,[],adversary search target web site web service publicize attack especially dangerous unpublished available service adequate security control place give administrator believe unreachable
CAPEC-145,Checksum Spoofing,"An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.",[],adversary spoof checksum message purpose make payload appear valid corresponding checksum checksum verify message integrity consist value base value message protect hash code common checksum mechanism sender recipient able compute checksum base content message message content change sender recipient sender recipient compute different checksum value sender checksum value transmit message recipient know modification occur checksum spoofing adversary modify message body modify corresponding checksum recipient checksum calculation match checksum create adversary message prevent recipient realize change occur
CAPEC-146,XML Schema Poisoning,An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema.,[],adversary corrupt modify content xml schema information pass client server purpose undermine security target xml schema provide structure content definition xml document schema poisoning ability manipulate schema replace modify compromise program process document use schema
CAPEC-147,XML Ping of the Death,"An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",[],attacker initiate resource depletion attack large number small xml message deliver sufficiently rapid rate cause denial service crash target transaction repetitive soap transaction deplete resource fast simple flooding attack additional resource soap protocol resource necessary process soap message transaction immaterial long cause resource utilization target word normal flooding attack augment message require extra processing target
CAPEC-148,Content Spoofing,"An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",[],adversary modify content contain original content producer intend keep apparent source content unchanged term content spoofing describe modification web page host target display adversary content instead owner content content spoof include content email message file transfer content network communication protocol content modify source e.g. modify source file web page transit e.g. intercept modify message sender recipient usually adversary attempt hide fact content modify case web site defacement necessary content spoofing lead malware exposure financial fraud content govern financial transaction privacy violation unwanted outcome
CAPEC-149,Explore for Predictable Temporary File Names,"An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.",[],attacker explore target identify name location predictable temporary file purpose launch attack target involve analyze naming convention storage location temporary file create target application attacker predict name temporary file use information mount attack information gathering symlink attack
CAPEC-15,Command Delimiters,"An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",[],attack type exploit program vulnerability allow attacker command concatenate legitimate command intent target resource file system database system use filter denylist input validation oppose allowlist validation vulnerable attacker predict delimiter combination delimiter present filter denylist injection attack attacker use command delimiter payload entry point tunnel application activate additional attack sql query shell command network scanning
CAPEC-150,Collect Data from Common Resource Locations,"An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.",[],adversary exploit know location resource purpose undermine security target system file resource organize default tree structure useful adversary know look resource file necessary attack precise location target resource know naming convention indicate small area target machine file tree resource typically locate example configuration file normally store /etc director unix system adversary advantage commit type attack
CAPEC-151,Identity Spoofing,"Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.",[],identity spoofing refer action assume i.e. take identity entity human non human identity accomplish goal adversary craft message appear come different principle use steal spoof authentication credential
CAPEC-153,Input Data Manipulation,"An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.",[],attacker exploit weakness input validation control format structure composition datum input process interface supply input non standard unexpected form attacker adversely impact security target
CAPEC-154,Resource Location Spoofing,"An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",[],adversary deceive application user convince request resource unintended location spoof location adversary cause alternate resource adversary control help achieve malicious goal
CAPEC-155,Screen Temporary Files for Sensitive Information,"An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.",[],adversary exploit temporary insecure storage information monitor content file store temp datum application routine execution flow application use temporary file accelerate processing provide record state multiple execution application temporary file end store sensitive information screen application temporary file adversary able discover sensitive information example web browser cache content accelerate subsequent lookup content contain sensitive information adversary recover web cache
CAPEC-157,Sniffing Attacks,"In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.",[],attack pattern adversary intercept information transmit party adversary able observe read and/or hear communication traffic necessarily block communication change content transmission medium theoretically sniff adversary examine content sender recipient sniffing attack similar adversary middle attack capec-94 entirely passive aitm attack predominantly active alter content communication
CAPEC-158,Sniffing Network Traffic,"In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.",[],attack pattern adversary monitor network traffic node public multicast network attempt capture sensitive information protocol level network sniffing application reveal tcp ip dns ethernet low level network communication information adversary take passive role attack pattern simply observe analyze traffic adversary precipitate indirectly influence content observed transaction intend recipient target information
CAPEC-159,Redirect Access to Libraries,"An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",[],adversary exploit weakness way application search external library manipulate execution flow point adversary supply library code base pattern attack allow adversary compromise application server execution unauthorized code application typically make call function library external application library operate system party library adversary redirect application attempt access library library adversary supply adversary able force target application execute arbitrary code especially dangerous target application enhanced privilege access redirect number technique include use symbolic link search path modification relative path manipulation
CAPEC-16,Dictionary-based Password Attack,"An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.
Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts.",['CVE-2003-1096'],"attacker try word dictionary password gain access system user account password choose user word dictionary attack successful absence mitigation specific instance password brute forcing attack pattern 
 dictionary attacks differ similar attack password spraying capec-565 credential stuffing capec-600 leverage unknown username password combination care induce account lockout"
CAPEC-160,Exploit Script-Based APIs,"Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support <script> tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.",[],api support scripting instruction argument method script instruction reference script instruction flexible powerful attacker specify script serve input method gain access great deal functionality example html page support < script > tag allow scripting language embed page interpret receive web browser content provider malicious script compromise client application application execute script identity identity user provide script allow attacker perform activity deny
CAPEC-161,Infrastructure Manipulation,"An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.",[],attacker exploit characteristic infrastructure network entity order perpetrate attack information gathering network object effect change ordinary information flow network object involve manipulation routing network message instead arrive proper destination direct entity attacker choose usually server control attacker victim unaware message process correctly example target client believe connect bank fact connect pharming site control attacker collect user login information order hijack actual bank account
CAPEC-162,Manipulating Hidden Fields,"An adversary exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server, which processes the modified data. For example, eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the adversary to acquire items at a lower cost than the merchant intended. The adversary performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items.",[],adversary exploit weakness server trust client processing modify datum client price information submit datum server process modify datum example eshoplifting data manipulation attack line merchant purchasing transaction manipulation price discount quantity field transaction message allow adversary acquire item low cost merchant intend adversary perform normal purchasing transaction edit hide field html form response store price information well deal merchant use modify pricing information calculate cost select item
CAPEC-163,Spear Phishing,"An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",[],adversary target specific user group phishing capec-98 attack tailor category user order maximum relevance deceptive capability spear phishing enhance version phishing attack target specific user group quality target email usually enhance appear come know trust entity email account trust entity compromise message digitally sign message contain information specific target user enhance probability follow url compromise site example message indicate knowledge target employment residence interest information suggest familiarity soon user follow instruction message attack proceed standard phishing attack
CAPEC-164,Mobile Phishing,"An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.",[],adversary target mobile phone user phishing attack purpose solicit account password sensitive information user mobile phishing variation phishing social engineering technique attack initiate text sms message email user entice provide information visit compromise web site message apart manner attack initiate attack proceed standard phishing attack
CAPEC-165,File Manipulation,"An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.",[],attacker modify file content attribute extension name file manner cause incorrect processing application attacker use class attack cause application enter unstable state overwrite expose sensitive information execute arbitrary code application privilege class attack differ attack configuration information file base file manipulation cause file processing result non standard behavior buffer overflow use incorrect interpreter configuration attack rely application interpret file correctly order insert harmful configuration information likewise resource location attack rely control application ability locate file file manipulation attack require application look non default location class attack combine
CAPEC-166,Force the System to Reset Values,"An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions.",[],attacker force target previous state order leverage potential weakness target dependent prior configuration state dependent factor case attacker able directly control configuration target application able reset configuration prior state application implement reset function
CAPEC-167,White Box Reverse Engineering,"An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.",[],attacker discover structure function composition type computer software white box analysis technique white box technique involve method apply piece software executable compile object directly subject analysis reveal portion machine instruction observe execution
CAPEC-168,Windows ::DATA Alternate Data Stream,"An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple ""files"" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.",[],attacker exploit functionality microsoft ntfs alternate data streams ads undermine system security ads allow multiple file store directory entry reference filename streamname alternate data stream store file directory normal microsoft utility presence ads stream attach file additional space ads record display file size additional space ads account space volume ads type file ads copy standard microsoft utility ntfs volume ads attacker intruder hide tool script datum detection normal system utility anti virus program check scan ads windows vista switch -r command line dir command display alternate stream
CAPEC-169,Footprinting,"An adversary engages in probing and exploration activities to identify constituents and properties of the target. Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. Although similar to fingerprinting, footprinting aims to get a more holistic view of a system or network, whereas fingerprinting is more targeted to a specific application or operating system. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",[],adversary engage probing exploration activity identify constituent property target footprinting general term describe variety information gathering technique attacker preparation attack consist tool learn possible composition configuration security mechanism target application system network information collect footprinting effort include open port application version network topology similar information similar fingerprinting footprinting aim holistic view system network fingerprinting target specific application operate system footprinting intend damage certain activity network scan cause disruption vulnerable application inadvertently pave way damaging attack
CAPEC-17,Using Malicious Files,"An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",[],attack type exploit system configuration allow adversary directly access executable file example shell access possible bad case allow adversary upload file execute web server ftp server message orient middleware system integration point particularly vulnerable programmer administrator synch interface correct privilege interface
CAPEC-170,Web Application Fingerprinting,"An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",[],attacker send series probe web application order elicit version dependent type dependent behavior assist identify target attacker learn information software version error page response header variation implementation http protocol directory structure similar information target service information attacker formulate target attack plan web application fingerprinting intend damaging certain activity network scan cause disruption vulnerable application inadvertently pave way damaging attack
CAPEC-173,Action Spoofing,"An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.",[],adversary able disguise action trick user initiate type action intend initiate different action example user lead believe click button submit query fact download software adversary perform attack social mean simply convince victim perform action rely user natural inclination technical mean clickjacking attack user see interface actually interact second invisible interface
CAPEC-174,Flash Parameter Injection,An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.,[],adversary take advantage improper datum validation inject malicious global parameter flash file embed html document flash file leverage user submit datum configure flash document access embed html document
CAPEC-175,Code Inclusion,"An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.",[],adversary exploit weakness target force arbitrary code retrieve locally remote location execute differ code injection code injection involve direct inclusion code code inclusion involve addition replacement reference code file subsequently load target code application
CAPEC-176,Configuration/Environment Manipulation,"An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.",[],attacker manipulate file setting external target application affect behavior application example application use external configuration file library modification entity affect application ability use constitute configuration environment manipulation attack
CAPEC-177,Create files with the same name as files protected with a higher classification,"An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.",[],attacker exploit file location algorithm operate system application create file protected privileged file attacker manipulate system attacker create file trust operate system application component attempt load original file application load include external file library configuration file file protect malicious manipulation application use file locate attacker able create file place directory application search directory legitimate file search attacker file discover target application attack extremely destructive reference file executable and/or grant special privilege base solely have particular
CAPEC-178,Cross-Site Flashing,"An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",[],attacker able trick victim execute flash document pass command call flash player browser plugin allow attacker exploit native flash functionality client browser attack pattern occur attacker provide craft link flash document swf file follow cause additional malicious instruction execute attacker need serve control flash document attack take advantage fact flash file reference external url variable serve url flash application reference control parameter create link include value parameter attacker cause arbitrary content reference possibly execute target flash application
CAPEC-179,Calling Micro-Services Directly,An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere.,[],attacker able discover query micro service web location expose micro service exploitation gather information implementation function micro service web page allow portion page connect server update content need cause entire page update allow user activity change portion page quickly cause disruption
CAPEC-18,XSS Targeting Non-Script Elements,"This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",[],attack form cross site scripting xss malicious script embed element expect host script image tag < img > comment xml document < -cdata- > etc tag subject input validation output validation content filtering checking routine create opportunity adversary tunnel application element launch xss attack element remote attack important differentiate ability launch attack probe internal network unpatched server ability remote adversary collect interpret output say attack
CAPEC-180,Exploiting Incorrectly Configured Access Control Security Levels,"An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",[],attacker exploit weakness configuration access control able bypass intended protection measure guard obtain unauthorized access system network sensitive functionality protect access control configure trivial access control system complicated opportunity mistake attacker learn incorrectly configure access security setting able exploit attack
CAPEC-181,Flash File Overlay,"An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.",[],attacker create transparent overlay flash order intercept user action purpose perform clickjacking attack technique flash file provide transparent overlay html content flash application content user action click catch flash application underlie html action interpret overlay perform action attacker wish
CAPEC-182,Flash Injection,"An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.",[],attacker trick victim execute malicious flash content execute command make flash call specify attacker example attack cross site flashing attacker control parameter reference load content specify attacker
CAPEC-183,IMAP/SMTP Command Injection,"An adversary exploits weaknesses in input validation on web-mail servers to execute commands on the IMAP/SMTP server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.",[],adversary exploit weakness input validation web mail server execute command imap smtp server web mail server sit internet imap smtp mail server user request receive web mail server query end mail server request information return response user imap smtp command injection attack mail server command embed part request send web mail server web mail server fail adequately sanitize request command send end mail server query web mail server command execute attack especially dangerous administrator assume end server protect direct internet access secure adequately execution malicious command
CAPEC-184,Software Integrity Attack,"An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.",[],attacker initiate series event design cause user program server device perform action undermine integrity software code device data structure device firmware achieve modification target integrity achieve insecure state
CAPEC-185,Malicious Software Download,An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.,[],attacker use deceptive method cause user automated process download install dangerous code originate attacker control source variation strategy attack
CAPEC-186,Malicious Software Update,An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.,[],adversary use deceptive method cause user automated process download install dangerous code believe valid update originate adversary control source
CAPEC-187,Malicious Automated Software Update via Redirection,"An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",[],attacker exploit layer weakness server client software automate update mechanism undermine integrity target code base weakness involve failure properly authenticate server source update patch content type weakness typically result authentication mechanism defeat allow hostile server satisfy criterion establish trust relationship second weakness systemic failure validate identity integrity code download remote location inability distinguish malicious code legitimate update
CAPEC-188,Reverse Engineering,"An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or ""back engineer"" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",[],adversary discover structure function composition object resource system variety analysis technique effectively determine analyze entity construct operate goal reverse engineering duplicate function function object order duplicate engineer aspect functioning reverse engineering technique apply mechanical object electronic device software methodology technique involve type analysis differ widely
CAPEC-189,Black Box Reverse Engineering,"An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.",[],adversary discover structure function composition type computer software black box analysis technique black box method involve interact software indirectly absence direct access executable object analysis typically involve interact software boundary software interface large execution environment input output vector library api black box reverse engineering refer gather physical effect hardware device electromagnetic radiation sound
CAPEC-19,Embedding Scripts within Scripts,An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.,[],adversary leverage capability execute script embed script target software likely execute program vulnerability bring allow remote host execute script
CAPEC-190,Reverse Engineer an Executable to Expose Assumed Hidden Functionality,"An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable. Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications.",[],attacker analyze binary file executable purpose discover structure function possibly source code file variety analysis technique effectively determine software function operate type analysis refer reverse code engineering technique exist extract source code executable technique employ purpose black box white box use computer bus analyzer packet sniffer allow binary study level interaction computing environment host os inter process communication and/or network communication type analysis fall black box category involve behavioral analysis software reference source code object code protocol specification
CAPEC-191,Read Sensitive Constants Within an Executable,"An adversary engages in activities to discover any sensitive constants present within the compiled code of an executable. These constants may include literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis.",[],adversary engage activity discover sensitive constant present compile code executable constant include literal ascii string file possibly string hard code particular routine reveal code refactoring method include static dynamic analysis
CAPEC-192,Protocol Analysis,"An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network.",[],adversary engage activity decipher and/or decode protocol information network application communication protocol transmit information interconnected node system packet switch data network type analysis involve analysis networking protocol inherently require presence actual physical network
CAPEC-193,PHP Remote File Inclusion,"In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized ""include"" or ""require"" call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",[],pattern adversary able load execute arbitrary code remotely available application usually accomplish insecurely configure php runtime environment improperly sanitize include require user control point web accessible file allow adversary hijack target application force execute instruction
CAPEC-194,Fake the Source of Data,"An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified ""From"" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.",[],adversary take advantage improper authentication provide datum service falsified identity purpose falsified identity prevent traceability provide datum assume right grant individual simple form attack creation email message modify field order appear message send actual sender root attack case email system fail properly authenticate source result reader incorrectly perform instruct action result attack vary depend detail attack common result include privilege escalation obfuscation attack data corruption manipulation
CAPEC-195,Principal Spoof,"A Principal Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principal Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity.",[],principal spoof form identity spoofing adversary pretend person interaction accomplish craft message write verbal visual appear come person adversary phishing pharming attack attempt attempt gather sensitive information appear come legitimate source principal spoof use steal spoofed authentication credential instead rely appearance content message reflect identity
CAPEC-196,Session Credential Falsification through Forging,"An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",[],attacker create false functional session credential order gain usurp access service session credential allow user identify service initial authentication need resend authentication information usually username password message attacker able forge valid session credential able bypass authentication piggy authenticate user session attack differ reuse session id session sidejacking attack attack attacker use previous existing credential modification forging attack attacker create credential base previously observed credential
CAPEC-197,Exponential Data Expansion,"An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",[],adversary submit datum target application contain nest exponential datum expansion produce excessively large output data format language allow definition macro like structure simplify creation complex structure capability abuse create excessive demand processor cpu memory small number nest expansion result exponential growth demand memory
CAPEC-198,XSS Targeting Error Pages,"An adversary distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page. When the third party web server receives the crafted request and notes the error it then creates an error message that echoes the malformed message, including the exploit. Doing this converts the exploit portion of the message into to valid language elements that are executed by the viewing browser. When a victim executes the query provided by the adversary the infected error message is returned including the exploit code which then runs in the victim's browser. XSS can result in execution of code as well as data leakage (e.g. session cookies can be sent to the adversary). This type of attack is especially dangerous since the exploit appears to come from the third party web server, who the victim may trust and hence be more vulnerable to deception.",[],adversary distribute link possibly query structure request party web server malforme contain block exploit code order exploit live code result error page party web server receive craft request note error create error message echo malformed message include exploit convert exploit portion message valid language element execute view browser victim execute query provide adversary infected error message return include exploit code run victim browser xss result execution code datum leakage e.g. session cookie send adversary type attack especially dangerous exploit appear come party web server victim trust vulnerable deception
CAPEC-199,XSS Using Alternate Syntax,"An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the ""script"" tag using the alternate forms of ""Script"" or ""ScRiPt"" may bypass filters where ""script"" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",[],adversary use alternate form keyword command result action primary form catch filter example keyword process case insensitive manner site web filtering algorithm convert tag consistent case comparison forbid keyword possible bypass filter e.g. incomplete black list alternate case structure example script tag alternate form script script bypass filter script form test variant different syntax representation possible pollution meta character entity eventually ignore render engine attack result execution prohibit functionality
CAPEC-2,Inducing Account Lockout,"An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",[],attacker leverage security functionality system aim thwart potential attack launch denial service attack legitimate system user system instance implement password throttling mechanism lock account certain number incorrect log attempt attacker leverage throttling mechanism lock legitimate user account weakness leverage attacker security feature place counteract attack
CAPEC-20,Encryption Brute Forcing,"An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",[],attacker arm cipher text encryption algorithm perform exhaustive brute force search key space determine key decrypt cipher text obtain plaintext
CAPEC-200,"Removal of filters: Input filters, output filters, data masking","An attacker removes or disables filtering mechanisms on the target application. Input filters prevent invalid data from being sent to an application (for example, overly large inputs that might cause a buffer overflow or other malformed inputs that may not be correctly handled by an application). Input filters might also be designed to constrained executable content.",[],attacker remove disable filter mechanism target application input filter prevent invalid datum send application example overly large input cause buffer overflow malformed input correctly handle application input filter design constrained executable content
CAPEC-201,Serialized Data External Linking,"An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",[],adversary create serialize datum file e.g. xml yaml etc contain external datum reference serialize datum parser validate document external reference check nature reference external datum allow adversary open arbitrary file connection lead adversary gain access information system normally unable obtain
CAPEC-202,Create Malicious Client,"An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures.",[],adversary create client application interface target service client violate assumption service make client service designate client application oppose service use general client application imap pop mail server interact imap pop client assume client follow specific procedure
CAPEC-203,Manipulate Registry Information,"An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.",[],adversary exploit weakness authorization order modify content registry e.g. windows registry mac plist application registry edit registry information permit adversary hide configuration information remove indicator compromise cover activity application utilize registry store configuration service information modification registry information affect individual service affect billing authorization allow identity spoofing overall configuration target application example java rmi soap use registry track available service change registry value preliminary step complete attack pattern give long term usage registry value manipulation registry information end
CAPEC-204,Lifting Sensitive Data Embedded in Cache,"An adversary examines a target application's cache, or a browser cache, for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.",[],adversary examine target application cache browser cache sensitive information application communicate remote entity perform intensive calculation utilize cache improve efficiency application compute receive sensitive information cache appropriately protect attacker browse cache retrieve information result disclosure sensitive information
CAPEC-206,Signing Malicious Code,"The adversary extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the adversary has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the adversary to execute arbitrary code on the victim's computer. This differs from CAPEC-673, because the adversary is performing the code signing.",[],adversary extract credential code signing production environment use credential sign malicious content developer key developer use signing key sign code hash code user application verify signature accurate lead believe code come owner signing key code modify signature apply adversary extract signing credential use credential sign code bundle user tool verify signature attach code likely assume code come legitimate developer install run code effectively allow adversary execute arbitrary code victim computer differ capec-673 adversary perform code signing
CAPEC-207,Removing Important Client Functionality,"An attacker removes or disables functionality on the client that the server assumes to be present and trustworthy. Attackers can, in some cases, get around logic put in place to 'guard' sensitive functionality or data. Client applications may include functionality that a server relies on for correct and secure operation. This functionality can include, but is not limited to, filters to prevent the sending of dangerous content to the server, logical functionality such as price calculations, and authentication logic to ensure that only authorized users are utilizing the client. If an attacker can disable this functionality on the client, they can perform actions that the server believes are prohibited. This can result in client behavior that violates assumptions by the server leading to a variety of possible attacks. In the above examples, this could include the sending of dangerous content (such as scripts) to the server, incorrect price calculations, or unauthorized access to server resources.",[],attacker remove disable functionality client server assume present trustworthy attacker case logic place guard sensitive functionality datum client application include functionality server rely correct secure operation functionality include limit filter prevent sending dangerous content server logical functionality price calculation authentication logic ensure authorized user utilize client attacker disable functionality client perform action server believe prohibit result client behavior violate assumption server lead variety possible attack example include sending dangerous content script server incorrect price calculation unauthorized access server resource
CAPEC-208,Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements,"An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.",[],attacker remove modify logic client associate monetary calculation result incorrect information send server server rely client correctly compute monetary information example server supply price item rely client correctly compute total cost purchase give number item user buy attacker remove modify logic control calculation return incorrect value server attacker use purchase fraction legitimate cost avoid correct billing activity
CAPEC-209,XSS Using MIME Type Mismatch,"An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.",[],adversary create file script content specify mime type file scripting expect adversary trick victim access url respond script file browser detect specify mime type file match actual type content automatically switch interpreter real content type browser invoke script filter adversary script run target unsanitized possibly reveal victim cookie execute arbitrary script browser
CAPEC-21,Exploitation of Trusted Identifiers,"An adversary guesses, obtains, or ""rides"" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.",[],adversary guess obtain ride trust identifier e.g. session id resource id cookie etc perform authorized action guise authenticated user service
CAPEC-212,Functionality Misuse,"An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.",[],adversary leverage legitimate capability application way achieve negative technical impact system functionality alter modify way intend accomplish overuse specific functionality leverage functionality design flaw enable adversary gain access unauthorized sensitive datum
CAPEC-215,Fuzzing for application mapping,"An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",[],attacker send random malformed unexpected message target application observe application log error message return attacker initially know target respond individual message attempt large number message variant find variant trigger desire behavior attack purpose fuzzing observe application log error message fuzze target cause target enter unstable state cause crash
CAPEC-216,Communication Channel Manipulation,"An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.",[],adversary manipulate setting parameter communication channel order compromise security result information exposure insertion removal information communication stream and/or potentially system compromise
CAPEC-217,Exploiting Incorrectly Configured SSL/TLS,An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.,[],adversary take advantage incorrectly configure ssl tls communication enable access datum intend encrypt adversary use type attack inject command traffic encrypt stream cause compromise client server
CAPEC-218,Spoofing of UDDI/ebXML Messages,"An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.",[],attacker spoof uddi ebxml similar message order impersonate service provider e business transaction uddi ebxml similar standard identify business e business transaction thing identify particular participant wsdl information soap transaction support communication protocol include security protocol spoof message attacker impersonate legitimate business transaction manipulate protocol client business result disclosure sensitive information loss message integrity financial fraud
CAPEC-219,XML Routing Detour Attacks,"An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",[],attacker subvert intermediate system process xml content force intermediate modify and/or route processing content xml routing detour attack adversary middle type attack capec-94 attacker compromise insert intermediate system processing xml message example ws routing specify series node intermediary content pass intermediate node route compromise attacker routing detour attack compromised system attacker able route xml process node choice modify response normal chain processing unaware interception system forward message outside entity hide forwarding processing legitimate processing system alter header information
CAPEC-22,Exploiting Trust in Client,"An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.",[],attack type exploit vulnerability client server communication channel authentication data integrity leverage implicit trust server place client importantly server believe client attacker execute type attack communicate directly server server believe communicate valid client numerous variation type attack
CAPEC-220,Client-Server Protocol Manipulation,"An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.",[],adversary take advantage weakness protocol client server communicate perform unexpected action communication protocol necessary transfer message client server application different protocol different type interaction
CAPEC-221,Data Serialization External Entities Blowup,"This attack takes advantage of the entity replacement property of certain data serialization languages (e.g., XML, YAML, etc.) where the value of the replacement is a URI. A well-crafted file could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.",[],attack take advantage entity replacement property certain datum serialization language e.g. xml yaml etc value replacement uri craft file entity refer uri consume large resource create denial service condition cause system freeze crash execute arbitrary code depend uri
CAPEC-222,iFrame Overlay,"In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system. While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the iFrame overlay page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the attacker may have just tricked the victim into executing some potentially privileged (and most undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks they are clicking on versus what they are actually clicking on.",[],iframe overlay attack victim trick unknowingly initiate action system interact ui seemingly completely different system log target system victim visit attacker malicious site display ui victim wish interact reality iframe overlay page transparent layer visible ui action control attacker wish victim execute victim click button ui element page actually trigger action control transparent overlay layer depend action control attacker trick victim execute potentially privileged undesired functionality target system victim authenticate basic problem dichotomy victim think click versus actually click
CAPEC-224,Fingerprinting,"An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",[],adversary compare output target system know indicator uniquely identify specific detail target commonly fingerprinting determine operating system application version fingerprinting passively actively fingerprinting usually detrimental target information gather fingerprinting enable adversary discover exist weakness target
CAPEC-226,Session Credential Falsification through Manipulation,An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server.,[],attacker manipulate exist credential order gain access target application session credential allow user identify service initial authentication need resend authentication information usually username password message attacker able manipulate credential sniff exist connection order gain access target server
CAPEC-227,Sustained Client Engagement,"An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.",[],adversary attempt deny legitimate user access resource continually engage specific resource attempt resource tie long possible adversary primary goal crash flood target alert defender repeatedly perform action abuse algorithmic flaw give resource tie available legitimate user carefully craft request resource engage seemingly benign request legitimate user limit completely deny access resource
CAPEC-228,DTD Injection,"An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.",[],attacker inject malicious content application dtd attempt produce negative technical impact dtd describe xml document process certain malformed dtd example excessive entity expansion describe capec cause xml parser process dtd consume excessive resource result resource depletion
CAPEC-229,Serialized Data Parameter Blowup,"This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.) which manage data in an inefficient manner. The attacker crafts an serialized data file with multiple configuration parameters in the same dataset. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm. The weakness being exploited is tied to parser implementation and not language specific.",[],attack exploit certain serialize datum parser e.g. xml yaml etc manage datum inefficient manner attacker craft serialize datum file multiple configuration parameter dataset vulnerable parser result denial service condition cpu resource exhaust parsing algorithm weakness exploit tie parser implementation language specific
CAPEC-23,File Content Injection,"An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.",[],adversary poison file malicious payload target file system accessible target software pass standard channel email standard web content like pdf multimedia file adversary exploit know vulnerability handling routine target process order exploit host trust execute remote content include binary file
CAPEC-230,Serialized Data with Nested Payloads,"Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",[],application need transform datum data format e.g. xml yaml parser possible adversary inject datum adverse effect parser process data format language allow definition macro like structure simplify creation complex structure nest structure cause datum repeatedly substitute adversary cause parser consume resource process cause excessive memory consumption cpu utilization
CAPEC-231,Oversized Serialized Data Payloads,"Applications often need to transform data in and out of serialized data formats, such as XML and YAML, by using a data parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the parser, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An adversary's goal is to leverage parser failure to their advantage. DoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious data payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.",[],application need transform datum serialized data format xml yaml datum parser possible adversary inject datum adverse effect parser process supply oversized payload input vector process parser adversary cause parser consume resource process cause excessive memory consumption cpu utilization potentially cause execution arbitrary code adversary goal leverage parser failure advantage dos closely associate web service soap rest remote service requester post malicious datum payload service provider design exhaust service provider memory cpu and/or disk space attack exploit loosely couple nature web service service provider little control service requester message service requester send
CAPEC-233,Privilege Escalation,An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.,[],adversary exploit weakness enable elevate privilege perform action suppose authorize perform
CAPEC-234,Hijacking a privileged process,"An adversary gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code.",[],adversary gain control process assign elevated privilege order execute arbitrary code privilege process assign elevated privilege operate system usually association particular user group role attacker hijack process able assume level privilege order execute code
CAPEC-237,Escaping a Sandbox by Calling Code in Another Language,"The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",[],attacker submit malicious code language obtain access privilege intentionally expose sandbox escape sandbox instance java code perform unsafe operation modify arbitrary memory location restriction place byte code verifier jvm allow java code directly native c code perform unsafe operation system call modify arbitrary memory location behalf provide isolation java grant untrusted code unmediated access native c code instead sandboxed code typically allow subset pre exist native code standard library
CAPEC-24,Filter Failure through Buffer Overflow,"In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).",[],attack idea cause active filter fail cause oversized transaction attacker try feed overly long input string program attempt overwhelm filter cause buffer overflow hope filter fail securely i.e. user input let system unfiltered
CAPEC-240,Resource Injection,An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.,[],adversary exploit weakness input validation manipulate resource identifier enable unintended modification specification resource
CAPEC-242,Code Injection,"An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.",[],adversary exploit weakness input validation target inject new code currently execute differ code inclusion code inclusion involve addition replacement reference code file subsequently load target code application
CAPEC-243,XSS Targeting HTML Attributes,"An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.",[],adversary insert command perform cross site scripting xss action html attribute filter adequately sanitize attribute presence potentially dangerous command adequately sanitize tag example dangerous expression insert style attribute anchor tag result execution malicious code result page render victim trick view render page attack proceed like normal xss attack possibly result loss sensitive cookie malicious activity
CAPEC-244,XSS Targeting URI Placeholders,"An attack of this type exploits the ability of most browsers to interpret ""data"", ""javascript"" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.",[],attack type exploit ability browser interpret datum javascript uri scheme client executable content placeholder attack consist pass malicious uri anchor tag href attribute similar attribute html tag malicious uri contain example base64 encode html content embed cross site scripting payload attack execute browser interpret malicious content i.e. example victim click malicious link
CAPEC-245,XSS Using Doubled Characters,"The adversary bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the < before a script command, (<<script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the adversary can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.",[],adversary bypass input validation double character order perform cross site scripting attack filter fail recognize dangerous sequence precede repeat character example double < script command < < script 3c%3script uri encoding filter web application fail recognize presence script tag target server vulnerable type bypass adversary create craft url trap cause victim view page target server malicious content execute normal xss attack
CAPEC-247,XSS Using Invalid Characters,"An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the adversary to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.",[],adversary insert invalid character identifier bypass application filtering input filter scan invalid character later stage process content follow invalid character process allow adversary sneak prohibited command past filter perform normally prohibit operation invalid character include null carriage return line feed tab identifier successful bypassing filter result xss attack result disclosure web cookie possibly result
CAPEC-248,Command Injection,"An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",[],adversary look execute command choosing inject new item exist command modify interpretation away intend command context standalone string interpret downstream component cause specific response type attack possible untrusted value build command string weakness input validation command construction enable attack lead successful exploitation
CAPEC-25,Forced Deadlock,"The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",[],adversary trigger exploit deadlock condition target software cause denial service deadlock occur compete action wait finish deadlock condition difficult detect
CAPEC-250,XML Injection,"An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",[],attacker utilize craft xml user controllable input probe attack inject datum xml database technique similar sql injection user controllable input allow unauthorized viewing datum bypass authentication end application direct xml database access possibly alter database information
CAPEC-251,Local Code Inclusion,"The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.",[],attacker force application load arbitrary code file local machine attacker use try load old version library file know vulnerability load file attacker place local machine prior attack change functionality target application unexpected way
CAPEC-252,PHP Local File Inclusion,"The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.",[],attacker load execute arbitrary local php file target machine attacker use try load old version php file know vulnerability load php file attacker place local machine prior attack change functionality target application unexpected way
CAPEC-253,Remote Code Inclusion,"The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.",[],attacker force application load arbitrary code file remote location attacker use try load old version library file know vulnerability load malicious file attacker place remote machine change functionality target application unexpected way
CAPEC-256,SOAP Array Overflow,"An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array.",[],attacker send soap request array actual length exceed length indicate request server process transmission naively trust specify size attacker intentionally understate size array possibly result buffer overflow server attempt read entire data set memory allocate small array
CAPEC-26,Leveraging Race Conditions,"The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by ""running the race"", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",['CVE-2007-1057'],adversary target race condition occur multiple process access manipulate resource concurrently outcome execution depend particular order access take place adversary leverage race condition run race modify resource modify normal execution flow instance race condition occur access file adversary trick system replace original file version cause system read malicious file
CAPEC-261,Fuzzing for garnering other adjacent user/sensitive data,An adversary who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide.,[],adversary authorize send query target send variant expect query hope modify query return information directly indirectly error log expected set query provide
CAPEC-263,Force Use of Corrupted Files,"This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.",[],describe attack application force use file attacker corrupt result denial service cause application unable process corrupt file result include disabling filter access control application fail unsafe way fail lock buffer overflow possible
CAPEC-267,Leverage Alternate Encoding,An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.,['CVE-2010-0488'],adversary leverage possibility encode potentially harmful input content application application ineffective validate encoding standard
CAPEC-268,Audit Log Manipulation,"The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.",[],attacker inject manipulate delete forge malicious log entry log file attempt mislead audit log file cover track attack insufficient access control log file logging mechanism attacker able perform action
CAPEC-27,Leveraging Race Conditions via Symbolic Links,"This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.","['CVE-2006-6939', 'CVE-2005-0894', 'CVE-2000-0972']",attack leverage use symbolic link symlink order write sensitive file attacker create symlink link target file accessible privileged program try create temporary file symlink link actually write target file point attacker symlink link attacker insert malicious content temporary file write sensitive file symlink race occur system check temporary file exist create file attacker typically create symlink interval check creation temporary file
CAPEC-270,Modification of Registry Run Keys,"An adversary adds a new entry to the ""run keys"" in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",[],adversary add new entry run key windows registry application choosing execute user log way adversary executable operate run target system authorized user level permission attack good way adversary run persistent spyware user machine keylogger
CAPEC-271,Schema Poisoning,"An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",[],adversary corrupt modify content schema purpose undermine security target schema provide structure content definition resource application replace modify schema adversary affect application handle interpret resource lead possible denial service enter unexpected state record incomplete datum
CAPEC-272,Protocol Manipulation,"An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",[],adversary subvert communication protocol perform attack type attack allow adversary impersonate discover sensitive information control outcome session perform attack type attack target invalid assumption inherent implementer protocol incorrect implementation protocol vulnerability protocol
CAPEC-273,HTTP Response Smuggling,"An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server).
See CanPrecede relationships for possible consequences.","['CVE-2017-2666', 'CVE-2006-2786']","adversary manipulate inject malicious content form secret unauthorized http response single http response vulnerable compromised end http agent e.g. server 
 canprecede relationship possible consequence"
CAPEC-274,HTTP Verb Tampering,"An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected.",[],attacker modify http verb e.g. trace etc order bypass access restriction web environment allow administrator restrict access base http verb request attacker provide different http verb provide random string verb order bypass protection allow attacker access datum protect
CAPEC-275,DNS Rebinding,"An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary.",[],adversary serve content ip address resolve dns server adversary control initial contact web browser similar client adversary change ip address resolve address target organization publicly accessible allow web browser examine internal address behalf adversary
CAPEC-276,Inter-component Protocol Manipulation,"Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",[],inter component protocol communicate different software hardware module single computer common example interrupt signal datum pipe subvert protocol allow adversary impersonate discover sensitive information control outcome session perform attack type attack target invalid assumption inherent implementer protocol incorrect implementation protocol vulnerability protocol
CAPEC-277,Data Interchange Protocol Manipulation,"Data Interchange Protocols are used to transmit structured data between entities. These protocols are often specific to a particular domain (B2B: purchase orders, invoices, transport logistics and waybills, medical records). They are often, but not always, XML-based. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",[],datum interchange protocols transmit structured datum entity protocol specific particular domain b2b purchase order invoice transport logistic waybill medical record xml base subvert protocol allow adversary impersonate discover sensitive information control outcome session perform attack type attack target invalid assumption inherent implementer protocol incorrect implementation protocol vulnerability protocol
CAPEC-278,Web Services Protocol Manipulation,"An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.",[],adversary manipulate web service relate protocol cause web application service react differently intend perform manipulation parameter include unexpected value change call function normally restrict limited leverage pattern attack adversary able gain access datum resource normally restrict cause application service crash
CAPEC-279,SOAP Manipulation,"Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",[],simple object access protocol soap communication protocol client server invoke web service server xml base protocol suffer shortcoming xml base protocol adversary use shortcoming manipulate content soap paramter lead undesirable behavior server allow adversary carry number attack
CAPEC-28,Fuzzing,"In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",[],attack pattern adversary leverage fuzzing try identify weakness system fuzzing software security functionality testing method feed randomly construct input system look indication failure response input occur fuzzing treat system black box totally free preconception assumption system fuzzing help attacker discover certain assumption user input system fuzzing give attacker quick way potentially uncover assumption despite necessarily know internal system assumption turn system specially craft user input allow attacker achieve goal
CAPEC-285,ICMP Echo Request Ping,"An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss.",[],adversary send icmp type echo request commonly know ping order determine target system responsive request block firewall acl target host respond icmp type echo reply datagram type exchange usually refer ping ping utility present operate system ping commonly implement allow user test alive host measure round trip time measure percentage packet loss
CAPEC-287,TCP SYN Scan,"An adversary uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its many advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method, the primary advantages of SYN scanning are its universality and speed.",[],adversary use syn scan determine status port remote target syn scanning common type port scanning advantage drawback result novice attacker tend overly rely syn scan perform system reconnaissance scanning method primary advantage syn scanning universality speed
CAPEC-29,Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions,"This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by ""running the race"", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",['CVE-2007-1057'],attack target race condition occur time check state resource time use resource typical example file access adversary leverage file access race condition run race mean modify resource time target program access file time target program use file period time adversary replace modify file cause application behave unexpectedly
CAPEC-290,Enumerate Mail Exchange (MX) Records,An adversary enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.,[],adversary enumerate mx record give dns query type information gathering return name mail server network mail server expose internet locate dmz network protect firewall effect configuration enumerate mx record organization reveal ip address firewall possibly internal system attacker resort mx record enumeration dns zone transfer possible
CAPEC-291,DNS Zone Transfers,"An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.",[],attacker exploit dns misconfiguration permit zone transfer external dns server return list ip address valid hostname certain condition possible obtain zone datum organization internal network successful attacker learn valuable information topology target organization include information particular server role structure possibly information operate system run network configuration dependent behavior require search multiple dns server attempt find zone transfer allow
CAPEC-292,Host Discovery,"An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.",[],adversary send probe ip address determine host alive host discovery early phase network reconnaissance adversary usually start range ip address belong target network use method determine host present ip address host discovery usually refer ping scanning sonar analogy goal send packet ip address solicit response host ping virtually craft packet whatsoever provide adversary identify functional host base response attack nature usually carry ping sweep particular kind ping send range ip address
CAPEC-293,Traceroute Route Enumeration,"An adversary uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow the adversary to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP, but as more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed.",[],adversary use traceroute utility map route data flow network route target destination tracerouting allow adversary construct working topology system router list system data pass way target machine attack return varied result depend type traceroute perform traceroute work send packet target incremente time live field packet header packet traverse hop way destination ttl expire generate icmp diagnostic message identify packet expire traditional technique tracerouting involve use icmp udp firewall begin filter ingress icmp method traceroute tcp develop
CAPEC-294,ICMP Address Mask Request,"An adversary sends an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. ICMP Address Mask Requests are defined by RFC-950, ""Internet Standard Subnetting Procedure."" An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps the adversary plan router-based attacks as well as denial-of-service attacks against the broadcast address.",[],adversary send icmp type address mask request gather information target networking configuration icmp address mask requests define rfc-950 internet standard subnetting procedure address mask request icmp type message trigger remote system respond list related subnet default gateway broadcast address icmp type address mask reply datagram gather type information help adversary plan router base attack denial service attack broadcast address
CAPEC-295,Timestamp Request,"This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.",[],pattern attack leverage standard request learn exact time associate target system adversary able use timestamp return target attack time base security algorithm random number generator time base authentication mechanism
CAPEC-296,ICMP Information Request,"An adversary sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.",[],adversary send icmp information request host determine respond deprecate mechanism icmp information requests deprecate message type information requests originally diskless machine automatically obtain network configuration message type supersede robust protocol implementation like dhcp
CAPEC-297,TCP ACK Ping,"An adversary sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, the adversary can identify that the host is alive by looking for a RST packet. Typically, a remote server will respond with a RST regardless of whether a port is open or closed. In this way, TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping can be used to discover if a host is alive via RST response packets sent from the host.",[],adversary send tcp segment ack flag set remote host purpose determine host alive tcp ping type rfc expected behavior service respond rst reset packet unsolicited ack segment exist connection send ack segment port adversary identify host alive look rst packet typically remote server respond rst regardless port open closed way tcp ack ping discover state remote port behavior case firewall look ack packet state table discard segment correspond active connection tcp ack ping discover host alive rst response packet send host
CAPEC-298,UDP Ping,"An adversary sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an 'ICMP port unreachable' message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts.",[],adversary send udp datagram remote host determine host alive udp datagram send open udp port response typical strategy udp ping send datagram random high port target goal solicit icmp port unreachable message target indicate host alive udp ping useful firewall configure block udp datagram send strange typically unused port like port k range additionally firewall filter incoming icmp weakness firewall rule set allow certain type icmp host unreachable port unreachable useful udp ping attempt
CAPEC-299,TCP SYN Ping,"An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN ""synchronize"" packet by completing stage two of the 'three-way handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST ""reset"" packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response.",[],adversary use tcp syn packet means host discovery typical rfc behavior specify tcp port open host respond incoming syn synchronize packet complete stage way handshake send syn ack response port close rfc behavior respond rst reset packet behavior pe target alive send tcp syn packet port look rst ack packet response
CAPEC-3,Using Leading 'Ghost' Character Sequences to Bypass Input Filters,"Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading ""ghost"" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",[],api strip certain leading character string parameter adversary intentionally introduce leading ghost character extra character affect validity request api layer enable input pass filter process adversary input occur target api accept input datum syntactic form interpret equivalent semantic way filter account spectrum syntactic form acceptable target api
CAPEC-30,Hijacking a Privileged Thread of Execution,"An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",[],adversary hijack privileged thread execution inject malicious code run process privleged thread bidding adversary evade process base detection stop attack create new process lead adversary gain access process memory enable elevated privilege common way perform attack suspend exist thread manipulate memory
CAPEC-300,Port Scanning,An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.,[],adversary use combination technique determine state port remote target service application available tcp udp networking port open communication network
CAPEC-301,TCP Connect Scan,"An adversary uses full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack.",[],adversary use tcp connection attempt determine port open target system scanning process involve complete way handshake remote port report port closed handshake establish advantage tcp connect scanning work tcp ip stack
CAPEC-302,TCP FIN Scan,"An adversary uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow the adversary to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",[],adversary use tcp fin scan determine port closed target machine scan type accomplish send tcp segment fin bit set packet header rfc expected behavior tcp segment state flag send open port discard segment state flag send closed port handle rst response behavior allow adversary scan closed port send certain type rule break packet sync disallow tcb detect closed port rst packet
CAPEC-303,TCP Xmas Scan,"An adversary uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with all possible flags set in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",[],adversary use tcp xmas scan determine port closed target machine scan type accomplish send tcp segment possible flag set packet header generate packet illegal base rfc rfc expect behavior tcp segment state flag send open port discard segment state flag send closed port handle rst response behavior allow attacker scan closed port send certain type rule break packet sync disallow tcb detect closed port rst packet
CAPEC-304,TCP Null Scan,"An adversary uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",[],adversary use tcp null scan determine port closed target machine scan type accomplish send tcp segment flag packet header generate packet illegal base rfc rfc expected behavior tcp segment state flag send open port discard segment state flag send closed port handle rst response behavior allow attacker scan closed port send certain type rule break packet sync disallow tcb detect closed port rst packet
CAPEC-305,TCP ACK Scan,"An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present.",[],adversary use tcp ack segment gather information firewall acl configuration purpose type scan discover information filter configuration port state type scanning rarely useful combine syn scanning give complete picture type firewall rule present
CAPEC-306,TCP Window Scan,"An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status.",[],adversary engage tcp window scanning analyze port status operating system type tcp window scanning use ack scanning method examine tcp window size field response rst packet certain inference tcp window scans fast relatively stealthy work few tcp stack implementation type scan operate system return positive tcp window size rst packet send open port negative value rst originate closed port tcp window scanning complex scan type result difficult interpret window scanning rarely yield useful information combine type scanning useful generally reliable means make inference operate system version port status
CAPEC-307,TCP RPC Scan,An adversary scans for RPC services listing on a Unix/Linux host.,[],adversary scan rpc service list unix linux host
CAPEC-308,UDP Scan,An adversary engages in UDP scanning to gather information about UDP port status on the target system. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port.,[],adversary engage udp scanning gather information udp port status target system udp scanning method involve send udp datagram target port look evidence port close open udp port usually respond udp datagram stateful mechanism protocol require build establish session response udp datagram application specific rely method detect open port udp scanning rely heavily icmp diagnostic message order determine status remote port
CAPEC-309,Network Topology Mapping,"An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.",[],adversary engage scan activity map network node host device route adversary usually perform type network reconnaissance early stage attack external network type scan utility typically employ include icmp tool network mapper port scanner route testing utility traceroute
CAPEC-31,Accessing/Intercepting/Modifying HTTP Cookies,"This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.","['CVE-2010-5148', 'CVE-2016-0353']",attack rely use http cookie store credential state information critical datum client system different form attack form attack involve access http cookie potentially sensitive datum contain second form involve intercept data transmit client server intercept information adversary impersonate remote user session form cookie content modify adversary send server adversary seek convince target server operate falsify information
CAPEC-310,Scanning for Vulnerable Software,"An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.",[],attacker engage scan activity find vulnerable software version type operating system version network service vulnerable exploitable network configuration improperly firewalle system misconfigure system dmz external network provide window opportunity attacker common type vulnerable software include unpatched operate system service e.g ftp telnet smtp snmp run open port attacker identify attacker usually begin probe vulnerable software external network port scan potential target reveal
CAPEC-312,Active OS Fingerprinting,"An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",[],adversary engage activity detect operate system firmware version remote target interrogate device server platform probe design solicit behavior reveal information operate system firmware environment operating system detection possible implementation common protocol ip tcp differ distinct way implementation difference sufficient break compatibility protocol difference detectable target respond unique way specific probe activity break semantic logical rule packet construction protocol different operate system unique response anomalous input provide basis fingerprint os behavior type os fingerprinting distinguish operating system type version
CAPEC-313,Passive OS Fingerprinting,"An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.",[],adversary engage activity detect version type os software environment passively monitor communication device node application passive technique operate system detection send actual probe target monitor network client server communication node order identify operate system base observe behavior compare database know signature value passive os fingerprinting usually reliable active method generally well able evade detection
CAPEC-317,IP ID Sequencing Probe,"This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing the IP 'ID' sequence generation algorithm for one protocol used by a host and Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values spanning multiple protocols, such as between ICMP and TCP.",[],os fingerprinting probe analyze ip id field sequence number generation algorithm remote host operate system generate ip id number differently allow attacker identify operate system host examine assign id number generate response packet rfc specify id number choose range id sequence generation differ implementation implementation kind ip id sequence number analysis ip id sequencing analyze ip id sequence generation algorithm protocol host shared ip id sequencing analyze packet ordering ip id value span multiple protocol icmp tcp
CAPEC-318,IP 'ID' Echoed Byte-Order Probe,This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.,[],os fingerprinting probe test determine remote host echo ip id value probe packet attacker send udp datagram arbitrary ip id value closed port remote host observe manner bit echo icmp error message identification field id typically utilize reassemble fragmented packet operating system router firmware reverse bit order id field echo ip header portion original datagram icmp error message
CAPEC-319,IP (DF) 'Don't Fragment Bit' Echoing Probe,This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.,[],os fingerprinting probe test determine remote host echo ip df fragment bit response packet attacker send udp datagram df bit set closed port remote host observe df bit set response packet operating system echo bit icmp error message zero bit response packet
CAPEC-32,XSS Through HTTP Query Strings,An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.,[],adversary embed malicious script code parameter http query string convince victim submit http request contain query string vulnerable web application web application procede use value parameter properly validation generate html code execute victim browser
CAPEC-320,TCP Timestamp Probe,"This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",[],os fingerprinting probe examine remote server implementation tcp timestamp operate system implement timestamp tcp header timestamp provide attacker means guess operate system target attacker begin probe active tcp service order response contain tcp timestamp different operating system update timestamp value different interval type analysis accurate multiple timestamp response receive analyze tcp timestamp find tcp option field tcp header
CAPEC-321,TCP Sequence Number Probe,"This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",[],os fingerprinting probe test target system assignment tcp sequence number common way test tcp sequence number generation send probe packet open port target compare sequence number generate target relate acknowledgement number probe packet different operate system assign sequence numbers differently fingerprint operate system obtain categorize relationship acknowledgement number sequence number follow sequence number generate target zero sequence number generate target acknowledgement number probe sequence number generate target acknowledgement number plus sequence number non zero number
CAPEC-322,TCP (ISN) Greatest Common Divisor Probe,This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.,[],os fingerprinting probe send number tcp syn packet open port remote machine initial sequence number isn syn ack response packet analyze determine small number target host use incremente sequence number information useful identify operate system particular operate system version increment sequence number different value result analysis compare database os behavior determine os type and/or version
CAPEC-323,TCP (ISN) Counter Rate Probe,This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.,[],os detection probe measure average rate initial sequence number increment period time sequence number incremente time base algorithm susceptible timing analysis determine number increment unit time result analysis compare database operate system version determine likely operation system match
CAPEC-324,TCP (ISN) Sequence Predictability Probe,"This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",[],type operating system probe attempt determine estimate predictable sequence number generation algorithm remote host statistical technique standard deviation determine predictable sequence number generation system result compare database operating system behavior determine likely match operating system version
CAPEC-325,TCP Congestion Control Flag (ECN) Probe,"This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.",[],os fingerprinting probe check remote host support explicit congestion notification ecn messaging ecn messaging design allow router notify remote host signal congestion problem occur explicit congestion notification messaging define rfc different operating system version implement ecn notification respond uniquely particular ecn flag type
CAPEC-326,TCP Initial Window Size Probe,"This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the ""connected"" state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",[],os fingerprinting probe check initial tcp window size tcp stack limit range sequence number allowable session maintain connect state tcp protocol logic initial window size specify range acceptable sequence number qualify response ack packet session operate system use different initial window size initial window size sample establish ordinary tcp connection
CAPEC-327,TCP Options Probe,"This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",[],os fingerprinting probe analyze type order tcp header option present response segment operate system use unique ordering different option set option present rfc specify require order option present different implementation use unique way order structure tcp option tcp option generate ordinary tcp traffic
CAPEC-328,TCP 'RST' Flag Checksum Probe,This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.,[],os fingerprinting probe perform checksum ascii datum contain data portion rst packet operating system report human readable text message payload rst reset packet specific type connection error occur rfc allow text payload reset packet operating system router implement functionality
CAPEC-329,ICMP Error Message Quoting Probe,"An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or ""Quoted"" from the originating request that generated the ICMP error message.",[],adversary use technique generate icmp error message port unreachable destination unreachable redirect source quench time exceed parameter problem target analyze datum return quote originate request generate icmp error message
CAPEC-33,HTTP Request Smuggling,"An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers and message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).
See CanPrecede relationships for possible consequences.","['CVE-2020-8287', 'CVE-2006-6276', 'CVE-2005-2088']","adversary abuse flexibility discrepancy parsing interpretation http request message http header message size denote end message signal give http header different intermediary http agent e.g. load balancer reverse proxy web caching proxy application firewall etc secretly send unauthorized malicious http request end http agent e.g. web server 
 canprecede relationship possible consequence"
CAPEC-330,ICMP Error Message Echoing Integrity Probe,"An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or ""Quoted"" from the originating request that generated the error message.",[],adversary use technique generate icmp error message port unreachable destination unreachable redirect source quench time exceed parameter problem target analyze integrity datum return quote originate request generate error message
CAPEC-331,ICMP IP Total Length Field Probe,"An adversary sends a UDP packet to a closed port on the target machine to solicit an IP Header's total length field value within the echoed 'Port Unreachable"" error message. This type of behavior is useful for building a signature-base of operating system responses, particularly when error messages contain other types of information that is useful identifying specific operating system responses.",[],adversary send udp packet closed port target machine solicit ip header total length field value echo port unreachable error message type behavior useful build signature base operate system response particularly error message contain type information useful identify specific operate system response
CAPEC-332,ICMP IP 'ID' Field Error Message Probe,An adversary sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. This allows the attacker to construct a fingerprint of specific OS behaviors.,[],adversary send udp datagram have assign value internet identification field id closed port target observe manner bit echo icmp error message allow attacker construct fingerprint specific os behavior
CAPEC-34,HTTP Response Splitting,"An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site.
See CanPrecede relationships for possible consequences.",['CVE-2006-0207'],"adversary manipulate inject malicious content form secret unauthorized http response single http response vulnerable compromised end http agent e.g. web server spoof http response adversary control domain site 
 canprecede relationship possible consequence"
CAPEC-35,Leverage Executable Code in Non-Executable Files,An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.,[],attack type exploit system trust configuration resource file executable load resource image file configuration file attacker modify file execute malicious code directly manipulate target process e.g. application server execute base malicious configuration parameter system increasingly interrelated mash resource local remote source possibility attack occur high
CAPEC-36,Using Unpublished Interfaces,An adversary searches for and invokes interfaces that the target system designers did not intend to be publicly available. If these interfaces fail to authenticate requests the attacker may be able to invoke functionality they are not authorized for.,[],adversary search invoke interface target system designer intend publicly available interface fail authenticate request attacker able invoke functionality authorize
CAPEC-37,Retrieve Embedded Sensitive Data,"An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",[],attacker examine target system find sensitive datum embed information reveal confidential content account number individual key credential intermediate step large attack
CAPEC-38,Leveraging/Manipulating Configuration File Search Paths,"This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",[],pattern attack see adversary load malicious resource program standard path known command execute system instead execute malicious component adversary modify search path program use like path variable classpath manipulate resource path point malicious component j2ee application component base application build multiple binary long list dependency execute library and/or reference controllable attacker application control circumvent attacker
CAPEC-383,Harvesting Information via API Event Monitoring,"An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a ""virtual sale"" of rare items. As other users enter the event, the attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.",[],adversary host event application framework monitor datum exchange course event purpose harvest important datum leak transaction example harvest list username userid purpose send spam message user example type attack involve adversary create event sub application assume adversary host virtual sale rare item user enter event attacker record aitm capec-94 proxy user_id username attend adversary able spam user application automate script
CAPEC-384,Application API Message Manipulation via Man-in-the-Middle,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true ""Adversary-in-the-Middle"" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.",[],attacker manipulate egress ingress datum client application framework order change content message perform attack allow attacker gain unauthorized privilege application conduct attack phishing deceptive strategy spread malware traditional web application attack technique require use specialized software allow attacker perform adversary middle capec-94 communication web browser remote system despite use aith software attack actually direct server client node series content broker pass information application framework additionally true adversary middle attack network layer application layer attack root cause master application trust integrity code supply client
CAPEC-385,Transaction or Event Tampering via Application API Manipulation,"An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.",[],attacker host join event transaction application framework order change content message item exchange perform attack allow attacker manipulate content way produce message content look authentic contain deceptive link substitute item spoof exist item conduct false exchange change amount identity exchange technique require use specialized software allow attacker man middle communication web browser remote system order change content application element item exchange game monetize sale coin virtual dollar etc purpose attack attack scam victim trap datum packet involve exchange alter integrity transfer process
CAPEC-386,Application API Navigation Remapping,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.",[],attacker manipulate egress ingress datum client application framework order change destination and/or content link button display user api message perform attack allow attacker manipulate content way produce message content look authentic contain link button point attacker control destination application navigation remapping difficult detect actual href value image profile element link button mask example place image user photo gallery click redirect user site location traditional web vulnerability csrf construct remappe button link case navigation remapping phishing attack mean artificially boost page view user site reputation click fraud
CAPEC-387,Navigation Remapping To Propagate Malicious Content,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the attacker to use adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system in order to change the destination of various application interface elements.",[],attacker manipulate egress ingress datum client application framework order change content message circumvent expect application logic perform attack allow attacker manipulate content way produce message content look authentic contain deceptive link spam like content link attacker code general content spoofing application api employ stage different type attack vary base attacker intent goal spread malware deceptive content create modify link button image entice user click item point malicious uri technique require use specialized software allow attacker use adversary middle capec-94 communication web browser remote system order change destination application interface element
CAPEC-388,Application API Button Hijacking,An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination.,[],attacker manipulate egress ingress datum client application framework order change destination and/or content button display user api message perform attack allow attacker manipulate content way produce message content look authentic contain button point attacker control destination
CAPEC-389,Content Spoofing Via Application API Manipulation,"An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to use adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system.",[],attacker manipulate egress ingress datum client application framework order change content message perform attack allow attacker manipulate content way produce message content look authentic contain deceptive link spam like content link attacker code general content spoofing application api employ stage different type attack vary base attacker intent technique require use specialized software allow attacker use adversary middle capec-94 communication web browser remote system
CAPEC-39,Manipulating Opaque Client-based Data Tokens,"In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",['CVE-2006-0944'],circumstance application hold important datum client token cookie url datum file forth datum manipulate client server application component reinterpret datum authentication token datum store item pricing wallet information opaquely manipulate datum bear fruit attacker pattern attacker undermine assumption client token adequately protect tamper use encryption obfuscation
CAPEC-390,Bypassing Physical Security,"Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.",[],facility layer model physical security traditional lock electronic base card entry system couple physical alarm hardware security mechanism range use computer case cable lock rfid tag track computer asset layered approach make difficult random physical security breach unnoticed effective stop deliberate carefully plan break in avoid detection begin evade building security surveillance method bypass electronic physical lock secure entry point
CAPEC-391,Bypassing Physical Locks,"An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.",[],attacker use technique method bypass physical security measure building facility physical lock range traditional lock key mechanism cable lock secure laptop server lock server case device technique lock bumping lock forcing snap gun lock picking employ bypass lock gain access facility device protect stealth evidence tampering integrity lock follow attack consideration determine method employ physical lock limit complexity locking mechanism lock offer protection shock resistant foam prevent bumping lock forcing method commonly employ lock offer countermeasure
CAPEC-392,Lock Bumping,"An attacker uses a bump key to force a lock on a building or facility and gain entry. Lock Bumping is the use of a special type of key that can be tapped or bumped to cause the pins within the lock to fall into temporary alignment, allowing the lock to be opened. Lock bumping allows an attacker to open a lock without having the correct key. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A bump key is a specially constructed key that exploits this design. When the bump key is struck or firmly tapped, its teeth transfer the force of the tap into the key pins, causing the lock to momentarily shift into proper alignment for the mechanism to be opened.",[],attacker use bump key force lock building facility gain entry lock bumping use special type key tap bump cause pin lock fall temporary alignment allow lock open lock bumping allow attacker open lock have correct key standard lock secure set internal pin prevent device turn spring load driver pin push key pin correct key insert ridge key push key pin driver pin cause correct alignment allow lock cylinder rotate bump key specially construct key exploit design bump key strike firmly tap tooth transfer force tap key pin cause lock momentarily shift proper alignment mechanism open
CAPEC-393,Lock Picking,"An attacker uses lock picking tools and techniques to bypass the locks on a building or facility. Lock picking is the use of a special set of tools to manipulate the pins within a lock. Different sets of tools are required for each type of lock. Lock picking attacks have the advantage of being non-invasive in that if performed correctly the lock will not be damaged. A standard lock pin-and-tumbler lock is secured by a set of internal pins that prevent the tumbler device from turning. Spring loaded driver pins push down on the key pins preventing rotation so that the bolt remains in a locked position.. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. Most common locks, such as domestic locks in the US, can be picked using a standard 2 tools (i.e. a torsion wrench and a hook pick).",[],attacker use lock picking tool technique bypass lock building facility lock picking use special set tool manipulate pin lock different set tool require type lock lock picking attack advantage non invasive perform correctly lock damage standard lock pin tumbler lock secure set internal pin prevent tumbler device turn spring load driver pin push key pin prevent rotation bolt remain lock position correct key insert ridge key push key pin driver pin cause correct alignment allow lock cylinder rotate common lock domestic lock pick standard tool i.e. torsion wrench hook pick
CAPEC-394,Using a Snap Gun Lock to Force a Lock,"An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a building or facility. A Pick Gun is a special type of lock picking instrument that works on similar principles as lock bumping. A snap gun is a hand-held device with an attached metal pick. The metal pick strikes the pins within the lock, transferring motion from the key pins to the driver pins and forcing the lock into momentary alignment. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A Snap Gun exploits this design by using a metal pin to strike all of the key pins at once, forcing the driver pins to shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may damage the lock more easily, leaving evidence that the lock has been tampered with.",[],attacker use snap gun know pick gun force lock building facility pick gun special type lock picking instrument work similar principle lock bumping snap gun hand hold device attach metal pick metal pick strike pin lock transfer motion key pin driver pin force lock momentary alignment standard lock secure set internal pin prevent device turn spring load driver pin push key pin correct key insert ridge key push key pin driver pin cause correct alignment allow lock cylinder rotate snap gun exploit design metal pin strike key pin force driver pin shift unlocked position unlike bump key lock pick snap gun damage lock easily leave evidence lock tamper
CAPEC-395,Bypassing Electronic Locks and Access Controls,"An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.",[],attacker exploit security assumption bypass electronic lock form access control attack electronic access control follow similar method utilize different tool electronic lock utilize magnetic strip card employ rfid tag embed card badge involve sophisticated protection voice print thumb print retinal biometric magnetic strip rfid technology widespread cost effective deploy easily integrate electronic security measure technology share common weakness attacker exploit gain access facility protect mechanism copy legitimate card badge generate new card reverse engineer algorithm
CAPEC-397,Cloning Magnetic Strip Cards,"An attacker duplicates the data on a Magnetic strip card (i.e. 'swipe card' or 'magstripe') to gain unauthorized access to a physical location or a person's private information. Magstripe cards encode data on a band of iron-based magnetic particles arrayed in a stripe along a rectangular card. Most magstripe card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The primary advantage of magstripe technology is ease of encoding and portability, but this also renders magnetic strip cards susceptible to unauthorized duplication. If magstripe cards are used for access control, all an attacker need do is obtain a valid card long enough to make a copy of the card and then return the card to its location (i.e. a co-worker's desk). Magstripe reader/writers are widely available as well as software for analyzing data encoded on the cards. By swiping a valid card, it becomes trivial to make any number of duplicates that function as the original.",[],attacker duplicate datum magnetic strip card i.e. swipe card magstripe gain unauthorized access physical location person private information magstripe card encode datum band iron base magnetic particle array stripe rectangular card magstripe card data format conform iso standard primary advantage magstripe technology ease encoding portability render magnetic strip card susceptible unauthorized duplication magstripe card access control attacker need obtain valid card long copy card return card location i.e. co worker desk magstripe reader writer widely available software analyze datum encode card swipe valid card trivial number duplicate function original
CAPEC-398,Magnetic Strip Card Brute Force Attacks,An adversary analyzes the data on two or more magnetic strip cards and is able to generate new cards containing valid sequences that allow unauthorized access and/or impersonation of individuals.,[],adversary analyze datum magnetic strip card able generate new card contain valid sequence allow unauthorized access and/or impersonation individual
CAPEC-399,Cloning RFID Cards or Chips,"An attacker analyzes data returned by an RFID chip and uses this information to duplicate a RFID signal that responds identically to the target chip. In some cases RFID chips are used for building access control, employee identification, or as markers on products being delivered along a supply chain. Some organizations also embed RFID tags inside computer assets to trigger alarms if they are removed from particular rooms, zones, or buildings. Similar to Magnetic strip cards, RFID cards are susceptible to duplication (cloning) and reuse.",[],attacker analyze datum return rfid chip use information duplicate rfid signal respond identically target chip case rfid chip building access control employee identification marker product deliver supply chain organization embed rfid tag inside computer asset trigger alarm remove particular room zone building similar magnetic strip card rfid card susceptible duplication cloning reuse
CAPEC-4,Using Alternative IP Address Encodings,"This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",[],attack rely adversary unexpected format represent ip address networked application expect network location information specific format fully qualified domain name fqdn url ip address ip address range location information validate variety different possible encoding format adversary use alternate format bypass application access control
CAPEC-40,Manipulating Writeable Terminal Devices,This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.,[],attack exploit terminal device allow write user attacker send command string target terminal device hope target user hit enter execute malicious command privilege attacker send result copy /etc passwd known directory collect attack succeed
CAPEC-400,RFID Chip Deactivation or Destruction,"An attacker uses methods to deactivate a passive RFID tag for the purpose of rendering the tag, badge, card, or object containing the tag unresponsive. RFID tags are used primarily for access control, inventory, or anti-theft devices. The purpose of attacking the RFID chip is to disable or damage the chip without causing damage to the object housing it.",[],attacker use method deactivate passive rfid tag purpose render tag badge card object contain tag unresponsive rfid tag primarily access control inventory anti theft device purpose attack rfid chip disable damage chip cause damage object house
CAPEC-401,Physically Hacking Hardware,An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.,[],adversary exploit weakness access control gain access currently instal hardware precede implement change secretly replace hardware component undermine system integrity purpose carry attack
CAPEC-402,Bypassing ATA Password Security,"An adversary exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.",[],adversary exploit weakness ata security drive gain access information drive contain supply proper credential ata security employ protect hard disk information unauthorized access mechanism require user type password bios allow access drive content implementation ata security accept ata command update password user having authenticate bios occur security mechanism assume user authenticate bios prior send command drive method exist exploit flaw common instal ata protect drive system lack ata security feature a.k.a hot swapping drive instal new system bios reset drive password
CAPEC-406,Dumpster Diving,"An adversary cases an establishment and searches through trash bins, dumpsters, or areas where company information may have been accidentally discarded for information items which may be useful to the dumpster diver. The devastating nature of the items and/or information found can be anything from medical records, resumes, personal photos and emails, bank statements, account details or information about software, tech support logs and so much more. By collecting this information an adversary may be able to learn important facts about the person or organization that play a role in helping the adversary in their attack.",[],adversary case establishment search trash bin dumpster area company information accidentally discard information item useful dumpster diver devastating nature item and/or information find medical record resume personal photo email bank statement account detail information software tech support log collect information adversary able learn important fact person organization play role help adversary attack
CAPEC-407,Pretexting,"An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",[],adversary engage pretexting behavior solicit information target person manipulate target perform action serve adversary interest pretexting attack adversary create invent scenario assume identity role persuade target victim release information perform action create lie case create new identity identity manipulate receipt information
CAPEC-41,Using Meta-characters in E-mail Headers to Inject Malicious Payloads,"This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",[],type attack involve attacker leverage meta character email header inject improper behavior email program email software increasingly sophisticated feature rich addition email application ubiquitous connect directly web make ideal target launch propagate attack user demand new functionality email application grow like browser complex rendering plug routine email functionality include abstract user create opportunity attacker virtually email application list email header information default email header contain valuable attacker vector attacker exploit particularly behavior email client application know meta character hide user contain script enumeration probe attack user system
CAPEC-410,Information Elicitation,"An adversary engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.",[],adversary engage individual combination social engineering method purpose extract information accurate contextual environmental queue know important information target company individual greatly increase success attack quality information gather authentic mimicry combine detailed knowledge increase success elicitation attack
CAPEC-412,Pretexting via Customer Service,"An adversary engages in pretexting behavior, assuming the role of someone who works for Customer Service, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. One example of a scenario such as this would be to call an individual, articulate your false affiliation with a credit card company, and then attempt to get the individual to verify their credit card number.",[],adversary engage pretexting behavior assume role work customer service solicit information target person manipulate target perform action serve adversary interest example scenario individual articulate false affiliation credit card company attempt individual verify credit card number
CAPEC-413,Pretexting via Tech Support,"An adversary engages in pretexting behavior, assuming the role of a tech support worker, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. An adversary who uses social engineering to impersonate a tech support worker can have devastating effects on a network. This is an effective attack vector, because it can give an adversary physical access to network computers. It only takes a matter of seconds for someone to compromise a computer with physical access. One of the best technological tools at the disposal of a social engineer, posing as a technical support person, is a USB thumb drive. These are small, easy to conceal, and can be loaded with different payloads depending on what task needs to be done. However, this form of attack does not require physical access as it can also be effectively carried out via phone or email.",[],adversary engage pretexting behavior assume role tech support worker solicit information target person manipulate target perform action serve adversary interest adversary use social engineering impersonate tech support worker devastating effect network effective attack vector adversary physical access network computer take matter second compromise computer physical access good technological tool disposal social engineer pose technical support person usb thumb drive small easy conceal load different payload depend task need form attack require physical access effectively carry phone email
CAPEC-414,Pretexting via Delivery Person,"An adversary engages in pretexting behavior, assuming the role of a delivery person, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. Impersonating a delivery person is an effective attack and an easy attack since not much acting is involved. Usually the hardest part is looking the part and having all of the proper credentials, papers and ""deliveries"" in order to be able to pull it off.",[],adversary engage pretexting behavior assume role delivery person solicit information target person manipulate target perform action serve adversary interest impersonate delivery person effective attack easy attack acting involve usually hard look have proper credential paper delivery order able pull
CAPEC-415,Pretexting via Phone,"An adversary engages in pretexting behavior, assuming some sort of trusted role, and contacting the targeted individual or organization via phone to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. This is the most common social engineering attack. Some of the most commonly effective approaches are to impersonate a fellow employee, impersonate a computer technician or to target help desk personnel.",[],adversary engage pretexte behavior assume sort trust role contact target individual organization phone solicit information target person manipulate target perform action serve adversary interest common social engineering attack commonly effective approach impersonate fellow employee impersonate computer technician target help desk personnel
CAPEC-416,Manipulate Human Behavior,"An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",[],adversary exploit inherent human psychological predisposition influence target individual group solicit information manipulate target perform action serve adversary interest interpersonal social engineering technique involve outright deception subtle way manipulate target remove barrier target feel comfortable produce exchange target likely share information directly let key information slip unintentionally skilled adversary use technique appropriate produce desire outcome manipulation technique vary overt pretend supervisor help desk subtle make target feel comfortable adversary speech thought pattern
CAPEC-417,Influence Perception,The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.,[],adversary use social engineering exploit target perception relationship adversary goal persuade target unknowingly perform action divulge information advantageous adversary
CAPEC-418,Influence Perception of Reciprocation,"An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.",[],adversary use social engineering technique produce sense obligation target perform certain action concede sensitive key piece information obligation action feel need sort social legal moral requirement duty contract promise technique foster sense obligation reciprocate concede ordinary mode communication method compliment target follow compliment question perform correctly target volunteer key piece information involuntarily
CAPEC-42,MIME Conversion,An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.,['CVE-1999-0047'],attacker exploit weakness mime conversion routine cause buffer overflow gain control mail server machine mime system design allow different information format interpret send e mail attack point exist datum convert mime compatible format
CAPEC-420,Influence Perception of Scarcity,"The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.",[],adversary leverage perception scarcity persuade target perform action divulge information advantageous adversary convey perception scarcity situation limited supply adversary aim create sense urgency context target decision making process
CAPEC-421,Influence Perception of Authority,"An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.",[],adversary use social engineering technique convey sense authority motivate target reveal specific information specific action technique produce sense authority ordinary mode communication common method impersonation impersonate position power organization adversary motivate target individual reveal piece sensitive information perform action benefit adversary
CAPEC-422,Influence Perception of Commitment and Consistency,"An adversary uses social engineering to convince the target to do minor tasks as opposed to larger actions. After complying with a request, individuals are more likely to agree to subsequent requests that are similar in type and required effort.",[],adversary use social engineering convince target minor task oppose large action comply request individual likely agree subsequent request similar type require effort
CAPEC-423,Influence Perception of Liking,"The adversary influences the target's actions by building a relationship where the target has a liking to the adversary. People are more likely to be influenced by people of whom they are fond, so the adversary attempts to ingratiate themself with the target via actions, appearance, or a combination thereof.",[],adversary influence target action build relationship target liking adversary people likely influence people fond adversary attempt ingratiate themself target action appearance combination thereof
CAPEC-424,Influence Perception of Consensus or Social Proof,"The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.",[],adversary influence target action leverage inherent human nature assume behavior appropriate situation uncertainty people tend behave way behave adversary convince target adopt behavior action advantageous adversary
CAPEC-425,Target Influence via Framing,"An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word ""No"" and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",[],adversary use framing technique contextualize conversation target likely influence adversary point view framing information experience life alter way react decision type persuasive technique exploit way people condition perceive datum significance avoid negative avoidance response target specific technique framing methodology conversation slowly encourage target adopt adversary perspective technique framing avoid use word contextualize response manner positive perform skillfully target likely volunteer information perform action favorable adversary
CAPEC-426,Influence via Incentives,"The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.",[],adversary incite behavior target manipulate influence commonly associate financial social ideological incentivization example include monetary fraud peer pressure preying target moral ethic effective incentive target effective adversary gather information target vulnerability particular incentive
CAPEC-427,Influence via Psychological Principles,"The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",[],adversary shape target action behavior focus way human interact learn leverage element cognitive social psychology variety way target influence behave perform action capitalize scholarship research learn human react specific scenario cue
CAPEC-428,Influence via Modes of Thinking,"The adversary tailors their communication to the language and thought patterns of the target thereby weakening barriers or reluctance to communication. This method is a way of building rapport with a target by matching their speech patterns and the primary ways or dominant senses with which they make abstractions. This technique can be used to make the target more receptive to sharing information because the adversary has adapted their communication forms to match those of the target. When skillfully employed, the target is likely to be unaware that they are being manipulated.",[],adversary tailor communication language thought pattern target weaken barrier reluctance communication method way build rapport target match speech pattern primary way dominant sense abstraction technique target receptive share information adversary adapt communication form match target skillfully employ target likely unaware manipulate
CAPEC-429,Target Influence via Eye Cues,The adversary gains information via non-verbal means from the target through eye movements.,[],adversary gain information non verbal mean target eye movement
CAPEC-43,Exploiting Multiple Input Interpretation Layers,"An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a ""layer"" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",[],attacker supply target software input datum contain sequence special character design bypass input validation logic exploit rely target make multiple pass input datum process layer special character pass manner attacker disguise input reject invalid conceal layer special escape character strip subsequent processing step goal discover case input validation layer execute parsing layer user input following logic application < parser1 > > < input validator > > < parser2 > case attacker need provide input pass input validator pass parser2 convert input validator suppose stop
CAPEC-433,Target Influence via The Human Buffer Overflow,"An attacker utilizes a technique to insinuate commands to the subconscious mind of the target via communication patterns. The human buffer overflow methodology does not rely on over-stimulating the mind of the target, but rather embedding messages within communication that the mind of the listener assembles at a subconscious level. The human buffer-overflow method is similar to subconscious programming to the extent that messages are embedded within the message.",[],attacker utilize technique insinuate command subconscious mind target communication pattern human buffer overflow methodology rely stimulate mind target embed message communication mind listener assemble subconscious level human buffer overflow method similar subconscious programming extent message embed message
CAPEC-438,Modification During Manufacture,"An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.",[],attacker modify technology product component stage manufacture purpose carry attack entity involve supply chain lifecycle limitless number way attacker modify technology involve manufacture attacker potential inroad software composition hardware design assembly firmware basic design mechanic additionally manufacturing key component outsource final product assemble primary manufacturer great risk deliberate manipulation design specification produce malicious hardware device billion transistor single integrated circuit study show few transistor require create malicious functionality
CAPEC-439,Manipulation During Distribution,"An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.",[],attacker undermine integrity product software technology stage distribution channel core threat modification manipulation distribution arise stage distribution product traverse multiple supplier integrator final asset deliver component service provide manufacturer supplier tamper integration packaging
CAPEC-44,Overflow Binary Resource File,"An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",[],attack type exploit buffer overflow vulnerability handling binary resource binary resource include music file like mp3 image file like jpeg file binary file attack pass unnoticed client machine normal usage file browser load seemingly innocent jpeg file allow adversary access execution stack execute arbitrary code target process
CAPEC-440,Hardware Integrity Attack,"An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.",[],adversary exploit weakness system maintenance process cause change technology product component sub component new instal deploy use victim location purpose carry attack
CAPEC-441,Malicious Logic Insertion,"An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.",[],adversary install add malicious logic know malware seemingly benign component field system logic hide user system work scene achieve negative impact proliferation mass digital storage inexpensive multimedia device bluetooth 802.11 support new attack vector spread malware emerge thing think innocuous greeting card picture frame digital projector pattern attack focus system field operation oppose system component development supply chain
CAPEC-442,Infected Software,"An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.",[],adversary add malicious logic form computer virus benign software logic hide user software work scene achieve negative impact time malicious logic insert space legitimate code call software execute pattern attack focus software field operation oppose software development supply chain
CAPEC-443,Malicious Logic Inserted Into Product Software by Authorized Developer,"An adversary uses their privileged position within an authorized software development organization to inject malicious logic into a codebase or product. Supply chain attacks from approved or trusted developers are extremely difficult to detect as it is generally assumed the quality control and internal security measures of these organizations conform to best practices. In some cases the malicious logic is intentional, embedded by a disgruntled employee, programmer, or individual with an otherwise hidden agenda. In other cases, the integrity of the product is compromised by accident (e.g. by lapse in the internal security of the organization that results in a product becoming contaminated). In other cases, the developer embeds a backdoor into a product to serve some purpose, such as product support, but discovery of the backdoor results in its malicious use by adversaries.",[],adversary use privileged position authorized software development organization inject malicious logic codebase product supply chain attack approve trust developer extremely difficult detect generally assume quality control internal security measure organization conform good practice case malicious logic intentional embed disgruntled employee programmer individual hidden agenda case integrity product compromise accident e.g. lapse internal security organization result product contaminated case developer embed backdoor product serve purpose product support discovery backdoor result malicious use adversary
CAPEC-444,Development Alteration,"An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",[],adversary modify technology product component development acheive negative impact system deploy goal adversary modify system way negative impact leverage system later deploy development alteration attack include attack insert malicious logic system software modify replace hardware component attack negatively impact system development attack generally require insider access modify source code tamper hardware component product deliver user negative impact leverage later time
CAPEC-445,Malicious Logic Insertion into Product Software via Configuration Management Manipulation,"An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server.",[],adversary exploit configuration management system malicious logic insert software product build update deploy environment adversary control element include product configuration management build potentially replace modify insert code file contain malicious logic adversary control element product ongoing operational configuration management baseline potentially force client receive update system install insecure software receive update server
CAPEC-446,Malicious Logic Insertion into Product Software via Inclusion of 3rd Party Component Dependency,"An adversary conducts supply chain attacks by the inclusion of insecure 3rd party components into a technology, product, or code-base, possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer. The result is a window of opportunity for exploiting the product or software until the insecure component is discovered. This supply chain threat can result in the installation of software that introduces widespread security vulnerabilities within an organization. One example could be the inclusion of an exploitable DLL (Dynamic Link Library) included within an antivirus technology. Because software often depends upon a large number of interdependent libraries and components to be present, security holes can be introduced merely by installing COTS software that comes pre-packaged with the components required for it to operate.",[],adversary conduct supply chain attack inclusion insecure 3rd party component technology product code base possibly package malicious driver component product ship consumer acquirer result window opportunity exploit product software insecure component discover supply chain threat result installation software introduce widespread security vulnerability organization example inclusion exploitable dll dynamic link library include antivirus technology software depend large number interdependent library component present security hole introduce merely instal cots software come pre package component require operate
CAPEC-447,Design Alteration,"An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",[],adversary modify design technology product component acheive negative impact system deploy type attack goal adversary modify design system prior development start way negative impact leverage system later deploy design alteration attack differ development alteration attack design alteration attack place prior development develop adverary design alteration attack include modify system design degrade system performance cause unexpected state error general design change lead additional vulnerability attack generally require insider access modify design document spoof web communication product develop deliver user negative impact leverage later time
CAPEC-448,Embed Virus into DLL,"An adversary tampers with a DLL and embeds a computer virus into gaps between legitimate machine instructions. These gaps may be the result of compiler optimizations that pad memory blocks for performance gains. The embedded virus then attempts to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop.",[],adversary tamper dll embed computer virus gap legitimate machine instruction gap result compiler optimization pad memory block performance gain embedded virus attempt infect machine interface product possibly steal private datum eavesdrop
CAPEC-45,Buffer Overflow via Symbolic Links,"This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",[],type attack leverage use symbolic link cause buffer overflow adversary try create manipulate symbolic link file content result bound datum target software process symbolic link file potentially overflow internal buffer insufficient bound checking
CAPEC-452,Infected Hardware,"An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.",[],adversary insert malicious logic hardware typically form computer virus rootkit logic hide user hardware work scene achieve negative impact pattern attack focus hardware field operation oppose hardware development supply chain
CAPEC-456,Infected Memory,An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.,[],adversary insert malicious logic memory enable achieve negative impact logic hide user system work scene achieve negative impact pattern attack focus system field operation oppose system development supply chain
CAPEC-457,USB Memory Attacks,"An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",[],adversary load malicious code usb memory stick order infect system device plug usb drive present significant security risk business government agency give ability integrate wireless functionality usb stick possible design malware steal confidential datum sniff network monitor keystroke exfiltrate steal datum site wireless connection virus transmit usb interface specific use memory stick attack usb device sophistication expert conclude work single individual suggest state sponsorship attack perform adversary direct access target system execute mean usb drop attacks
CAPEC-458,Flash Memory Attacks,"An adversary inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device.",[],adversary insert malicious logic product technology flash board memory code base contain malicious logic attack exist integrity flash memory direct rootkit code bios chipset device
CAPEC-459,Creating a Rogue Certification Authority Certificate,"An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their ""to be signed"" parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.","['CVE-2004-2761', 'CVE-2005-4900']",adversary exploit weakness result hashing algorithm weak collision resistance generate certificate signing request csr contain collision block sign part adversary submit csr sign trust certificate authority use sign blob second certificate appear sign said certificate authority hash collision certificate different hash value sign blob work second certificate net effect adversary second x.509 certificate certification authority see sign validate certification authority
CAPEC-46,Overflow Variables and Tags,"This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.","['CVE-1999-0946', 'CVE-1999-0971']",type attack leverage use tag variable format configuration datum cause buffer overflow adversary craft malicious html page configuration file include oversized string cause overflow
CAPEC-460,HTTP Parameter Pollution (HPP),"An adversary adds duplicate HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.",[],adversary add duplicate http post parameter inject query string delimiter hpp possible override exist hardcode http parameter modify application behavior access potentially exploit uncontrollable variable bypass input validation checkpoint waf rule
CAPEC-461,Web Services API Signature Forgery Leveraging Hash Function Extension Weakness,"When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller, when constructing a request, would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. There is a practical attack against an authentication scheme of this nature that makes use of the hash function extension / padding weakness. Leveraging this weakness, an attacker, who does not know the secret token, is able to modify the parameters passed to the web service by generating their own call and still generate a legitimate signature hash (as described in the notes). Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, to compute the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work on other hash functions such as SHA1.",[],web service require callee authenticate issue token secret caller caller use sign web service call scheme caller construct request concatenate parameter pass web service provide authentication token generate hash concatenate string e.g. md5 sha1 etc hash form signature pass web service server verify origin authenticity integrity message practical attack authentication scheme nature make use hash function extension padding weakness leverage weakness attacker know secret token able modify parameter pass web service generate generate legitimate signature hash describe note iterative design hash function possible hash message length compute hash long message start initial message include padding require initial message reach multiple bit important note attack limit md5 work hash function sha1
CAPEC-462,Cross-Domain Search Timing,"An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.",[],attacker initiate cross domain http request time server response timing response leak important information happen server browser origin policy prevent attacker directly read server response absence weakness prevent attacker time response request attacker issue cross domain
CAPEC-463,Padding Oracle Crypto Attack,"An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key.",[],adversary able efficiently decrypt datum know decryption key target system leak datum padding error happen decrypt ciphertext target system leak type information padding oracle adversary able use oracle efficiently decrypt datum know decryption key issue average 128*b call padding oracle b number byte ciphertext block addition perform decryption adversary able produce valid ciphertext i.e. perform encryption padding oracle know encryption key
CAPEC-464,Evercookie,"An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.",[],attacker create persistent cookie stay present user think remove cookie store victim machine place victim clear cookie cache traditional mean inside browser operation remove cookie certain place malicious code replicate cookie place delete possible storage location victim cookie original storage location word failure delete cookie location result cookie resurrection evercookie persist different browser certain store e.g. local shared objects share different browser
CAPEC-465,Transparent Proxy Abuse,A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client.,[],transparent proxy serve intermediate client internet large intercept request originate client forward correct location proxy intercept response client forward client manner transparent client
CAPEC-466,Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy,"An attacker leverages an adversary in the middle attack (CAPEC-94) in order to bypass the same origin policy protection in the victim's browser. This active adversary in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS.",[],attacker leverage adversary middle attack capec-94 order bypass origin policy protection victim browser active adversary middle attack launch instance victim connect public wifi hot spot attacker able intercept request response victim browser non sensitive website use tls
CAPEC-467,Cross Site Identification,"An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the ""remember me"" feature to keep their session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing).",[],attacker harvest identifying information victim active session victim browser social networking site victim social networking site open tab simply remember feature session social networking site active attacker induce payload execute victim browser transparently victim initiate request social networking site e.g. available social network site api retrieve identify information victim information public attacker able harvest information context use attack user e.g. spear phishing
CAPEC-468,Generic Cross-Browser Cross-Domain Theft,An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser.,[],attacker make use cascading style sheets css injection steal datum cross domain victim browser attack work abuse standard relate loading css send cookie load css include cross domain parse return css ignore datum sense valid css descriptor find css parser
CAPEC-469,HTTP DoS,An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.,[],attacker perform flooding http level bring particular web application listen tcp ip connection denial service attack require substantially few packet send make dos hard detect equivalent syn flood http idea http session alive indefinitely repeat hundred time attack target resource depletion weakness web server software web server wait attacker response initiate http session connection thread exhaust
CAPEC-47,Buffer Overflow via Parameter Expansion,"In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.","['CVE-2001-0249', 'CVE-2006-6652']",attack target software give input adversary know modify expand size processing attack rely target software fail anticipate expand datum exceed internal limit create buffer overflow
CAPEC-470,Expanding Control over the Operating System from the Database,"An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc.",[],attacker able leverage access gain database read write datum file system compromise operate system create tunnel access host machine use access potentially attack machine network database machine traditionally sql injection attack view way gain unauthorized read access datum store database modify datum database delete datum etc data base management system dbms system include facility compromise allow attacker complete access file system operating system access host run database attacker use privileged access launch subsequent attack facility include drop command shell create user define function system level library present host machine store procedure etc
CAPEC-471,Search Order Hijacking,An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.,[],adversary exploit weakness application specification external library exploit functionality loader process load library search directory process binary reside directory exploitation preferential search order allow attacker load process load adversary rogue library legitimate library attack leverage different library different loading process forensic trail leave system registry file system incorrect library load
CAPEC-472,Browser Fingerprinting,"An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.",[],attacker carefully craft small snippet java script efficiently detect type browser potential victim web base attack need prior knowledge web browser include version browser ensure successful exploitation vulnerability have knowledge allow attacker target victim attack specifically exploit known zero day weakness type version browser victim automate process java script delivery system exploit browser consider efficient attacker supply browser fingerprinting method integrate exploit code contain java script response web page request browser
CAPEC-473,Signature Spoof,"An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.",[],attacker generate message datablock cause recipient believe message datablock generate cryptographically sign authoritative reputable source mislead victim victim operate system perform malicious action
CAPEC-474,Signature Spoofing by Key Theft,An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.,[],attacker obtain authoritative reputable signer private signature key theft use key forge signature original signer mislead victim perform action benefit attacker
CAPEC-475,Signature Spoofing by Improper Validation,An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.,['CVE-2020-0601'],adversary exploit cryptographic weakness signature verification algorithm implementation generate valid signature know key
CAPEC-476,Signature Spoofing by Misrepresentation,"An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",[],attacker exploit weakness parsing display code recipient software generate data blob contain supposedly valid signature signer identity falsely represent lead attacker manipulate recipient software victim user perform compromising action
CAPEC-477,Signature Spoofing by Mixing Signed and Unsigned Content,"An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.",[],attacker exploit underlie complexity data structure allow sign unsigned content cause unsigned datum process sign datum
CAPEC-478,Modification of Windows Service Configuration,An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. The goal of this attack is to execute a malicious binary in place of an existing service.,[],adversary exploit weakness access control modify execution parameter windows service goal attack execute malicious binary place exist service
CAPEC-479,Malicious Root Certificate,"An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.",[],adversary exploit weakness authorization install new root certificate compromised system certificate commonly establish secure tls ssl communication web browser user attempt browse website present certificate trust error message display warn user security risk depend security setting browser allow user establish connection website adversary technique avoid security warning prompt user compromised system connect https adversary control web server spoof legitimate website order collect login credential
CAPEC-48,Passing Local Filenames to Functions That Expect a URL,"This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",[],attack rely client code access local file resource instead url client browser expect url string instead receive request local file execution likely occur browser process space browser authority local file attacker send result request local file site control attack steal sensitive authentication datum local remote gain system profile information launch attack
CAPEC-480,Escaping Virtualization,"An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.",[],adversary gain access application service device privilege authorized privileged user escape confine virtualized environment adversary able access resource execute unauthorized code host environment generally privilege user run virtualize process successfully execute attack type step execute complex attack
CAPEC-481,Contradictory Destinations in Traffic Routing Schemes,"Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",[],adversary provide contradictory destination send message traffic route network domain name header available different level osi model content delivery network cdn multiple domain available contradictory domain name provide possible route traffic inappropriate destination technique call domain fronting involve different domain name sni field tls header host field http header alternative technique call domainless fronting similar sni field leave blank
CAPEC-482,TCP Flood,An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain.,[],adversary execute flooding attack tcp protocol intent deny legitimate user access service attack exploit weakness tcp protocol state information connection server need maintain
CAPEC-485,Signature Spoofing by Key Recreation,An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.,[],attacker obtain authoritative reputable signer private signature key exploit cryptographic weakness signature algorithm pseudorandom number generation use key forge signature original signer mislead victim perform action benefit attacker
CAPEC-486,UDP Flood,"An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.",[],adversary execute flooding attack udp protocol intent deny legitimate user access service consume available network bandwidth additionally firewall open port udp connection destine service open udp port mean firewall essence save connection state high packet nature udp flood overwhelm resource allocate firewall udp attack target service like dns voip utilize protocol additionally session nature udp protocol source packet easily spoof make difficult find source attack
CAPEC-487,ICMP Flood,"An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.",[],adversary execute flooding attack icmp protocol intent deny legitimate user access service consume available network bandwidth typical attack involve victim server receive icmp packet high rate wide range source address additionally session nature icmp protocol source packet easily spoof make difficult find source attack
CAPEC-488,HTTP Flood,An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.,[],adversary execute flooding attack http protocol intent deny legitimate user access service consume resource application layer web service infrastructure attack use legitimate session base http request design consume large amount server resource legitimate session attack difficult detect
CAPEC-489,SSL Flood,"An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.",[],adversary execute flooding attack ssl protocol intent deny legitimate user access service consume available resource server attack advantage asymmetric relationship processing power client processing power server create secure connection manner attacker large number https request low provisioned machine tie disproportionately large number resource server client continue renegotiate ssl connection multiply large number attack machine attack result crash loss service legitimate user
CAPEC-49,Password Brute Forcing,"An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",['CVE-2004-1143'],adversary try possible value password succeed brute force attack feasible computationally successful essentially possible password give alphabet lower case letter upper case letter number symbol etc maximum length password
CAPEC-490,Amplification,"An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.",[],adversary execute amplification size response far great request generate goal attack use relatively resource create large traffic target server execute attack adversary send request 3rd party service spoof source address target server large response generate 3rd party service send target server send large number initial request adversary generate tremendous traffic direct target great discrepancy size initial request final payload deliver target increase effectiveness attack
CAPEC-491,Quadratic Data Expansion,"An adversary exploits macro-like substitution to cause a denial of service situation due to excessive memory being allocated to fully expand the data. The result of this denial of service could cause the application to freeze or crash. This involves defining a very large entity and using it multiple times in a single entity substitution. CAPEC-197 is a similar attack pattern, but it is easier to discover and defend against. This attack pattern does not perform multi-level substitution and therefore does not obviously appear to consume extensive resources.",[],adversary exploit macro like substitution cause denial service situation excessive memory allocate fully expand datum result denial service cause application freeze crash involve define large entity multiple time single entity substitution capec-197 similar attack pattern easy discover defend attack pattern perform multi level substitution obviously appear consume extensive resource
CAPEC-492,Regular Expression Exponential Blowup,An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions.,[],adversary execute attack program use poor regular expression(regex implementation choose input result extreme situation regex typical extreme situation operate exponential time compare input size implementation nondeterministic finite automaton(nfa state machine build regex algorithm nfa allow backtracking complex regular expression
CAPEC-493,SOAP Array Blowup,"An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.",[],"adversary execute attack web service use soap message communication send large soap array declaration web service attacker force web service allocate space array element parse xml parser attacker message typically small size contain large array declaration 1,000,000 element couple array element attack target exhaustion memory resource web service"
CAPEC-494,TCP Fragmentation,"An adversary may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules of network controls, by attempting to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered.",[],adversary execute tcp fragmentation attack target intention avoid filter rule network control attempt fragment tcp packet header flag field push second fragment typically filter
CAPEC-495,UDP Fragmentation,An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.,[],attacker execute udp fragmentation attack target server attempt consume resource bandwidth cpu ip fragmentation occur ip datagram large mtu route datagram traverse typically attacker use large udp packet byte datum force fragmentation ethernet mtu byte attack variation typical udp flood enable network bandwidth consume few packet additionally potential consume server cpu resource fill memory buffer associate processing reassembling fragment packet
CAPEC-496,ICMP Fragmentation,An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.,[],attacker execute icmp fragmentation attack target intention consume resource cause crash attacker craft large number identical fragmented ip packet contain portion fragmented icmp message attacker send message target host cause host non responsive vector send fragmented icmp message target host incorrect size header cause host hang
CAPEC-497,File Discovery,"An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.",[],adversary engage probing exploration activity determine common key file exist file contain configuration security parameter target application system network knowledge pave way damaging attack
CAPEC-498,Probe iOS Screenshots,"An adversary examines screenshot images created by iOS in an attempt to obtain sensitive information. These images are used by iOS to aid in the visual transition between open applications and improve the user's experience with a device. An application can be at risk even if it properly protects sensitive information when at rest. If the application displays sensitive information on the screen, then the potential exists for iOS to unintentionally record that information in an image file. An adversary can retrieve these images either by gaining access to the image files, or by physically obtaining the device and leveraging the multitasking switcher interface.",[],adversary examine screenshot image create ios attempt obtain sensitive information image ios aid visual transition open application improve user experience device application risk properly protect sensitive information rest application display sensitive information screen potential exist ios unintentionally record information image file adversary retrieve image gain access image file physically obtain device leverage multitasking switcher interface
CAPEC-499,Android Intent Intercept,"An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.",[],adversary previously instal malicious application intercept message trusted android base application attempt achieve variety different objective include denial service information disclosure datum injection implicit intent send trusted application receive application declare appropriate intent filter intent protect permission malicious application lack attacker gain access datum contain intent intent block reach intended destination modify potentially forward
CAPEC-5,Blue Boxing,"This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions.",[],type attack old telephone switch trunk decade tone send adversary impersonate supervisor signal effect reroute usurp command line infrastructure proper contain widespread vulnerability type attack company connect globally center business process outsourcing international system operate country upgrade telco infrastructure vulnerable blue boxing blue boxing result failure system enforce strong authorization administrative function infrastructure different standard current application like web application historical lesson learn upgrade access control administrative function
CAPEC-50,Password Recovery Exploitation,An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.,['CVE-2006-3013'],attacker advantage application feature help user recover forget password order gain access system privilege original user generally password recovery scheme tend weak insecure
CAPEC-500,WebView Injection,"An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.",[],adversary previously instal malicious application inject code context web page display webview component inject code adversary able manipulate dom tree cookie page expose sensitive information launch attack web application web page
CAPEC-501,Android Activity Hijack,An adversary intercepts an implicit intent sent to launch a Android-based trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and prompt the target to enter sensitive data as if they were interacting with the trusted activity.,[],adversary intercept implicit intent send launch android base trust activity instead launch counterfeit activity place malicious activity mimic trust activity user interface prompt target enter sensitive datum interact trust activity
CAPEC-502,Intent Spoof,"An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component trusts the intent's action without verififcation, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.",[],adversary previously instal malicious application issue intent direct specific trust application component attempt achieve variety different objective include modification datum information disclosure datum injection component unintentionally export public subject type attack component trust intent action verififcation target application perform functionality adversary request help adversary achieve desire negative technical impact
CAPEC-503,WebView Exposure,"An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.",[],adversary malicious web page access application specific functionality leverage interface register webview addjavascriptinterface api interface register webview addjavascriptinterface global page load webview interface
CAPEC-504,Task Impersonation,"An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",[],adversary previously instal malicious application impersonate expected routine task attempt steal sensitive information leverage user privilege
CAPEC-505,Scheme Squatting,"An adversary, through a previously installed malicious application, registers for a URL scheme intended for a target application that has not been installed. Thereafter, messages intended for the target application are handled by the malicious application. Upon receiving a message, the malicious application displays a screen that mimics the target application, thereby convincing the user to enter sensitive information. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user as they think that they are interacting with the intended target application.",[],adversary previously instal malicious application register url scheme intend target application instal message intend target application handle malicious application receive message malicious application display screen mimic target application convince user enter sensitive information type attack obtain sensitive information e.g. credential user think interact intend target application
CAPEC-506,Tapjacking,"An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces them to tap on an attacker desired location on the screen. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.",[],adversary previously instal malicious application display interface mislead user convince tap attacker desire location screen accomplish overlay screen give appearance single interface main technique accomplish leverage transparent property allow tap screen pass visible application application run background second strategically place small object e.g. button text field visible screen appear underlying application case user convince tap screen realize application interact
CAPEC-507,Physical Theft,An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time.,[],adversary gain physical access system device theft item possession system device enable number unique attack execute provide adversary extended timeframe perform attack protection place secure sensitive information defeat adversary physical access time
CAPEC-508,Shoulder Surfing,"In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content ""over the victim's shoulder"", as implied by the name of this attack.",[],shoulder surfing attack adversary observe unaware individual keystroke screen content conversation goal obtain sensitive information motive attack obtain sensitive information target financial personal political gain insider threat perspective additional motive obtain system application credential cryptographic key shoulder surfing attack accomplish observe content victim shoulder imply attack
CAPEC-509,Kerberoasting,"Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.",[],exploitation service account leverage kerberos authentication service principal names spns adversary obtain subsequently crack hashed credential service account target exploit privilege kerberos authentication protocol center ticketing system request grant access service access request service authenticate user adversary request active directory obtain service ticket portion encrypt rc4 private key authenticate account extract local ticket save disk adversary brute force hashed value reveal target account credential
CAPEC-51,Poison Web Service Registry,"SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",[],soa web services use registry perform look schema information metadata service poison registry redirect think phishing server service requester malicious service provider provide incorrect information schema metadata delete information service provider interface
CAPEC-510,SaaS User Request Forgery,"An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, ""piggy-backing"" on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level.",[],adversary previously instal malicious application perform malicious action party software service saas application know cloud base application leverage persistent implicit trust place trust user session attack execute trusted user authenticate cloud service piggy back authenticate session exploit fact cloud service believe interact trust user successful action embed malicious application process accept target saas application execute trusted user privilege level
CAPEC-511,Infiltration of Software Development Environment,"An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.",[],attacker use common delivery mechanism email attachment removable medium infiltrate ide integrated development environment victim manufacturer intent implant malware allow attack control victim ide environment attack use access exfiltrate sensitive datum information manipulate say datum information conceal action allow aid attack meet goal future compromise recipient victim manufacture product supply chain
CAPEC-516,Hardware Component Substitution During Baselining,"An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",[],adversary access system component allocate baseline development substitute maliciously alter hardware component baseline component product development research phase lead adjustment calibration product final product contain modify component deploy perform design advantageous adversary
CAPEC-517,Documentation Alteration to Circumvent Dial-down,"An attacker with access to a manufacturer's documentation, which include descriptions of advanced technology and/or specific components' criticality, alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques, allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers, such as nations on the terrorist watch list, giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.",[],attacker access manufacturer documentation include description advanced technology and/or specific component criticality alter document circumvent dial functionality requirement alteration change interpretation implementation manufacturing technique allow advanced technology remain place technology restrict certain customer nation terrorist watch list give attacker receive end ship product access advanced technology restrict
CAPEC-518,Documentation Alteration to Produce Under-performing Systems,"An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.",[],attacker access manufacturer documentation alter description system capability intent cause error derive system requirement impact overall effectiveness capability system allow attacker advantage introduce system capability flaw system deploy
CAPEC-519,Documentation Alteration to Cause Errors in System Design,An attacker with access to a manufacturer's documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.,[],attacker access manufacturer documentation contain requirement allocation software design process maliciously alter documentation order cause error system design allow attacker advantage weakness deploy system manufacturer malicious purpose
CAPEC-52,Embedding NULL Bytes,An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).,['CVE-2004-0629'],adversary embed null byte input target software attack rely usage null valued byte string terminator environment goal certain component target software stop process input encounter null byte(s
CAPEC-520,Counterfeit Hardware Component Inserted During Product Assembly,An adversary with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.,[],adversary direct access product assembly process supply subcomponent product assembly process introduce counterfeit hardware component product assembly assembly contain counterfeit component result system specifically design malicious purpose
CAPEC-521,Hardware Design Specifications Are Altered,"An attacker with access to a manufacturer's hardware manufacturing process documentation alters the design specifications, which introduces flaws advantageous to the attacker once the system is deployed.",[],attacker access manufacturer hardware manufacturing process documentation alter design specification introduce flaw advantageous attacker system deploy
CAPEC-522,Malicious Hardware Component Replacement,"An adversary replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.",[],adversary replace legitimate hardware system faulty counterfeit tamper hardware supply chain distribution channel purpose cause malicious disruption allow additional compromise system deploy
CAPEC-523,Malicious Software Implanted,"An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.",[],attacker implant malicious software system supply chain distribution channel purpose cause malicious disruption allow additional compromise system deploy
CAPEC-524,Rogue Integration Procedures,An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.,[],attacker alter establish rogue process integration facility order insert maliciously alter component system attacker supply malicious component allow malicious disruption additional compromise system deploy
CAPEC-528,XML Flood,"An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.",[],adversary execute flood attack xml message intent deny legitimate user access web service attack accomplish send large number xml base request let service attempt parse case type attack result xml denial service xdos application unstable freeze crash
CAPEC-529,Malware-Directed Internal Reconnaissance,"Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.",[],adversary use malware similarly control application instal inside organizational perimeter gather information composition configuration security mechanism target application system network
CAPEC-53,"Postfix, Null Terminate, and Backslash","If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.",[],string pass filter kind terminal null valid alternate representation null allow adversary embed null mid string postfixe proper datum filter avoid example filter look trail slash character string insertion possible slash exist alternate encoding null mid string
CAPEC-530,Provide Counterfeit Component,"An attacker provides a counterfeit component during the procurement process of a lower-tier component supplier to a sub-system developer or integrator, which is then built into the system being upgraded or repaired by the victim, allowing the attacker to cause disruption or additional compromise.",[],attacker provide counterfeit component procurement process low tier component supplier sub system developer integrator build system upgrade repair victim allow attacker cause disruption additional compromise
CAPEC-531,Hardware Component Substitution,"An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.",[],attacker substitute test approve hardware component maliciously alter hardware component type attack carry directly system enable attacker cause disruption additional compromise
CAPEC-532,Altered Installed BIOS,"An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.",[],attacker access download update system software send maliciously alter bios victim victim supplier integrator instal allow future exploitation
CAPEC-533,Malicious Manual Software Update,"An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in their arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.",[],attacker introduce malicious code victim system alter payload software update allow additional compromise site disruption victim location manual user assist attack vary require user download run executable streamlined trick user click url attack aim penetrate specific network infrastructure rely secondary attack method achieve desire impact spamming example common method employ secondary attack vector attacker arsenal choice initial attack vector range traditional smtp pop imap spamming variety web application mechanism commonly implement chat rich html messaging user interface
CAPEC-534,Malicious Hardware Update,"An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",[],adversary introduce malicious hardware update replacement procedure allow additional compromise site disruption victim location deployment uncommon upgrade replacement occur involve hardware replaceable part upgrade replacement intend correct defect provide additional feature replace broken wear part force trick replacement good component defective corrupted component adversary leverage known defect obtain desire malicious impact
CAPEC-535,Malicious Gray Market Hardware,"An attacker maliciously alters hardware components that will be sold on the gray market, allowing for victim disruption and compromise when the victim needs replacement hardware components for systems where the parts are no longer in regular supply from original suppliers, or where the hardware components from the attacker seems to be a great benefit from a cost perspective.",[],attacker maliciously alter hardware component sell gray market allow victim disruption compromise victim need replacement hardware component system part long regular supply original supplier hardware component attacker great benefit cost perspective
CAPEC-536,Data Injected During Configuration,"An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.",[],attacker access data file process victim system inject malicious datum critical operational datum configuration recalibration cause victim system perform suboptimal manner benefit adversary
CAPEC-537,Infiltration of Hardware Development Environment,"An adversary, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.",[],adversary leverage ability manipulate component primary support system tool development production environment insert malicious software hardware and/or firmware development environment infiltration purpose alter develop hardware component system destine deployment victim organization purpose disruption compromise
CAPEC-538,Open-Source Library Manipulation,"Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",[],adversary implant malicious code open source software oss library widely distribute oss commonly download developer user incorporate software development project adversary particular system mind target implantation stage follow attack system
CAPEC-539,ASIC With Malicious Functionality,An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.,[],attacker access development environment process application specific integrated circuit asic victim system develop maintain initial deployment insert malicious functionality system purpose disruption compromise
CAPEC-54,Query System for Information,"An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",['CVE-2006-4705'],adversary aware application location possibly authorize use application probe application structure evaluate robustness submit request examine response accomplish send variant expected query hope modify query return information expected set query provide
CAPEC-540,Overread Buffers,"An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.",[],adversary attack target provide input cause application read boundary define buffer typically occur value influence start stop read set reflect position outside valid memory location buffer type attack result exposure sensitive information system crash arbitrary code execution
CAPEC-541,Application Fingerprinting,An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.,[],adversary engage fingerprinting activity determine type version application instal remote target
CAPEC-542,Targeted Malware,An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.,[],adversary develop target malware take advantage know vulnerability organizational information technology environment malware craft attack base specifically information gather technology environment successfully execute malware enable adversary achieve wide variety negative technical impact
CAPEC-543,Counterfeit Websites,"Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.",[],adversary create duplicate legitimate website user visit counterfeit site site gather information upload malware
CAPEC-544,Counterfeit Organizations,An adversary creates a false front organizations with the appearance of a legitimate supplier in the critical life cycle path that then injects corrupted/malicious information system components into the organizational supply chain.,[],adversary create false organization appearance legitimate supplier critical life cycle path inject corrupted malicious information system component organizational supply chain
CAPEC-545,Pull Data from System Resources,"An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.",[],adversary authorize ability search know system resource intention gather useful information system resource include file memory aspect target system pattern attack adversary necessarily know go find start pull datum different capec-150 adversary know look common location
CAPEC-546,Incomplete Data Deletion in a Multi-Tenant Environment,"An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",[],adversary obtain unauthorized information insecure incomplete datum deletion multi tenant environment cloud provider fail completely delete storage datum cloud tenant system resource resource allocate new potentially malicious tenant probe provide resource sensitive information
CAPEC-547,Physical Destruction of Device or Component,"An adversary conducts a physical attack a device or component, destroying it such that it no longer functions as intended.",[],adversary conduct physical attack device component destroy long function intend
CAPEC-548,Contaminate Resource,"An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. The information is exposed to individuals who are not authorized access to such information, and the information system, device, or network is unavailable while the spill is investigated and mitigated.",[],adversary contaminate organizational information system include device network cause handle information classification sensitivity authorize information expose individual authorize access information information system device network unavailable spill investigate mitigate
CAPEC-549,Local Execution of Code,"An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.",[],adversary install execute malicious code target system effort achieve negative technical impact example include rootkit ransomware spyware adware
CAPEC-55,Rainbow Table Password Cracking,"An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.",['CVE-2006-1058'],attacker get access database table hash password store use rainbow table pre computed hash chain attempt look original password original password correspond hash obtain attacker use original password gain access system
CAPEC-550,Install New Service,"When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.",[],operate system start start program call service daemon adversary install new service execute startup windows system modify registry service disguise related operate system benign software service usually run elevated privilege
CAPEC-551,Modify Existing Service,"When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.",[],operate system start start program call service daemon modify existing service break existing service enable service disabled commonly
CAPEC-552,Install Rootkit ,"An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.",[],adversary exploit weakness authentication install malware alter functionality information provide target operating system api call refer rootkit hide presence program file network connection service driver system component
CAPEC-554,Functionality Bypass,"An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.",[],adversary attack system bypass functionality intend protect system user think protection place functionality protection disable adversary
CAPEC-555,Remote Services with Stolen Credentials,"This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.",[],pattern attack involve adversary use steal credential leverage remote service rdp telnet ssh vnc log system access gain number malicious activity perform
CAPEC-556,Replace File Extension Handlers,"When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.",[],file open file handler check determine program open file file handler configuration property operate system application modify file handler give file extension arbitrary program file given extension open
CAPEC-558,Replace Trusted Executable,An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.,[],adversary exploit weakness privilege management access control replace trusted executable malicious version enable execution malware trusted executable call
CAPEC-559,Orbital Jamming,"In this attack pattern, the adversary sends disruptive signals at a target satellite using a rogue uplink station to disrupt the intended transmission. Those within the satellite's footprint are prevented from reaching the satellite's targeted or neighboring channels. The satellite's footprint size depends upon its position in the sky; higher orbital satellites cover multiple continents.",[],attack pattern adversary send disruptive signal target satellite rogue uplink station disrupt intended transmission satellite footprint prevent reach satellite target neighboring channel satellite footprint size depend position sky high orbital satellite cover multiple continent
CAPEC-560,Use of Known Domain Credentials,An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.,[],adversary guess obtain i.e. steal purchase legitimate credential e.g. userid password achieve authentication perform authorized action guise authenticated user service
CAPEC-561,Windows Admin Shares with Stolen Credentials,"An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain. Windows systems within the Windows NT family contain hidden network shares that are only accessible to system administrators. These shares allow administrators to remotely access all disk volumes on a network-connected system and further allow for files to be copied, written, and executed, along with other administrative actions. Example network shares include: C$, ADMIN$ and IPC$. If an adversary is able to obtain legitimate Windows credentials, the hidden shares can be accessed remotely, via server message block (SMB) or the Net utility, to transfer files and execute code. It is also possible for adversaries to utilize NTLM hashes to access administrator shares on systems with certain configuration and patch levels.",[],adversary guess obtain i.e. steal purchase legitimate windows administrator credential e.g. userid password access windows admin shares local machine windows domain windows system windows nt family contain hide network share accessible system administrator share allow administrator remotely access disk volume network connect system allow file copy write execute administrative action example network share include c$ admin$ ipc$. adversary able obtain legitimate windows credential hide share access remotely server message block smb net utility transfer file execute code possible adversary utilize ntlm hash access administrator share system certain configuration patch level
CAPEC-562,Modify Shared File,"An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.",[],adversary manipulate file shared location add malicious program script exploit code valid content user open share content tainted content execute
CAPEC-563,Add Malicious File to Shared Webroot,"An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured.",[],adversary add malicious content website open file share browse content web browser cause server execute content malicious content typically run context permission web server process result local system administrative privilege depend web server configure
CAPEC-564,Run Software at Logon,"Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.",[],operate system allow logon script run specific user user logon system adversary access script insert additional code logon script code allow maintain persistence laterally enclave execute time affect user user logon computer modify logon script effectively bypass workstation enclave firewall depend access configuration logon script local credential remote administrative account necessary
CAPEC-565,Password Spraying,"In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout.",[],password spray attack adversary try small list e.g. common expected password match target complexity policy know list user account gain valid credential adversary try particular password user account move password list approach assist adversary remain undetected avoid rapid frequent account lockout adversary reattempt process additional password time pass prevent induce lockout
CAPEC-568,Capture Credentials via Keylogger,"An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.",[],adversary deploy keylogger effort obtain credential directly system user capture keystroke user adversary analyze datum determine string likely password credential relate information
CAPEC-569,Collect Data as Provided by Users,"An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.",[],attacker leverage tool device program obtain specific information provide user target system information need attacker launch follow attack attack different social engineering adversary trick deceive user instead adversary put mechanism place capture information user legitimately enter system deploy keylogger perform uac prompt wrap windows default credential provider example interaction
CAPEC-57,Utilizing REST's Trust in the System Resource to Obtain Sensitive Data,This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.,[],attack utilize rest(representational state transfer)-style application trust system resource environment obtain sensitive datum ssl terminate
CAPEC-571,Block Logging to Central Repository,"An adversary may attempt to block indicators from leaving the host machine. In the case of network based reporting of indicators, an adversary may block traffic associated with reporting to prevent central station analysis. This may be accomplished by many means such as stopping a local process to creating a host-based firewall rule to block traffic to a specific server.",[],adversary attempt block indicator leave host machine case network base reporting indicator adversary block traffic associate reporting prevent central station analysis accomplish mean stop local process create host base firewall rule block traffic specific server
CAPEC-572,Artificially Inflate File Sizes,An adversary modifies file contents by adding data to files for several reasons. Many different attacks could “follow” this pattern resulting in numerous outcomes. Adding data to a file could also result in a Denial of Service condition for devices with limited storage capacity.,[],adversary modify file content add datum file reason different attack follow pattern result numerous outcome add datum file result denial service condition device limited storage capacity
CAPEC-573,Process Footprinting,"An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",[],adversary exploit functionality mean identify information currently run process target system authorized user know process run target system adversary learn target environment means malicious behavior
CAPEC-574,Services Footprinting,"An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include ""sc"" and ""tasklist/svc"" using Tasklist, and ""net start"" using Net.",[],adversary exploit functionality mean identify information service target system authorized user know service register target system adversary learn target environment means malicious behavior depend operate system command obtain service information include sc tasklist svc tasklist net start net
CAPEC-575,Account Footprinting,"An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: ""net user"" and ""dsquery"".",[],adversary exploit functionality mean identify information domain account permission target system authorized user know account register target system adversary inform target malicious behavior example windows command acquire information net user dsquery
CAPEC-576,Group Permission Footprinting,"An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is ""net localgroup"".",[],adversary exploit functionality mean identify information user group permission target system authorized user know user permission register target system adversary inform target malicious behavior example windows command list local group net localgroup
CAPEC-577,Owner Footprinting,"An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is ""dir /A ntuser.dat"". Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",[],adversary exploit functionality mean identify information primary user target system authorized user example review login file modification time know owner use target system adversary inform target malicious behavior example windows command accomplish dir /a ntuser.dat display modify time user ntuser.dat file run root folder user time synonymous time user log
CAPEC-578,Disable Security Software,"An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",[],adversary exploit weakness access control disable security tool detection occur form kill process delete registry key tool start run time delete log file method
CAPEC-579,Replace Winlogon Helper DLL,"Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.",[],winlogon windows perform logon action windows system prior windows vista registry key modify cause winlogon load dll startup adversary advantage feature load adversarial code startup
CAPEC-58,Restful Privilege Elevation,"Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side. The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server.",[],rest use standard http delete style permission method necessarily correlate generally end program strict interpretation http method mean http service delete information server access control mechanism logic mean service properly acl'd application service implementation follow guideline http request easily execute delete update server attacker identify http url http://victimsite updateorder call program update order database resource url idempotent request submit multiple time attacker additionally attacker able exploit url publish method actually perform update instead merely retrieve datum result malicious inadvertent altering datum server
CAPEC-580,System Footprinting,An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.,[],adversary engage active probing exploration activity determine security information remote target system time adversary rely remote application probe system configuration
CAPEC-581,Security Software Footprinting,Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.,[],adversary attempt listing security tool instal system configuration include security relate system feature build firewall anti spyware party security software
CAPEC-582,Route Disabling,"An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an ""Internet kill switch"" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.",[],adversary disable network route target goal completely sever communication channel entity result major error use internet kill switch control critical infrastructure attack pattern differ obstruction pattern target route oppose datum pass route
CAPEC-583,Disabling Network Hardware,"In this attack pattern, an adversary physically disables networking hardware by powering it down or disconnecting critical equipment. Disabling or shutting off critical system resources prevents them from performing their service as intended, which can have direct and indirect consequences on other systems. This attack pattern is considerably less technical than the selective blocking used in most obstruction attacks.",[],attack pattern adversary physically disable network hardware power disconnect critical equipment disable shut critical system resource prevent perform service intend direct indirect consequence system attack pattern considerably technical selective blocking obstruction attack
CAPEC-584,BGP Route Disabling,"An adversary suppresses the Border Gateway Protocol (BGP) advertisement for a route so as to render the underlying network inaccessible. The BGP protocol helps traffic move throughout the Internet by selecting the most efficient route between Autonomous Systems (AS), or routing domains. BGP is the basis for interdomain routing infrastructure, providing connections between these ASs. By suppressing the intended AS routing advertisements and/or forcing less effective routes for traffic to ASs, the adversary can deny availability for the target network.",[],adversary suppress border gateway protocol bgp advertisement route render underlying network inaccessible bgp protocol help traffic internet select efficient route autonomous systems routing domain bgp basis interdomain routing infrastructure provide connection ass suppress intended routing advertisement and/or force effective route traffic ass adversary deny availability target network
CAPEC-585,DNS Domain Seizure,"In this attack pattern, an adversary influences a target's web-hosting company to disables a target domain. The goal is to prevent access to the targeted service provided by that domain. It usually occurs as the result of civil or criminal legal interventions.",[],attack pattern adversary influence target web host company disables target domain goal prevent access target service provide domain usually occur result civil criminal legal intervention
CAPEC-586,Object Injection,"An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",[],adversary attempt exploit application inject additional malicious content processing serialize object developer leverage serialization order convert datum state static binary format save disk transfer network object deserialize need recover data state inject malformed object vulnerable application adversary potentially compromise application manipulate deserialization process result number unwanted outcome include remote code execution
CAPEC-587,Cross Frame Scripting (XFS),This attack pattern combines malicious Javascript and a legitimate webpage loaded into a concealed iframe. The malicious Javascript is then able to interact with a legitimate webpage in a manner that is unknown to the user. This attack usually leverages some element of social engineering in that an attacker must convinces a user to visit a web page that the attacker controls.,[],attack pattern combine malicious javascript legitimate webpage load conceal iframe malicious javascript able interact legitimate webpage manner unknown user attack usually leverage element social engineering attacker convince user visit web page attacker control
CAPEC-588,DOM-Based XSS,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",[],type attack form cross site scripting xss malicious script insert client html parse web browser content serve vulnerable web application include script code manipulate document object model dom script code properly validate input perform proper output encoding create opportunity adversary inject malicious script launch xss attack key distinction xss attack dom base attack xss attack malicious script run vulnerable web page initially load dom base attack execute page load distinction dom base attack case malicious script send vulnerable web server attack like guarantee bypass server filtering attempt protect user
CAPEC-589,DNS Blocking,"An adversary intercepts traffic and intentionally drops DNS requests based on content in the request. In this way, the adversary can deny the availability of specific services or content to the user even if the IP address is changed.",[],adversary intercept traffic intentionally drop dns request base content request way adversary deny availability specific service content user ip address change
CAPEC-59,Session Credential Falsification through Prediction,This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.,"['CVE-2006-6969', 'CVE-2001-1534']",attack target predictable session id order gain privilege attacker predict session id transaction perform spoofing session hijacking
CAPEC-590,IP Address Blocking,An adversary performing this type of attack drops packets destined for a target IP address. The aim is to prevent access to the service hosted at the target IP address.,[],adversary perform type attack drop packet destine target ip address aim prevent access service host target ip address
CAPEC-591,Reflected XSS,"This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is ""reflected"" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.",[],type attack form cross site scripting xss malicious script reflect vulnerable web application execute victim browser process start adversary deliver malicious script victim convince victim send script vulnerable web application
CAPEC-592,Stored XSS,"This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly ""stored"" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines.",[],type attack form cross site scripting xss malicious script persistenly store datum storage vulnerable web application initially present adversary vulnerable web application malicious script incorrectly consider valid input properly encode web application victim convince use web application way create response include malicious script response subsequently send victim malicious script execute victim browser launch successful store xss attack adversary look place store input datum generation response involve element expect host script image tag < img > addition event attibute onload onmouseover element subject input validation output encoding content filtering checking routine
CAPEC-593,Session Hijacking,This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.,[],type attack involve adversary exploit weakness application use session perform authentication adversary able steal manipulate active session use gain unathorized access application
CAPEC-594,Traffic Injection,"An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.",[],adversary inject traffic target network connection adversary able degrade disrupt connection potentially modify content flooding attack adversary focus exhaust resource instead adversary craft specific input affect system particular way
CAPEC-595,Connection Reset,"In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.",[],attack pattern adversary inject connection reset packet end target connection attacker able target and/or destination server sever connection have directly filter traffic
CAPEC-596,TCP RST Injection,An adversary injects one or more TCP RST packets to a target after the target has made a HTTP GET request. The goal of this attack is to have the target and/or destination web server terminate the TCP connection.,[],adversary inject tcp rst packet target target http request goal attack target and/or destination web server terminate tcp connection
CAPEC-597,Absolute Path Traversal,"An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as "".."" to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.",[],adversary access file system resource directly application logic use file absolute path navigation mechanism extend range access inappropriate area file system goal adversary access directory file intend restrict access
CAPEC-598,DNS Spoofing,"An adversary sends a malicious (""NXDOMAIN"" (""No such domain"") code, or DNS A record) response to a targets route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the targets DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the targets infrastructure uses.",[],adversary send malicious nxdomain domain code dns record response target route request legitimate resolver technique require path path device monitor respond target dns request attack differ bgp tampering directly respond request target instead pollute routing target infrastructure use
CAPEC-599,Terrestrial Jamming,"In this attack pattern, the adversary transmits disruptive signals in the direction of the target consumer-level satellite dish (as opposed to the satellite itself). The transmission disruption occurs in a more targeted range. Portable terrestrial jammers have a range of 3-5 kilometers in urban areas and 20 kilometers in rural areas. This technique requires a terrestrial jammer that is more powerful than the frequencies sent from the satellite.",[],attack pattern adversary transmit disruptive signal direction target consumer level satellite dish oppose satellite transmission disruption occur targeted range portable terrestrial jammer range kilometer urban area kilometer rural area technique require terrestrial jammer powerful frequency send satellite
CAPEC-6,Argument Injection,An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.,[],attacker change behavior state target application inject datum command syntax target use non validated non filtered argument expose service method
CAPEC-60,Reusing Session IDs (aka Session Replay),This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.,"['CVE-1999-0428', 'CVE-2002-0258']",attack target reuse valid session id spoof target system order gain privilege attacker try reuse steal session id previously transaction perform spoofing session hijacking type attack session replay
CAPEC-600,Credential Stuffing,"An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.",[],adversary try know username password combination different system application service gain additional authenticated access credential stuffing attack rely fact user leverage username password combination multiple system application service
CAPEC-601,Jamming,"An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.",[],adversary use radio noise signal attempt disrupt communication intentionally overwhelm system resource illegitimate traffic service deny legitimate traffic authorized user
CAPEC-603,Blockage,An adversary blocks the delivery of an important system resource causing the system to fail or stop working.,[],adversary block delivery important system resource cause system fail stop work
CAPEC-604,Wi-Fi Jamming,"In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.",[],attack scenario attacker actively transmit wi fi channel prevent user transmit receive datum target wi fi network know technique perform attack example attacker flood wi fi access point e.g. retransmission device deauthentication frame method transmit high level noise rf band wi fi network
CAPEC-605,Cellular Jamming,"In this attack scenario, the attacker actively transmits signals to overpower and disrupt the communication between a cellular user device and a cell tower. Several existing techniques are known in the open literature for this attack for 2G, 3G, and 4G LTE cellular technology. For example, some attacks target cell towers by overwhelming them with false status messages, while others introduce high levels of noise on signaling channels.",[],attack scenario attacker actively transmit signal overpower disrupt communication cellular user device cell tower exist technique know open literature attack g g g lte cellular technology example attack target cell tower overwhelm false status message introduce high level noise signaling channel
CAPEC-606,Weakening of Cellular Encryption,"An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode).",[],attacker control cellular rogue base station cooperation malicious mobile network operator force mobile device e.g. retransmission device use encryption a5/0 mode use easily breakable encryption a5/1 a5/2 mode
CAPEC-607,Obstruction,"An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or even to fail.",[],attacker obstruct interaction system component interrupt disable interaction adversary force system degraded state fail
CAPEC-608,Cryptanalysis of Cellular Encryption,"The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices.",[],use cryptanalytic technique derive cryptographic key effectively defeat cellular encryption reveal traffic content cellular encryption algorithm a5/1 a5/2 specify gsm use know vulnerable attack commercial tool available execute attack decrypt mobile phone conversation real time new encryption algorithm use umts lte strong currently believe vulnerable type attack note attacker cellular rogue base station force use weak cellular encryption new mobile device
CAPEC-609,Cellular Traffic Intercept,"Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.",[],cellular traffic voice datum mobile device retransmission device intercept numerous method malicious actor deploy cellular tower equipment intercept cellular traffic surreptitiously additionally government agency adversary malicious actor intercept cellular traffic telecommunication backbone mobile traffic transmit
CAPEC-61,Session Fixation,"The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",['CVE-2004-2182'],attacker induce client establish session target software session identifier provide attacker user successfully authenticate target software attacker use privileged session identifier transaction attack leverage fact target software rely client generate session identifier maintain session identifier privilege elevation
CAPEC-610,Cellular Data Injection,Adversaries inject data into mobile technology traffic (data flows or signaling data) to disrupt communications or conduct additional surveillance operations.,[],adversary inject datum mobile technology traffic data flow signaling datum disrupt communication conduct additional surveillance operation
CAPEC-611,BitSquatting,"An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.",[],adversary register domain bit different trust domain bitsquatting attack leverage random error memory direct internet traffic adversary control destination bitsquatting require exploitation complicated reverse engineering operating system architecture agnostic experimental observation bitsquatting popular website redirect non trivial amount internet traffic malicious entity
CAPEC-612,WiFi MAC Address Tracking,"In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.",[],attack scenario attacker passively listen wifi message log associate media access control mac address address intend unique wireless device configure change software attacker able associate mac address particular user set user example attend public event attacker scan mac address track user future
CAPEC-613,WiFi SSID Tracking,"In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future.",[],attack scenario attacker passively listen wifi management frame message contain service set identifier ssid wifi network message frequently transmit wifi access point e.g. retransmission device client access network e.g. handset mobile device attacker able associate ssid particular user set user example attend public event attacker scan ssid track user future
CAPEC-614,Rooting SIM Cards,"SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse.",[],sim card de facto trust anchor mobile device worldwide card protect mobile identity subscriber associate device phone number increasingly store payment credential example nfc enable phone mobile wallet attack leverage air ota update deploy cryptographically secure sms message deliver executable code sim crack des key attacker send properly sign binary sms message device treat java applet execute sim applet allow send sms change voicemail number query phone location predefine function capability provide plenty potential abuse
CAPEC-615,Evil Twin Wi-Fi Attack,"Adversaries install Wi-Fi equipment that acts as a legitimate Wi-Fi network access point. When a device connects to this access point, Wi-Fi data traffic is intercepted, captured, and analyzed. This also allows the adversary to use ""adversary-in-the-middle"" (CAPEC-94) for all communications.",[],adversary install wi fi equipment act legitimate wi fi network access point device connect access point wi fi datum traffic intercept capture analyze allow adversary use adversary middle capec-94 communication
CAPEC-616,Establish Rogue Location,"An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.",[],adversary provide malicious version resource location similar expected location legitimate resource establish rogue location adversary wait victim visit location access malicious resource
CAPEC-617,Cellular Rogue Base Station,"In this attack scenario, the attacker imitates a cellular base station with their own ""rogue"" base station equipment. Since cellular devices connect to whatever station has the strongest signal, the attacker can easily convince a targeted cellular device (e.g. the retransmission device) to talk to the rogue base station.",[],attack scenario attacker imitate cellular base station rogue base station equipment cellular device connect station strong signal attacker easily convince target cellular device e.g. retransmission device talk rogue base station
CAPEC-618,Cellular Broadcast Message Request,"In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence or absence of that message, an attacker could verify that the target is in (or not in) a given location.",[],attack scenario attacker use knowledge target mobile phone number i.e. number associate sim retransmission device cause cellular network send broadcast message alert mobile device network know cell tower target mobile device attach broadcast message send location area code lac target currently locate trigger cellular broadcast message listen presence absence message attacker verify target give location
CAPEC-619,Signal Strength Tracking,"In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.",[],attack scenario attacker passively monitor signal strength target cellular rf signal wifi rf signal use strength signal directional antenna and/or multiple listening point identify source location signal obtain signal target accomplish multiple technique cellular broadcast message request use imsi tracking wifi mac address tracking
CAPEC-62,Cross Site Request Forgery,"An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply ""riding"" the existing session cookie.",[],attacker craft malicious web link distribute web page email etc typically target manner hope induce user click link execute malicious action party application successful action embed malicious link process accept target application user privilege level type attack leverage persistence implicit trust place user session cookie web application today architecture user authenticate application session cookie create user system follow transaction session authenticate cookie include potential action initiate attacker simply ride exist session cookie
CAPEC-620,Drop Encryption Level,"An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.",[],attacker force encryption level lower enable successful attack encrypt datum
CAPEC-621,Analysis of Packet Timing and Sizes,"An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients).",[],attacker intercept log encrypt transmission purpose analyze metadata packet timing size actual datum encrypt metadata reveal valuable information attacker note attack applicable voip datum application datum especially interactive app require precise timing low latency e.g. thin client
CAPEC-622,Electromagnetic Side-Channel Attack,"In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing). This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack.",[],attack scenario attacker passively monitor electromagnetic emanation produce target electronic device unintentional effect processing emanation attacker derive information datum process e.g. attacker recover cryptographic key monitor emanation associate cryptographic processing style attack require proximal access device attack demonstrate public conference work distance foot significant study determine maximum practical distance attack attack passive nearly impossible detect target device continue operate normal successful attack
CAPEC-623,Compromising Emanations Attack,"Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing.",[],compromising emanation ce define unintentional signal attacker intercept analyze disclose information process target equipment commercial mobile device retransmission device display button microchip radio emit mechanical emission form sound vibration capture emission help adversary understand device
CAPEC-624,Hardware Fault Injection,"The adversary uses disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior in electronic devices. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",[],adversary use disruptive signal event e.g. electromagnetic pulse laser pulse clock glitch etc cause faulty behavior electronic device perform control manner device perform cryptographic operation faulty behavior exploit derive secret key information
CAPEC-625,Mobile Device Fault Injection,"Fault injection attacks against mobile devices use disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information. Although this attack usually requires physical control of the mobile device, it is non-destructive, and the device can be used after the attack without any indication that secret keys were compromised.",[],fault injection attack mobile device use disruptive signal event e.g. electromagnetic pulse laser pulse clock glitch etc cause faulty behavior perform control manner device perform cryptographic operation faulty behavior exploit derive secret key information attack usually require physical control mobile device non destructive device attack indication secret key compromise
CAPEC-626,Smudge Attack,Attacks that reveal the password/passcode pattern on a touchscreen device by detecting oil smudges left behind by the user’s fingers.,[],attack reveal password passcode pattern touchscreen device detect oil smudge leave user finger
CAPEC-627,Counterfeit GPS Signals,"An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.",[],adversary attempt deceive gps receiver broadcast counterfeit gps signal structure resemble set normal gps signal spoofed signal structure way cause receiver estimate position actually locate different time determine adversary
CAPEC-628,Carry-Off GPS Attack,"A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",[],common form gps spoofing attack commonly term carry attack begin adversary broadcast signal synchronize genuine signal observe target receiver power counterfeit signal gradually increase draw away genuine signal time adversary carry target away intended destination location choose adversary
CAPEC-629,Unauthorized Use of Device Resources,"An adversary that has previously obtained unauthorized access to certain device resources, uses that access to obtain information such as location and network information.",[],adversary previously obtain unauthorized access certain device resource use access obtain information location network information
CAPEC-63,Cross-Site Scripting (XSS),"An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",[],adversary embed malicious script content serve web browser goal attack target software client browser execute script user privilege level attack type exploit program vulnerability bring allow remote host execute code script web browser example simple security control place remote attacker allow execute script inject user generate content like bulletin board control bypass attack difficult end user detect
CAPEC-630,TypoSquatting,"An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.",[],adversary register domain character different trust domain typosquatting attack take advantage instance user mistype url e.g. www.goggle.com visually verify url click e.g. phishing attack result user direct adversary control destination typosquatting require attack trust domain complicated reverse engineering
CAPEC-631,SoundSquatting,"An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.",[],adversary register domain sound trusted domain different spelling soundsquatting attack take advantage user confusion word direct internet traffic adversary control destination soundsquatting require attack trust domain complicated reverse engineering
CAPEC-632,Homograph Attack via Homoglyphs,"An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.","['CVE-2012-0584', 'CVE-2009-0652', 'CVE-2005-0233', 'CVE-2005-0234', 'CVE-2005-0235', 'CVE-2005-0236', 'CVE-2005-0237', 'CVE-2005-0238']",adversary register domain contain homoglyph lead register domain appear trust domain homograph attack leverage fact different character character set look user homograph attack generally combine attack phishing attack order direct internet traffic adversary control destination
CAPEC-633,Token Impersonation,"An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.",[],adversary exploit weakness authentication create access token equivalent impersonate different entity associate process thread impersonated token action cause downstream user decision action base assumed identity response block adversary
CAPEC-634,Probe Audio and Video Peripherals,"The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.",[],adversary exploit target system audio video functionality malware schedule task goal capture sensitive information target financial personal political gain accomplish collect communication datum party use peripheral device e.g. microphone webcam application audio video capability e.g. skype system
CAPEC-635,Alternative Execution Due to Deceptive Filenames,"The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.",[],extension file context determine application open use attacker cause alternative application able execute malicious code cause denial service expose sensitive information
CAPEC-636,Hiding Malicious Data or Code within Files,"Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.",[],file operate system complex format allow storage datum addition content metadata file cache thumbnail image file utility invoke particular way data visible normal use file possible attacker store malicious datum code facility difficult discover
CAPEC-637,Collect Data from Clipboard,"The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",[],adversary exploit application allow copying sensitive datum information collect information copy clipboard datum copy clipboard access application malware build exfiltrate log clipboard content periodic basis way adversary aim garner information unauthorized
CAPEC-638,Altered Component Firmware,"An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.",[],adversary exploit system feature and/or improperly protect firmware hardware component hard disk drives hdd goal execute malicious code component master boot record mbr conduct type attack entail adversary infect target firmware alter malware known tool payload malware execute mbr modify include instruction execute payload desire interval system boot successful attack obtain persistence victim system operate system reinstall and/or component format datum erase
CAPEC-639,Probe System Files,"An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.",[],adversary obtain unauthorized information improperly protect file application store sensitive information file protect proper access control adversary access file search sensitive information
CAPEC-64,Using Slashes and URL Encoding Combined to Bypass Validation Logic,"This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",['CVE-2001-1335'],attack target encoding url combine encoding slash character attacker advantage multiple way encode url abuse interpretation url url contain special character need special syntax handling order interpret special character represent percentage character follow digit represent octet code original character hex code instance ascii space character represent refer escape ending percent encoding server decode url request restrict access url path validate filter url request receive attacker try craft url sequence special character interpret server equivalent forbid url difficult protect attack url contain format encoding utf-8 encoding unicode encoding etc
CAPEC-640,Inclusion of Code in Existing Process,"The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, and more.",[],adversary take advantage bug application fail verify integrity run process execute arbitrary code address space separate live process adversary use run code context process try access process memory system network resource etc goal attack evade detection defense escalate privilege mask malicious code exist legitimate process example approach include limit dynamic link library dll injection portable executable injection thread execution hijacking ptrace system call vdso hijacking function hooking
CAPEC-641,DLL Side-Loading,"An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",[],adversary place malicious version dynamic link library dll windows winsxs directory trick operate system load malicious dll instead legitimate dll program specify location dll load use winsxs manifest dll redirection windows search predefined set directory locate file application improperly specify required dll winsxs manifest explicit characteristic dll load vulnerable loading
CAPEC-642,Replace Binaries,"Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.",[],adversary know certain binary regularly execute normal processing binary protect appropriate file system permission possible replace malware malware execute high system permission level variation pattern discover self extract installation package unpack binary directory weak file permission clean appropriately binary replace malware execute
CAPEC-643,Identify Shared Files/Directories on System,"An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.",[],adversary discover connection system exploit target system standard practice reveal searchable common area identification share folder drive system adversary goal locate collect sensitive information file map potential route lateral movement network
CAPEC-644,Use of Captured Hashes (Pass The Hash),An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential (e.g. userID and password) hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.,[],adversary obtain i.e. steal purchase legitimate windows domain credential e.g. userid password hash value access system domain leverage lan man lm and/or nt lan man ntlm authentication protocol
CAPEC-645,Use of Captured Tickets (Pass The Ticket),"An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",[],adversary use steal kerberos ticket access system resource leverage kerberos authentication protocol kerberos authentication protocol center ticketing system request grant access service access request service adversary obtain ticket e.g. service ticket ticket granting ticket silver ticket golden ticket authenticate system resource need account credential depend ticket obtain adversary able access particular resource generate tgt account active directory domain
CAPEC-646,Peripheral Footprinting,"Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.",[],adversary attempt obtain information attach peripheral device component connect computer system example include discover presence ios device search backup analyze windows registry determine usb device connect infect victim system malware report usb device connect allow adversary gain additional insight system network environment useful construct attack
CAPEC-647,Collect Data from Registries,"An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",[],adversary exploit weakness authorization gather system specific datum sensitive information registry e.g. windows registry mac plist contain information system configuration software operate system security adversary leverage information gather order carry attack
CAPEC-648,Collect Data from Screen Capture,"An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",[],adversary gather sensitive information exploit system screen capture functionality screenshot adversary aim happen screen course operation adversary leverage information gather order carry attack
CAPEC-649,Adding a Space to a File Extension,"An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",[],adversary add space character end file extension take advantage application properly neutralize trailing special element file name extra space difficult user notice affect default application operate file leverage adversary control execution
CAPEC-65,Sniff Application Code,"An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",[],adversary passively sniff network communication capture application code bind authorized client obtain use reverse engineering glean sensitive information exploit trust relationship client server code belong dynamic update client patch apply client component interaction client authorize communicate server
CAPEC-650,Upload a Web Shell to a Web Server,"By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a ""gateway"" to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.",[],exploit insufficient permission possible upload web shell web server way execute remotely shell capability act gateway underlying web server shell execute high permission level web server provide ability execute malicious code elevated level
CAPEC-651,Eavesdropping,"An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.",[],adversary intercept form communication e.g. text audio video way software e.g. microphone audio recording application hardware e.g. record equipment physical mean e.g. physical proximity goal eavesdropping typically gain unauthorized access sensitive information target financial personal political gain eavesdropping different sniffing attack place network base communication channel e.g. ip traffic instead entail listen raw audio source conversation party
CAPEC-652,Use of Known Kerberos Credentials,"An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",[],adversary obtain i.e. steal purchase legitimate kerberos credential e.g. kerberos service account userid password kerberos tickets goal achieve authenticate access additional system application service domain
CAPEC-653,Use of Known Windows Credentials,"An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows domain credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the domain, under the guise of an authenticated user or service. Attacks leveraging trusted Windows credentials typically result in the adversary laterally moving within the local Windows network, since users are often allowed to login to systems/applications within the domain using their Windows domain password. This domain authentication can occur directly (user typing in their password or PIN) or via Single Sign-On (SSO) or cloud-based authentication, which often don't verify the authenticity of the user's input.",[],adversary guess obtain i.e. steal purchase legitimate windows domain credential e.g. userid password achieve authentication perform authorized action domain guise authenticate user service attack leverage trust windows credential typically result adversary laterally move local windows network user allow login system application domain windows domain password domain authentication occur directly user type password pin single sign sso cloud base authentication verify authenticity user input
CAPEC-654,Credential Prompt Impersonation,"An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.",[],adversary previously instal malicious application impersonate credential prompt attempt steal user credential
CAPEC-655,Avoid Security Tool Identification by Adding Data,"An adversary adds data to a file to increase the file size beyond what security tools are capable of handling in an attempt to mask their actions.
In addition to this, adding data to a file also changes the file's hash, frustrating security tools that look for known bad files by their hash.",[],"adversary add datum file increase file size security tool capable handle attempt mask action 
 addition add datum file change file hash frustrate security tool look know bad file hash"
CAPEC-656,Voice Phishing,"An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a ""cold call"" or by the victim if calling an illegitimate telephone number.",[],adversary target user phishing attack purpose solicit account password sensitive information user voice phishing variation phishing social engineering technique attack initiate voice email user entice provide sensitive information adversary masquerade legitimate employee alleged organization voice phishing attack deviate standard phishing attack user typically interact compromise website provide sensitive information instead provide information verbally voice phishing attack initiate adversary form cold victim call illegitimate telephone number
CAPEC-657,Malicious Automated Software Update via Spoofing,"An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.","['CVE-2006-3976', 'CVE-2006-3977']",attackers use identify content spoofing trick client perform automate software update malicious source malicious automate software update leverage spoofing include content identity spoofing protocol spoofing content identity spoofing attack trigger update software embed script mechanism malicious web page masquerade legitimate update source scripting mechanism communicate software component trigger update location specify attacker server result client believe legitimate software update available instead download malicious update attacker
CAPEC-66,SQL Injection,"This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",['CVE-2006-5525'],attack exploit target software construct sql statement base user input attacker craft input string target software construct sql statement base input result sql statement perform action application intend sql injection result failure application appropriately validate input
CAPEC-660,Root/Jailbreak Detection Evasion via Hooking,"An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to ""hook"" code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.",[],adversary force non restricted mobile application load arbitrary code code file hooking goal evade root jailbreak detection mobile device user root jailbreak device order gain administrative control mobile operate system and/or install party mobile application provide authorized application store e.g. google play store apple app store adversary leverage capability escalate privilege bypass access control legitimate application mobile application check mobile device rooted jailbroken prior authorized use application adversary able hook code order circumvent check successfully evade root jailbreak detection allow adversary execute administrative command obtain confidential datum impersonate legitimate user application
CAPEC-661,Root/Jailbreak Detection Evasion via Debugging,"An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",[],adversary insert debugger program entry point mobile application modify application binary goal evade root jailbreak detection mobile device user root jailbreak device order gain administrative control mobile operate system and/or install party mobile application provide authorized application store e.g. google play store apple app store root jailbreake mobile device provide user access system debugger disassembler leverage exploit application dump application memory runtime order remove bypass signature verification method allow adversary evade root jailbreak detection mechanism result execution administrative command obtain confidential datum impersonate legitimate user application
CAPEC-662,Adversary in the Browser (AiTB),"An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints. This attack first requires the adversary to trick the victim into installing a Trojan Horse application on their system, such as a malicious web browser plugin, which the adversary then leverages to mount the attack. The victim interacts with a web application, such as a banking website, in a normal manner and under the assumption that the connection is secure. However, the adversary can now alter and/or reroute traffic between the client application (e.g., web browser) and the coinciding endpoint, while simultaneously displaying intended transactions and data back to the user. The adversary may also be able to glean cookies, HTTP sessions, and SSL client certificates, which can be used to pivot into an authenticated intranet. Identifying AITB is often difficult because these attacks are successful even when security mechanisms such as SSL/PKI and multifactor authentication are present, since they still function as intended during the attack.",[],adversary exploit security vulnerability inherent functionality web browser order manipulate traffic endpoint attack require adversary trick victim instal trojan horse application system malicious web browser plugin adversary leverage mount attack victim interact web application banking website normal manner assumption connection secure adversary alter and/or reroute traffic client application e.g. web browser coincide endpoint simultaneously display intended transaction datum user adversary able glean cookie http session ssl client certificate pivot authenticated intranet identify aitb difficult attack successful security mechanism ssl pki multifactor authentication present function intend attack
CAPEC-663,Exploitation of Transient Instruction Execution,"An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",[],adversary exploit hardware design flaw cpu implementation transient instruction execution expose sensitive datum bypass subvert access control restrict resource typically adversary conduct covert channel attack target non discarded microarchitectural change cause transient execution speculative execution branch prediction instruction pipelining and/or order execution transient execution result serie instruction gadget construct covert channel access transfer secret datum
CAPEC-664,Server Side Request Forgery,"An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server’s internal network, or to external third parties. If successful, the adversary’s request will be made with the server’s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server’s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.",[],adversary exploit improper input validation submit maliciously craft input target application run server goal force server request web service run server internal network external party successful adversary request server privilege level bypass authentication control ultimately allow adversary access sensitive datum execute command server network external request steal identity server server request forgery attack differ cross site request forgery attack target server csrf attack exploit insecure user authentication mechanism perform unauthorized action user behalf
CAPEC-665,Exploitation of Thunderbolt Protection Flaws,"An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.",[],adversary leverage firmware weakness thunderbolt protocol compute device manipulate thunderbolt controller firmware order exploit vulnerability implementation authorization verification scheme thunderbolt protection mechanism gain physical access target device adversary conduct high level firmware manipulation victim thunderbolt controller spi serial peripheral interface flash use spi programing device external thunderbolt device typically target device boot successful allow adversary modify memory subvert authentication mechanism spoof identity content extract datum memory target device currently major vulnerability exist thunderbolt protocol attack vector note execution flow
CAPEC-666,BlueSmacking,An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.,[],adversary use bluetooth flooding transfer large packet bluetooth enable device l2cap protocol goal create dos. attack carry close proximity bluetooth enable device
CAPEC-667,Bluetooth Impersonation AttackS (BIAS),An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.,[],adversary disguise mac address bluetooth enable device exist active trusted connection authenticate successfully adversary perform malicious action target bluetooth device depend target capability
CAPEC-668,Key Negotiation of Bluetooth Attack (KNOB),"An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",[],adversary exploit flaw bluetooth key negotiation allow decrypt information send device communicate bluetooth adversary use adversary middle setup modify packet send device authentication process specifically entropy bit knowledge number entropy bit allow attacker easily decrypt information pass line communication
CAPEC-669,Alteration of a Software Update,"An adversary with access to an organization’s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software’s normal functionality.",[],adversary access organization software update infrastructure insert malware content outgoing update field system wide range malicious effect possible level access adversary alter software update perform specific malicious act include grant adversary control software normal functionality
CAPEC-67,String Format Overflow in syslog(),"This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",['CVE-2002-0412'],attack target application software use syslog function insecurely application explicitely use format string parameter syslog user input place format string parameter lead format string injection attack adversary inject malicious format string command function lead buffer overflow report software vulnerability root cause misuse syslog function
CAPEC-670,Software Development Tools Maliciously Altered,"An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.",[],adversary ability alter tool development environment cause software develop maliciously modify tool tool include requirement management database tool software design tool configuration management tool compiler system build tool software performance testing load testing tool adversary carry malicious act software deploy include malware infection system support compromise
CAPEC-671,Requirements for ASIC Functionality Maliciously Altered,"An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.",[],adversary access functional requirement application specific integrated circuit asic chip design customize singular particular use maliciously alter requirement derive originate capability need chip manufacture process requirement drive chip design chip fully manufacture result asic meet user need contain malicious functionality exhibit anomalous behavior affect intended use asic
CAPEC-672,Malicious Code Implanted During Chip Programming,"During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip’s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",[],programming step chip manufacture adversary access necessary technical skill maliciously alter chip intended program logic produce effect intend adversary fully manufacture chip deploy operational use intended effect include ability adversary remotely control host system carry malicious act
CAPEC-673,Developer Signing Maliciously Altered Software,"Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems.
This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.",[],"software produce reputable developer clandestinely infect malicious code digitally sign unsuspecting developer software alter compromise software development build process prior sign receiver user software reason believe legitimate proceed deploy organizational system 
 attack differ capec-206 developer inadvertently sign malicious code believe legitimate unware malicious modification"
CAPEC-674,Design for FPGA Maliciously Altered,"An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation.",[],adversary alter functionality field programmable gate array fpga cause fpga configuration memory chip reload order introduce malicious function result fpga perform enable malicious function host system prior memory chip reload adversary alter program fpga add function impact system operation
CAPEC-675,Retrieve Data from Decommissioned Devices,"An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization’s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.",[],adversary obtain decommission recycle discard system device include organization intellectual property employee datum type control information system device reach end lifecycle subject recycle disposal expose adversarial attempt retrieve information internal memory chip storage device system
CAPEC-676,NoSQL Injection,"An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code.",[],adversary target software construct nosql statement base user input parameter vulnerable operator replacement order achieve variety technical impact escalate privilege bypass authentication and/or execute code
CAPEC-677,Server Functionality Compromise,"Malware is inserted in a server motherboard (e.g., in the flash memory) in order to alter server functionality from that intended. The development environment or hardware/software support activity environment is susceptible to an adversary inserting malicious software into hardware components during development or update.",[],malware insert server motherboard e.g. flash memory order alter server functionality intend development environment hardware software support activity environment susceptible adversary insert malicious software hardware component development update
CAPEC-678,System Build Data Maliciously Altered,"During the system build process, the system is deliberately misconfigured by the alteration of the build data. Access to system configuration data files and build processes are susceptible to deliberate misconfiguration of the system.",[],system build process system deliberately misconfigure alteration build datum access system configuration datum file build process susceptible deliberate misconfiguration system
CAPEC-679,Exploitation of Improperly Configured or Implemented Memory Protections,An adversary takes advantage of missing or incorrectly configured access control within memory to read/write data or inject malicious code into said memory.,[],adversary take advantage miss incorrectly configure access control memory read write datum inject malicious code say memory
CAPEC-68,Subvert Code-signing Facilities,Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.,[],language use code signing facility vouch code identity tie code assign privilege environment subvert mechanism instrumental attacker escalate privilege means subvert way virtual machine enforce code signing classifie style attack
CAPEC-680,Exploitation of Improperly Controlled Registers,An adversary exploits missing or incorrectly configured access control within registers to read/write data that is not meant to be obtained or modified by a user.,[],adversary exploit missing incorrectly configure access control register read write datum mean obtain modify user
CAPEC-681,Exploitation of Improperly Controlled Hardware Security Identifiers,"An adversary takes advantage of missing or incorrectly configured security identifiers (e.g., tokens), which are used for access control within a System-on-Chip (SoC), to read/write data or execute a given action.",[],adversary take advantage miss incorrectly configure security identifier e.g. token access control system chip soc read write datum execute give action
CAPEC-69,Target Programs with Elevated Privileges,This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.,[],attack target program run elevated privilege adversary try leverage vulnerability run program arbitrary code execute elevated privilege
CAPEC-7,Blind SQL Injection,"Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",['CVE-2006-4705'],blind sql injection result insufficient mitigation sql injection suppress database error message consider good practice suppression sufficient prevent sql injection blind sql injection form sql injection overcome lack error message error message facilitate sql injection adversary construct input string probe target simple boolean sql expression adversary determine syntax structure injection successful base query execute apply iteratively adversary determine target vulnerable sql injection
CAPEC-70,Try Common or Default Usernames and Passwords,"An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. ""secret"" or ""password"") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",['CVE-2006-5288'],adversary try certain common default username password gain access system perform unauthorized action adversary try intelligent brute force password know vendor default credential dictionary common username password vendor product come preconfigured default know username password delete prior usage production environment common mistake forget remove default login credential problem user pick simple common password e.g. secret password easier attacker gain access system compare brute force attack dictionary attack dictionary
CAPEC-71,Using Unicode Encoding to Bypass Validation Logic,An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.,['CVE-2000-0884'],attacker provide unicode string system component unicode aware use circumvent filter cause classifying mechanism fail properly understand request allow attacker slip malicious datum past content filter and/or possibly cause application route request incorrectly
CAPEC-72,URL Encoding,This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.,"['CVE-2001-0784', 'CVE-2001-1335']",attack target encoding url adversary advantage multiple way encode url abuse interpretation url
CAPEC-73,User-Controlled Filename,"An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",[],attack type involve adversary insert malicious character xss redirection filename directly indirectly target software generate html text potentially executable content website rely user generate content dynamically build resource like file filename url link directly user supply datum attack pattern attacker upload code execute client browser and/or redirect client browser site attacker own xss attack payload variant pass exploit vulnerability
CAPEC-74,Manipulating State,"The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner.
State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits.
If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.",[],"adversary modify state information maintain target software cause state transition hardware successful target use tainted state execute unintended manner 
 state management important function software application user state maintain application include username payment information browsing history application specific content item shopping cart manipulate user state employ adversary elevate privilege conduct fraudulent transaction modify flow application derive certain benefit 
 hardware logic error finite state machine adversary use system undefined state cause denial service exposure secure datum"
CAPEC-75,Manipulating Writeable Configuration Files,"Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.",[],generally manually edit file preview system administrator ability attacker behalf modify file example cvs repository give unauthorized access directly application authorized user
CAPEC-76,Manipulating Web Input to File System Calls,"An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.",[],attacker manipulate input target software target software pass file system call os goal gain access modify area file system target software intend accessible
CAPEC-77,Manipulating User-Controlled Variables,"This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",['CVE-2000-0860'],attack target user control variable debug=1 php globals forth adversary override variable leverage user supply untrusted query variable directly application server datum sanitization extreme case adversary change variable control business logic application instance language like php number poorly set default configuration allow user override variable
CAPEC-78,Using Escaped Slashes in Alternate Encoding,"This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",[],attack target use backslash alternate encoding adversary provide backslash lead character cause parser believe character special call escape trick adversary try exploit alternate way encode character lead filter problem open avenue attack
CAPEC-79,Using Slashes in Alternate Encoding,"This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.",[],attack target encoding slash character adversary try exploit common filtering problem relate use slash character gain access resource target host directory drive system file system database typically use slash character indicate traversal directory container component murky historical reason pc result microsoft os choose use backslash unix world typically make use forward slash schizophrenic result ms base system require understand form slash give adversary opportunity discover abuse number common filtering problem goal pattern discover server software apply filter version
CAPEC-8,Buffer Overflow in an API Call,"This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",[],attack target library share code module vulnerable buffer overflow attack adversary knowledge know vulnerable library share code easily target software make use library client use code library vulnerable association broad effect security system usually affect software process
CAPEC-80,Using UTF-8 Encoding to Bypass Validation Logic,"This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the ""shortest possible"" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",['CVE-2000-0884'],attack specific variation leverage alternate encoding bypass validation logic attack leverage possibility encode potentially harmful input utf-8 submit application expect effective validate encoding standard make input filtering difficult utf-8 bit ucs unicode transformation format variable length character encoding unicode legal utf-8 character byte long early version utf-8 specification get entry wrong case permit overlong character utf-8 encoder suppose use short possible encoding naive decoder accept encoding long necessary accord rfc particularly subtle form attack carry parser perform security critical validity check utf-8 encode form input interpret certain illegal octet sequence character
CAPEC-81,Web Logs Tampering,"Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to ""Log Injection-Tampering-Forging"" except that in this case, the attack is targeting the logs of the web server and not the application.",[],web log tampering attack involve attacker inject delete tamper content web log typically purpose mask malicious behavior additionally write malicious datum log file target job filter report agent process log asynchronous attack pattern pattern attack similar log injection tampering forging case attack target log web server application
CAPEC-83,XPath Injection,"An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",[],attacker craft special user controllable input consist xpath expression inject xml database bypass authentication glean information normally able xpath injection enable attacker talk directly xml database bypass application completely xpath injection result failure application properly sanitize input dynamic xpath expression query xml database
CAPEC-84,XQuery Injection,"This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",[],attack utilize xquery probe attack server system similar manner sql injection allow attacker exploit sql call rdbms xquery injection use improperly validate datum pass xquery command traverse execute command xquery routine access xquery injection enumerate element victim environment inject command local host execute query remote file data source
CAPEC-85,AJAX Footprinting,"This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",[],attack utilize frequent client server roundtrip ajax conversation scan system ajax open new vulnerability se optimize attacker point view common step attacker footprint target environment understand attack work footprinting rely enumeration conversational pattern rapid multiple request response typical ajax application enable attacker look vulnerability know port network location knowledge gain ajax fingerprinting support attack xss
CAPEC-86,XSS Through HTTP Headers,"An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.",[],adversary exploit web application generate web content link html page base unvalidated improperly validate datum submit actor xss http header attack target http header hide user validate web application
CAPEC-87,Forceful Browsing,"An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",[],attacker employ forceful browsing direct url entry access portion website unreachable usually controller similar design pattern employ protect access portion web application forceful browsing enable attacker access information perform privileged operation reach section web application improperly protect
CAPEC-88,OS Command Injection,"In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",[],type attack adversary inject operate system command existing application function application use untrusted input build command string vulnerable adversary leverage os command injection application elevate privilege execute arbitrary command compromise underlying operate system
CAPEC-89,Pharming,"A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",[],pharming attack occur victim fool enter sensitive datum supposedly trust location online bank site trading platform attacker impersonate supposedly trust site victim direct site originally intend pharming require script injection click malicious link attack succeed
CAPEC-9,Buffer Overflow in Local Command-Line Utilities,This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.,[],attack target command line utility available number shell adversary leverage vulnerability find command line utility escalate privilege root
CAPEC-90,Reflection Attack in Authentication Protocol,"An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",[],adversary abuse authentication protocol susceptible reflection attack order defeat allow adversary illegitimate access target system possess requisite credential reflection attack great concern authentication protocol rely challenge handshake similar mechanism adversary impersonate legitimate user gain illegitimate access system successfully mount reflection attack authentication
CAPEC-92,Forced Integer Overflow,"This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",['CVE-2007-1544'],attack force integer variable range integer variable offset size memory allocation similarly attacker typically control value variable try range instance integer question incremente past maximum possible value wrap small negative number provide incorrect value lead unexpected behavior worst attacker execute arbitrary code
CAPEC-93,Log Injection-Tampering-Forging,"This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing them to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.",['CVE-2006-0201'],attack target log file target host attacker inject manipulate forge malicious log entry log file allow mislead log audit cover trace attack perform malicious action target host properly control log access result tainted datum result log file lead failure accountability non repudiation incident forensic capability
CAPEC-94,Adversary in the Middle (AiTM),"An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.",[],adversary target communication component typically client server order alter obtain datum transaction general approach entail adversary place themself communication channel component
CAPEC-95,WSDL Scanning,"This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",[],attack target wsdl interface available web service attacker scan wsdl interface reveal sensitive information invocation pattern underlie technology implementation associate vulnerability type probing carry perform attack e.g. parameter tampering malicious content injection command injection etc wsdl file provide detailed information service port binding available consumer instance attacker submit special character malicious content web service cause denial service condition illegal access database record addition attacker try guess private method information provide wsdl file
CAPEC-96,Block Access to Libraries,"An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.",[],application typically make call function library external application library operate system party library possible application handle situation properly access library block depend error handling application block access library leave system insecure state leverage attacker
CAPEC-97,Cryptanalysis,"Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",[],cryptanalysis process find weakness cryptographic algorithm weakness decipher ciphertext know secret key instance deduction weakness cryptographic algorithm apply make cryptanalysis successful attacker goal total break find secret key global deduction find functionally equivalent algorithm encryption decryption require knowledge secret key information deduction gain information plaintext ciphertext previously know distinguishing algorithm attacker ability distinguish output encryption ciphertext random permutation bit
CAPEC-98,Phishing,"Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or ""fishing"" for information.",[],phishing social engineering technique attacker masquerade legitimate entity victim business order prompt user reveal confidential information frequently authentication credential later attacker phishing essentially form information gathering fishing information
